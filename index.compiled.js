(function () {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw ((a.code = "MODULE_NOT_FOUND"), a);
        }
        var p = (n[i] = { exports: {} });
        e[i][0].call(
          p.exports,
          function (r) {
            var n = e[i][1][r];
            return o(n || r);
          },
          p,
          p.exports,
          r,
          e,
          n,
          t
        );
      }
      return n[i].exports;
    }
    for (
      var u = "function" == typeof require && require, i = 0;
      i < t.length;
      i++
    )
      o(t[i]);
    return o;
  }
  return r;
})()(
  {
    1: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.codeFrameColumns = codeFrameColumns;
            exports.default = _default;

            var _highlight = require("@babel/highlight");

            let deprecationWarningShown = false;

            function getDefs(chalk) {
              return {
                gutter: chalk.grey,
                marker: chalk.red.bold,
                message: chalk.red.bold,
              };
            }

            const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

            function getMarkerLines(loc, source, opts) {
              const startLoc = Object.assign(
                {
                  column: 0,
                  line: -1,
                },
                loc.start
              );
              const endLoc = Object.assign({}, startLoc, loc.end);
              const { linesAbove = 2, linesBelow = 3 } = opts || {};
              const startLine = startLoc.line;
              const startColumn = startLoc.column;
              const endLine = endLoc.line;
              const endColumn = endLoc.column;
              let start = Math.max(startLine - (linesAbove + 1), 0);
              let end = Math.min(source.length, endLine + linesBelow);

              if (startLine === -1) {
                start = 0;
              }

              if (endLine === -1) {
                end = source.length;
              }

              const lineDiff = endLine - startLine;
              const markerLines = {};

              if (lineDiff) {
                for (let i = 0; i <= lineDiff; i++) {
                  const lineNumber = i + startLine;

                  if (!startColumn) {
                    markerLines[lineNumber] = true;
                  } else if (i === 0) {
                    const sourceLength = source[lineNumber - 1].length;
                    markerLines[lineNumber] = [
                      startColumn,
                      sourceLength - startColumn + 1,
                    ];
                  } else if (i === lineDiff) {
                    markerLines[lineNumber] = [0, endColumn];
                  } else {
                    const sourceLength = source[lineNumber - i].length;
                    markerLines[lineNumber] = [0, sourceLength];
                  }
                }
              } else {
                if (startColumn === endColumn) {
                  if (startColumn) {
                    markerLines[startLine] = [startColumn, 0];
                  } else {
                    markerLines[startLine] = true;
                  }
                } else {
                  markerLines[startLine] = [
                    startColumn,
                    endColumn - startColumn,
                  ];
                }
              }

              return {
                start,
                end,
                markerLines,
              };
            }

            function codeFrameColumns(rawLines, loc, opts = {}) {
              const highlighted =
                (opts.highlightCode || opts.forceColor) &&
                (0, _highlight.shouldHighlight)(opts);
              const chalk = (0, _highlight.getChalk)(opts);
              const defs = getDefs(chalk);

              const maybeHighlight = (chalkFn, string) => {
                return highlighted ? chalkFn(string) : string;
              };

              const lines = rawLines.split(NEWLINE);
              const { start, end, markerLines } = getMarkerLines(
                loc,
                lines,
                opts
              );
              const hasColumns =
                loc.start && typeof loc.start.column === "number";
              const numberMaxWidth = String(end).length;
              const highlightedLines = highlighted
                ? (0, _highlight.default)(rawLines, opts)
                : rawLines;
              let frame = highlightedLines
                .split(NEWLINE)
                .slice(start, end)
                .map((line, index) => {
                  const number = start + 1 + index;
                  const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
                  const gutter = ` ${paddedNumber} |`;
                  const hasMarker = markerLines[number];
                  const lastMarkerLine = !markerLines[number + 1];

                  if (hasMarker) {
                    let markerLine = "";

                    if (Array.isArray(hasMarker)) {
                      const markerSpacing = line
                        .slice(0, Math.max(hasMarker[0] - 1, 0))
                        .replace(/[^\t]/g, " ");
                      const numberOfMarkers = hasMarker[1] || 1;
                      markerLine = [
                        "\n ",
                        maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                        " ",
                        markerSpacing,
                        maybeHighlight(defs.marker, "^").repeat(
                          numberOfMarkers
                        ),
                      ].join("");

                      if (lastMarkerLine && opts.message) {
                        markerLine +=
                          " " + maybeHighlight(defs.message, opts.message);
                      }
                    }

                    return [
                      maybeHighlight(defs.marker, ">"),
                      maybeHighlight(defs.gutter, gutter),
                      line.length > 0 ? ` ${line}` : "",
                      markerLine,
                    ].join("");
                  } else {
                    return ` ${maybeHighlight(defs.gutter, gutter)}${
                      line.length > 0 ? ` ${line}` : ""
                    }`;
                  }
                })
                .join("\n");

              if (opts.message && !hasColumns) {
                frame = `${" ".repeat(numberMaxWidth + 1)}${
                  opts.message
                }\n${frame}`;
              }

              if (highlighted) {
                return chalk.reset(frame);
              } else {
                return frame;
              }
            }

            function _default(rawLines, lineNumber, colNumber, opts = {}) {
              if (!deprecationWarningShown) {
                deprecationWarningShown = true;
                const message =
                  "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

                if (process.emitWarning) {
                  process.emitWarning(message, "DeprecationWarning");
                } else {
                  const deprecationError = new Error(message);
                  deprecationError.name = "DeprecationWarning";
                  console.warn(new Error(message));
                }
              }

              colNumber = Math.max(colNumber, 0);
              const location = {
                start: {
                  column: colNumber,
                  line: lineNumber,
                },
              };
              return codeFrameColumns(rawLines, location, opts);
            }
          }).call(this);
        }).call(this, require("_process"));
      },
      { "@babel/highlight": 84, _process: 425 },
    ],
    2: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.makeWeakCache = makeWeakCache;
        exports.makeWeakCacheSync = makeWeakCacheSync;
        exports.makeStrongCache = makeStrongCache;
        exports.makeStrongCacheSync = makeStrongCacheSync;
        exports.assertSimpleType = assertSimpleType;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _async = require("../gensync-utils/async");

        var _util = require("./util");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const synchronize = (gen) => {
          return (0, _gensync().default)(gen).sync;
        };

        function* genTrue(data) {
          return true;
        }

        function makeWeakCache(handler) {
          return makeCachedFunction(WeakMap, handler);
        }

        function makeWeakCacheSync(handler) {
          return synchronize(makeWeakCache(handler));
        }

        function makeStrongCache(handler) {
          return makeCachedFunction(Map, handler);
        }

        function makeStrongCacheSync(handler) {
          return synchronize(makeStrongCache(handler));
        }

        function makeCachedFunction(CallCache, handler) {
          const callCacheSync = new CallCache();
          const callCacheAsync = new CallCache();
          const futureCache = new CallCache();
          return function* cachedFunction(arg, data) {
            const asyncContext = yield* (0, _async.isAsync)();
            const callCache = asyncContext ? callCacheAsync : callCacheSync;
            const cached = yield* getCachedValueOrWait(
              asyncContext,
              callCache,
              futureCache,
              arg,
              data
            );
            if (cached.valid) return cached.value;
            const cache = new CacheConfigurator(data);
            const handlerResult = handler(arg, cache);
            let finishLock;
            let value;

            if ((0, _util.isIterableIterator)(handlerResult)) {
              const gen = handlerResult;
              value = yield* (0, _async.onFirstPause)(gen, () => {
                finishLock = setupAsyncLocks(cache, futureCache, arg);
              });
            } else {
              value = handlerResult;
            }

            updateFunctionCache(callCache, cache, arg, value);

            if (finishLock) {
              futureCache.delete(arg);
              finishLock.release(value);
            }

            return value;
          };
        }

        function* getCachedValue(cache, arg, data) {
          const cachedValue = cache.get(arg);

          if (cachedValue) {
            for (const { value, valid } of cachedValue) {
              if (yield* valid(data))
                return {
                  valid: true,
                  value,
                };
            }
          }

          return {
            valid: false,
            value: null,
          };
        }

        function* getCachedValueOrWait(
          asyncContext,
          callCache,
          futureCache,
          arg,
          data
        ) {
          const cached = yield* getCachedValue(callCache, arg, data);

          if (cached.valid) {
            return cached;
          }

          if (asyncContext) {
            const cached = yield* getCachedValue(futureCache, arg, data);

            if (cached.valid) {
              const value = yield* (0, _async.waitFor)(cached.value.promise);
              return {
                valid: true,
                value,
              };
            }
          }

          return {
            valid: false,
            value: null,
          };
        }

        function setupAsyncLocks(config, futureCache, arg) {
          const finishLock = new Lock();
          updateFunctionCache(futureCache, config, arg, finishLock);
          return finishLock;
        }

        function updateFunctionCache(cache, config, arg, value) {
          if (!config.configured()) config.forever();
          let cachedValue = cache.get(arg);
          config.deactivate();

          switch (config.mode()) {
            case "forever":
              cachedValue = [
                {
                  value,
                  valid: genTrue,
                },
              ];
              cache.set(arg, cachedValue);
              break;

            case "invalidate":
              cachedValue = [
                {
                  value,
                  valid: config.validator(),
                },
              ];
              cache.set(arg, cachedValue);
              break;

            case "valid":
              if (cachedValue) {
                cachedValue.push({
                  value,
                  valid: config.validator(),
                });
              } else {
                cachedValue = [
                  {
                    value,
                    valid: config.validator(),
                  },
                ];
                cache.set(arg, cachedValue);
              }
          }
        }

        class CacheConfigurator {
          constructor(data) {
            this._active = true;
            this._never = false;
            this._forever = false;
            this._invalidate = false;
            this._configured = false;
            this._pairs = [];
            this._data = void 0;
            this._data = data;
          }

          simple() {
            return makeSimpleConfigurator(this);
          }

          mode() {
            if (this._never) return "never";
            if (this._forever) return "forever";
            if (this._invalidate) return "invalidate";
            return "valid";
          }

          forever() {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._never) {
              throw new Error(
                "Caching has already been configured with .never()"
              );
            }

            this._forever = true;
            this._configured = true;
          }

          never() {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._forever) {
              throw new Error(
                "Caching has already been configured with .forever()"
              );
            }

            this._never = true;
            this._configured = true;
          }

          using(handler) {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._never || this._forever) {
              throw new Error(
                "Caching has already been configured with .never or .forever()"
              );
            }

            this._configured = true;
            const key = handler(this._data);
            const fn = (0, _async.maybeAsync)(
              handler,
              `You appear to be using an async cache handler, but Babel has been called synchronously`
            );

            if ((0, _async.isThenable)(key)) {
              return key.then((key) => {
                this._pairs.push([key, fn]);

                return key;
              });
            }

            this._pairs.push([key, fn]);

            return key;
          }

          invalidate(handler) {
            this._invalidate = true;
            return this.using(handler);
          }

          validator() {
            const pairs = this._pairs;
            return function* (data) {
              for (const [key, fn] of pairs) {
                if (key !== (yield* fn(data))) return false;
              }

              return true;
            };
          }

          deactivate() {
            this._active = false;
          }

          configured() {
            return this._configured;
          }
        }

        function makeSimpleConfigurator(cache) {
          function cacheFn(val) {
            if (typeof val === "boolean") {
              if (val) cache.forever();
              else cache.never();
              return;
            }

            return cache.using(() => assertSimpleType(val()));
          }

          cacheFn.forever = () => cache.forever();

          cacheFn.never = () => cache.never();

          cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb()));

          cacheFn.invalidate = (cb) =>
            cache.invalidate(() => assertSimpleType(cb()));

          return cacheFn;
        }

        function assertSimpleType(value) {
          if ((0, _async.isThenable)(value)) {
            throw new Error(
              `You appear to be using an async cache handler, ` +
                `which your current version of Babel does not support. ` +
                `We may add support for this in the future, ` +
                `but if you're on the most recent version of @babel/core and still ` +
                `seeing this error, then you'll need to synchronously handle your caching logic.`
            );
          }

          if (
            value != null &&
            typeof value !== "string" &&
            typeof value !== "boolean" &&
            typeof value !== "number"
          ) {
            throw new Error(
              "Cache keys must be either string, boolean, number, null, or undefined."
            );
          }

          return value;
        }

        class Lock {
          constructor() {
            this.released = false;
            this.promise = void 0;
            this._resolve = void 0;
            this.promise = new Promise((resolve) => {
              this._resolve = resolve;
            });
          }

          release(value) {
            this.released = true;

            this._resolve(value);
          }
        }
      },
      { "../gensync-utils/async": 21, "./util": 16, gensync: 248 },
    ],
    3: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.buildPresetChain = buildPresetChain;
        exports.buildRootChain = buildRootChain;
        exports.buildPresetChainWalker = void 0;

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        function _debug() {
          const data = _interopRequireDefault(require("debug"));

          _debug = function () {
            return data;
          };

          return data;
        }

        var _options = require("./validation/options");

        var _patternToRegex = _interopRequireDefault(
          require("./pattern-to-regex")
        );

        var _printer = require("./printer");

        var _files = require("./files");

        var _caching = require("./caching");

        var _configDescriptors = require("./config-descriptors");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const debug = (0, _debug().default)("babel:config:config-chain");

        function* buildPresetChain(arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          if (!chain) return null;
          return {
            plugins: dedupDescriptors(chain.plugins),
            presets: dedupDescriptors(chain.presets),
            options: chain.options.map((o) => normalizeOptions(o)),
            files: new Set(),
          };
        }

        const buildPresetChainWalker = makeChainWalker({
          root: (preset) => loadPresetDescriptors(preset),
          env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
          overrides: (preset, index) =>
            loadPresetOverridesDescriptors(preset)(index),
          overridesEnv: (preset, index, envName) =>
            loadPresetOverridesEnvDescriptors(preset)(index)(envName),
          createLogger: () => () => {},
        });
        exports.buildPresetChainWalker = buildPresetChainWalker;
        const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)(
          (preset) =>
            buildRootDescriptors(
              preset,
              preset.alias,
              _configDescriptors.createUncachedDescriptors
            )
        );
        const loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)(
          (preset) =>
            (0, _caching.makeStrongCacheSync)((envName) =>
              buildEnvDescriptors(
                preset,
                preset.alias,
                _configDescriptors.createUncachedDescriptors,
                envName
              )
            )
        );
        const loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)(
          (preset) =>
            (0, _caching.makeStrongCacheSync)((index) =>
              buildOverrideDescriptors(
                preset,
                preset.alias,
                _configDescriptors.createUncachedDescriptors,
                index
              )
            )
        );
        const loadPresetOverridesEnvDescriptors = (0,
        _caching.makeWeakCacheSync)((preset) =>
          (0, _caching.makeStrongCacheSync)((index) =>
            (0, _caching.makeStrongCacheSync)((envName) =>
              buildOverrideEnvDescriptors(
                preset,
                preset.alias,
                _configDescriptors.createUncachedDescriptors,
                index,
                envName
              )
            )
          )
        );

        function* buildRootChain(opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter();
          const programmaticChain = yield* loadProgrammaticChain(
            {
              options: opts,
              dirname: context.cwd,
            },
            context,
            undefined,
            programmaticLogger
          );
          if (!programmaticChain) return null;
          const programmaticReport = programmaticLogger.output();
          let configFile;

          if (typeof opts.configFile === "string") {
            configFile = yield* (0, _files.loadConfig)(
              opts.configFile,
              context.cwd,
              context.envName,
              context.caller
            );
          } else if (opts.configFile !== false) {
            configFile = yield* (0, _files.findRootConfig)(
              context.root,
              context.envName,
              context.caller
            );
          }

          let { babelrc, babelrcRoots } = opts;
          let babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain();
          const configFileLogger = new _printer.ConfigPrinter();

          if (configFile) {
            const validatedFile = validateConfigFile(configFile);
            const result = yield* loadFileChain(
              validatedFile,
              context,
              undefined,
              configFileLogger
            );
            if (!result) return null;
            configReport = configFileLogger.output();

            if (babelrc === undefined) {
              babelrc = validatedFile.options.babelrc;
            }

            if (babelrcRoots === undefined) {
              babelrcRootsDirectory = validatedFile.dirname;
              babelrcRoots = validatedFile.options.babelrcRoots;
            }

            mergeChain(configFileChain, result);
          }

          const pkgData =
            typeof context.filename === "string"
              ? yield* (0, _files.findPackageData)(context.filename)
              : null;
          let ignoreFile, babelrcFile;
          let isIgnored = false;
          const fileChain = emptyChain();

          if (
            (babelrc === true || babelrc === undefined) &&
            pkgData &&
            babelrcLoadEnabled(
              context,
              pkgData,
              babelrcRoots,
              babelrcRootsDirectory
            )
          ) {
            ({ ignore: ignoreFile, config: babelrcFile } = yield* (0,
            _files.findRelativeConfig)(
              pkgData,
              context.envName,
              context.caller
            ));

            if (ignoreFile) {
              fileChain.files.add(ignoreFile.filepath);
            }

            if (
              ignoreFile &&
              shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)
            ) {
              isIgnored = true;
            }

            if (babelrcFile && !isIgnored) {
              const validatedFile = validateBabelrcFile(babelrcFile);
              const babelrcLogger = new _printer.ConfigPrinter();
              const result = yield* loadFileChain(
                validatedFile,
                context,
                undefined,
                babelrcLogger
              );

              if (!result) {
                isIgnored = true;
              } else {
                babelRcReport = babelrcLogger.output();
                mergeChain(fileChain, result);
              }
            }

            if (babelrcFile && isIgnored) {
              fileChain.files.add(babelrcFile.filepath);
            }
          }

          if (context.showConfig) {
            console.log(
              `Babel configs on "${context.filename}" (ascending priority):\n` +
                [configReport, babelRcReport, programmaticReport]
                  .filter((x) => !!x)
                  .join("\n\n")
            );
            return null;
          }

          const chain = mergeChain(
            mergeChain(mergeChain(emptyChain(), configFileChain), fileChain),
            programmaticChain
          );
          return {
            plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
            presets: isIgnored ? [] : dedupDescriptors(chain.presets),
            options: isIgnored
              ? []
              : chain.options.map((o) => normalizeOptions(o)),
            fileHandling: isIgnored ? "ignored" : "transpile",
            ignore: ignoreFile || undefined,
            babelrc: babelrcFile || undefined,
            config: configFile || undefined,
            files: chain.files,
          };
        }

        function babelrcLoadEnabled(
          context,
          pkgData,
          babelrcRoots,
          babelrcRootsDirectory
        ) {
          if (typeof babelrcRoots === "boolean") return babelrcRoots;
          const absoluteRoot = context.root;

          if (babelrcRoots === undefined) {
            return pkgData.directories.indexOf(absoluteRoot) !== -1;
          }

          let babelrcPatterns = babelrcRoots;
          if (!Array.isArray(babelrcPatterns))
            babelrcPatterns = [babelrcPatterns];
          babelrcPatterns = babelrcPatterns.map((pat) => {
            return typeof pat === "string"
              ? _path().default.resolve(babelrcRootsDirectory, pat)
              : pat;
          });

          if (
            babelrcPatterns.length === 1 &&
            babelrcPatterns[0] === absoluteRoot
          ) {
            return pkgData.directories.indexOf(absoluteRoot) !== -1;
          }

          return babelrcPatterns.some((pat) => {
            if (typeof pat === "string") {
              pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
            }

            return pkgData.directories.some((directory) => {
              return matchPattern(
                pat,
                babelrcRootsDirectory,
                directory,
                context
              );
            });
          });
        }

        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({
          filepath: file.filepath,
          dirname: file.dirname,
          options: (0, _options.validate)("configfile", file.options),
        }));
        const validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({
          filepath: file.filepath,
          dirname: file.dirname,
          options: (0, _options.validate)("babelrcfile", file.options),
        }));
        const validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({
          filepath: file.filepath,
          dirname: file.dirname,
          options: (0, _options.validate)("extendsfile", file.options),
        }));
        const loadProgrammaticChain = makeChainWalker({
          root: (input) =>
            buildRootDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors
            ),
          env: (input, envName) =>
            buildEnvDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              envName
            ),
          overrides: (input, index) =>
            buildOverrideDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              index
            ),
          overridesEnv: (input, index, envName) =>
            buildOverrideEnvDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              index,
              envName
            ),
          createLogger: (input, context, baseLogger) =>
            buildProgrammaticLogger(input, context, baseLogger),
        });
        const loadFileChainWalker = makeChainWalker({
          root: (file) => loadFileDescriptors(file),
          env: (file, envName) => loadFileEnvDescriptors(file)(envName),
          overrides: (file, index) => loadFileOverridesDescriptors(file)(index),
          overridesEnv: (file, index, envName) =>
            loadFileOverridesEnvDescriptors(file)(index)(envName),
          createLogger: (file, context, baseLogger) =>
            buildFileLogger(file.filepath, context, baseLogger),
        });

        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(
            input,
            context,
            files,
            baseLogger
          );

          if (chain) {
            chain.files.add(input.filepath);
          }

          return chain;
        }

        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) =>
          buildRootDescriptors(
            file,
            file.filepath,
            _configDescriptors.createUncachedDescriptors
          )
        );
        const loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) =>
          (0, _caching.makeStrongCacheSync)((envName) =>
            buildEnvDescriptors(
              file,
              file.filepath,
              _configDescriptors.createUncachedDescriptors,
              envName
            )
          )
        );
        const loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)(
          (file) =>
            (0, _caching.makeStrongCacheSync)((index) =>
              buildOverrideDescriptors(
                file,
                file.filepath,
                _configDescriptors.createUncachedDescriptors,
                index
              )
            )
        );
        const loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)(
          (file) =>
            (0, _caching.makeStrongCacheSync)((index) =>
              (0, _caching.makeStrongCacheSync)((envName) =>
                buildOverrideEnvDescriptors(
                  file,
                  file.filepath,
                  _configDescriptors.createUncachedDescriptors,
                  index,
                  envName
                )
              )
            )
        );

        function buildFileLogger(filepath, context, baseLogger) {
          if (!baseLogger) {
            return () => {};
          }

          return baseLogger.configure(
            context.showConfig,
            _printer.ChainFormatter.Config,
            {
              filepath,
            }
          );
        }

        function buildRootDescriptors(
          { dirname, options },
          alias,
          descriptors
        ) {
          return descriptors(dirname, options, alias);
        }

        function buildProgrammaticLogger(_, context, baseLogger) {
          var _context$caller;

          if (!baseLogger) {
            return () => {};
          }

          return baseLogger.configure(
            context.showConfig,
            _printer.ChainFormatter.Programmatic,
            {
              callerName:
                (_context$caller = context.caller) == null
                  ? void 0
                  : _context$caller.name,
            }
          );
        }

        function buildEnvDescriptors(
          { dirname, options },
          alias,
          descriptors,
          envName
        ) {
          const opts = options.env && options.env[envName];
          return opts
            ? descriptors(dirname, opts, `${alias}.env["${envName}"]`)
            : null;
        }

        function buildOverrideDescriptors(
          { dirname, options },
          alias,
          descriptors,
          index
        ) {
          const opts = options.overrides && options.overrides[index];
          if (!opts) throw new Error("Assertion failure - missing override");
          return descriptors(dirname, opts, `${alias}.overrides[${index}]`);
        }

        function buildOverrideEnvDescriptors(
          { dirname, options },
          alias,
          descriptors,
          index,
          envName
        ) {
          const override = options.overrides && options.overrides[index];
          if (!override)
            throw new Error("Assertion failure - missing override");
          const opts = override.env && override.env[envName];
          return opts
            ? descriptors(
                dirname,
                opts,
                `${alias}.overrides[${index}].env["${envName}"]`
              )
            : null;
        }

        function makeChainWalker({
          root,
          env,
          overrides,
          overridesEnv,
          createLogger,
        }) {
          return function* (input, context, files = new Set(), baseLogger) {
            const { dirname } = input;
            const flattenedConfigs = [];
            const rootOpts = root(input);

            if (configIsApplicable(rootOpts, dirname, context)) {
              flattenedConfigs.push({
                config: rootOpts,
                envName: undefined,
                index: undefined,
              });
              const envOpts = env(input, context.envName);

              if (envOpts && configIsApplicable(envOpts, dirname, context)) {
                flattenedConfigs.push({
                  config: envOpts,
                  envName: context.envName,
                  index: undefined,
                });
              }

              (rootOpts.options.overrides || []).forEach((_, index) => {
                const overrideOps = overrides(input, index);

                if (configIsApplicable(overrideOps, dirname, context)) {
                  flattenedConfigs.push({
                    config: overrideOps,
                    index,
                    envName: undefined,
                  });
                  const overrideEnvOpts = overridesEnv(
                    input,
                    index,
                    context.envName
                  );

                  if (
                    overrideEnvOpts &&
                    configIsApplicable(overrideEnvOpts, dirname, context)
                  ) {
                    flattenedConfigs.push({
                      config: overrideEnvOpts,
                      index,
                      envName: context.envName,
                    });
                  }
                }
              });
            }

            if (
              flattenedConfigs.some(
                ({
                  config: {
                    options: { ignore, only },
                  },
                }) => shouldIgnore(context, ignore, only, dirname)
              )
            ) {
              return null;
            }

            const chain = emptyChain();
            const logger = createLogger(input, context, baseLogger);

            for (const { config, index, envName } of flattenedConfigs) {
              if (
                !(yield* mergeExtendsChain(
                  chain,
                  config.options,
                  dirname,
                  context,
                  files,
                  baseLogger
                ))
              ) {
                return null;
              }

              logger(config, index, envName);
              mergeChainOpts(chain, config);
            }

            return chain;
          };
        }

        function* mergeExtendsChain(
          chain,
          opts,
          dirname,
          context,
          files,
          baseLogger
        ) {
          if (opts.extends === undefined) return true;
          const file = yield* (0, _files.loadConfig)(
            opts.extends,
            dirname,
            context.envName,
            context.caller
          );

          if (files.has(file)) {
            throw new Error(
              `Configuration cycle detected loading ${file.filepath}.\n` +
                `File already loaded following the config chain:\n` +
                Array.from(files, (file) => ` - ${file.filepath}`).join("\n")
            );
          }

          files.add(file);
          const fileChain = yield* loadFileChain(
            validateExtendFile(file),
            context,
            files,
            baseLogger
          );
          files.delete(file);
          if (!fileChain) return false;
          mergeChain(chain, fileChain);
          return true;
        }

        function mergeChain(target, source) {
          target.options.push(...source.options);
          target.plugins.push(...source.plugins);
          target.presets.push(...source.presets);

          for (const file of source.files) {
            target.files.add(file);
          }

          return target;
        }

        function mergeChainOpts(target, { options, plugins, presets }) {
          target.options.push(options);
          target.plugins.push(...plugins());
          target.presets.push(...presets());
          return target;
        }

        function emptyChain() {
          return {
            options: [],
            presets: [],
            plugins: [],
            files: new Set(),
          };
        }

        function normalizeOptions(opts) {
          const options = Object.assign({}, opts);
          delete options.extends;
          delete options.env;
          delete options.overrides;
          delete options.plugins;
          delete options.presets;
          delete options.passPerPreset;
          delete options.ignore;
          delete options.only;
          delete options.test;
          delete options.include;
          delete options.exclude;

          if (Object.prototype.hasOwnProperty.call(options, "sourceMap")) {
            options.sourceMaps = options.sourceMap;
            delete options.sourceMap;
          }

          return options;
        }

        function dedupDescriptors(items) {
          const map = new Map();
          const descriptors = [];

          for (const item of items) {
            if (typeof item.value === "function") {
              const fnKey = item.value;
              let nameMap = map.get(fnKey);

              if (!nameMap) {
                nameMap = new Map();
                map.set(fnKey, nameMap);
              }

              let desc = nameMap.get(item.name);

              if (!desc) {
                desc = {
                  value: item,
                };
                descriptors.push(desc);
                if (!item.ownPass) nameMap.set(item.name, desc);
              } else {
                desc.value = item;
              }
            } else {
              descriptors.push({
                value: item,
              });
            }
          }

          return descriptors.reduce((acc, desc) => {
            acc.push(desc.value);
            return acc;
          }, []);
        }

        function configIsApplicable({ options }, dirname, context) {
          return (
            (options.test === undefined ||
              configFieldIsApplicable(context, options.test, dirname)) &&
            (options.include === undefined ||
              configFieldIsApplicable(context, options.include, dirname)) &&
            (options.exclude === undefined ||
              !configFieldIsApplicable(context, options.exclude, dirname))
          );
        }

        function configFieldIsApplicable(context, test, dirname) {
          const patterns = Array.isArray(test) ? test : [test];
          return matchesPatterns(context, patterns, dirname);
        }

        function shouldIgnore(context, ignore, only, dirname) {
          if (ignore && matchesPatterns(context, ignore, dirname)) {
            var _context$filename;

            const message = `No config is applied to "${
              (_context$filename = context.filename) != null
                ? _context$filename
                : "(unknown)"
            }" because it matches one of \`ignore: ${JSON.stringify(
              ignore
            )}\` from "${dirname}"`;
            debug(message);

            if (context.showConfig) {
              console.log(message);
            }

            return true;
          }

          if (only && !matchesPatterns(context, only, dirname)) {
            var _context$filename2;

            const message = `No config is applied to "${
              (_context$filename2 = context.filename) != null
                ? _context$filename2
                : "(unknown)"
            }" because it fails to match one of \`only: ${JSON.stringify(
              only
            )}\` from "${dirname}"`;
            debug(message);

            if (context.showConfig) {
              console.log(message);
            }

            return true;
          }

          return false;
        }

        function matchesPatterns(context, patterns, dirname) {
          return patterns.some((pattern) =>
            matchPattern(pattern, dirname, context.filename, context)
          );
        }

        function matchPattern(pattern, dirname, pathToTest, context) {
          if (typeof pattern === "function") {
            return !!pattern(pathToTest, {
              dirname,
              envName: context.envName,
              caller: context.caller,
            });
          }

          if (typeof pathToTest !== "string") {
            throw new Error(
              `Configuration contains string/RegExp pattern, but no filename was passed to Babel`
            );
          }

          if (typeof pattern === "string") {
            pattern = (0, _patternToRegex.default)(pattern, dirname);
          }

          return pattern.test(pathToTest);
        }
      },
      {
        "./caching": 2,
        "./config-descriptors": 4,
        "./files": 5,
        "./pattern-to-regex": 13,
        "./printer": 15,
        "./validation/options": 18,
        debug: 38,
        path: 424,
      },
    ],
    4: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.createCachedDescriptors = createCachedDescriptors;
        exports.createUncachedDescriptors = createUncachedDescriptors;
        exports.createDescriptor = createDescriptor;

        var _files = require("./files");

        var _item = require("./item");

        var _caching = require("./caching");

        function isEqualDescriptor(a, b) {
          return (
            a.name === b.name &&
            a.value === b.value &&
            a.options === b.options &&
            a.dirname === b.dirname &&
            a.alias === b.alias &&
            a.ownPass === b.ownPass &&
            (a.file && a.file.request) === (b.file && b.file.request) &&
            (a.file && a.file.resolved) === (b.file && b.file.resolved)
          );
        }

        function createCachedDescriptors(dirname, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return {
            options,
            plugins: plugins
              ? () => createCachedPluginDescriptors(plugins, dirname)(alias)
              : () => [],
            presets: presets
              ? () =>
                  createCachedPresetDescriptors(presets, dirname)(alias)(
                    !!passPerPreset
                  )
              : () => [],
          };
        }

        function createUncachedDescriptors(dirname, options, alias) {
          let plugins;
          let presets;
          return {
            options,
            plugins: () => {
              if (!plugins) {
                plugins = createPluginDescriptors(
                  options.plugins || [],
                  dirname,
                  alias
                );
              }

              return plugins;
            },
            presets: () => {
              if (!presets) {
                presets = createPresetDescriptors(
                  options.presets || [],
                  dirname,
                  alias,
                  !!options.passPerPreset
                );
              }

              return presets;
            },
          };
        }

        const PRESET_DESCRIPTOR_CACHE = new WeakMap();
        const createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)(
          (items, cache) => {
            const dirname = cache.using((dir) => dir);
            return (0, _caching.makeStrongCacheSync)((alias) =>
              (0, _caching.makeStrongCacheSync)((passPerPreset) =>
                createPresetDescriptors(
                  items,
                  dirname,
                  alias,
                  passPerPreset
                ).map((desc) =>
                  loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc)
                )
              )
            );
          }
        );
        const PLUGIN_DESCRIPTOR_CACHE = new WeakMap();
        const createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)(
          (items, cache) => {
            const dirname = cache.using((dir) => dir);
            return (0, _caching.makeStrongCacheSync)((alias) =>
              createPluginDescriptors(items, dirname, alias).map((desc) =>
                loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc)
              )
            );
          }
        );
        const DEFAULT_OPTIONS = {};

        function loadCachedDescriptor(cache, desc) {
          const { value, options = DEFAULT_OPTIONS } = desc;
          if (options === false) return desc;
          let cacheByOptions = cache.get(value);

          if (!cacheByOptions) {
            cacheByOptions = new WeakMap();
            cache.set(value, cacheByOptions);
          }

          let possibilities = cacheByOptions.get(options);

          if (!possibilities) {
            possibilities = [];
            cacheByOptions.set(options, possibilities);
          }

          if (possibilities.indexOf(desc) === -1) {
            const matches = possibilities.filter((possibility) =>
              isEqualDescriptor(possibility, desc)
            );

            if (matches.length > 0) {
              return matches[0];
            }

            possibilities.push(desc);
          }

          return desc;
        }

        function createPresetDescriptors(items, dirname, alias, passPerPreset) {
          return createDescriptors(
            "preset",
            items,
            dirname,
            alias,
            passPerPreset
          );
        }

        function createPluginDescriptors(items, dirname, alias) {
          return createDescriptors("plugin", items, dirname, alias);
        }

        function createDescriptors(type, items, dirname, alias, ownPass) {
          const descriptors = items.map((item, index) =>
            createDescriptor(item, dirname, {
              type,
              alias: `${alias}$${index}`,
              ownPass: !!ownPass,
            })
          );
          assertNoDuplicates(descriptors);
          return descriptors;
        }

        function createDescriptor(pair, dirname, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);

          if (desc) {
            return desc;
          }

          let name;
          let options;
          let value = pair;

          if (Array.isArray(value)) {
            if (value.length === 3) {
              [value, options, name] = value;
            } else {
              [value, options] = value;
            }
          }

          let file = undefined;
          let filepath = null;

          if (typeof value === "string") {
            if (typeof type !== "string") {
              throw new Error(
                "To resolve a string-based item, the type of item must be given"
              );
            }

            const resolver =
              type === "plugin" ? _files.loadPlugin : _files.loadPreset;
            const request = value;
            ({ filepath, value } = resolver(value, dirname));
            file = {
              request,
              resolved: filepath,
            };
          }

          if (!value) {
            throw new Error(`Unexpected falsy value: ${String(value)}`);
          }

          if (typeof value === "object" && value.__esModule) {
            if (value.default) {
              value = value.default;
            } else {
              throw new Error(
                "Must export a default export when using ES6 modules."
              );
            }
          }

          if (typeof value !== "object" && typeof value !== "function") {
            throw new Error(
              `Unsupported format: ${typeof value}. Expected an object or a function.`
            );
          }

          if (filepath !== null && typeof value === "object" && value) {
            throw new Error(
              `Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`
            );
          }

          return {
            name,
            alias: filepath || alias,
            value,
            options,
            dirname,
            ownPass,
            file,
          };
        }

        function assertNoDuplicates(items) {
          const map = new Map();

          for (const item of items) {
            if (typeof item.value !== "function") continue;
            let nameMap = map.get(item.value);

            if (!nameMap) {
              nameMap = new Set();
              map.set(item.value, nameMap);
            }

            if (nameMap.has(item.name)) {
              const conflicts = items.filter((i) => i.value === item.value);
              throw new Error(
                [
                  `Duplicate plugin/preset detected.`,
                  `If you'd like to use two separate instances of a plugin,`,
                  `they need separate names, e.g.`,
                  ``,
                  `  plugins: [`,
                  `    ['some-plugin', {}],`,
                  `    ['some-plugin', {}, 'some unique name'],`,
                  `  ]`,
                  ``,
                  `Duplicates detected are:`,
                  `${JSON.stringify(conflicts, null, 2)}`,
                ].join("\n")
              );
            }

            nameMap.add(item.name);
          }
        }
      },
      { "./caching": 2, "./files": 5, "./item": 11 },
    ],
    5: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.findConfigUpwards = findConfigUpwards;
        exports.findPackageData = findPackageData;
        exports.findRelativeConfig = findRelativeConfig;
        exports.findRootConfig = findRootConfig;
        exports.loadConfig = loadConfig;
        exports.resolveShowConfigPath = resolveShowConfigPath;
        exports.resolvePlugin = resolvePlugin;
        exports.resolvePreset = resolvePreset;
        exports.loadPlugin = loadPlugin;
        exports.loadPreset = loadPreset;
        exports.ROOT_CONFIG_FILENAMES = void 0;

        function* findConfigUpwards(rootDir) {
          return null;
        }

        function* findPackageData(filepath) {
          return {
            filepath,
            directories: [],
            pkg: null,
            isPackage: false,
          };
        }

        function* findRelativeConfig(pkgData, envName, caller) {
          return {
            pkg: null,
            config: null,
            ignore: null,
          };
        }

        function* findRootConfig(dirname, envName, caller) {
          return null;
        }

        function* loadConfig(name, dirname, envName, caller) {
          throw new Error(
            `Cannot load ${name} relative to ${dirname} in a browser`
          );
        }

        function* resolveShowConfigPath(dirname) {
          return null;
        }

        const ROOT_CONFIG_FILENAMES = [];
        exports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;

        function resolvePlugin(name, dirname) {
          return null;
        }

        function resolvePreset(name, dirname) {
          return null;
        }

        function loadPlugin(name, dirname) {
          throw new Error(
            `Cannot load plugin ${name} relative to ${dirname} in a browser`
          );
        }

        function loadPreset(name, dirname) {
          throw new Error(
            `Cannot load preset ${name} relative to ${dirname} in a browser`
          );
        }
      },
      {},
    ],
    6: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _async = require("../gensync-utils/async");

        var _util = require("./util");

        var context = _interopRequireWildcard(require("../index"));

        var _plugin = _interopRequireDefault(require("./plugin"));

        var _item = require("./item");

        var _configChain = require("./config-chain");

        function _traverse() {
          const data = _interopRequireDefault(require("@babel/traverse"));

          _traverse = function () {
            return data;
          };

          return data;
        }

        var _caching = require("./caching");

        var _options = require("./validation/options");

        var _plugins = require("./validation/plugins");

        var _configApi = _interopRequireDefault(
          require("./helpers/config-api")
        );

        var _partial = _interopRequireDefault(require("./partial"));

        function _getRequireWildcardCache() {
          if (typeof WeakMap !== "function") return null;
          var cache = new WeakMap();
          _getRequireWildcardCache = function () {
            return cache;
          };
          return cache;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== "object" && typeof obj !== "function")
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache();
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _default = (0, _gensync().default)(function* loadFullConfig(
          inputOpts
        ) {
          const result = yield* (0, _partial.default)(inputOpts);

          if (!result) {
            return null;
          }

          const { options, context, fileHandling } = result;

          if (fileHandling === "ignored") {
            return null;
          }

          const optionDefaults = {};
          const { plugins, presets } = options;

          if (!plugins || !presets) {
            throw new Error("Assertion failure - plugins and presets exist");
          }

          const toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);

            if (!desc) {
              throw new Error("Assertion failure - must be config item");
            }

            return desc;
          };

          const presetsDescriptors = presets.map(toDescriptor);
          const initialPluginsDescriptors = plugins.map(toDescriptor);
          const pluginDescriptorsByPass = [[]];
          const passes = [];
          const ignored = yield* enhanceError(
            context,
            function* recursePresetDescriptors(
              rawPresets,
              pluginDescriptorsPass
            ) {
              const presets = [];

              for (let i = 0; i < rawPresets.length; i++) {
                const descriptor = rawPresets[i];

                if (descriptor.options !== false) {
                  try {
                    if (descriptor.ownPass) {
                      presets.push({
                        preset: yield* loadPresetDescriptor(
                          descriptor,
                          context
                        ),
                        pass: [],
                      });
                    } else {
                      presets.unshift({
                        preset: yield* loadPresetDescriptor(
                          descriptor,
                          context
                        ),
                        pass: pluginDescriptorsPass,
                      });
                    }
                  } catch (e) {
                    if (e.code === "BABEL_UNKNOWN_OPTION") {
                      (0, _options.checkNoUnwrappedItemOptionPairs)(
                        rawPresets,
                        i,
                        "preset",
                        e
                      );
                    }

                    throw e;
                  }
                }
              }

              if (presets.length > 0) {
                pluginDescriptorsByPass.splice(
                  1,
                  0,
                  ...presets
                    .map((o) => o.pass)
                    .filter((p) => p !== pluginDescriptorsPass)
                );

                for (const { preset, pass } of presets) {
                  if (!preset) return true;
                  pass.push(...preset.plugins);
                  const ignored = yield* recursePresetDescriptors(
                    preset.presets,
                    pass
                  );
                  if (ignored) return true;
                  preset.options.forEach((opts) => {
                    (0, _util.mergeOptions)(optionDefaults, opts);
                  });
                }
              }
            }
          )(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored) return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          yield* enhanceError(context, function* loadPluginDescriptors() {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);

            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);

              for (let i = 0; i < descs.length; i++) {
                const descriptor = descs[i];

                if (descriptor.options !== false) {
                  try {
                    pass.push(yield* loadPluginDescriptor(descriptor, context));
                  } catch (e) {
                    if (e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                      (0, _options.checkNoUnwrappedItemOptionPairs)(
                        descs,
                        i,
                        "plugin",
                        e
                      );
                    }

                    throw e;
                  }
                }
              }
            }
          })();
          opts.plugins = passes[0];
          opts.presets = passes
            .slice(1)
            .filter((plugins) => plugins.length > 0)
            .map((plugins) => ({
              plugins,
            }));
          opts.passPerPreset = opts.presets.length > 0;
          return {
            options: opts,
            passes: passes,
          };
        });

        exports.default = _default;

        function enhanceError(context, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e) {
              if (!/^\[BABEL\]/.test(e.message)) {
                e.message = `[BABEL] ${context.filename || "unknown"}: ${
                  e.message
                }`;
              }

              throw e;
            }
          };
        }

        const loadDescriptor = (0, _caching.makeWeakCache)(function* (
          { value, options, dirname, alias },
          cache
        ) {
          if (options === false) throw new Error("Assertion failure");
          options = options || {};
          let item = value;

          if (typeof value === "function") {
            const api = Object.assign(
              {},
              context,
              (0, _configApi.default)(cache)
            );

            try {
              item = value(api, options, dirname);
            } catch (e) {
              if (alias) {
                e.message += ` (While processing: ${JSON.stringify(alias)})`;
              }

              throw e;
            }
          }

          if (!item || typeof item !== "object") {
            throw new Error("Plugin/Preset did not return an object.");
          }

          if (typeof item.then === "function") {
            yield* [];
            throw new Error(
              `You appear to be using an async plugin, ` +
                `which your current version of Babel does not support. ` +
                `If you're using a published plugin, ` +
                `you may need to upgrade your @babel/core version.`
            );
          }

          return {
            value: item,
            options,
            dirname,
            alias,
          };
        });

        function* loadPluginDescriptor(descriptor, context) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options) {
              throw new Error(
                "Passed options to an existing Plugin instance will not work."
              );
            }

            return descriptor.value;
          }

          return yield* instantiatePlugin(
            yield* loadDescriptor(descriptor, context),
            context
          );
        }

        const instantiatePlugin = (0, _caching.makeWeakCache)(function* (
          { value, options, dirname, alias },
          cache
        ) {
          const pluginObj = (0, _plugins.validatePluginObject)(value);
          const plugin = Object.assign({}, pluginObj);

          if (plugin.visitor) {
            plugin.visitor = _traverse().default.explode(
              Object.assign({}, plugin.visitor)
            );
          }

          if (plugin.inherits) {
            const inheritsDescriptor = {
              name: undefined,
              alias: `${alias}$inherits`,
              value: plugin.inherits,
              options,
              dirname,
            };
            const inherits = yield* (0, _async.forwardAsync)(
              loadPluginDescriptor,
              (run) => {
                return cache.invalidate((data) =>
                  run(inheritsDescriptor, data)
                );
              }
            );
            plugin.pre = chain(inherits.pre, plugin.pre);
            plugin.post = chain(inherits.post, plugin.post);
            plugin.manipulateOptions = chain(
              inherits.manipulateOptions,
              plugin.manipulateOptions
            );
            plugin.visitor = _traverse().default.visitors.merge([
              inherits.visitor || {},
              plugin.visitor || {},
            ]);
          }

          return new _plugin.default(plugin, options, alias);
        });

        const validateIfOptionNeedsFilename = (options, descriptor) => {
          if (options.test || options.include || options.exclude) {
            const formattedPresetName = descriptor.name
              ? `"${descriptor.name}"`
              : "/* your preset */";
            throw new Error(
              [
                `Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`,
                `\`\`\``,
                `babel.transform(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`,
                `\`\`\``,
                `See https://babeljs.io/docs/en/options#filename for more information.`,
              ].join("\n")
            );
          }
        };

        const validatePreset = (preset, context, descriptor) => {
          if (!context.filename) {
            const { options } = preset;
            validateIfOptionNeedsFilename(options, descriptor);

            if (options.overrides) {
              options.overrides.forEach((overrideOptions) =>
                validateIfOptionNeedsFilename(overrideOptions, descriptor)
              );
            }
          }
        };

        function* loadPresetDescriptor(descriptor, context) {
          const preset = instantiatePreset(
            yield* loadDescriptor(descriptor, context)
          );
          validatePreset(preset, context, descriptor);
          return yield* (0, _configChain.buildPresetChain)(preset, context);
        }

        const instantiatePreset = (0, _caching.makeWeakCacheSync)(
          ({ value, dirname, alias }) => {
            return {
              options: (0, _options.validate)("preset", value),
              alias,
              dirname,
            };
          }
        );

        function chain(a, b) {
          const fns = [a, b].filter(Boolean);
          if (fns.length <= 1) return fns[0];
          return function (...args) {
            for (const fn of fns) {
              fn.apply(this, args);
            }
          };
        }
      },
      {
        "../gensync-utils/async": 21,
        "../index": 22,
        "./caching": 2,
        "./config-chain": 3,
        "./helpers/config-api": 7,
        "./item": 11,
        "./partial": 12,
        "./plugin": 14,
        "./util": 16,
        "./validation/options": 18,
        "./validation/plugins": 19,
        "@babel/traverse": 99,
        gensync: 248,
      },
    ],
    7: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = makeAPI;

        function _semver() {
          const data = _interopRequireDefault(require("semver"));

          _semver = function () {
            return data;
          };

          return data;
        }

        var _ = require("../../");

        var _caching = require("../caching");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function makeAPI(cache) {
          const env = (value) =>
            cache.using((data) => {
              if (typeof value === "undefined") return data.envName;

              if (typeof value === "function") {
                return (0, _caching.assertSimpleType)(value(data.envName));
              }

              if (!Array.isArray(value)) value = [value];
              return value.some((entry) => {
                if (typeof entry !== "string") {
                  throw new Error("Unexpected non-string value");
                }

                return entry === data.envName;
              });
            });

          const caller = (cb) =>
            cache.using((data) =>
              (0, _caching.assertSimpleType)(cb(data.caller))
            );

          return {
            version: _.version,
            cache: cache.simple(),
            env,
            async: () => false,
            caller,
            assertVersion,
          };
        }

        function assertVersion(range) {
          if (typeof range === "number") {
            if (!Number.isInteger(range)) {
              throw new Error("Expected string or integer value.");
            }

            range = `^${range}.0.0-0`;
          }

          if (typeof range !== "string") {
            throw new Error("Expected string or integer value.");
          }

          if (_semver().default.satisfies(_.version, range)) return;
          const limit = Error.stackTraceLimit;

          if (typeof limit === "number" && limit < 25) {
            Error.stackTraceLimit = 25;
          }

          const err = new Error(
            `Requires Babel "${range}", but was loaded with "${_.version}". ` +
              `If you are sure you have a compatible version of @babel/core, ` +
              `it is likely that something in your build process is loading the ` +
              `wrong version. Inspect the stack trace of this error to look for ` +
              `the first entry that doesn't mention "@babel/core" or "babel-core" ` +
              `to see what is calling Babel.`
          );

          if (typeof limit === "number") {
            Error.stackTraceLimit = limit;
          }

          throw Object.assign(err, {
            code: "BABEL_VERSION_UNSUPPORTED",
            version: _.version,
            range,
          });
        }
      },
      { "../../": 22, "../caching": 2, semver: 428 },
    ],
    8: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.getEnv = getEnv;

            function getEnv(defaultValue = "development") {
              return (
                process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue
              );
            }
          }).call(this);
        }).call(this, require("_process"));
      },
      { _process: 425 },
    ],
    9: [
      function (require, module, exports) {
        "use strict";

        module.exports = require("lodash/escapeRegExp");
      },
      { "lodash/escapeRegExp": 399 },
    ],
    10: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "default", {
          enumerable: true,
          get: function () {
            return _full.default;
          },
        });
        exports.loadOptionsAsync =
          exports.loadOptionsSync =
          exports.loadOptions =
          exports.loadPartialConfigAsync =
          exports.loadPartialConfigSync =
          exports.loadPartialConfig =
            void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _full = _interopRequireDefault(require("./full"));

        var _partial = require("./partial");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const loadOptionsRunner = (0, _gensync().default)(function* (opts) {
          var _config$options;

          const config = yield* (0, _full.default)(opts);
          return (_config$options = config == null ? void 0 : config.options) !=
            null
            ? _config$options
            : null;
        });

        const maybeErrback = (runner) => (opts, callback) => {
          if (callback === undefined && typeof opts === "function") {
            callback = opts;
            opts = undefined;
          }

          return callback ? runner.errback(opts, callback) : runner.sync(opts);
        };

        const loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
        exports.loadPartialConfig = loadPartialConfig;
        const loadPartialConfigSync = _partial.loadPartialConfig.sync;
        exports.loadPartialConfigSync = loadPartialConfigSync;
        const loadPartialConfigAsync = _partial.loadPartialConfig.async;
        exports.loadPartialConfigAsync = loadPartialConfigAsync;
        const loadOptions = maybeErrback(loadOptionsRunner);
        exports.loadOptions = loadOptions;
        const loadOptionsSync = loadOptionsRunner.sync;
        exports.loadOptionsSync = loadOptionsSync;
        const loadOptionsAsync = loadOptionsRunner.async;
        exports.loadOptionsAsync = loadOptionsAsync;
      },
      { "./full": 6, "./partial": 12, gensync: 248 },
    ],
    11: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.createItemFromDescriptor = createItemFromDescriptor;
        exports.createConfigItem = createConfigItem;
        exports.getItemDescriptor = getItemDescriptor;

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        var _configDescriptors = require("./config-descriptors");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }

        function createConfigItem(value, { dirname = ".", type } = {}) {
          const descriptor = (0, _configDescriptors.createDescriptor)(
            value,
            _path().default.resolve(dirname),
            {
              type,
              alias: "programmatic item",
            }
          );
          return createItemFromDescriptor(descriptor);
        }

        function getItemDescriptor(item) {
          if (item == null ? void 0 : item[CONFIG_ITEM_BRAND]) {
            return item._descriptor;
          }

          return undefined;
        }

        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");

        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0;
            this[CONFIG_ITEM_BRAND] = true;
            this.value = void 0;
            this.options = void 0;
            this.dirname = void 0;
            this.name = void 0;
            this.file = void 0;
            this._descriptor = descriptor;
            Object.defineProperty(this, "_descriptor", {
              enumerable: false,
            });
            Object.defineProperty(this, CONFIG_ITEM_BRAND, {
              enumerable: false,
            });
            this.value = this._descriptor.value;
            this.options = this._descriptor.options;
            this.dirname = this._descriptor.dirname;
            this.name = this._descriptor.name;
            this.file = this._descriptor.file
              ? {
                  request: this._descriptor.file.request,
                  resolved: this._descriptor.file.resolved,
                }
              : undefined;
            Object.freeze(this);
          }
        }

        Object.freeze(ConfigItem.prototype);
      },
      { "./config-descriptors": 4, path: 424 },
    ],
    12: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = loadPrivatePartialConfig;
        exports.loadPartialConfig = void 0;

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _plugin = _interopRequireDefault(require("./plugin"));

        var _util = require("./util");

        var _item = require("./item");

        var _configChain = require("./config-chain");

        var _environment = require("./helpers/environment");

        var _options = require("./validation/options");

        var _files = require("./files");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }

        function* resolveRootMode(rootDir, rootMode) {
          switch (rootMode) {
            case "root":
              return rootDir;

            case "upward-optional": {
              const upwardRootDir = yield* (0, _files.findConfigUpwards)(
                rootDir
              );
              return upwardRootDir === null ? rootDir : upwardRootDir;
            }

            case "upward": {
              const upwardRootDir = yield* (0, _files.findConfigUpwards)(
                rootDir
              );
              if (upwardRootDir !== null) return upwardRootDir;
              throw Object.assign(
                new Error(
                  `Babel was run with rootMode:"upward" but a root could not ` +
                    `be found when searching upward from "${rootDir}".\n` +
                    `One of the following config files must be in the directory tree: ` +
                    `"${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`
                ),
                {
                  code: "BABEL_ROOT_NOT_FOUND",
                  dirname: rootDir,
                }
              );
            }

            default:
              throw new Error(`Assertion failure - unknown rootMode value.`);
          }
        }

        function* loadPrivatePartialConfig(inputOpts) {
          if (
            inputOpts != null &&
            (typeof inputOpts !== "object" || Array.isArray(inputOpts))
          ) {
            throw new Error(
              "Babel options must be an object, null, or undefined"
            );
          }

          const args = inputOpts
            ? (0, _options.validate)("arguments", inputOpts)
            : {};
          const {
            envName = (0, _environment.getEnv)(),
            cwd = ".",
            root: rootDir = ".",
            rootMode = "root",
            caller,
            cloneInputAst = true,
          } = args;

          const absoluteCwd = _path().default.resolve(cwd);

          const absoluteRootDir = yield* resolveRootMode(
            _path().default.resolve(absoluteCwd, rootDir),
            rootMode
          );
          const filename =
            typeof args.filename === "string"
              ? _path().default.resolve(cwd, args.filename)
              : undefined;
          const showConfigPath = yield* (0, _files.resolveShowConfigPath)(
            absoluteCwd
          );
          const context = {
            filename,
            cwd: absoluteCwd,
            root: absoluteRootDir,
            envName,
            caller,
            showConfig: showConfigPath === filename,
          };
          const configChain = yield* (0, _configChain.buildRootChain)(
            args,
            context
          );
          if (!configChain) return null;
          const options = {};
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(options, opts);
          });
          options.cloneInputAst = cloneInputAst;
          options.babelrc = false;
          options.configFile = false;
          options.passPerPreset = false;
          options.envName = context.envName;
          options.cwd = context.cwd;
          options.root = context.root;
          options.filename =
            typeof context.filename === "string" ? context.filename : undefined;
          options.plugins = configChain.plugins.map((descriptor) =>
            (0, _item.createItemFromDescriptor)(descriptor)
          );
          options.presets = configChain.presets.map((descriptor) =>
            (0, _item.createItemFromDescriptor)(descriptor)
          );
          return {
            options,
            context,
            fileHandling: configChain.fileHandling,
            ignore: configChain.ignore,
            babelrc: configChain.babelrc,
            config: configChain.config,
            files: configChain.files,
          };
        }

        const loadPartialConfig = (0, _gensync().default)(function* (opts) {
          let showIgnoredFiles = false;

          if (
            typeof opts === "object" &&
            opts !== null &&
            !Array.isArray(opts)
          ) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts);
            opts = _objectWithoutPropertiesLoose(_opts, ["showIgnoredFiles"]);
            _opts;
          }

          const result = yield* loadPrivatePartialConfig(opts);
          if (!result) return null;
          const { options, babelrc, ignore, config, fileHandling, files } =
            result;

          if (fileHandling === "ignored" && !showIgnoredFiles) {
            return null;
          }

          (options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default) {
              throw new Error(
                "Passing cached plugin instances is not supported in " +
                  "babel.loadPartialConfig()"
              );
            }
          });
          return new PartialConfig(
            options,
            babelrc ? babelrc.filepath : undefined,
            ignore ? ignore.filepath : undefined,
            config ? config.filepath : undefined,
            fileHandling,
            files
          );
        });
        exports.loadPartialConfig = loadPartialConfig;

        class PartialConfig {
          constructor(options, babelrc, ignore, config, fileHandling, files) {
            this.options = void 0;
            this.babelrc = void 0;
            this.babelignore = void 0;
            this.config = void 0;
            this.fileHandling = void 0;
            this.files = void 0;
            this.options = options;
            this.babelignore = ignore;
            this.babelrc = babelrc;
            this.config = config;
            this.fileHandling = fileHandling;
            this.files = files;
            Object.freeze(this);
          }

          hasFilesystemConfig() {
            return this.babelrc !== undefined || this.config !== undefined;
          }
        }

        Object.freeze(PartialConfig.prototype);
      },
      {
        "./config-chain": 3,
        "./files": 5,
        "./helpers/environment": 8,
        "./item": 11,
        "./plugin": 14,
        "./util": 16,
        "./validation/options": 18,
        gensync: 248,
        path: 424,
      },
    ],
    13: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = pathToPattern;

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        var _escapeRegexp = _interopRequireDefault(
          require("./helpers/escape-regexp")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const sep = `\\${_path().default.sep}`;
        const endSep = `(?:${sep}|$)`;
        const substitution = `[^${sep}]+`;
        const starPat = `(?:${substitution}${sep})`;
        const starPatLast = `(?:${substitution}${endSep})`;
        const starStarPat = `${starPat}*?`;
        const starStarPatLast = `${starPat}*?${starPatLast}?`;

        function pathToPattern(pattern, dirname) {
          const parts = _path()
            .default.resolve(dirname, pattern)
            .split(_path().default.sep);

          return new RegExp(
            [
              "^",
              ...parts.map((part, i) => {
                const last = i === parts.length - 1;
                if (part === "**") return last ? starStarPatLast : starStarPat;
                if (part === "*") return last ? starPatLast : starPat;

                if (part.indexOf("*.") === 0) {
                  return (
                    substitution +
                    (0, _escapeRegexp.default)(part.slice(1)) +
                    (last ? endSep : sep)
                  );
                }

                return (0, _escapeRegexp.default)(part) + (last ? endSep : sep);
              }),
            ].join("")
          );
        }
      },
      { "./helpers/escape-regexp": 9, path: 424 },
    ],
    14: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        class Plugin {
          constructor(plugin, options, key) {
            this.key = void 0;
            this.manipulateOptions = void 0;
            this.post = void 0;
            this.pre = void 0;
            this.visitor = void 0;
            this.parserOverride = void 0;
            this.generatorOverride = void 0;
            this.options = void 0;
            this.key = plugin.name || key;
            this.manipulateOptions = plugin.manipulateOptions;
            this.post = plugin.post;
            this.pre = plugin.pre;
            this.visitor = plugin.visitor || {};
            this.parserOverride = plugin.parserOverride;
            this.generatorOverride = plugin.generatorOverride;
            this.options = options;
          }
        }

        exports.default = Plugin;
      },
      {},
    ],
    15: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ConfigPrinter = exports.ChainFormatter = void 0;
        const ChainFormatter = {
          Programmatic: 0,
          Config: 1,
        };
        exports.ChainFormatter = ChainFormatter;
        const Formatter = {
          title(type, callerName, filepath) {
            let title = "";

            if (type === ChainFormatter.Programmatic) {
              title = "programmatic options";

              if (callerName) {
                title += " from " + callerName;
              }
            } else {
              title = "config " + filepath;
            }

            return title;
          },

          loc(index, envName) {
            let loc = "";

            if (index != null) {
              loc += `.overrides[${index}]`;
            }

            if (envName != null) {
              loc += `.env["${envName}"]`;
            }

            return loc;
          },

          optionsAndDescriptors(opt) {
            const content = Object.assign({}, opt.options);
            delete content.overrides;
            delete content.env;
            const pluginDescriptors = [...opt.plugins()];

            if (pluginDescriptors.length) {
              content.plugins = pluginDescriptors.map((d) =>
                descriptorToConfig(d)
              );
            }

            const presetDescriptors = [...opt.presets()];

            if (presetDescriptors.length) {
              content.presets = [...presetDescriptors].map((d) =>
                descriptorToConfig(d)
              );
            }

            return JSON.stringify(content, undefined, 2);
          },
        };

        function descriptorToConfig(d) {
          var _d$file;

          let name = (_d$file = d.file) == null ? void 0 : _d$file.request;

          if (name == null) {
            if (typeof d.value === "object") {
              name = d.value;
            } else if (typeof d.value === "function") {
              name = `[Function: ${d.value.toString().substr(0, 50)} ... ]`;
            }
          }

          if (name == null) {
            name = "[Unknown]";
          }

          if (d.options === undefined) {
            return name;
          } else if (d.name == null) {
            return [name, d.options];
          } else {
            return [name, d.options, d.name];
          }
        }

        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }

          configure(enabled, type, { callerName, filepath }) {
            if (!enabled) return () => {};
            return (content, index, envName) => {
              this._stack.push({
                type,
                callerName,
                filepath,
                content,
                index,
                envName,
              });
            };
          }

          static format(config) {
            let title = Formatter.title(
              config.type,
              config.callerName,
              config.filepath
            );
            const loc = Formatter.loc(config.index, config.envName);
            if (loc) title += ` ${loc}`;
            const content = Formatter.optionsAndDescriptors(config.content);
            return `${title}\n${content}`;
          }

          output() {
            if (this._stack.length === 0) return "";
            return this._stack.map((s) => ConfigPrinter.format(s)).join("\n\n");
          }
        }

        exports.ConfigPrinter = ConfigPrinter;
      },
      {},
    ],
    16: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.mergeOptions = mergeOptions;
        exports.isIterableIterator = isIterableIterator;

        function mergeOptions(target, source) {
          for (const k of Object.keys(source)) {
            if (k === "parserOpts" && source.parserOpts) {
              const parserOpts = source.parserOpts;
              const targetObj = (target.parserOpts = target.parserOpts || {});
              mergeDefaultFields(targetObj, parserOpts);
            } else if (k === "generatorOpts" && source.generatorOpts) {
              const generatorOpts = source.generatorOpts;
              const targetObj = (target.generatorOpts =
                target.generatorOpts || {});
              mergeDefaultFields(targetObj, generatorOpts);
            } else {
              const val = source[k];
              if (val !== undefined) target[k] = val;
            }
          }
        }

        function mergeDefaultFields(target, source) {
          for (const k of Object.keys(source)) {
            const val = source[k];
            if (val !== undefined) target[k] = val;
          }
        }

        function isIterableIterator(value) {
          return (
            !!value &&
            typeof value.next === "function" &&
            typeof value[Symbol.iterator] === "function"
          );
        }
      },
      {},
    ],
    17: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.msg = msg;
        exports.access = access;
        exports.assertRootMode = assertRootMode;
        exports.assertSourceMaps = assertSourceMaps;
        exports.assertCompact = assertCompact;
        exports.assertSourceType = assertSourceType;
        exports.assertCallerMetadata = assertCallerMetadata;
        exports.assertInputSourceMap = assertInputSourceMap;
        exports.assertString = assertString;
        exports.assertFunction = assertFunction;
        exports.assertBoolean = assertBoolean;
        exports.assertObject = assertObject;
        exports.assertArray = assertArray;
        exports.assertIgnoreList = assertIgnoreList;
        exports.assertConfigApplicableTest = assertConfigApplicableTest;
        exports.assertConfigFileSearch = assertConfigFileSearch;
        exports.assertBabelrcSearch = assertBabelrcSearch;
        exports.assertPluginList = assertPluginList;

        function msg(loc) {
          switch (loc.type) {
            case "root":
              return ``;

            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;

            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;

            case "option":
              return `${msg(loc.parent)}.${loc.name}`;

            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;

            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }

        function access(loc, name) {
          return {
            type: "access",
            name,
            parent: loc,
          };
        }

        function assertRootMode(loc, value) {
          if (
            value !== undefined &&
            value !== "root" &&
            value !== "upward" &&
            value !== "upward-optional"
          ) {
            throw new Error(
              `${msg(
                loc
              )} must be a "root", "upward", "upward-optional" or undefined`
            );
          }

          return value;
        }

        function assertSourceMaps(loc, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            value !== "inline" &&
            value !== "both"
          ) {
            throw new Error(
              `${msg(loc)} must be a boolean, "inline", "both", or undefined`
            );
          }

          return value;
        }

        function assertCompact(loc, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            value !== "auto"
          ) {
            throw new Error(
              `${msg(loc)} must be a boolean, "auto", or undefined`
            );
          }

          return value;
        }

        function assertSourceType(loc, value) {
          if (
            value !== undefined &&
            value !== "module" &&
            value !== "script" &&
            value !== "unambiguous"
          ) {
            throw new Error(
              `${msg(
                loc
              )} must be "module", "script", "unambiguous", or undefined`
            );
          }

          return value;
        }

        function assertCallerMetadata(loc, value) {
          const obj = assertObject(loc, value);

          if (obj) {
            if (typeof obj["name"] !== "string") {
              throw new Error(
                `${msg(loc)} set but does not contain "name" property string`
              );
            }

            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop);
              const value = obj[prop];

              if (
                value != null &&
                typeof value !== "boolean" &&
                typeof value !== "string" &&
                typeof value !== "number"
              ) {
                throw new Error(
                  `${msg(
                    propLoc
                  )} must be null, undefined, a boolean, a string, or a number.`
                );
              }
            }
          }

          return value;
        }

        function assertInputSourceMap(loc, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            (typeof value !== "object" || !value)
          ) {
            throw new Error(
              `${msg(loc)} must be a boolean, object, or undefined`
            );
          }

          return value;
        }

        function assertString(loc, value) {
          if (value !== undefined && typeof value !== "string") {
            throw new Error(`${msg(loc)} must be a string, or undefined`);
          }

          return value;
        }

        function assertFunction(loc, value) {
          if (value !== undefined && typeof value !== "function") {
            throw new Error(`${msg(loc)} must be a function, or undefined`);
          }

          return value;
        }

        function assertBoolean(loc, value) {
          if (value !== undefined && typeof value !== "boolean") {
            throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          }

          return value;
        }

        function assertObject(loc, value) {
          if (
            value !== undefined &&
            (typeof value !== "object" || Array.isArray(value) || !value)
          ) {
            throw new Error(`${msg(loc)} must be an object, or undefined`);
          }

          return value;
        }

        function assertArray(loc, value) {
          if (value != null && !Array.isArray(value)) {
            throw new Error(`${msg(loc)} must be an array, or undefined`);
          }

          return value;
        }

        function assertIgnoreList(loc, value) {
          const arr = assertArray(loc, value);

          if (arr) {
            arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));
          }

          return arr;
        }

        function assertIgnoreItem(loc, value) {
          if (
            typeof value !== "string" &&
            typeof value !== "function" &&
            !(value instanceof RegExp)
          ) {
            throw new Error(
              `${msg(
                loc
              )} must be an array of string/Function/RegExp values, or undefined`
            );
          }

          return value;
        }

        function assertConfigApplicableTest(loc, value) {
          if (value === undefined) return value;

          if (Array.isArray(value)) {
            value.forEach((item, i) => {
              if (!checkValidTest(item)) {
                throw new Error(
                  `${msg(access(loc, i))} must be a string/Function/RegExp.`
                );
              }
            });
          } else if (!checkValidTest(value)) {
            throw new Error(
              `${msg(
                loc
              )} must be a string/Function/RegExp, or an array of those`
            );
          }

          return value;
        }

        function checkValidTest(value) {
          return (
            typeof value === "string" ||
            typeof value === "function" ||
            value instanceof RegExp
          );
        }

        function assertConfigFileSearch(loc, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            typeof value !== "string"
          ) {
            throw new Error(
              `${msg(loc)} must be a undefined, a boolean, a string, ` +
                `got ${JSON.stringify(value)}`
            );
          }

          return value;
        }

        function assertBabelrcSearch(loc, value) {
          if (value === undefined || typeof value === "boolean") return value;

          if (Array.isArray(value)) {
            value.forEach((item, i) => {
              if (!checkValidTest(item)) {
                throw new Error(
                  `${msg(access(loc, i))} must be a string/Function/RegExp.`
                );
              }
            });
          } else if (!checkValidTest(value)) {
            throw new Error(
              `${msg(
                loc
              )} must be a undefined, a boolean, a string/Function/RegExp ` +
                `or an array of those, got ${JSON.stringify(value)}`
            );
          }

          return value;
        }

        function assertPluginList(loc, value) {
          const arr = assertArray(loc, value);

          if (arr) {
            arr.forEach((item, i) => assertPluginItem(access(loc, i), item));
          }

          return arr;
        }

        function assertPluginItem(loc, value) {
          if (Array.isArray(value)) {
            if (value.length === 0) {
              throw new Error(`${msg(loc)} must include an object`);
            }

            if (value.length > 3) {
              throw new Error(
                `${msg(loc)} may only be a two-tuple or three-tuple`
              );
            }

            assertPluginTarget(access(loc, 0), value[0]);

            if (value.length > 1) {
              const opts = value[1];

              if (
                opts !== undefined &&
                opts !== false &&
                (typeof opts !== "object" ||
                  Array.isArray(opts) ||
                  opts === null)
              ) {
                throw new Error(
                  `${msg(
                    access(loc, 1)
                  )} must be an object, false, or undefined`
                );
              }
            }

            if (value.length === 3) {
              const name = value[2];

              if (name !== undefined && typeof name !== "string") {
                throw new Error(
                  `${msg(access(loc, 2))} must be a string, or undefined`
                );
              }
            }
          } else {
            assertPluginTarget(loc, value);
          }

          return value;
        }

        function assertPluginTarget(loc, value) {
          if (
            (typeof value !== "object" || !value) &&
            typeof value !== "string" &&
            typeof value !== "function"
          ) {
            throw new Error(`${msg(loc)} must be a string, object, function`);
          }

          return value;
        }
      },
      {},
    ],
    18: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.validate = validate;
        exports.checkNoUnwrappedItemOptionPairs =
          checkNoUnwrappedItemOptionPairs;

        var _plugin = _interopRequireDefault(require("../plugin"));

        var _removed = _interopRequireDefault(require("./removed"));

        var _optionAssertions = require("./option-assertions");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const ROOT_VALIDATORS = {
          cwd: _optionAssertions.assertString,
          root: _optionAssertions.assertString,
          rootMode: _optionAssertions.assertRootMode,
          configFile: _optionAssertions.assertConfigFileSearch,
          caller: _optionAssertions.assertCallerMetadata,
          filename: _optionAssertions.assertString,
          filenameRelative: _optionAssertions.assertString,
          code: _optionAssertions.assertBoolean,
          ast: _optionAssertions.assertBoolean,
          cloneInputAst: _optionAssertions.assertBoolean,
          envName: _optionAssertions.assertString,
        };
        const BABELRC_VALIDATORS = {
          babelrc: _optionAssertions.assertBoolean,
          babelrcRoots: _optionAssertions.assertBabelrcSearch,
        };
        const NONPRESET_VALIDATORS = {
          extends: _optionAssertions.assertString,
          ignore: _optionAssertions.assertIgnoreList,
          only: _optionAssertions.assertIgnoreList,
        };
        const COMMON_VALIDATORS = {
          inputSourceMap: _optionAssertions.assertInputSourceMap,
          presets: _optionAssertions.assertPluginList,
          plugins: _optionAssertions.assertPluginList,
          passPerPreset: _optionAssertions.assertBoolean,
          env: assertEnvSet,
          overrides: assertOverridesList,
          test: _optionAssertions.assertConfigApplicableTest,
          include: _optionAssertions.assertConfigApplicableTest,
          exclude: _optionAssertions.assertConfigApplicableTest,
          retainLines: _optionAssertions.assertBoolean,
          comments: _optionAssertions.assertBoolean,
          shouldPrintComment: _optionAssertions.assertFunction,
          compact: _optionAssertions.assertCompact,
          minified: _optionAssertions.assertBoolean,
          auxiliaryCommentBefore: _optionAssertions.assertString,
          auxiliaryCommentAfter: _optionAssertions.assertString,
          sourceType: _optionAssertions.assertSourceType,
          wrapPluginVisitorMethod: _optionAssertions.assertFunction,
          highlightCode: _optionAssertions.assertBoolean,
          sourceMaps: _optionAssertions.assertSourceMaps,
          sourceMap: _optionAssertions.assertSourceMaps,
          sourceFileName: _optionAssertions.assertString,
          sourceRoot: _optionAssertions.assertString,
          getModuleId: _optionAssertions.assertFunction,
          moduleRoot: _optionAssertions.assertString,
          moduleIds: _optionAssertions.assertBoolean,
          moduleId: _optionAssertions.assertString,
          parserOpts: _optionAssertions.assertObject,
          generatorOpts: _optionAssertions.assertObject,
        };

        function getSource(loc) {
          return loc.type === "root" ? loc.source : getSource(loc.parent);
        }

        function validate(type, opts) {
          return validateNested(
            {
              type: "root",
              source: type,
            },
            opts
          );
        }

        function validateNested(loc, opts) {
          const type = getSource(loc);
          assertNoDuplicateSourcemap(opts);
          Object.keys(opts).forEach((key) => {
            const optLoc = {
              type: "option",
              name: key,
              parent: loc,
            };

            if (type === "preset" && NONPRESET_VALIDATORS[key]) {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  optLoc
                )} is not allowed in preset options`
              );
            }

            if (type !== "arguments" && ROOT_VALIDATORS[key]) {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  optLoc
                )} is only allowed in root programmatic options`
              );
            }

            if (
              type !== "arguments" &&
              type !== "configfile" &&
              BABELRC_VALIDATORS[key]
            ) {
              if (type === "babelrcfile" || type === "extendsfile") {
                throw new Error(
                  `${(0, _optionAssertions.msg)(
                    optLoc
                  )} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, ` +
                    `or babel.config.js/config file options`
                );
              }

              throw new Error(
                `${(0, _optionAssertions.msg)(
                  optLoc
                )} is only allowed in root programmatic options, or babel.config.js/config file options`
              );
            }

            const validator =
              COMMON_VALIDATORS[key] ||
              NONPRESET_VALIDATORS[key] ||
              BABELRC_VALIDATORS[key] ||
              ROOT_VALIDATORS[key] ||
              throwUnknownError;
            validator(optLoc, opts[key]);
          });
          return opts;
        }

        function throwUnknownError(loc) {
          const key = loc.name;

          if (_removed.default[key]) {
            const { message, version = 5 } = _removed.default[key];
            throw new Error(
              `Using removed Babel ${version} option: ${(0,
              _optionAssertions.msg)(loc)} - ${message}`
            );
          } else {
            const unknownOptErr = new Error(
              `Unknown option: ${(0, _optionAssertions.msg)(
                loc
              )}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`
            );
            unknownOptErr.code = "BABEL_UNKNOWN_OPTION";
            throw unknownOptErr;
          }
        }

        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }

        function assertNoDuplicateSourcemap(opts) {
          if (has(opts, "sourceMap") && has(opts, "sourceMaps")) {
            throw new Error(
              ".sourceMap is an alias for .sourceMaps, cannot use both"
            );
          }
        }

        function assertEnvSet(loc, value) {
          if (loc.parent.type === "env") {
            throw new Error(
              `${(0, _optionAssertions.msg)(
                loc
              )} is not allowed inside of another .env block`
            );
          }

          const parent = loc.parent;
          const obj = (0, _optionAssertions.assertObject)(loc, value);

          if (obj) {
            for (const envName of Object.keys(obj)) {
              const env = (0, _optionAssertions.assertObject)(
                (0, _optionAssertions.access)(loc, envName),
                obj[envName]
              );
              if (!env) continue;
              const envLoc = {
                type: "env",
                name: envName,
                parent,
              };
              validateNested(envLoc, env);
            }
          }

          return obj;
        }

        function assertOverridesList(loc, value) {
          if (loc.parent.type === "env") {
            throw new Error(
              `${(0, _optionAssertions.msg)(
                loc
              )} is not allowed inside an .env block`
            );
          }

          if (loc.parent.type === "overrides") {
            throw new Error(
              `${(0, _optionAssertions.msg)(
                loc
              )} is not allowed inside an .overrides block`
            );
          }

          const parent = loc.parent;
          const arr = (0, _optionAssertions.assertArray)(loc, value);

          if (arr) {
            for (const [index, item] of arr.entries()) {
              const objLoc = (0, _optionAssertions.access)(loc, index);
              const env = (0, _optionAssertions.assertObject)(objLoc, item);
              if (!env)
                throw new Error(
                  `${(0, _optionAssertions.msg)(objLoc)} must be an object`
                );
              const overridesLoc = {
                type: "overrides",
                index,
                parent,
              };
              validateNested(overridesLoc, env);
            }
          }

          return arr;
        }

        function checkNoUnwrappedItemOptionPairs(items, index, type, e) {
          if (index === 0) return;
          const lastItem = items[index - 1];
          const thisItem = items[index];

          if (
            lastItem.file &&
            lastItem.options === undefined &&
            typeof thisItem.value === "object"
          ) {
            e.message +=
              `\n- Maybe you meant to use\n` +
              `"${type}": [\n  ["${lastItem.file.request}", ${JSON.stringify(
                thisItem.value,
                undefined,
                2
              )}]\n]\n` +
              `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;
          }
        }
      },
      { "../plugin": 14, "./option-assertions": 17, "./removed": 20 },
    ],
    19: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.validatePluginObject = validatePluginObject;

        var _optionAssertions = require("./option-assertions");

        const VALIDATORS = {
          name: _optionAssertions.assertString,
          manipulateOptions: _optionAssertions.assertFunction,
          pre: _optionAssertions.assertFunction,
          post: _optionAssertions.assertFunction,
          inherits: _optionAssertions.assertFunction,
          visitor: assertVisitorMap,
          parserOverride: _optionAssertions.assertFunction,
          generatorOverride: _optionAssertions.assertFunction,
        };

        function assertVisitorMap(loc, value) {
          const obj = (0, _optionAssertions.assertObject)(loc, value);

          if (obj) {
            Object.keys(obj).forEach((prop) =>
              assertVisitorHandler(prop, obj[prop])
            );

            if (obj.enter || obj.exit) {
              throw new Error(
                `${(0, _optionAssertions.msg)(
                  loc
                )} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`
              );
            }
          }

          return obj;
        }

        function assertVisitorHandler(key, value) {
          if (value && typeof value === "object") {
            Object.keys(value).forEach((handler) => {
              if (handler !== "enter" && handler !== "exit") {
                throw new Error(
                  `.visitor["${key}"] may only have .enter and/or .exit handlers.`
                );
              }
            });
          } else if (typeof value !== "function") {
            throw new Error(`.visitor["${key}"] must be a function`);
          }

          return value;
        }

        function validatePluginObject(obj) {
          const rootPath = {
            type: "root",
            source: "plugin",
          };
          Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];

            if (validator) {
              const optLoc = {
                type: "option",
                name: key,
                parent: rootPath,
              };
              validator(optLoc, obj[key]);
            } else {
              const invalidPluginPropertyError = new Error(
                `.${key} is not a valid Plugin property`
              );
              invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
              throw invalidPluginPropertyError;
            }
          });
          return obj;
        }
      },
      { "./option-assertions": 17 },
    ],
    20: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;
        var _default = {
          auxiliaryComment: {
            message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`",
          },
          blacklist: {
            message:
              "Put the specific transforms you want in the `plugins` option",
          },
          breakConfig: {
            message: "This is not a necessary option in Babel 6",
          },
          experimental: {
            message:
              "Put the specific transforms you want in the `plugins` option",
          },
          externalHelpers: {
            message:
              "Use the `external-helpers` plugin instead. " +
              "Check out http://babeljs.io/docs/plugins/external-helpers/",
          },
          extra: {
            message: "",
          },
          jsxPragma: {
            message:
              "use the `pragma` option in the `react-jsx` plugin. " +
              "Check out http://babeljs.io/docs/plugins/transform-react-jsx/",
          },
          loose: {
            message:
              "Specify the `loose` option for the relevant plugin you are using " +
              "or use a preset that sets the option.",
          },
          metadataUsedHelpers: {
            message: "Not required anymore as this is enabled by default",
          },
          modules: {
            message:
              "Use the corresponding module transform plugin in the `plugins` option. " +
              "Check out http://babeljs.io/docs/plugins/#modules",
          },
          nonStandard: {
            message:
              "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " +
              "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/",
          },
          optional: {
            message:
              "Put the specific transforms you want in the `plugins` option",
          },
          sourceMapName: {
            message:
              "The `sourceMapName` option has been removed because it makes more sense for the " +
              "tooling that calls Babel to assign `map.file` themselves.",
          },
          stage: {
            message:
              "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets",
          },
          whitelist: {
            message:
              "Put the specific transforms you want in the `plugins` option",
          },
          resolveModuleSource: {
            version: 6,
            message:
              "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options",
          },
          metadata: {
            version: 6,
            message:
              "Generated plugin metadata is always included in the output result",
          },
          sourceMapTarget: {
            version: 6,
            message:
              "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " +
              "that calls Babel to assign `map.file` themselves.",
          },
        };
        exports.default = _default;
      },
      {},
    ],
    21: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.maybeAsync = maybeAsync;
        exports.forwardAsync = forwardAsync;
        exports.isThenable = isThenable;
        exports.waitFor = exports.onFirstPause = exports.isAsync = void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const id = (x) => x;

        const runGenerator = (0, _gensync().default)(function* (item) {
          return yield* item;
        });
        const isAsync = (0, _gensync().default)({
          sync: () => false,
          errback: (cb) => cb(null, true),
        });
        exports.isAsync = isAsync;

        function maybeAsync(fn, message) {
          return (0, _gensync().default)({
            sync(...args) {
              const result = fn.apply(this, args);
              if (isThenable(result)) throw new Error(message);
              return result;
            },

            async(...args) {
              return Promise.resolve(fn.apply(this, args));
            },
          });
        }

        const withKind = (0, _gensync().default)({
          sync: (cb) => cb("sync"),
          async: (cb) => cb("async"),
        });

        function forwardAsync(action, cb) {
          const g = (0, _gensync().default)(action);
          return withKind((kind) => {
            const adapted = g[kind];
            return cb(adapted);
          });
        }

        const onFirstPause = (0, _gensync().default)({
          name: "onFirstPause",
          arity: 2,
          sync: function (item) {
            return runGenerator.sync(item);
          },
          errback: function (item, firstPause, cb) {
            let completed = false;
            runGenerator.errback(item, (err, value) => {
              completed = true;
              cb(err, value);
            });

            if (!completed) {
              firstPause();
            }
          },
        });
        exports.onFirstPause = onFirstPause;
        const waitFor = (0, _gensync().default)({
          sync: id,
          async: id,
        });
        exports.waitFor = waitFor;

        function isThenable(val) {
          return (
            !!val &&
            (typeof val === "object" || typeof val === "function") &&
            !!val.then &&
            typeof val.then === "function"
          );
        }
      },
      { gensync: 248 },
    ],
    22: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Plugin = Plugin;
        Object.defineProperty(exports, "File", {
          enumerable: true,
          get: function () {
            return _file.default;
          },
        });
        Object.defineProperty(exports, "buildExternalHelpers", {
          enumerable: true,
          get: function () {
            return _buildExternalHelpers.default;
          },
        });
        Object.defineProperty(exports, "resolvePlugin", {
          enumerable: true,
          get: function () {
            return _files.resolvePlugin;
          },
        });
        Object.defineProperty(exports, "resolvePreset", {
          enumerable: true,
          get: function () {
            return _files.resolvePreset;
          },
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function () {
            return _package.version;
          },
        });
        Object.defineProperty(exports, "getEnv", {
          enumerable: true,
          get: function () {
            return _environment.getEnv;
          },
        });
        Object.defineProperty(exports, "tokTypes", {
          enumerable: true,
          get: function () {
            return _parser().tokTypes;
          },
        });
        Object.defineProperty(exports, "traverse", {
          enumerable: true,
          get: function () {
            return _traverse().default;
          },
        });
        Object.defineProperty(exports, "template", {
          enumerable: true,
          get: function () {
            return _template().default;
          },
        });
        Object.defineProperty(exports, "createConfigItem", {
          enumerable: true,
          get: function () {
            return _item.createConfigItem;
          },
        });
        Object.defineProperty(exports, "loadPartialConfig", {
          enumerable: true,
          get: function () {
            return _config.loadPartialConfig;
          },
        });
        Object.defineProperty(exports, "loadPartialConfigSync", {
          enumerable: true,
          get: function () {
            return _config.loadPartialConfigSync;
          },
        });
        Object.defineProperty(exports, "loadPartialConfigAsync", {
          enumerable: true,
          get: function () {
            return _config.loadPartialConfigAsync;
          },
        });
        Object.defineProperty(exports, "loadOptions", {
          enumerable: true,
          get: function () {
            return _config.loadOptions;
          },
        });
        Object.defineProperty(exports, "loadOptionsSync", {
          enumerable: true,
          get: function () {
            return _config.loadOptionsSync;
          },
        });
        Object.defineProperty(exports, "loadOptionsAsync", {
          enumerable: true,
          get: function () {
            return _config.loadOptionsAsync;
          },
        });
        Object.defineProperty(exports, "transform", {
          enumerable: true,
          get: function () {
            return _transform.transform;
          },
        });
        Object.defineProperty(exports, "transformSync", {
          enumerable: true,
          get: function () {
            return _transform.transformSync;
          },
        });
        Object.defineProperty(exports, "transformAsync", {
          enumerable: true,
          get: function () {
            return _transform.transformAsync;
          },
        });
        Object.defineProperty(exports, "transformFile", {
          enumerable: true,
          get: function () {
            return _transformFile.transformFile;
          },
        });
        Object.defineProperty(exports, "transformFileSync", {
          enumerable: true,
          get: function () {
            return _transformFile.transformFileSync;
          },
        });
        Object.defineProperty(exports, "transformFileAsync", {
          enumerable: true,
          get: function () {
            return _transformFile.transformFileAsync;
          },
        });
        Object.defineProperty(exports, "transformFromAst", {
          enumerable: true,
          get: function () {
            return _transformAst.transformFromAst;
          },
        });
        Object.defineProperty(exports, "transformFromAstSync", {
          enumerable: true,
          get: function () {
            return _transformAst.transformFromAstSync;
          },
        });
        Object.defineProperty(exports, "transformFromAstAsync", {
          enumerable: true,
          get: function () {
            return _transformAst.transformFromAstAsync;
          },
        });
        Object.defineProperty(exports, "parse", {
          enumerable: true,
          get: function () {
            return _parse.parse;
          },
        });
        Object.defineProperty(exports, "parseSync", {
          enumerable: true,
          get: function () {
            return _parse.parseSync;
          },
        });
        Object.defineProperty(exports, "parseAsync", {
          enumerable: true,
          get: function () {
            return _parse.parseAsync;
          },
        });
        exports.types =
          exports.OptionManager =
          exports.DEFAULT_EXTENSIONS =
            void 0;

        var _file = _interopRequireDefault(
          require("./transformation/file/file")
        );

        var _buildExternalHelpers = _interopRequireDefault(
          require("./tools/build-external-helpers")
        );

        var _files = require("./config/files");

        var _package = require("../package.json");

        var _environment = require("./config/helpers/environment");

        function _types() {
          const data = _interopRequireWildcard(require("@babel/types"));

          _types = function () {
            return data;
          };

          return data;
        }

        Object.defineProperty(exports, "types", {
          enumerable: true,
          get: function () {
            return _types();
          },
        });

        function _parser() {
          const data = require("@babel/parser");

          _parser = function () {
            return data;
          };

          return data;
        }

        function _traverse() {
          const data = _interopRequireDefault(require("@babel/traverse"));

          _traverse = function () {
            return data;
          };

          return data;
        }

        function _template() {
          const data = _interopRequireDefault(require("@babel/template"));

          _template = function () {
            return data;
          };

          return data;
        }

        var _item = require("./config/item");

        var _config = require("./config");

        var _transform = require("./transform");

        var _transformFile = require("./transform-file");

        var _transformAst = require("./transform-ast");

        var _parse = require("./parse");

        function _getRequireWildcardCache() {
          if (typeof WeakMap !== "function") return null;
          var cache = new WeakMap();
          _getRequireWildcardCache = function () {
            return cache;
          };
          return cache;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== "object" && typeof obj !== "function")
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache();
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const DEFAULT_EXTENSIONS = Object.freeze([
          ".js",
          ".jsx",
          ".es6",
          ".es",
          ".mjs",
        ]);
        exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;

        class OptionManager {
          init(opts) {
            return (0, _config.loadOptions)(opts);
          }
        }

        exports.OptionManager = OptionManager;

        function Plugin(alias) {
          throw new Error(
            `The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`
          );
        }
      },
      {
        "../package.json": 41,
        "./config": 10,
        "./config/files": 5,
        "./config/helpers/environment": 8,
        "./config/item": 11,
        "./parse": 23,
        "./tools/build-external-helpers": 26,
        "./transform": 29,
        "./transform-ast": 27,
        "./transform-file": 28,
        "./transformation/file/file": 31,
        "@babel/parser": 85,
        "@babel/template": 90,
        "@babel/traverse": 99,
        "@babel/types": 168,
      },
    ],
    23: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.parseAsync = exports.parseSync = exports.parse = void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _config = _interopRequireDefault(require("./config"));

        var _parser = _interopRequireDefault(require("./parser"));

        var _normalizeOpts = _interopRequireDefault(
          require("./transformation/normalize-opts")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const parseRunner = (0, _gensync().default)(function* parse(
          code,
          opts
        ) {
          const config = yield* (0, _config.default)(opts);

          if (config === null) {
            return null;
          }

          return yield* (0, _parser.default)(
            config.passes,
            (0, _normalizeOpts.default)(config),
            code
          );
        });

        const parse = function parse(code, opts, callback) {
          if (typeof opts === "function") {
            callback = opts;
            opts = undefined;
          }

          if (callback === undefined) return parseRunner.sync(code, opts);
          parseRunner.errback(code, opts, callback);
        };

        exports.parse = parse;
        const parseSync = parseRunner.sync;
        exports.parseSync = parseSync;
        const parseAsync = parseRunner.async;
        exports.parseAsync = parseAsync;
      },
      {
        "./config": 10,
        "./parser": 24,
        "./transformation/normalize-opts": 36,
        gensync: 248,
      },
    ],
    24: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = parser;

        function _parser() {
          const data = require("@babel/parser");

          _parser = function () {
            return data;
          };

          return data;
        }

        function _codeFrame() {
          const data = require("@babel/code-frame");

          _codeFrame = function () {
            return data;
          };

          return data;
        }

        var _missingPluginHelper = _interopRequireDefault(
          require("./util/missing-plugin-helper")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function* parser(
          pluginPasses,
          { parserOpts, highlightCode = true, filename = "unknown" },
          code
        ) {
          try {
            const results = [];

            for (const plugins of pluginPasses) {
              for (const plugin of plugins) {
                const { parserOverride } = plugin;

                if (parserOverride) {
                  const ast = parserOverride(code, parserOpts, _parser().parse);
                  if (ast !== undefined) results.push(ast);
                }
              }
            }

            if (results.length === 0) {
              return (0, _parser().parse)(code, parserOpts);
            } else if (results.length === 1) {
              yield* [];

              if (typeof results[0].then === "function") {
                throw new Error(
                  `You appear to be using an async parser plugin, ` +
                    `which your current version of Babel does not support. ` +
                    `If you're using a published plugin, you may need to upgrade ` +
                    `your @babel/core version.`
                );
              }

              return results[0];
            }

            throw new Error(
              "More than one plugin attempted to override parsing."
            );
          } catch (err) {
            if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
              err.message +=
                "\nConsider renaming the file to '.mjs', or setting sourceType:module " +
                "or sourceType:unambiguous in your Babel config for this file.";
            }

            const { loc, missingPlugin } = err;

            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(
                code,
                {
                  start: {
                    line: loc.line,
                    column: loc.column + 1,
                  },
                },
                {
                  highlightCode,
                }
              );

              if (missingPlugin) {
                err.message =
                  `${filename}: ` +
                  (0, _missingPluginHelper.default)(
                    missingPlugin[0],
                    loc,
                    codeFrame
                  );
              } else {
                err.message = `${filename}: ${err.message}\n\n` + codeFrame;
              }

              err.code = "BABEL_PARSE_ERROR";
            }

            throw err;
          }
        }
      },
      {
        "./util/missing-plugin-helper": 25,
        "@babel/code-frame": 1,
        "@babel/parser": 85,
      },
    ],
    25: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = generateMissingPluginMessage;
        const pluginNameMap = {
          classProperties: {
            syntax: {
              name: "@babel/plugin-syntax-class-properties",
              url: "https://git.io/vb4yQ",
            },
            transform: {
              name: "@babel/plugin-proposal-class-properties",
              url: "https://git.io/vb4SL",
            },
          },
          classPrivateProperties: {
            syntax: {
              name: "@babel/plugin-syntax-class-properties",
              url: "https://git.io/vb4yQ",
            },
            transform: {
              name: "@babel/plugin-proposal-class-properties",
              url: "https://git.io/vb4SL",
            },
          },
          classPrivateMethods: {
            syntax: {
              name: "@babel/plugin-syntax-class-properties",
              url: "https://git.io/vb4yQ",
            },
            transform: {
              name: "@babel/plugin-proposal-private-methods",
              url: "https://git.io/JvpRG",
            },
          },
          classStaticBlock: {
            syntax: {
              name: "@babel/plugin-syntax-class-static-block",
              url: "https://git.io/JTLB6",
            },
            transform: {
              name: "@babel/plugin-proposal-class-static-block",
              url: "https://git.io/JTLBP",
            },
          },
          decimal: {
            syntax: {
              name: "@babel/plugin-syntax-decimal",
              url: "https://git.io/JfKOH",
            },
          },
          decorators: {
            syntax: {
              name: "@babel/plugin-syntax-decorators",
              url: "https://git.io/vb4y9",
            },
            transform: {
              name: "@babel/plugin-proposal-decorators",
              url: "https://git.io/vb4ST",
            },
          },
          doExpressions: {
            syntax: {
              name: "@babel/plugin-syntax-do-expressions",
              url: "https://git.io/vb4yh",
            },
            transform: {
              name: "@babel/plugin-proposal-do-expressions",
              url: "https://git.io/vb4S3",
            },
          },
          dynamicImport: {
            syntax: {
              name: "@babel/plugin-syntax-dynamic-import",
              url: "https://git.io/vb4Sv",
            },
          },
          exportDefaultFrom: {
            syntax: {
              name: "@babel/plugin-syntax-export-default-from",
              url: "https://git.io/vb4SO",
            },
            transform: {
              name: "@babel/plugin-proposal-export-default-from",
              url: "https://git.io/vb4yH",
            },
          },
          exportNamespaceFrom: {
            syntax: {
              name: "@babel/plugin-syntax-export-namespace-from",
              url: "https://git.io/vb4Sf",
            },
            transform: {
              name: "@babel/plugin-proposal-export-namespace-from",
              url: "https://git.io/vb4SG",
            },
          },
          flow: {
            syntax: {
              name: "@babel/plugin-syntax-flow",
              url: "https://git.io/vb4yb",
            },
            transform: {
              name: "@babel/preset-flow",
              url: "https://git.io/JfeDn",
            },
          },
          functionBind: {
            syntax: {
              name: "@babel/plugin-syntax-function-bind",
              url: "https://git.io/vb4y7",
            },
            transform: {
              name: "@babel/plugin-proposal-function-bind",
              url: "https://git.io/vb4St",
            },
          },
          functionSent: {
            syntax: {
              name: "@babel/plugin-syntax-function-sent",
              url: "https://git.io/vb4yN",
            },
            transform: {
              name: "@babel/plugin-proposal-function-sent",
              url: "https://git.io/vb4SZ",
            },
          },
          importMeta: {
            syntax: {
              name: "@babel/plugin-syntax-import-meta",
              url: "https://git.io/vbKK6",
            },
          },
          jsx: {
            syntax: {
              name: "@babel/plugin-syntax-jsx",
              url: "https://git.io/vb4yA",
            },
            transform: {
              name: "@babel/preset-react",
              url: "https://git.io/JfeDR",
            },
          },
          importAssertions: {
            syntax: {
              name: "@babel/plugin-syntax-import-assertions",
              url: "https://git.io/JUbkv",
            },
          },
          moduleStringNames: {
            syntax: {
              name: "@babel/plugin-syntax-module-string-names",
              url: "https://git.io/JTL8G",
            },
          },
          numericSeparator: {
            syntax: {
              name: "@babel/plugin-syntax-numeric-separator",
              url: "https://git.io/vb4Sq",
            },
            transform: {
              name: "@babel/plugin-proposal-numeric-separator",
              url: "https://git.io/vb4yS",
            },
          },
          optionalChaining: {
            syntax: {
              name: "@babel/plugin-syntax-optional-chaining",
              url: "https://git.io/vb4Sc",
            },
            transform: {
              name: "@babel/plugin-proposal-optional-chaining",
              url: "https://git.io/vb4Sk",
            },
          },
          pipelineOperator: {
            syntax: {
              name: "@babel/plugin-syntax-pipeline-operator",
              url: "https://git.io/vb4yj",
            },
            transform: {
              name: "@babel/plugin-proposal-pipeline-operator",
              url: "https://git.io/vb4SU",
            },
          },
          privateIn: {
            syntax: {
              name: "@babel/plugin-syntax-private-property-in-object",
              url: "https://git.io/JfK3q",
            },
            transform: {
              name: "@babel/plugin-proposal-private-property-in-object",
              url: "https://git.io/JfK3O",
            },
          },
          recordAndTuple: {
            syntax: {
              name: "@babel/plugin-syntax-record-and-tuple",
              url: "https://git.io/JvKp3",
            },
          },
          throwExpressions: {
            syntax: {
              name: "@babel/plugin-syntax-throw-expressions",
              url: "https://git.io/vb4SJ",
            },
            transform: {
              name: "@babel/plugin-proposal-throw-expressions",
              url: "https://git.io/vb4yF",
            },
          },
          typescript: {
            syntax: {
              name: "@babel/plugin-syntax-typescript",
              url: "https://git.io/vb4SC",
            },
            transform: {
              name: "@babel/preset-typescript",
              url: "https://git.io/JfeDz",
            },
          },
          asyncGenerators: {
            syntax: {
              name: "@babel/plugin-syntax-async-generators",
              url: "https://git.io/vb4SY",
            },
            transform: {
              name: "@babel/plugin-proposal-async-generator-functions",
              url: "https://git.io/vb4yp",
            },
          },
          logicalAssignment: {
            syntax: {
              name: "@babel/plugin-syntax-logical-assignment-operators",
              url: "https://git.io/vAlBp",
            },
            transform: {
              name: "@babel/plugin-proposal-logical-assignment-operators",
              url: "https://git.io/vAlRe",
            },
          },
          nullishCoalescingOperator: {
            syntax: {
              name: "@babel/plugin-syntax-nullish-coalescing-operator",
              url: "https://git.io/vb4yx",
            },
            transform: {
              name: "@babel/plugin-proposal-nullish-coalescing-operator",
              url: "https://git.io/vb4Se",
            },
          },
          objectRestSpread: {
            syntax: {
              name: "@babel/plugin-syntax-object-rest-spread",
              url: "https://git.io/vb4y5",
            },
            transform: {
              name: "@babel/plugin-proposal-object-rest-spread",
              url: "https://git.io/vb4Ss",
            },
          },
          optionalCatchBinding: {
            syntax: {
              name: "@babel/plugin-syntax-optional-catch-binding",
              url: "https://git.io/vb4Sn",
            },
            transform: {
              name: "@babel/plugin-proposal-optional-catch-binding",
              url: "https://git.io/vb4SI",
            },
          },
        };
        pluginNameMap.privateIn.syntax = pluginNameMap.privateIn.transform;

        const getNameURLCombination = ({ name, url }) => `${name} (${url})`;

        function generateMissingPluginMessage(
          missingPluginName,
          loc,
          codeFrame
        ) {
          let helpMessage =
            `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` +
            `(${loc.line}:${loc.column + 1}):\n\n` +
            codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];

          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } =
              pluginInfo;

            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);

              if (transformPlugin) {
                const transformPluginInfo =
                  getNameURLCombination(transformPlugin);
                const sectionType = transformPlugin.name.startsWith(
                  "@babel/plugin"
                )
                  ? "plugins"
                  : "presets";
                helpMessage += `\n\nAdd ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
  If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else {
                helpMessage +=
                  `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` +
                  `to enable parsing.`;
              }
            }
          }

          return helpMessage;
        }
      },
      {},
    ],
    26: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = _default;

        function helpers() {
          const data = _interopRequireWildcard(require("@babel/helpers"));

          helpers = function () {
            return data;
          };

          return data;
        }

        function _generator() {
          const data = _interopRequireDefault(require("@babel/generator"));

          _generator = function () {
            return data;
          };

          return data;
        }

        function _template() {
          const data = _interopRequireDefault(require("@babel/template"));

          _template = function () {
            return data;
          };

          return data;
        }

        function t() {
          const data = _interopRequireWildcard(require("@babel/types"));

          t = function () {
            return data;
          };

          return data;
        }

        var _file = _interopRequireDefault(
          require("../transformation/file/file")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _getRequireWildcardCache() {
          if (typeof WeakMap !== "function") return null;
          var cache = new WeakMap();
          _getRequireWildcardCache = function () {
            return cache;
          };
          return cache;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== "object" && typeof obj !== "function")
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache();
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        const buildUmdWrapper = (replacements) =>
          (0, _template().default)`
      (function (root, factory) {
        if (typeof define === "function" && define.amd) {
          define(AMD_ARGUMENTS, factory);
        } else if (typeof exports === "object") {
          factory(COMMON_ARGUMENTS);
        } else {
          factory(BROWSER_ARGUMENTS);
        }
      })(UMD_ROOT, function (FACTORY_PARAMETERS) {
        FACTORY_BODY
      });
    `(replacements);

        function buildGlobal(allowlist) {
          const namespace = t().identifier("babelHelpers");
          const body = [];
          const container = t().functionExpression(
            null,
            [t().identifier("global")],
            t().blockStatement(body)
          );
          const tree = t().program([
            t().expressionStatement(
              t().callExpression(container, [
                t().conditionalExpression(
                  t().binaryExpression(
                    "===",
                    t().unaryExpression("typeof", t().identifier("global")),
                    t().stringLiteral("undefined")
                  ),
                  t().identifier("self"),
                  t().identifier("global")
                ),
              ])
            ),
          ]);
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(
                namespace,
                t().assignmentExpression(
                  "=",
                  t().memberExpression(t().identifier("global"), namespace),
                  t().objectExpression([])
                )
              ),
            ])
          );
          buildHelpers(body, namespace, allowlist);
          return tree;
        }

        function buildModule(allowlist) {
          const body = [];
          const refs = buildHelpers(body, null, allowlist);
          body.unshift(
            t().exportNamedDeclaration(
              null,
              Object.keys(refs).map((name) => {
                return t().exportSpecifier(
                  t().cloneNode(refs[name]),
                  t().identifier(name)
                );
              })
            )
          );
          return t().program(body, [], "module");
        }

        function buildUmd(allowlist) {
          const namespace = t().identifier("babelHelpers");
          const body = [];
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(namespace, t().identifier("global")),
            ])
          );
          buildHelpers(body, namespace, allowlist);
          return t().program([
            buildUmdWrapper({
              FACTORY_PARAMETERS: t().identifier("global"),
              BROWSER_ARGUMENTS: t().assignmentExpression(
                "=",
                t().memberExpression(t().identifier("root"), namespace),
                t().objectExpression([])
              ),
              COMMON_ARGUMENTS: t().identifier("exports"),
              AMD_ARGUMENTS: t().arrayExpression([
                t().stringLiteral("exports"),
              ]),
              FACTORY_BODY: body,
              UMD_ROOT: t().identifier("this"),
            }),
          ]);
        }

        function buildVar(allowlist) {
          const namespace = t().identifier("babelHelpers");
          const body = [];
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(namespace, t().objectExpression([])),
            ])
          );
          const tree = t().program(body);
          buildHelpers(body, namespace, allowlist);
          body.push(t().expressionStatement(namespace));
          return tree;
        }

        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => {
            return namespace
              ? t().memberExpression(namespace, t().identifier(name))
              : t().identifier(`_${name}`);
          };

          const refs = {};
          helpers().list.forEach(function (name) {
            if (allowlist && allowlist.indexOf(name) < 0) return;
            const ref = (refs[name] = getHelperReference(name));
            helpers().ensure(name, _file.default);
            const { nodes } = helpers().get(name, getHelperReference, ref);
            body.push(...nodes);
          });
          return refs;
        }

        function _default(allowlist, outputType = "global") {
          let tree;
          const build = {
            global: buildGlobal,
            module: buildModule,
            umd: buildUmd,
            var: buildVar,
          }[outputType];

          if (build) {
            tree = build(allowlist);
          } else {
            throw new Error(`Unsupported output type ${outputType}`);
          }

          return (0, _generator().default)(tree).code;
        }
      },
      {
        "../transformation/file/file": 31,
        "@babel/generator": 55,
        "@babel/helpers": 83,
        "@babel/template": 90,
        "@babel/types": 168,
      },
    ],
    27: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.transformFromAstAsync =
          exports.transformFromAstSync =
          exports.transformFromAst =
            void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _config = _interopRequireDefault(require("./config"));

        var _transformation = require("./transformation");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const transformFromAstRunner = (0, _gensync().default)(function* (
          ast,
          code,
          opts
        ) {
          const config = yield* (0, _config.default)(opts);
          if (config === null) return null;
          if (!ast) throw new Error("No AST given");
          return yield* (0, _transformation.run)(config, code, ast);
        });

        const transformFromAst = function transformFromAst(
          ast,
          code,
          opts,
          callback
        ) {
          if (typeof opts === "function") {
            callback = opts;
            opts = undefined;
          }

          if (callback === undefined) {
            return transformFromAstRunner.sync(ast, code, opts);
          }

          transformFromAstRunner.errback(ast, code, opts, callback);
        };

        exports.transformFromAst = transformFromAst;
        const transformFromAstSync = transformFromAstRunner.sync;
        exports.transformFromAstSync = transformFromAstSync;
        const transformFromAstAsync = transformFromAstRunner.async;
        exports.transformFromAstAsync = transformFromAstAsync;
      },
      { "./config": 10, "./transformation": 34, gensync: 248 },
    ],
    28: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.transformFileSync = transformFileSync;
        exports.transformFileAsync = transformFileAsync;
        exports.transformFile = void 0;

        const transformFile = function transformFile(filename, opts, callback) {
          if (typeof opts === "function") {
            callback = opts;
          }

          callback(
            new Error("Transforming files is not supported in browsers"),
            null
          );
        };

        exports.transformFile = transformFile;

        function transformFileSync() {
          throw new Error("Transforming files is not supported in browsers");
        }

        function transformFileAsync() {
          return Promise.reject(
            new Error("Transforming files is not supported in browsers")
          );
        }
      },
      {},
    ],
    29: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.transformAsync =
          exports.transformSync =
          exports.transform =
            void 0;

        function _gensync() {
          const data = _interopRequireDefault(require("gensync"));

          _gensync = function () {
            return data;
          };

          return data;
        }

        var _config = _interopRequireDefault(require("./config"));

        var _transformation = require("./transformation");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const transformRunner = (0, _gensync().default)(function* transform(
          code,
          opts
        ) {
          const config = yield* (0, _config.default)(opts);
          if (config === null) return null;
          return yield* (0, _transformation.run)(config, code);
        });

        const transform = function transform(code, opts, callback) {
          if (typeof opts === "function") {
            callback = opts;
            opts = undefined;
          }

          if (callback === undefined) return transformRunner.sync(code, opts);
          transformRunner.errback(code, opts, callback);
        };

        exports.transform = transform;
        const transformSync = transformRunner.sync;
        exports.transformSync = transformSync;
        const transformAsync = transformRunner.async;
        exports.transformAsync = transformAsync;
      },
      { "./config": 10, "./transformation": 34, gensync: 248 },
    ],
    30: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = loadBlockHoistPlugin;

        function _sortBy() {
          const data = _interopRequireDefault(require("lodash/sortBy"));

          _sortBy = function () {
            return data;
          };

          return data;
        }

        var _config = _interopRequireDefault(require("../config"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        let LOADED_PLUGIN;

        function loadBlockHoistPlugin() {
          if (!LOADED_PLUGIN) {
            const config = _config.default.sync({
              babelrc: false,
              configFile: false,
              plugins: [blockHoistPlugin],
            });

            LOADED_PLUGIN = config ? config.passes[0][0] : undefined;
            if (!LOADED_PLUGIN) throw new Error("Assertion failure");
          }

          return LOADED_PLUGIN;
        }

        const blockHoistPlugin = {
          name: "internal.blockHoist",
          visitor: {
            Block: {
              exit({ node }) {
                let hasChange = false;

                for (let i = 0; i < node.body.length; i++) {
                  const bodyNode = node.body[i];

                  if (
                    (bodyNode == null ? void 0 : bodyNode._blockHoist) != null
                  ) {
                    hasChange = true;
                    break;
                  }
                }

                if (!hasChange) return;
                node.body = (0, _sortBy().default)(
                  node.body,
                  function (bodyNode) {
                    let priority =
                      bodyNode == null ? void 0 : bodyNode._blockHoist;
                    if (priority == null) priority = 1;
                    if (priority === true) priority = 2;
                    return -1 * priority;
                  }
                );
              },
            },
          },
        };
      },
      { "../config": 10, "lodash/sortBy": 419 },
    ],
    31: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        function helpers() {
          const data = _interopRequireWildcard(require("@babel/helpers"));

          helpers = function () {
            return data;
          };

          return data;
        }

        function _traverse() {
          const data = _interopRequireWildcard(require("@babel/traverse"));

          _traverse = function () {
            return data;
          };

          return data;
        }

        function _codeFrame() {
          const data = require("@babel/code-frame");

          _codeFrame = function () {
            return data;
          };

          return data;
        }

        function t() {
          const data = _interopRequireWildcard(require("@babel/types"));

          t = function () {
            return data;
          };

          return data;
        }

        function _helperModuleTransforms() {
          const data = require("@babel/helper-module-transforms");

          _helperModuleTransforms = function () {
            return data;
          };

          return data;
        }

        function _semver() {
          const data = _interopRequireDefault(require("semver"));

          _semver = function () {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _getRequireWildcardCache() {
          if (typeof WeakMap !== "function") return null;
          var cache = new WeakMap();
          _getRequireWildcardCache = function () {
            return cache;
          };
          return cache;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== "object" && typeof obj !== "function")
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache();
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        const errorVisitor = {
          enter(path, state) {
            const loc = path.node.loc;

            if (loc) {
              state.loc = loc;
              path.stop();
            }
          },
        };

        class File {
          constructor(options, { code, ast, inputMap }) {
            this._map = new Map();
            this.opts = void 0;
            this.declarations = {};
            this.path = null;
            this.ast = {};
            this.scope = void 0;
            this.metadata = {};
            this.code = "";
            this.inputMap = null;
            this.hub = {
              file: this,
              getCode: () => this.code,
              getScope: () => this.scope,
              addHelper: this.addHelper.bind(this),
              buildError: this.buildCodeFrameError.bind(this),
            };
            this.opts = options;
            this.code = code;
            this.ast = ast;
            this.inputMap = inputMap;
            this.path = _traverse()
              .NodePath.get({
                hub: this.hub,
                parentPath: null,
                parent: this.ast,
                container: this.ast,
                key: "program",
              })
              .setContext();
            this.scope = this.path.scope;
          }

          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }

          set shebang(value) {
            if (value) {
              this.path
                .get("interpreter")
                .replaceWith(t().interpreterDirective(value));
            } else {
              this.path.get("interpreter").remove();
            }
          }

          set(key, val) {
            if (key === "helpersNamespace") {
              throw new Error(
                "Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." +
                  "If you are using @babel/plugin-external-helpers you will need to use a newer " +
                  "version than the one you currently have installed. " +
                  "If you have your own implementation, you'll want to explore using 'helperGenerator' " +
                  "alongside 'file.availableHelper()'."
              );
            }

            this._map.set(key, val);
          }

          get(key) {
            return this._map.get(key);
          }

          has(key) {
            return this._map.has(key);
          }

          getModuleName() {
            return (0, _helperModuleTransforms().getModuleName)(
              this.opts,
              this.opts
            );
          }

          addImport() {
            throw new Error(
              "This API has been removed. If you're looking for this " +
                "functionality in Babel 7, you should import the " +
                "'@babel/helper-module-imports' module and use the functions exposed " +
                " from that module, such as 'addNamed' or 'addDefault'."
            );
          }

          availableHelper(name, versionRange) {
            let minVersion;

            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
              return false;
            }

            if (typeof versionRange !== "string") return true;
            if (_semver().default.valid(versionRange))
              versionRange = `^${versionRange}`;
            return (
              !_semver().default.intersects(`<${minVersion}`, versionRange) &&
              !_semver().default.intersects(`>=8.0.0`, versionRange)
            );
          }

          addHelper(name) {
            const declar = this.declarations[name];
            if (declar) return t().cloneNode(declar);
            const generator = this.get("helperGenerator");

            if (generator) {
              const res = generator(name);
              if (res) return res;
            }

            helpers().ensure(name, File);
            const uid = (this.declarations[name] =
              this.scope.generateUidIdentifier(name));
            const dependencies = {};

            for (const dep of helpers().getDependencies(name)) {
              dependencies[dep] = this.addHelper(dep);
            }

            const { nodes, globals } = helpers().get(
              name,
              (dep) => dependencies[dep],
              uid,
              Object.keys(this.scope.getAllBindings())
            );
            globals.forEach((name) => {
              if (this.path.scope.hasBinding(name, true)) {
                this.path.scope.rename(name);
              }
            });
            nodes.forEach((node) => {
              node._compact = true;
            });
            this.path.unshiftContainer("body", nodes);
            this.path.get("body").forEach((path) => {
              if (nodes.indexOf(path.node) === -1) return;
              if (path.isVariableDeclaration())
                this.scope.registerDeclaration(path);
            });
            return uid;
          }

          addTemplateObject() {
            throw new Error(
              "This function has been moved into the template literal transform itself."
            );
          }

          buildCodeFrameError(node, msg, Error = SyntaxError) {
            let loc = node && (node.loc || node._loc);

            if (!loc && node) {
              const state = {
                loc: null,
              };
              (0, _traverse().default)(node, errorVisitor, this.scope, state);
              loc = state.loc;
              let txt =
                "This is an error on an internal node. Probably an internal error.";
              if (loc) txt += " Location has been estimated.";
              msg += ` (${txt})`;
            }

            if (loc) {
              const { highlightCode = true } = this.opts;
              msg +=
                "\n" +
                (0, _codeFrame().codeFrameColumns)(
                  this.code,
                  {
                    start: {
                      line: loc.start.line,
                      column: loc.start.column + 1,
                    },
                    end:
                      loc.end && loc.start.line === loc.end.line
                        ? {
                            line: loc.end.line,
                            column: loc.end.column + 1,
                          }
                        : undefined,
                  },
                  {
                    highlightCode,
                  }
                );
            }

            return new Error(msg);
          }
        }

        exports.default = File;
      },
      {
        "@babel/code-frame": 1,
        "@babel/helper-module-transforms": 70,
        "@babel/helpers": 83,
        "@babel/traverse": 99,
        "@babel/types": 168,
        semver: 428,
      },
    ],
    32: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = generateCode;

        function _convertSourceMap() {
          const data = _interopRequireDefault(require("convert-source-map"));

          _convertSourceMap = function () {
            return data;
          };

          return data;
        }

        function _generator() {
          const data = _interopRequireDefault(require("@babel/generator"));

          _generator = function () {
            return data;
          };

          return data;
        }

        var _mergeMap = _interopRequireDefault(require("./merge-map"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function generateCode(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file;
          const results = [];

          for (const plugins of pluginPasses) {
            for (const plugin of plugins) {
              const { generatorOverride } = plugin;

              if (generatorOverride) {
                const result = generatorOverride(
                  ast,
                  opts.generatorOpts,
                  code,
                  _generator().default
                );
                if (result !== undefined) results.push(result);
              }
            }
          }

          let result;

          if (results.length === 0) {
            result = (0, _generator().default)(ast, opts.generatorOpts, code);
          } else if (results.length === 1) {
            result = results[0];

            if (typeof result.then === "function") {
              throw new Error(
                `You appear to be using an async codegen plugin, ` +
                  `which your current version of Babel does not support. ` +
                  `If you're using a published plugin, ` +
                  `you may need to upgrade your @babel/core version.`
              );
            }
          } else {
            throw new Error(
              "More than one plugin attempted to override codegen."
            );
          }

          let { code: outputCode, map: outputMap } = result;

          if (outputMap && inputMap) {
            outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);
          }

          if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
            outputCode +=
              "\n" +
              _convertSourceMap().default.fromObject(outputMap).toComment();
          }

          if (opts.sourceMaps === "inline") {
            outputMap = null;
          }

          return {
            outputCode,
            outputMap,
          };
        }
      },
      { "./merge-map": 33, "@babel/generator": 55, "convert-source-map": 246 },
    ],
    33: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = mergeSourceMap;

        function _sourceMap() {
          const data = _interopRequireDefault(require("source-map"));

          _sourceMap = function () {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function mergeSourceMap(inputMap, map) {
          const input = buildMappingData(inputMap);
          const output = buildMappingData(map);
          const mergedGenerator =
            new (_sourceMap().default.SourceMapGenerator)();

          for (const { source } of input.sources) {
            if (typeof source.content === "string") {
              mergedGenerator.setSourceContent(source.path, source.content);
            }
          }

          if (output.sources.length === 1) {
            const defaultSource = output.sources[0];
            const insertedMappings = new Map();
            eachInputGeneratedRange(input, (generated, original, source) => {
              eachOverlappingGeneratedOutputRange(
                defaultSource,
                generated,
                (item) => {
                  const key = makeMappingKey(item);
                  if (insertedMappings.has(key)) return;
                  insertedMappings.set(key, item);
                  mergedGenerator.addMapping({
                    source: source.path,
                    original: {
                      line: original.line,
                      column: original.columnStart,
                    },
                    generated: {
                      line: item.line,
                      column: item.columnStart,
                    },
                    name: original.name,
                  });
                }
              );
            });

            for (const item of insertedMappings.values()) {
              if (item.columnEnd === Infinity) {
                continue;
              }

              const clearItem = {
                line: item.line,
                columnStart: item.columnEnd,
              };
              const key = makeMappingKey(clearItem);

              if (insertedMappings.has(key)) {
                continue;
              }

              mergedGenerator.addMapping({
                generated: {
                  line: clearItem.line,
                  column: clearItem.columnStart,
                },
              });
            }
          }

          const result = mergedGenerator.toJSON();

          if (typeof input.sourceRoot === "string") {
            result.sourceRoot = input.sourceRoot;
          }

          return result;
        }

        function makeMappingKey(item) {
          return `${item.line}/${item.columnStart}`;
        }

        function eachOverlappingGeneratedOutputRange(
          outputFile,
          inputGeneratedRange,
          callback
        ) {
          const overlappingOriginal = filterApplicableOriginalRanges(
            outputFile,
            inputGeneratedRange
          );

          for (const { generated } of overlappingOriginal) {
            for (const item of generated) {
              callback(item);
            }
          }
        }

        function filterApplicableOriginalRanges(
          { mappings },
          { line, columnStart, columnEnd }
        ) {
          return filterSortedArray(mappings, ({ original: outOriginal }) => {
            if (line > outOriginal.line) return -1;
            if (line < outOriginal.line) return 1;
            if (columnStart >= outOriginal.columnEnd) return -1;
            if (columnEnd <= outOriginal.columnStart) return 1;
            return 0;
          });
        }

        function eachInputGeneratedRange(map, callback) {
          for (const { source, mappings } of map.sources) {
            for (const { original, generated } of mappings) {
              for (const item of generated) {
                callback(item, original, source);
              }
            }
          }
        }

        function buildMappingData(map) {
          const consumer = new (_sourceMap().default.SourceMapConsumer)(
            Object.assign({}, map, {
              sourceRoot: null,
            })
          );
          const sources = new Map();
          const mappings = new Map();
          let last = null;
          consumer.computeColumnSpans();
          consumer.eachMapping(
            (m) => {
              if (m.originalLine === null) return;
              let source = sources.get(m.source);

              if (!source) {
                source = {
                  path: m.source,
                  content: consumer.sourceContentFor(m.source, true),
                };
                sources.set(m.source, source);
              }

              let sourceData = mappings.get(source);

              if (!sourceData) {
                sourceData = {
                  source,
                  mappings: [],
                };
                mappings.set(source, sourceData);
              }

              const obj = {
                line: m.originalLine,
                columnStart: m.originalColumn,
                columnEnd: Infinity,
                name: m.name,
              };

              if (
                last &&
                last.source === source &&
                last.mapping.line === m.originalLine
              ) {
                last.mapping.columnEnd = m.originalColumn;
              }

              last = {
                source,
                mapping: obj,
              };
              sourceData.mappings.push({
                original: obj,
                generated: consumer
                  .allGeneratedPositionsFor({
                    source: m.source,
                    line: m.originalLine,
                    column: m.originalColumn,
                  })
                  .map((item) => ({
                    line: item.line,
                    columnStart: item.column,
                    columnEnd: item.lastColumn + 1,
                  })),
              });
            },
            null,
            _sourceMap().default.SourceMapConsumer.ORIGINAL_ORDER
          );
          return {
            file: map.file,
            sourceRoot: map.sourceRoot,
            sources: Array.from(mappings.values()),
          };
        }

        function findInsertionLocation(array, callback) {
          let left = 0;
          let right = array.length;

          while (left < right) {
            const mid = Math.floor((left + right) / 2);
            const item = array[mid];
            const result = callback(item);

            if (result === 0) {
              left = mid;
              break;
            }

            if (result >= 0) {
              right = mid;
            } else {
              left = mid + 1;
            }
          }

          let i = left;

          if (i < array.length) {
            while (i >= 0 && callback(array[i]) >= 0) {
              i--;
            }

            return i + 1;
          }

          return i;
        }

        function filterSortedArray(array, callback) {
          const start = findInsertionLocation(array, callback);
          const results = [];

          for (
            let i = start;
            i < array.length && callback(array[i]) === 0;
            i++
          ) {
            results.push(array[i]);
          }

          return results;
        }
      },
      { "source-map": 439 },
    ],
    34: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.run = run;

        function _traverse() {
          const data = _interopRequireDefault(require("@babel/traverse"));

          _traverse = function () {
            return data;
          };

          return data;
        }

        var _pluginPass = _interopRequireDefault(require("./plugin-pass"));

        var _blockHoistPlugin = _interopRequireDefault(
          require("./block-hoist-plugin")
        );

        var _normalizeOpts = _interopRequireDefault(
          require("./normalize-opts")
        );

        var _normalizeFile = _interopRequireDefault(
          require("./normalize-file")
        );

        var _generate = _interopRequireDefault(require("./file/generate"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function* run(config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(
            config.passes,
            (0, _normalizeOpts.default)(config),
            code,
            ast
          );
          const opts = file.opts;

          try {
            yield* transformFile(file, config.passes);
          } catch (e) {
            var _opts$filename;

            e.message = `${
              (_opts$filename = opts.filename) != null
                ? _opts$filename
                : "unknown"
            }: ${e.message}`;

            if (!e.code) {
              e.code = "BABEL_TRANSFORM_ERROR";
            }

            throw e;
          }

          let outputCode, outputMap;

          try {
            if (opts.code !== false) {
              ({ outputCode, outputMap } = (0, _generate.default)(
                config.passes,
                file
              ));
            }
          } catch (e) {
            var _opts$filename2;

            e.message = `${
              (_opts$filename2 = opts.filename) != null
                ? _opts$filename2
                : "unknown"
            }: ${e.message}`;

            if (!e.code) {
              e.code = "BABEL_GENERATE_ERROR";
            }

            throw e;
          }

          return {
            metadata: file.metadata,
            options: opts,
            ast: opts.ast === true ? file.ast : null,
            code: outputCode === undefined ? null : outputCode,
            map: outputMap === undefined ? null : outputMap,
            sourceType: file.ast.program.sourceType,
          };
        }

        function* transformFile(file, pluginPasses) {
          for (const pluginPairs of pluginPasses) {
            const passPairs = [];
            const passes = [];
            const visitors = [];

            for (const plugin of pluginPairs.concat([
              (0, _blockHoistPlugin.default)(),
            ])) {
              const pass = new _pluginPass.default(
                file,
                plugin.key,
                plugin.options
              );
              passPairs.push([plugin, pass]);
              passes.push(pass);
              visitors.push(plugin.visitor);
            }

            for (const [plugin, pass] of passPairs) {
              const fn = plugin.pre;

              if (fn) {
                const result = fn.call(pass, file);
                yield* [];

                if (isThenable(result)) {
                  throw new Error(
                    `You appear to be using an plugin with an async .pre, ` +
                      `which your current version of Babel does not support. ` +
                      `If you're using a published plugin, you may need to upgrade ` +
                      `your @babel/core version.`
                  );
                }
              }
            }

            const visitor = _traverse().default.visitors.merge(
              visitors,
              passes,
              file.opts.wrapPluginVisitorMethod
            );

            (0, _traverse().default)(file.ast, visitor, file.scope);

            for (const [plugin, pass] of passPairs) {
              const fn = plugin.post;

              if (fn) {
                const result = fn.call(pass, file);
                yield* [];

                if (isThenable(result)) {
                  throw new Error(
                    `You appear to be using an plugin with an async .post, ` +
                      `which your current version of Babel does not support. ` +
                      `If you're using a published plugin, you may need to upgrade ` +
                      `your @babel/core version.`
                  );
                }
              }
            }
          }
        }

        function isThenable(val) {
          return (
            !!val &&
            (typeof val === "object" || typeof val === "function") &&
            !!val.then &&
            typeof val.then === "function"
          );
        }
      },
      {
        "./block-hoist-plugin": 30,
        "./file/generate": 32,
        "./normalize-file": 35,
        "./normalize-opts": 36,
        "./plugin-pass": 37,
        "@babel/traverse": 99,
      },
    ],
    35: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = normalizeFile;

        function _fs() {
          const data = _interopRequireDefault(require("fs"));

          _fs = function () {
            return data;
          };

          return data;
        }

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        function _debug() {
          const data = _interopRequireDefault(require("debug"));

          _debug = function () {
            return data;
          };

          return data;
        }

        function _cloneDeep() {
          const data = _interopRequireDefault(require("lodash/cloneDeep"));

          _cloneDeep = function () {
            return data;
          };

          return data;
        }

        function t() {
          const data = _interopRequireWildcard(require("@babel/types"));

          t = function () {
            return data;
          };

          return data;
        }

        function _convertSourceMap() {
          const data = _interopRequireDefault(require("convert-source-map"));

          _convertSourceMap = function () {
            return data;
          };

          return data;
        }

        var _file = _interopRequireDefault(require("./file/file"));

        var _parser = _interopRequireDefault(require("../parser"));

        function _getRequireWildcardCache() {
          if (typeof WeakMap !== "function") return null;
          var cache = new WeakMap();
          _getRequireWildcardCache = function () {
            return cache;
          };
          return cache;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== "object" && typeof obj !== "function")
          ) {
            return { default: obj };
          }
          var cache = _getRequireWildcardCache();
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        const debug = (0, _debug().default)("babel:transform:file");
        const LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;

        function* normalizeFile(pluginPasses, options, code, ast) {
          code = `${code || ""}`;

          if (ast) {
            if (ast.type === "Program") {
              ast = t().file(ast, [], []);
            } else if (ast.type !== "File") {
              throw new Error("AST root must be a Program or File node");
            }

            const { cloneInputAst } = options;

            if (cloneInputAst) {
              ast = (0, _cloneDeep().default)(ast);
            }
          } else {
            ast = yield* (0, _parser.default)(pluginPasses, options, code);
          }

          let inputMap = null;

          if (options.inputSourceMap !== false) {
            if (typeof options.inputSourceMap === "object") {
              inputMap = _convertSourceMap().default.fromObject(
                options.inputSourceMap
              );
            }

            if (!inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);

              if (lastComment) {
                try {
                  inputMap =
                    _convertSourceMap().default.fromComment(lastComment);
                } catch (err) {
                  debug("discarding unknown inline input sourcemap", err);
                }
              }
            }

            if (!inputMap) {
              const lastComment = extractComments(
                EXTERNAL_SOURCEMAP_REGEX,
                ast
              );

              if (typeof options.filename === "string" && lastComment) {
                try {
                  const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);

                  const inputMapContent = _fs().default.readFileSync(
                    _path().default.resolve(
                      _path().default.dirname(options.filename),
                      match[1]
                    )
                  );

                  if (
                    inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD
                  ) {
                    debug("skip merging input map > 1 MB");
                  } else {
                    inputMap =
                      _convertSourceMap().default.fromJSON(inputMapContent);
                  }
                } catch (err) {
                  debug("discarding unknown file input sourcemap", err);
                }
              } else if (lastComment) {
                debug("discarding un-loadable file input sourcemap");
              }
            }
          }

          return new _file.default(options, {
            code,
            ast,
            inputMap,
          });
        }

        const INLINE_SOURCEMAP_REGEX =
          /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/;
        const EXTERNAL_SOURCEMAP_REGEX =
          /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;

        function extractCommentsFromList(regex, comments, lastComment) {
          if (comments) {
            comments = comments.filter(({ value }) => {
              if (regex.test(value)) {
                lastComment = value;
                return false;
              }

              return true;
            });
          }

          return [comments, lastComment];
        }

        function extractComments(regex, ast) {
          let lastComment = null;
          t().traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(
              regex,
              node.leadingComments,
              lastComment
            );
            [node.innerComments, lastComment] = extractCommentsFromList(
              regex,
              node.innerComments,
              lastComment
            );
            [node.trailingComments, lastComment] = extractCommentsFromList(
              regex,
              node.trailingComments,
              lastComment
            );
          });
          return lastComment;
        }
      },
      {
        "../parser": 24,
        "./file/file": 31,
        "@babel/types": 168,
        "convert-source-map": 246,
        debug: 38,
        fs: 238,
        "lodash/cloneDeep": 396,
        path: 424,
      },
    ],
    36: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = normalizeOptions;

        function _path() {
          const data = _interopRequireDefault(require("path"));

          _path = function () {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function normalizeOptions(config) {
          const {
            filename,
            cwd,
            filenameRelative = typeof filename === "string"
              ? _path().default.relative(cwd, filename)
              : "unknown",
            sourceType = "module",
            inputSourceMap,
            sourceMaps = !!inputSourceMap,
            moduleRoot,
            sourceRoot = moduleRoot,
            sourceFileName = _path().default.basename(filenameRelative),
            comments = true,
            compact = "auto",
          } = config.options;
          const opts = config.options;
          const options = Object.assign({}, opts, {
            parserOpts: Object.assign(
              {
                sourceType:
                  _path().default.extname(filenameRelative) === ".mjs"
                    ? "module"
                    : sourceType,
                sourceFileName: filename,
                plugins: [],
              },
              opts.parserOpts
            ),
            generatorOpts: Object.assign(
              {
                filename,
                auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
                auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
                retainLines: opts.retainLines,
                comments,
                shouldPrintComment: opts.shouldPrintComment,
                compact,
                minified: opts.minified,
                sourceMaps,
                sourceRoot,
                sourceFileName,
              },
              opts.generatorOpts
            ),
          });

          for (const plugins of config.passes) {
            for (const plugin of plugins) {
              if (plugin.manipulateOptions) {
                plugin.manipulateOptions(options, options.parserOpts);
              }
            }
          }

          return options;
        }
      },
      { path: 424 },
    ],
    37: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        class PluginPass {
          constructor(file, key, options) {
            this._map = new Map();
            this.key = void 0;
            this.file = void 0;
            this.opts = void 0;
            this.cwd = void 0;
            this.filename = void 0;
            this.key = key;
            this.file = file;
            this.opts = options || {};
            this.cwd = file.opts.cwd;
            this.filename = file.opts.filename;
          }

          set(key, val) {
            this._map.set(key, val);
          }

          get(key) {
            return this._map.get(key);
          }

          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }

          addHelper(name) {
            return this.file.addHelper(name);
          }

          addImport() {
            return this.file.addImport();
          }

          getModuleName() {
            return this.file.getModuleName();
          }

          buildCodeFrameError(node, msg, Error) {
            return this.file.buildCodeFrameError(node, msg, Error);
          }
        }

        exports.default = PluginPass;
      },
      {},
    ],
    38: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            /* eslint-env browser */

            /**
             * This is the web browser implementation of `debug()`.
             */

            exports.formatArgs = formatArgs;
            exports.save = save;
            exports.load = load;
            exports.useColors = useColors;
            exports.storage = localstorage();
            exports.destroy = (() => {
              let warned = false;

              return () => {
                if (!warned) {
                  warned = true;
                  console.warn(
                    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                  );
                }
              };
            })();

            /**
             * Colors.
             */

            exports.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ];

            /**
             * Currently only WebKit-based Web Inspectors, Firefox >= v31,
             * and the Firebug extension (any Firefox version) are known
             * to support "%c" CSS customizations.
             *
             * TODO: add a `localStorage` variable to explicitly enable/disable colors
             */

            // eslint-disable-next-line complexity
            function useColors() {
              // NB: In an Electron preload script, document will be defined but not fully
              // initialized. Since we know we're in Chrome, we'll just detect this case
              // explicitly
              if (
                typeof window !== "undefined" &&
                window.process &&
                (window.process.type === "renderer" || window.process.__nwjs)
              ) {
                return true;
              }

              // Internet Explorer and Edge do not support colors.
              if (
                typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              ) {
                return false;
              }

              // Is webkit? http://stackoverflow.com/a/16459606/376773
              // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
              return (
                (typeof document !== "undefined" &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                // Is firebug? http://stackoverflow.com/a/398120/376773
                (typeof window !== "undefined" &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                // Is firefox >= v31?
                // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
                (typeof navigator !== "undefined" &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                  parseInt(RegExp.$1, 10) >= 31) ||
                // Double check webkit in userAgent just in case we are in a worker
                (typeof navigator !== "undefined" &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }

            /**
             * Colorize log arguments if enabled.
             *
             * @api public
             */

            function formatArgs(args) {
              args[0] =
                (this.useColors ? "%c" : "") +
                this.namespace +
                (this.useColors ? " %c" : " ") +
                args[0] +
                (this.useColors ? "%c " : " ") +
                "+" +
                module.exports.humanize(this.diff);

              if (!this.useColors) {
                return;
              }

              const c = "color: " + this.color;
              args.splice(1, 0, c, "color: inherit");

              // The final "%c" is somewhat tricky, because there could be other
              // arguments passed either before or after the %c, so we need to
              // figure out the correct index to insert the CSS into
              let index = 0;
              let lastC = 0;
              args[0].replace(/%[a-zA-Z%]/g, (match) => {
                if (match === "%%") {
                  return;
                }
                index++;
                if (match === "%c") {
                  // We only are interested in the *last* %c
                  // (the user may have provided their own)
                  lastC = index;
                }
              });

              args.splice(lastC, 0, c);
            }

            /**
             * Invokes `console.debug()` when available.
             * No-op when `console.debug` is not a "function".
             * If `console.debug` is not available, falls back
             * to `console.log`.
             *
             * @api public
             */
            exports.log = console.debug || console.log || (() => {});

            /**
             * Save `namespaces`.
             *
             * @param {String} namespaces
             * @api private
             */
            function save(namespaces) {
              try {
                if (namespaces) {
                  exports.storage.setItem("debug", namespaces);
                } else {
                  exports.storage.removeItem("debug");
                }
              } catch (error) {
                // Swallow
                // XXX (@Qix-) should we be logging these?
              }
            }

            /**
             * Load `namespaces`.
             *
             * @return {String} returns the previously persisted debug modes
             * @api private
             */
            function load() {
              let r;
              try {
                r = exports.storage.getItem("debug");
              } catch (error) {
                // Swallow
                // XXX (@Qix-) should we be logging these?
              }

              // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
              if (!r && typeof process !== "undefined" && "env" in process) {
                r = process.env.DEBUG;
              }

              return r;
            }

            /**
             * Localstorage attempts to return the localstorage.
             *
             * This is necessary because safari throws
             * when a user disables cookies/localstorage
             * and you attempt to access it.
             *
             * @return {LocalStorage}
             * @api private
             */

            function localstorage() {
              try {
                // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
                // The Browser also has localStorage in the global context.
                return localStorage;
              } catch (error) {
                // Swallow
                // XXX (@Qix-) should we be logging these?
              }
            }

            module.exports = require("./common")(exports);

            const { formatters } = module.exports;

            /**
             * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
             */

            formatters.j = function (v) {
              try {
                return JSON.stringify(v);
              } catch (error) {
                return "[UnexpectedJSONParseError]: " + error.message;
              }
            };
          }).call(this);
        }).call(this, require("_process"));
      },
      { "./common": 39, _process: 425 },
    ],
    39: [
      function (require, module, exports) {
        /**
         * This is the common logic for both the Node.js and web browser
         * implementations of `debug()`.
         */

        function setup(env) {
          createDebug.debug = createDebug;
          createDebug.default = createDebug;
          createDebug.coerce = coerce;
          createDebug.disable = disable;
          createDebug.enable = enable;
          createDebug.enabled = enabled;
          createDebug.humanize = require("ms");
          createDebug.destroy = destroy;

          Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          });

          /**
           * The currently active debug mode names, and names to skip.
           */

          createDebug.names = [];
          createDebug.skips = [];

          /**
           * Map of special "%n" handling functions, for the debug "format" argument.
           *
           * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
           */
          createDebug.formatters = {};

          /**
           * Selects a color for a debug namespace
           * @param {String} namespace The namespace string for the for the debug instance to be colored
           * @return {Number|String} An ANSI color code for the given namespace
           * @api private
           */
          function selectColor(namespace) {
            let hash = 0;

            for (let i = 0; i < namespace.length; i++) {
              hash = (hash << 5) - hash + namespace.charCodeAt(i);
              hash |= 0; // Convert to 32bit integer
            }

            return createDebug.colors[
              Math.abs(hash) % createDebug.colors.length
            ];
          }
          createDebug.selectColor = selectColor;

          /**
           * Create a debugger with the given `namespace`.
           *
           * @param {String} namespace
           * @return {Function}
           * @api public
           */
          function createDebug(namespace) {
            let prevTime;
            let enableOverride = null;
            let namespacesCache;
            let enabledCache;

            function debug(...args) {
              // Disabled?
              if (!debug.enabled) {
                return;
              }

              const self = debug;

              // Set `diff` timestamp
              const curr = Number(new Date());
              const ms = curr - (prevTime || curr);
              self.diff = ms;
              self.prev = prevTime;
              self.curr = curr;
              prevTime = curr;

              args[0] = createDebug.coerce(args[0]);

              if (typeof args[0] !== "string") {
                // Anything else let's inspect with %O
                args.unshift("%O");
              }

              // Apply any `formatters` transformations
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") {
                  return "%";
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                  const val = args[index];
                  match = formatter.call(self, val);

                  // Now we need to remove `args[index]` since it's inlined in the `format`
                  args.splice(index, 1);
                  index--;
                }
                return match;
              });

              // Apply env-specific formatting (colors, etc.)
              createDebug.formatArgs.call(self, args);

              const logFn = self.log || createDebug.log;
              logFn.apply(self, args);
            }

            debug.namespace = namespace;
            debug.useColors = createDebug.useColors();
            debug.color = createDebug.selectColor(namespace);
            debug.extend = extend;
            debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

            Object.defineProperty(debug, "enabled", {
              enumerable: true,
              configurable: false,
              get: () => {
                if (enableOverride !== null) {
                  return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                  namespacesCache = createDebug.namespaces;
                  enabledCache = createDebug.enabled(namespace);
                }

                return enabledCache;
              },
              set: (v) => {
                enableOverride = v;
              },
            });

            // Env-specific initialization logic for debug instances
            if (typeof createDebug.init === "function") {
              createDebug.init(debug);
            }

            return debug;
          }

          function extend(namespace, delimiter) {
            const newDebug = createDebug(
              this.namespace +
                (typeof delimiter === "undefined" ? ":" : delimiter) +
                namespace
            );
            newDebug.log = this.log;
            return newDebug;
          }

          /**
           * Enables a debug mode by namespaces. This can include modes
           * separated by a colon and wildcards.
           *
           * @param {String} namespaces
           * @api public
           */
          function enable(namespaces) {
            createDebug.save(namespaces);
            createDebug.namespaces = namespaces;

            createDebug.names = [];
            createDebug.skips = [];

            let i;
            const split = (
              typeof namespaces === "string" ? namespaces : ""
            ).split(/[\s,]+/);
            const len = split.length;

            for (i = 0; i < len; i++) {
              if (!split[i]) {
                // ignore empty strings
                continue;
              }

              namespaces = split[i].replace(/\*/g, ".*?");

              if (namespaces[0] === "-") {
                createDebug.skips.push(
                  new RegExp("^" + namespaces.substr(1) + "$")
                );
              } else {
                createDebug.names.push(new RegExp("^" + namespaces + "$"));
              }
            }
          }

          /**
           * Disable debug output.
           *
           * @return {String} namespaces
           * @api public
           */
          function disable() {
            const namespaces = [
              ...createDebug.names.map(toNamespace),
              ...createDebug.skips
                .map(toNamespace)
                .map((namespace) => "-" + namespace),
            ].join(",");
            createDebug.enable("");
            return namespaces;
          }

          /**
           * Returns true if the given mode name is enabled, false otherwise.
           *
           * @param {String} name
           * @return {Boolean}
           * @api public
           */
          function enabled(name) {
            if (name[name.length - 1] === "*") {
              return true;
            }

            let i;
            let len;

            for (i = 0, len = createDebug.skips.length; i < len; i++) {
              if (createDebug.skips[i].test(name)) {
                return false;
              }
            }

            for (i = 0, len = createDebug.names.length; i < len; i++) {
              if (createDebug.names[i].test(name)) {
                return true;
              }
            }

            return false;
          }

          /**
           * Convert regexp to namespace
           *
           * @param {RegExp} regxep
           * @return {String} namespace
           * @api private
           */
          function toNamespace(regexp) {
            return regexp
              .toString()
              .substring(2, regexp.toString().length - 2)
              .replace(/\.\*\?$/, "*");
          }

          /**
           * Coerce `val`.
           *
           * @param {Mixed} val
           * @return {Mixed}
           * @api private
           */
          function coerce(val) {
            if (val instanceof Error) {
              return val.stack || val.message;
            }
            return val;
          }

          /**
           * XXX DO NOT USE. This is a temporary stub function.
           * XXX It WILL be removed in the next major release.
           */
          function destroy() {
            console.warn(
              "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
            );
          }

          createDebug.enable(createDebug.load());

          return createDebug;
        }

        module.exports = setup;
      },
      { ms: 40 },
    ],
    40: [
      function (require, module, exports) {
        /**
         * Helpers.
         */

        var s = 1000;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;

        /**
         * Parse or format the given `val`.
         *
         * Options:
         *
         *  - `long` verbose formatting [false]
         *
         * @param {String|Number} val
         * @param {Object} [options]
         * @throws {Error} throw an error if val is not a non-empty string or a number
         * @return {String|Number}
         * @api public
         */

        module.exports = function (val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse(val);
          } else if (type === "number" && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error(
            "val is not a non-empty string or a valid number. val=" +
              JSON.stringify(val)
          );
        };

        /**
         * Parse the given `str` and return milliseconds.
         *
         * @param {String} str
         * @return {Number}
         * @api private
         */

        function parse(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match =
            /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
              str
            );
          if (!match) {
            return;
          }
          var n = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;
            case "weeks":
            case "week":
            case "w":
              return n * w;
            case "days":
            case "day":
            case "d":
              return n * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;
            default:
              return undefined;
          }
        }

        /**
         * Short format for `ms`.
         *
         * @param {Number} ms
         * @return {String}
         * @api private
         */

        function fmtShort(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return Math.round(ms / d) + "d";
          }
          if (msAbs >= h) {
            return Math.round(ms / h) + "h";
          }
          if (msAbs >= m) {
            return Math.round(ms / m) + "m";
          }
          if (msAbs >= s) {
            return Math.round(ms / s) + "s";
          }
          return ms + "ms";
        }

        /**
         * Long format for `ms`.
         *
         * @param {Number} ms
         * @return {String}
         * @api private
         */

        function fmtLong(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return plural(ms, msAbs, d, "day");
          }
          if (msAbs >= h) {
            return plural(ms, msAbs, h, "hour");
          }
          if (msAbs >= m) {
            return plural(ms, msAbs, m, "minute");
          }
          if (msAbs >= s) {
            return plural(ms, msAbs, s, "second");
          }
          return ms + " ms";
        }

        /**
         * Pluralization helper.
         */

        function plural(ms, msAbs, n, name) {
          var isPlural = msAbs >= n * 1.5;
          return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
        }
      },
      {},
    ],
    41: [
      function (require, module, exports) {
        module.exports = {
          _args: [["@babel/core@7.12.13", "/home/ccuser"]],
          _from: "@babel/core@7.12.13",
          _id: "@babel/core@7.12.13",
          _inBundle: false,
          _integrity:
            "sha512-BQKE9kXkPlXHPeqissfxo0lySWJcYdEP0hdtJOH/iJfDdhOCcgtNCjftCJg3qqauB4h+lz2N6ixM++b9DN1Tcw==",
          _location: "/@babel/core",
          _phantomChildren: {},
          _requested: {
            type: "version",
            registry: true,
            raw: "@babel/core@7.12.13",
            name: "@babel/core",
            escapedName: "@babel%2fcore",
            scope: "@babel",
            rawSpec: "7.12.13",
            saveSpec: null,
            fetchSpec: "7.12.13",
          },
          _requiredBy: [
            "/",
            "/@jest/transform",
            "/@svgr/plugin-jsx",
            "/@svgr/webpack",
            "/fbjs-scripts",
            "/istanbul-lib-instrument",
            "/jest-circus/@jest/transform",
            "/jest-circus/jest-config",
            "/jest-config",
            "/metro",
            "/metro-babel-register",
            "/metro-babel-transformer",
            "/metro-react-native-babel-transformer",
            "/workbox-build",
          ],
          _resolved:
            "https://registry.npmjs.org/@babel/core/-/core-7.12.13.tgz",
          _spec: "7.12.13",
          _where: "/home/ccuser",
          author: {
            name: "Sebastian McKenzie",
            email: "sebmck@gmail.com",
          },
          browser: {
            "./lib/config/files/index.js":
              "./lib/config/files/index-browser.js",
            "./lib/transform-file.js": "./lib/transform-file-browser.js",
            "./src/config/files/index.js":
              "./src/config/files/index-browser.js",
            "./src/transform-file.js": "./src/transform-file-browser.js",
          },
          bugs: {
            url: "https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22pkg%3A%20core%22+is%3Aopen",
          },
          dependencies: {
            "@babel/code-frame": "^7.12.13",
            "@babel/generator": "^7.12.13",
            "@babel/helper-module-transforms": "^7.12.13",
            "@babel/helpers": "^7.12.13",
            "@babel/parser": "^7.12.13",
            "@babel/template": "^7.12.13",
            "@babel/traverse": "^7.12.13",
            "@babel/types": "^7.12.13",
            "convert-source-map": "^1.7.0",
            debug: "^4.1.0",
            gensync: "^1.0.0-beta.1",
            json5: "^2.1.2",
            lodash: "^4.17.19",
            semver: "^5.4.1",
            "source-map": "^0.5.0",
          },
          description: "Babel compiler core.",
          devDependencies: {
            "@babel/helper-transform-fixture-test-runner": "7.12.13",
          },
          engines: {
            node: ">=6.9.0",
          },
          funding: {
            type: "opencollective",
            url: "https://opencollective.com/babel",
          },
          homepage: "https://babel.dev/docs/en/next/babel-core",
          keywords: [
            "6to5",
            "babel",
            "classes",
            "const",
            "es6",
            "harmony",
            "let",
            "modules",
            "transpile",
            "transpiler",
            "var",
            "babel-core",
            "compiler",
          ],
          license: "MIT",
          main: "lib/index.js",
          name: "@babel/core",
          publishConfig: {
            access: "public",
          },
          repository: {
            type: "git",
            url: "git+https://github.com/babel/babel.git",
            directory: "packages/babel-core",
          },
          version: "7.12.13",
        };
      },
      {},
    ],
    42: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;
        const SPACES_RE = /^[ \t]+$/;

        class Buffer {
          constructor(map) {
            this._map = null;
            this._buf = "";
            this._last = 0;
            this._queue = [];
            this._position = {
              line: 1,
              column: 0,
            };
            this._sourcePosition = {
              identifierName: null,
              line: null,
              column: null,
              filename: null,
            };
            this._disallowedPop = null;
            this._map = map;
          }

          get() {
            this._flush();

            const map = this._map;
            const result = {
              code: this._buf.trimRight(),
              map: null,
              rawMappings: map == null ? void 0 : map.getRawMappings(),
            };

            if (map) {
              Object.defineProperty(result, "map", {
                configurable: true,
                enumerable: true,

                get() {
                  return (this.map = map.get());
                },

                set(value) {
                  Object.defineProperty(this, "map", {
                    value,
                    writable: true,
                  });
                },
              });
            }

            return result;
          }

          append(str) {
            this._flush();

            const { line, column, filename, identifierName, force } =
              this._sourcePosition;

            this._append(str, line, column, identifierName, filename, force);
          }

          queue(str) {
            if (str === "\n") {
              while (
                this._queue.length > 0 &&
                SPACES_RE.test(this._queue[0][0])
              ) {
                this._queue.shift();
              }
            }

            const { line, column, filename, identifierName, force } =
              this._sourcePosition;

            this._queue.unshift([
              str,
              line,
              column,
              identifierName,
              filename,
              force,
            ]);
          }

          _flush() {
            let item;

            while ((item = this._queue.pop())) {
              this._append(...item);
            }
          }

          _append(str, line, column, identifierName, filename, force) {
            this._buf += str;
            this._last = str.charCodeAt(str.length - 1);
            let i = str.indexOf("\n");
            let last = 0;

            if (i !== 0) {
              this._mark(line, column, identifierName, filename, force);
            }

            while (i !== -1) {
              this._position.line++;
              this._position.column = 0;
              last = i + 1;

              if (last < str.length) {
                this._mark(++line, 0, identifierName, filename, force);
              }

              i = str.indexOf("\n", last);
            }

            this._position.column += str.length - last;
          }

          _mark(line, column, identifierName, filename, force) {
            var _this$_map;

            (_this$_map = this._map) == null
              ? void 0
              : _this$_map.mark(
                  this._position.line,
                  this._position.column,
                  line,
                  column,
                  identifierName,
                  filename,
                  force
                );
          }

          removeTrailingNewline() {
            if (this._queue.length > 0 && this._queue[0][0] === "\n") {
              this._queue.shift();
            }
          }

          removeLastSemicolon() {
            if (this._queue.length > 0 && this._queue[0][0] === ";") {
              this._queue.shift();
            }
          }

          getLastChar() {
            let last;

            if (this._queue.length > 0) {
              const str = this._queue[0][0];
              last = str.charCodeAt(0);
            } else {
              last = this._last;
            }

            return last;
          }

          endsWithCharAndNewline() {
            const queue = this._queue;

            if (queue.length > 0) {
              const last = queue[0][0];
              const lastCp = last.charCodeAt(0);
              if (lastCp !== 10) return;

              if (queue.length > 1) {
                const secondLast = queue[1][0];
                return secondLast.charCodeAt(0);
              } else {
                return this._last;
              }
            }
          }

          hasContent() {
            return this._queue.length > 0 || !!this._last;
          }

          exactSource(loc, cb) {
            this.source("start", loc, true);
            cb();
            this.source("end", loc);

            this._disallowPop("start", loc);
          }

          source(prop, loc, force) {
            if (prop && !loc) return;

            this._normalizePosition(prop, loc, this._sourcePosition, force);
          }

          withSource(prop, loc, cb) {
            if (!this._map) return cb();
            const originalLine = this._sourcePosition.line;
            const originalColumn = this._sourcePosition.column;
            const originalFilename = this._sourcePosition.filename;
            const originalIdentifierName = this._sourcePosition.identifierName;
            this.source(prop, loc);
            cb();

            if (
              (!this._sourcePosition.force ||
                this._sourcePosition.line !== originalLine ||
                this._sourcePosition.column !== originalColumn ||
                this._sourcePosition.filename !== originalFilename) &&
              (!this._disallowedPop ||
                this._disallowedPop.line !== originalLine ||
                this._disallowedPop.column !== originalColumn ||
                this._disallowedPop.filename !== originalFilename)
            ) {
              this._sourcePosition.line = originalLine;
              this._sourcePosition.column = originalColumn;
              this._sourcePosition.filename = originalFilename;
              this._sourcePosition.identifierName = originalIdentifierName;
              this._sourcePosition.force = false;
              this._disallowedPop = null;
            }
          }

          _disallowPop(prop, loc) {
            if (prop && !loc) return;
            this._disallowedPop = this._normalizePosition(prop, loc);
          }

          _normalizePosition(prop, loc, targetObj, force) {
            const pos = loc ? loc[prop] : null;

            if (targetObj === undefined) {
              targetObj = {
                identifierName: null,
                line: null,
                column: null,
                filename: null,
                force: false,
              };
            }

            const origLine = targetObj.line;
            const origColumn = targetObj.column;
            const origFilename = targetObj.filename;
            targetObj.identifierName =
              (prop === "start" &&
                (loc == null ? void 0 : loc.identifierName)) ||
              null;
            targetObj.line = pos == null ? void 0 : pos.line;
            targetObj.column = pos == null ? void 0 : pos.column;
            targetObj.filename = loc == null ? void 0 : loc.filename;

            if (
              force ||
              targetObj.line !== origLine ||
              targetObj.column !== origColumn ||
              targetObj.filename !== origFilename
            ) {
              targetObj.force = force;
            }

            return targetObj;
          }

          getCurrentColumn() {
            const extra = this._queue.reduce((acc, item) => item[0] + acc, "");

            const lastIndex = extra.lastIndexOf("\n");
            return lastIndex === -1
              ? this._position.column + extra.length
              : extra.length - 1 - lastIndex;
          }

          getCurrentLine() {
            const extra = this._queue.reduce((acc, item) => item[0] + acc, "");

            let count = 0;

            for (let i = 0; i < extra.length; i++) {
              if (extra[i] === "\n") count++;
            }

            return this._position.line + count;
          }
        }

        exports.default = Buffer;
      },
      {},
    ],
    43: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.File = File;
        exports.Program = Program;
        exports.BlockStatement = BlockStatement;
        exports.Directive = Directive;
        exports.DirectiveLiteral = DirectiveLiteral;
        exports.InterpreterDirective = InterpreterDirective;
        exports.Placeholder = Placeholder;

        var t = require("@babel/types");

        function File(node) {
          if (node.program) {
            this.print(node.program.interpreter, node);
          }

          this.print(node.program, node);
        }

        function Program(node) {
          this.printInnerComments(node, false);
          this.printSequence(node.directives, node);
          if (node.directives && node.directives.length) this.newline();
          this.printSequence(node.body, node);
        }

        function BlockStatement(node) {
          var _node$directives;

          this.token("{");
          this.printInnerComments(node);
          const hasDirectives =
            (_node$directives = node.directives) == null
              ? void 0
              : _node$directives.length;

          if (node.body.length || hasDirectives) {
            this.newline();
            this.printSequence(node.directives, node, {
              indent: true,
            });
            if (hasDirectives) this.newline();
            this.printSequence(node.body, node, {
              indent: true,
            });
            this.removeTrailingNewline();
            this.source("end", node.loc);
            if (!this.endsWith(10)) this.newline();
            this.rightBrace();
          } else {
            this.source("end", node.loc);
            this.token("}");
          }
        }

        function Directive(node) {
          this.print(node.value, node);
          this.semicolon();
        }

        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
        const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;

        function DirectiveLiteral(node) {
          const raw = this.getPossibleRaw(node);

          if (raw != null) {
            this.token(raw);
            return;
          }

          const { value } = node;

          if (!unescapedDoubleQuoteRE.test(value)) {
            this.token(`"${value}"`);
          } else if (!unescapedSingleQuoteRE.test(value)) {
            this.token(`'${value}'`);
          } else {
            throw new Error(
              "Malformed AST: it is not possible to print a directive containing" +
                " both unescaped single and double quotes."
            );
          }
        }

        function InterpreterDirective(node) {
          this.token(`#!${node.value}\n`);
        }

        function Placeholder(node) {
          this.token("%%");
          this.print(node.name);
          this.token("%%");

          if (node.expectedNode === "Statement") {
            this.semicolon();
          }
        }
      },
      { "@babel/types": 168 },
    ],
    44: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
        exports.ClassBody = ClassBody;
        exports.ClassProperty = ClassProperty;
        exports.ClassPrivateProperty = ClassPrivateProperty;
        exports.ClassMethod = ClassMethod;
        exports.ClassPrivateMethod = ClassPrivateMethod;
        exports._classMethodHead = _classMethodHead;
        exports.StaticBlock = StaticBlock;

        var t = require("@babel/types");

        const { isExportDefaultDeclaration, isExportNamedDeclaration } = t;

        function ClassDeclaration(node, parent) {
          if (
            !this.format.decoratorsBeforeExport ||
            (!isExportDefaultDeclaration(parent) &&
              !isExportNamedDeclaration(parent))
          ) {
            this.printJoin(node.decorators, node);
          }

          if (node.declare) {
            this.word("declare");
            this.space();
          }

          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          this.word("class");

          if (node.id) {
            this.space();
            this.print(node.id, node);
          }

          this.print(node.typeParameters, node);

          if (node.superClass) {
            this.space();
            this.word("extends");
            this.space();
            this.print(node.superClass, node);
            this.print(node.superTypeParameters, node);
          }

          if (node.implements) {
            this.space();
            this.word("implements");
            this.space();
            this.printList(node.implements, node);
          }

          this.space();
          this.print(node.body, node);
        }

        function ClassBody(node) {
          this.token("{");
          this.printInnerComments(node);

          if (node.body.length === 0) {
            this.token("}");
          } else {
            this.newline();
            this.indent();
            this.printSequence(node.body, node);
            this.dedent();
            if (!this.endsWith(10)) this.newline();
            this.rightBrace();
          }
        }

        function ClassProperty(node) {
          this.printJoin(node.decorators, node);
          this.source("end", node.key.loc);
          this.tsPrintClassMemberModifiers(node, true);

          if (node.computed) {
            this.token("[");
            this.print(node.key, node);
            this.token("]");
          } else {
            this._variance(node);

            this.print(node.key, node);
          }

          if (node.optional) {
            this.token("?");
          }

          if (node.definite) {
            this.token("!");
          }

          this.print(node.typeAnnotation, node);

          if (node.value) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.value, node);
          }

          this.semicolon();
        }

        function ClassPrivateProperty(node) {
          this.printJoin(node.decorators, node);

          if (node.static) {
            this.word("static");
            this.space();
          }

          this.print(node.key, node);
          this.print(node.typeAnnotation, node);

          if (node.value) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.value, node);
          }

          this.semicolon();
        }

        function ClassMethod(node) {
          this._classMethodHead(node);

          this.space();
          this.print(node.body, node);
        }

        function ClassPrivateMethod(node) {
          this._classMethodHead(node);

          this.space();
          this.print(node.body, node);
        }

        function _classMethodHead(node) {
          this.printJoin(node.decorators, node);
          this.source("end", node.key.loc);
          this.tsPrintClassMemberModifiers(node, false);

          this._methodHead(node);
        }

        function StaticBlock(node) {
          this.word("static");
          this.space();
          this.token("{");

          if (node.body.length === 0) {
            this.token("}");
          } else {
            this.newline();
            this.printSequence(node.body, node, {
              indent: true,
            });
            this.rightBrace();
          }
        }
      },
      { "@babel/types": 168 },
    ],
    45: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.UnaryExpression = UnaryExpression;
        exports.DoExpression = DoExpression;
        exports.ParenthesizedExpression = ParenthesizedExpression;
        exports.UpdateExpression = UpdateExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.NewExpression = NewExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.ThisExpression = ThisExpression;
        exports.Super = Super;
        exports.Decorator = Decorator;
        exports.OptionalMemberExpression = OptionalMemberExpression;
        exports.OptionalCallExpression = OptionalCallExpression;
        exports.CallExpression = CallExpression;
        exports.Import = Import;
        exports.EmptyStatement = EmptyStatement;
        exports.ExpressionStatement = ExpressionStatement;
        exports.AssignmentPattern = AssignmentPattern;
        exports.LogicalExpression =
          exports.BinaryExpression =
          exports.AssignmentExpression =
            AssignmentExpression;
        exports.BindExpression = BindExpression;
        exports.MemberExpression = MemberExpression;
        exports.MetaProperty = MetaProperty;
        exports.PrivateName = PrivateName;
        exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
        exports.ModuleExpression = ModuleExpression;
        exports.AwaitExpression = exports.YieldExpression = void 0;

        var t = require("@babel/types");

        var n = require("../node");

        const {
          isCallExpression,
          isLiteral,
          isMemberExpression,
          isNewExpression,
        } = t;

        function UnaryExpression(node) {
          if (
            node.operator === "void" ||
            node.operator === "delete" ||
            node.operator === "typeof" ||
            node.operator === "throw"
          ) {
            this.word(node.operator);
            this.space();
          } else {
            this.token(node.operator);
          }

          this.print(node.argument, node);
        }

        function DoExpression(node) {
          if (node.async) {
            this.word("async");
            this.space();
          }

          this.word("do");
          this.space();
          this.print(node.body, node);
        }

        function ParenthesizedExpression(node) {
          this.token("(");
          this.print(node.expression, node);
          this.token(")");
        }

        function UpdateExpression(node) {
          if (node.prefix) {
            this.token(node.operator);
            this.print(node.argument, node);
          } else {
            this.startTerminatorless(true);
            this.print(node.argument, node);
            this.endTerminatorless();
            this.token(node.operator);
          }
        }

        function ConditionalExpression(node) {
          this.print(node.test, node);
          this.space();
          this.token("?");
          this.space();
          this.print(node.consequent, node);
          this.space();
          this.token(":");
          this.space();
          this.print(node.alternate, node);
        }

        function NewExpression(node, parent) {
          this.word("new");
          this.space();
          this.print(node.callee, node);

          if (
            this.format.minified &&
            node.arguments.length === 0 &&
            !node.optional &&
            !isCallExpression(parent, {
              callee: node,
            }) &&
            !isMemberExpression(parent) &&
            !isNewExpression(parent)
          ) {
            return;
          }

          this.print(node.typeArguments, node);
          this.print(node.typeParameters, node);

          if (node.optional) {
            this.token("?.");
          }

          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function SequenceExpression(node) {
          this.printList(node.expressions, node);
        }

        function ThisExpression() {
          this.word("this");
        }

        function Super() {
          this.word("super");
        }

        function Decorator(node) {
          this.token("@");
          this.print(node.expression, node);
          this.newline();
        }

        function OptionalMemberExpression(node) {
          this.print(node.object, node);

          if (!node.computed && isMemberExpression(node.property)) {
            throw new TypeError(
              "Got a MemberExpression for MemberExpression property"
            );
          }

          let computed = node.computed;

          if (
            isLiteral(node.property) &&
            typeof node.property.value === "number"
          ) {
            computed = true;
          }

          if (node.optional) {
            this.token("?.");
          }

          if (computed) {
            this.token("[");
            this.print(node.property, node);
            this.token("]");
          } else {
            if (!node.optional) {
              this.token(".");
            }

            this.print(node.property, node);
          }
        }

        function OptionalCallExpression(node) {
          this.print(node.callee, node);
          this.print(node.typeArguments, node);
          this.print(node.typeParameters, node);

          if (node.optional) {
            this.token("?.");
          }

          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function CallExpression(node) {
          this.print(node.callee, node);
          this.print(node.typeArguments, node);
          this.print(node.typeParameters, node);
          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function Import() {
          this.word("import");
        }

        function buildYieldAwait(keyword) {
          return function (node) {
            this.word(keyword);

            if (node.delegate) {
              this.token("*");
            }

            if (node.argument) {
              this.space();
              const terminatorState = this.startTerminatorless();
              this.print(node.argument, node);
              this.endTerminatorless(terminatorState);
            }
          };
        }

        const YieldExpression = buildYieldAwait("yield");
        exports.YieldExpression = YieldExpression;
        const AwaitExpression = buildYieldAwait("await");
        exports.AwaitExpression = AwaitExpression;

        function EmptyStatement() {
          this.semicolon(true);
        }

        function ExpressionStatement(node) {
          this.print(node.expression, node);
          this.semicolon();
        }

        function AssignmentPattern(node) {
          this.print(node.left, node);
          if (node.left.optional) this.token("?");
          this.print(node.left.typeAnnotation, node);
          this.space();
          this.token("=");
          this.space();
          this.print(node.right, node);
        }

        function AssignmentExpression(node, parent) {
          const parens =
            this.inForStatementInitCounter &&
            node.operator === "in" &&
            !n.needsParens(node, parent);

          if (parens) {
            this.token("(");
          }

          this.print(node.left, node);
          this.space();

          if (node.operator === "in" || node.operator === "instanceof") {
            this.word(node.operator);
          } else {
            this.token(node.operator);
          }

          this.space();
          this.print(node.right, node);

          if (parens) {
            this.token(")");
          }
        }

        function BindExpression(node) {
          this.print(node.object, node);
          this.token("::");
          this.print(node.callee, node);
        }

        function MemberExpression(node) {
          this.print(node.object, node);

          if (!node.computed && isMemberExpression(node.property)) {
            throw new TypeError(
              "Got a MemberExpression for MemberExpression property"
            );
          }

          let computed = node.computed;

          if (
            isLiteral(node.property) &&
            typeof node.property.value === "number"
          ) {
            computed = true;
          }

          if (computed) {
            this.token("[");
            this.print(node.property, node);
            this.token("]");
          } else {
            this.token(".");
            this.print(node.property, node);
          }
        }

        function MetaProperty(node) {
          this.print(node.meta, node);
          this.token(".");
          this.print(node.property, node);
        }

        function PrivateName(node) {
          this.token("#");
          this.print(node.id, node);
        }

        function V8IntrinsicIdentifier(node) {
          this.token("%");
          this.word(node.name);
        }

        function ModuleExpression(node) {
          this.word("module");
          this.space();
          this.token("{");

          if (node.body.body.length === 0) {
            this.token("}");
          } else {
            this.newline();
            this.printSequence(node.body.body, node, {
              indent: true,
            });
            this.rightBrace();
          }
        }
      },
      { "../node": 56, "@babel/types": 168 },
    ],
    46: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.AnyTypeAnnotation = AnyTypeAnnotation;
        exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
        exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
        exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
        exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
        exports.DeclareClass = DeclareClass;
        exports.DeclareFunction = DeclareFunction;
        exports.InferredPredicate = InferredPredicate;
        exports.DeclaredPredicate = DeclaredPredicate;
        exports.DeclareInterface = DeclareInterface;
        exports.DeclareModule = DeclareModule;
        exports.DeclareModuleExports = DeclareModuleExports;
        exports.DeclareTypeAlias = DeclareTypeAlias;
        exports.DeclareOpaqueType = DeclareOpaqueType;
        exports.DeclareVariable = DeclareVariable;
        exports.DeclareExportDeclaration = DeclareExportDeclaration;
        exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
        exports.EnumDeclaration = EnumDeclaration;
        exports.EnumBooleanBody = EnumBooleanBody;
        exports.EnumNumberBody = EnumNumberBody;
        exports.EnumStringBody = EnumStringBody;
        exports.EnumSymbolBody = EnumSymbolBody;
        exports.EnumDefaultedMember = EnumDefaultedMember;
        exports.EnumBooleanMember = EnumBooleanMember;
        exports.EnumNumberMember = EnumNumberMember;
        exports.EnumStringMember = EnumStringMember;
        exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
        exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
        exports.FunctionTypeParam = FunctionTypeParam;
        exports.GenericTypeAnnotation =
          exports.ClassImplements =
          exports.InterfaceExtends =
            InterfaceExtends;
        exports._interfaceish = _interfaceish;
        exports._variance = _variance;
        exports.InterfaceDeclaration = InterfaceDeclaration;
        exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
        exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
        exports.MixedTypeAnnotation = MixedTypeAnnotation;
        exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
        exports.NullableTypeAnnotation = NullableTypeAnnotation;
        exports.NumberTypeAnnotation = NumberTypeAnnotation;
        exports.StringTypeAnnotation = StringTypeAnnotation;
        exports.ThisTypeAnnotation = ThisTypeAnnotation;
        exports.TupleTypeAnnotation = TupleTypeAnnotation;
        exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
        exports.TypeAlias = TypeAlias;
        exports.TypeAnnotation = TypeAnnotation;
        exports.TypeParameterDeclaration = exports.TypeParameterInstantiation =
          TypeParameterInstantiation;
        exports.TypeParameter = TypeParameter;
        exports.OpaqueType = OpaqueType;
        exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
        exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
        exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
        exports.ObjectTypeIndexer = ObjectTypeIndexer;
        exports.ObjectTypeProperty = ObjectTypeProperty;
        exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
        exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
        exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
        exports.UnionTypeAnnotation = UnionTypeAnnotation;
        exports.TypeCastExpression = TypeCastExpression;
        exports.Variance = Variance;
        exports.VoidTypeAnnotation = VoidTypeAnnotation;
        exports.IndexedAccessType = IndexedAccessType;
        exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
        Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _types2.NumericLiteral;
          },
        });
        Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _types2.StringLiteral;
          },
        });

        var t = require("@babel/types");

        var _modules = require("./modules");

        var _types2 = require("./types");

        const { isDeclareExportDeclaration, isStatement } = t;

        function AnyTypeAnnotation() {
          this.word("any");
        }

        function ArrayTypeAnnotation(node) {
          this.print(node.elementType, node);
          this.token("[");
          this.token("]");
        }

        function BooleanTypeAnnotation() {
          this.word("boolean");
        }

        function BooleanLiteralTypeAnnotation(node) {
          this.word(node.value ? "true" : "false");
        }

        function NullLiteralTypeAnnotation() {
          this.word("null");
        }

        function DeclareClass(node, parent) {
          if (!isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("class");
          this.space();

          this._interfaceish(node);
        }

        function DeclareFunction(node, parent) {
          if (!isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("function");
          this.space();
          this.print(node.id, node);
          this.print(node.id.typeAnnotation.typeAnnotation, node);

          if (node.predicate) {
            this.space();
            this.print(node.predicate, node);
          }

          this.semicolon();
        }

        function InferredPredicate() {
          this.token("%");
          this.word("checks");
        }

        function DeclaredPredicate(node) {
          this.token("%");
          this.word("checks");
          this.token("(");
          this.print(node.value, node);
          this.token(")");
        }

        function DeclareInterface(node) {
          this.word("declare");
          this.space();
          this.InterfaceDeclaration(node);
        }

        function DeclareModule(node) {
          this.word("declare");
          this.space();
          this.word("module");
          this.space();
          this.print(node.id, node);
          this.space();
          this.print(node.body, node);
        }

        function DeclareModuleExports(node) {
          this.word("declare");
          this.space();
          this.word("module");
          this.token(".");
          this.word("exports");
          this.print(node.typeAnnotation, node);
        }

        function DeclareTypeAlias(node) {
          this.word("declare");
          this.space();
          this.TypeAlias(node);
        }

        function DeclareOpaqueType(node, parent) {
          if (!isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.OpaqueType(node);
        }

        function DeclareVariable(node, parent) {
          if (!isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("var");
          this.space();
          this.print(node.id, node);
          this.print(node.id.typeAnnotation, node);
          this.semicolon();
        }

        function DeclareExportDeclaration(node) {
          this.word("declare");
          this.space();
          this.word("export");
          this.space();

          if (node.default) {
            this.word("default");
            this.space();
          }

          FlowExportDeclaration.apply(this, arguments);
        }

        function DeclareExportAllDeclaration() {
          this.word("declare");
          this.space();

          _modules.ExportAllDeclaration.apply(this, arguments);
        }

        function EnumDeclaration(node) {
          const { id, body } = node;
          this.word("enum");
          this.space();
          this.print(id, node);
          this.print(body, node);
        }

        function enumExplicitType(context, name, hasExplicitType) {
          if (hasExplicitType) {
            context.space();
            context.word("of");
            context.space();
            context.word(name);
          }

          context.space();
        }

        function enumBody(context, node) {
          const { members } = node;
          context.token("{");
          context.indent();
          context.newline();

          for (const member of members) {
            context.print(member, node);
            context.newline();
          }

          if (node.hasUnknownMembers) {
            context.token("...");
            context.newline();
          }

          context.dedent();
          context.token("}");
        }

        function EnumBooleanBody(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType);
          enumBody(this, node);
        }

        function EnumNumberBody(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType);
          enumBody(this, node);
        }

        function EnumStringBody(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType);
          enumBody(this, node);
        }

        function EnumSymbolBody(node) {
          enumExplicitType(this, "symbol", true);
          enumBody(this, node);
        }

        function EnumDefaultedMember(node) {
          const { id } = node;
          this.print(id, node);
          this.token(",");
        }

        function enumInitializedMember(context, node) {
          const { id, init } = node;
          context.print(id, node);
          context.space();
          context.token("=");
          context.space();
          context.print(init, node);
          context.token(",");
        }

        function EnumBooleanMember(node) {
          enumInitializedMember(this, node);
        }

        function EnumNumberMember(node) {
          enumInitializedMember(this, node);
        }

        function EnumStringMember(node) {
          enumInitializedMember(this, node);
        }

        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar, node);
            if (!isStatement(declar)) this.semicolon();
          } else {
            this.token("{");

            if (node.specifiers.length) {
              this.space();
              this.printList(node.specifiers, node);
              this.space();
            }

            this.token("}");

            if (node.source) {
              this.space();
              this.word("from");
              this.space();
              this.print(node.source, node);
            }

            this.semicolon();
          }
        }

        function ExistsTypeAnnotation() {
          this.token("*");
        }

        function FunctionTypeAnnotation(node, parent) {
          this.print(node.typeParameters, node);
          this.token("(");

          if (node.this) {
            this.word("this");
            this.token(":");
            this.space();
            this.print(node.this.typeAnnotation, node);

            if (node.params.length || node.rest) {
              this.token(",");
              this.space();
            }
          }

          this.printList(node.params, node);

          if (node.rest) {
            if (node.params.length) {
              this.token(",");
              this.space();
            }

            this.token("...");
            this.print(node.rest, node);
          }

          this.token(")");

          if (
            parent.type === "ObjectTypeCallProperty" ||
            parent.type === "DeclareFunction" ||
            (parent.type === "ObjectTypeProperty" && parent.method)
          ) {
            this.token(":");
          } else {
            this.space();
            this.token("=>");
          }

          this.space();
          this.print(node.returnType, node);
        }

        function FunctionTypeParam(node) {
          this.print(node.name, node);
          if (node.optional) this.token("?");

          if (node.name) {
            this.token(":");
            this.space();
          }

          this.print(node.typeAnnotation, node);
        }

        function InterfaceExtends(node) {
          this.print(node.id, node);
          this.print(node.typeParameters, node);
        }

        function _interfaceish(node) {
          var _node$extends;

          this.print(node.id, node);
          this.print(node.typeParameters, node);

          if ((_node$extends = node.extends) != null && _node$extends.length) {
            this.space();
            this.word("extends");
            this.space();
            this.printList(node.extends, node);
          }

          if (node.mixins && node.mixins.length) {
            this.space();
            this.word("mixins");
            this.space();
            this.printList(node.mixins, node);
          }

          if (node.implements && node.implements.length) {
            this.space();
            this.word("implements");
            this.space();
            this.printList(node.implements, node);
          }

          this.space();
          this.print(node.body, node);
        }

        function _variance(node) {
          if (node.variance) {
            if (node.variance.kind === "plus") {
              this.token("+");
            } else if (node.variance.kind === "minus") {
              this.token("-");
            }
          }
        }

        function InterfaceDeclaration(node) {
          this.word("interface");
          this.space();

          this._interfaceish(node);
        }

        function andSeparator() {
          this.space();
          this.token("&");
          this.space();
        }

        function InterfaceTypeAnnotation(node) {
          this.word("interface");

          if (node.extends && node.extends.length) {
            this.space();
            this.word("extends");
            this.space();
            this.printList(node.extends, node);
          }

          this.space();
          this.print(node.body, node);
        }

        function IntersectionTypeAnnotation(node) {
          this.printJoin(node.types, node, {
            separator: andSeparator,
          });
        }

        function MixedTypeAnnotation() {
          this.word("mixed");
        }

        function EmptyTypeAnnotation() {
          this.word("empty");
        }

        function NullableTypeAnnotation(node) {
          this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function NumberTypeAnnotation() {
          this.word("number");
        }

        function StringTypeAnnotation() {
          this.word("string");
        }

        function ThisTypeAnnotation() {
          this.word("this");
        }

        function TupleTypeAnnotation(node) {
          this.token("[");
          this.printList(node.types, node);
          this.token("]");
        }

        function TypeofTypeAnnotation(node) {
          this.word("typeof");
          this.space();
          this.print(node.argument, node);
        }

        function TypeAlias(node) {
          this.word("type");
          this.space();
          this.print(node.id, node);
          this.print(node.typeParameters, node);
          this.space();
          this.token("=");
          this.space();
          this.print(node.right, node);
          this.semicolon();
        }

        function TypeAnnotation(node) {
          this.token(":");
          this.space();
          if (node.optional) this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function TypeParameterInstantiation(node) {
          this.token("<");
          this.printList(node.params, node, {});
          this.token(">");
        }

        function TypeParameter(node) {
          this._variance(node);

          this.word(node.name);

          if (node.bound) {
            this.print(node.bound, node);
          }

          if (node.default) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.default, node);
          }
        }

        function OpaqueType(node) {
          this.word("opaque");
          this.space();
          this.word("type");
          this.space();
          this.print(node.id, node);
          this.print(node.typeParameters, node);

          if (node.supertype) {
            this.token(":");
            this.space();
            this.print(node.supertype, node);
          }

          if (node.impltype) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.impltype, node);
          }

          this.semicolon();
        }

        function ObjectTypeAnnotation(node) {
          if (node.exact) {
            this.token("{|");
          } else {
            this.token("{");
          }

          const props = [
            ...node.properties,
            ...(node.callProperties || []),
            ...(node.indexers || []),
            ...(node.internalSlots || []),
          ];

          if (props.length) {
            this.space();
            this.printJoin(props, node, {
              addNewlines(leading) {
                if (leading && !props[0]) return 1;
              },

              indent: true,
              statement: true,
              iterator: () => {
                if (props.length !== 1 || node.inexact) {
                  this.token(",");
                  this.space();
                }
              },
            });
            this.space();
          }

          if (node.inexact) {
            this.indent();
            this.token("...");

            if (props.length) {
              this.newline();
            }

            this.dedent();
          }

          if (node.exact) {
            this.token("|}");
          } else {
            this.token("}");
          }
        }

        function ObjectTypeInternalSlot(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this.token("[");
          this.token("[");
          this.print(node.id, node);
          this.token("]");
          this.token("]");
          if (node.optional) this.token("?");

          if (!node.method) {
            this.token(":");
            this.space();
          }

          this.print(node.value, node);
        }

        function ObjectTypeCallProperty(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this.print(node.value, node);
        }

        function ObjectTypeIndexer(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this._variance(node);

          this.token("[");

          if (node.id) {
            this.print(node.id, node);
            this.token(":");
            this.space();
          }

          this.print(node.key, node);
          this.token("]");
          this.token(":");
          this.space();
          this.print(node.value, node);
        }

        function ObjectTypeProperty(node) {
          if (node.proto) {
            this.word("proto");
            this.space();
          }

          if (node.static) {
            this.word("static");
            this.space();
          }

          if (node.kind === "get" || node.kind === "set") {
            this.word(node.kind);
            this.space();
          }

          this._variance(node);

          this.print(node.key, node);
          if (node.optional) this.token("?");

          if (!node.method) {
            this.token(":");
            this.space();
          }

          this.print(node.value, node);
        }

        function ObjectTypeSpreadProperty(node) {
          this.token("...");
          this.print(node.argument, node);
        }

        function QualifiedTypeIdentifier(node) {
          this.print(node.qualification, node);
          this.token(".");
          this.print(node.id, node);
        }

        function SymbolTypeAnnotation() {
          this.word("symbol");
        }

        function orSeparator() {
          this.space();
          this.token("|");
          this.space();
        }

        function UnionTypeAnnotation(node) {
          this.printJoin(node.types, node, {
            separator: orSeparator,
          });
        }

        function TypeCastExpression(node) {
          this.token("(");
          this.print(node.expression, node);
          this.print(node.typeAnnotation, node);
          this.token(")");
        }

        function Variance(node) {
          if (node.kind === "plus") {
            this.token("+");
          } else {
            this.token("-");
          }
        }

        function VoidTypeAnnotation() {
          this.word("void");
        }

        function IndexedAccessType(node) {
          this.print(node.objectType, node);
          this.token("[");
          this.print(node.indexType, node);
          this.token("]");
        }

        function OptionalIndexedAccessType(node) {
          this.print(node.objectType, node);

          if (node.optional) {
            this.token("?.");
          }

          this.token("[");
          this.print(node.indexType, node);
          this.token("]");
        }
      },
      { "./modules": 50, "./types": 53, "@babel/types": 168 },
    ],
    47: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });

        var _templateLiterals = require("./template-literals");

        Object.keys(_templateLiterals).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _templateLiterals[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _templateLiterals[key];
            },
          });
        });

        var _expressions = require("./expressions");

        Object.keys(_expressions).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _expressions[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _expressions[key];
            },
          });
        });

        var _statements = require("./statements");

        Object.keys(_statements).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _statements[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _statements[key];
            },
          });
        });

        var _classes = require("./classes");

        Object.keys(_classes).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _classes[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _classes[key];
            },
          });
        });

        var _methods = require("./methods");

        Object.keys(_methods).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _methods[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _methods[key];
            },
          });
        });

        var _modules = require("./modules");

        Object.keys(_modules).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _modules[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _modules[key];
            },
          });
        });

        var _types = require("./types");

        Object.keys(_types).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _types[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _types[key];
            },
          });
        });

        var _flow = require("./flow");

        Object.keys(_flow).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _flow[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _flow[key];
            },
          });
        });

        var _base = require("./base");

        Object.keys(_base).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _base[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _base[key];
            },
          });
        });

        var _jsx = require("./jsx");

        Object.keys(_jsx).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _jsx[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _jsx[key];
            },
          });
        });

        var _typescript = require("./typescript");

        Object.keys(_typescript).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (key in exports && exports[key] === _typescript[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _typescript[key];
            },
          });
        });
      },
      {
        "./base": 43,
        "./classes": 44,
        "./expressions": 45,
        "./flow": 46,
        "./jsx": 48,
        "./methods": 49,
        "./modules": 50,
        "./statements": 51,
        "./template-literals": 52,
        "./types": 53,
        "./typescript": 54,
      },
    ],
    48: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.JSXAttribute = JSXAttribute;
        exports.JSXIdentifier = JSXIdentifier;
        exports.JSXNamespacedName = JSXNamespacedName;
        exports.JSXMemberExpression = JSXMemberExpression;
        exports.JSXSpreadAttribute = JSXSpreadAttribute;
        exports.JSXExpressionContainer = JSXExpressionContainer;
        exports.JSXSpreadChild = JSXSpreadChild;
        exports.JSXText = JSXText;
        exports.JSXElement = JSXElement;
        exports.JSXOpeningElement = JSXOpeningElement;
        exports.JSXClosingElement = JSXClosingElement;
        exports.JSXEmptyExpression = JSXEmptyExpression;
        exports.JSXFragment = JSXFragment;
        exports.JSXOpeningFragment = JSXOpeningFragment;
        exports.JSXClosingFragment = JSXClosingFragment;

        var t = require("@babel/types");

        function JSXAttribute(node) {
          this.print(node.name, node);

          if (node.value) {
            this.token("=");
            this.print(node.value, node);
          }
        }

        function JSXIdentifier(node) {
          this.word(node.name);
        }

        function JSXNamespacedName(node) {
          this.print(node.namespace, node);
          this.token(":");
          this.print(node.name, node);
        }

        function JSXMemberExpression(node) {
          this.print(node.object, node);
          this.token(".");
          this.print(node.property, node);
        }

        function JSXSpreadAttribute(node) {
          this.token("{");
          this.token("...");
          this.print(node.argument, node);
          this.token("}");
        }

        function JSXExpressionContainer(node) {
          this.token("{");
          this.print(node.expression, node);
          this.token("}");
        }

        function JSXSpreadChild(node) {
          this.token("{");
          this.token("...");
          this.print(node.expression, node);
          this.token("}");
        }

        function JSXText(node) {
          const raw = this.getPossibleRaw(node);

          if (raw != null) {
            this.token(raw);
          } else {
            this.token(node.value);
          }
        }

        function JSXElement(node) {
          const open = node.openingElement;
          this.print(open, node);
          if (open.selfClosing) return;
          this.indent();

          for (const child of node.children) {
            this.print(child, node);
          }

          this.dedent();
          this.print(node.closingElement, node);
        }

        function spaceSeparator() {
          this.space();
        }

        function JSXOpeningElement(node) {
          this.token("<");
          this.print(node.name, node);
          this.print(node.typeParameters, node);

          if (node.attributes.length > 0) {
            this.space();
            this.printJoin(node.attributes, node, {
              separator: spaceSeparator,
            });
          }

          if (node.selfClosing) {
            this.space();
            this.token("/>");
          } else {
            this.token(">");
          }
        }

        function JSXClosingElement(node) {
          this.token("</");
          this.print(node.name, node);
          this.token(">");
        }

        function JSXEmptyExpression(node) {
          this.printInnerComments(node);
        }

        function JSXFragment(node) {
          this.print(node.openingFragment, node);
          this.indent();

          for (const child of node.children) {
            this.print(child, node);
          }

          this.dedent();
          this.print(node.closingFragment, node);
        }

        function JSXOpeningFragment() {
          this.token("<");
          this.token(">");
        }

        function JSXClosingFragment() {
          this.token("</");
          this.token(">");
        }
      },
      { "@babel/types": 168 },
    ],
    49: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports._params = _params;
        exports._parameters = _parameters;
        exports._param = _param;
        exports._methodHead = _methodHead;
        exports._predicate = _predicate;
        exports._functionHead = _functionHead;
        exports.FunctionDeclaration = exports.FunctionExpression =
          FunctionExpression;
        exports.ArrowFunctionExpression = ArrowFunctionExpression;

        var t = require("@babel/types");

        const { isIdentifier } = t;

        function _params(node) {
          this.print(node.typeParameters, node);
          this.token("(");

          this._parameters(node.params, node);

          this.token(")");
          this.print(node.returnType, node);
        }

        function _parameters(parameters, parent) {
          for (let i = 0; i < parameters.length; i++) {
            this._param(parameters[i], parent);

            if (i < parameters.length - 1) {
              this.token(",");
              this.space();
            }
          }
        }

        function _param(parameter, parent) {
          this.printJoin(parameter.decorators, parameter);
          this.print(parameter, parent);
          if (parameter.optional) this.token("?");
          this.print(parameter.typeAnnotation, parameter);
        }

        function _methodHead(node) {
          const kind = node.kind;
          const key = node.key;

          if (kind === "get" || kind === "set") {
            this.word(kind);
            this.space();
          }

          if (node.async) {
            this._catchUp("start", key.loc);

            this.word("async");
            this.space();
          }

          if (kind === "method" || kind === "init") {
            if (node.generator) {
              this.token("*");
            }
          }

          if (node.computed) {
            this.token("[");
            this.print(key, node);
            this.token("]");
          } else {
            this.print(key, node);
          }

          if (node.optional) {
            this.token("?");
          }

          this._params(node);
        }

        function _predicate(node) {
          if (node.predicate) {
            if (!node.returnType) {
              this.token(":");
            }

            this.space();
            this.print(node.predicate, node);
          }
        }

        function _functionHead(node) {
          if (node.async) {
            this.word("async");
            this.space();
          }

          this.word("function");
          if (node.generator) this.token("*");
          this.space();

          if (node.id) {
            this.print(node.id, node);
          }

          this._params(node);

          this._predicate(node);
        }

        function FunctionExpression(node) {
          this._functionHead(node);

          this.space();
          this.print(node.body, node);
        }

        function ArrowFunctionExpression(node) {
          if (node.async) {
            this.word("async");
            this.space();
          }

          const firstParam = node.params[0];

          if (
            !this.format.retainLines &&
            !this.format.auxiliaryCommentBefore &&
            !this.format.auxiliaryCommentAfter &&
            node.params.length === 1 &&
            isIdentifier(firstParam) &&
            !hasTypesOrComments(node, firstParam)
          ) {
            this.print(firstParam, node);
          } else {
            this._params(node);
          }

          this._predicate(node);

          this.space();
          this.token("=>");
          this.space();
          this.print(node.body, node);
        }

        function hasTypesOrComments(node, param) {
          var _param$leadingComment, _param$trailingCommen;

          return !!(
            node.typeParameters ||
            node.returnType ||
            node.predicate ||
            param.typeAnnotation ||
            param.optional ||
            ((_param$leadingComment = param.leadingComments) != null &&
              _param$leadingComment.length) ||
            ((_param$trailingCommen = param.trailingComments) != null &&
              _param$trailingCommen.length)
          );
        }
      },
      { "@babel/types": 168 },
    ],
    50: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ImportSpecifier = ImportSpecifier;
        exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
        exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
        exports.ExportSpecifier = ExportSpecifier;
        exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
        exports.ExportAllDeclaration = ExportAllDeclaration;
        exports.ExportNamedDeclaration = ExportNamedDeclaration;
        exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
        exports.ImportDeclaration = ImportDeclaration;
        exports.ImportAttribute = ImportAttribute;
        exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

        var t = require("@babel/types");

        const {
          isClassDeclaration,
          isExportDefaultSpecifier,
          isExportNamespaceSpecifier,
          isImportDefaultSpecifier,
          isImportNamespaceSpecifier,
          isStatement,
        } = t;

        function ImportSpecifier(node) {
          if (node.importKind === "type" || node.importKind === "typeof") {
            this.word(node.importKind);
            this.space();
          }

          this.print(node.imported, node);

          if (node.local && node.local.name !== node.imported.name) {
            this.space();
            this.word("as");
            this.space();
            this.print(node.local, node);
          }
        }

        function ImportDefaultSpecifier(node) {
          this.print(node.local, node);
        }

        function ExportDefaultSpecifier(node) {
          this.print(node.exported, node);
        }

        function ExportSpecifier(node) {
          this.print(node.local, node);

          if (node.exported && node.local.name !== node.exported.name) {
            this.space();
            this.word("as");
            this.space();
            this.print(node.exported, node);
          }
        }

        function ExportNamespaceSpecifier(node) {
          this.token("*");
          this.space();
          this.word("as");
          this.space();
          this.print(node.exported, node);
        }

        function ExportAllDeclaration(node) {
          this.word("export");
          this.space();

          if (node.exportKind === "type") {
            this.word("type");
            this.space();
          }

          this.token("*");
          this.space();
          this.word("from");
          this.space();
          this.print(node.source, node);
          this.printAssertions(node);
          this.semicolon();
        }

        function ExportNamedDeclaration(node) {
          if (
            this.format.decoratorsBeforeExport &&
            isClassDeclaration(node.declaration)
          ) {
            this.printJoin(node.declaration.decorators, node);
          }

          this.word("export");
          this.space();
          ExportDeclaration.apply(this, arguments);
        }

        function ExportDefaultDeclaration(node) {
          if (
            this.format.decoratorsBeforeExport &&
            isClassDeclaration(node.declaration)
          ) {
            this.printJoin(node.declaration.decorators, node);
          }

          this.word("export");
          this.space();
          this.word("default");
          this.space();
          ExportDeclaration.apply(this, arguments);
        }

        function ExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar, node);
            if (!isStatement(declar)) this.semicolon();
          } else {
            if (node.exportKind === "type") {
              this.word("type");
              this.space();
            }

            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;

            for (;;) {
              const first = specifiers[0];

              if (
                isExportDefaultSpecifier(first) ||
                isExportNamespaceSpecifier(first)
              ) {
                hasSpecial = true;
                this.print(specifiers.shift(), node);

                if (specifiers.length) {
                  this.token(",");
                  this.space();
                }
              } else {
                break;
              }
            }

            if (specifiers.length || (!specifiers.length && !hasSpecial)) {
              this.token("{");

              if (specifiers.length) {
                this.space();
                this.printList(specifiers, node);
                this.space();
              }

              this.token("}");
            }

            if (node.source) {
              this.space();
              this.word("from");
              this.space();
              this.print(node.source, node);
              this.printAssertions(node);
            }

            this.semicolon();
          }
        }

        function ImportDeclaration(node) {
          this.word("import");
          this.space();

          if (node.importKind === "type" || node.importKind === "typeof") {
            this.word(node.importKind);
            this.space();
          }

          const specifiers = node.specifiers.slice(0);

          if (specifiers != null && specifiers.length) {
            for (;;) {
              const first = specifiers[0];

              if (
                isImportDefaultSpecifier(first) ||
                isImportNamespaceSpecifier(first)
              ) {
                this.print(specifiers.shift(), node);

                if (specifiers.length) {
                  this.token(",");
                  this.space();
                }
              } else {
                break;
              }
            }

            if (specifiers.length) {
              this.token("{");
              this.space();
              this.printList(specifiers, node);
              this.space();
              this.token("}");
            }

            this.space();
            this.word("from");
            this.space();
          }

          this.print(node.source, node);
          this.printAssertions(node);
          {
            var _node$attributes;

            if (
              (_node$attributes = node.attributes) != null &&
              _node$attributes.length
            ) {
              this.space();
              this.word("with");
              this.space();
              this.printList(node.attributes, node);
            }
          }
          this.semicolon();
        }

        function ImportAttribute(node) {
          this.print(node.key);
          this.token(":");
          this.space();
          this.print(node.value);
        }

        function ImportNamespaceSpecifier(node) {
          this.token("*");
          this.space();
          this.word("as");
          this.space();
          this.print(node.local, node);
        }
      },
      { "@babel/types": 168 },
    ],
    51: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.WithStatement = WithStatement;
        exports.IfStatement = IfStatement;
        exports.ForStatement = ForStatement;
        exports.WhileStatement = WhileStatement;
        exports.DoWhileStatement = DoWhileStatement;
        exports.LabeledStatement = LabeledStatement;
        exports.TryStatement = TryStatement;
        exports.CatchClause = CatchClause;
        exports.SwitchStatement = SwitchStatement;
        exports.SwitchCase = SwitchCase;
        exports.DebuggerStatement = DebuggerStatement;
        exports.VariableDeclaration = VariableDeclaration;
        exports.VariableDeclarator = VariableDeclarator;
        exports.ThrowStatement =
          exports.BreakStatement =
          exports.ReturnStatement =
          exports.ContinueStatement =
          exports.ForOfStatement =
          exports.ForInStatement =
            void 0;

        var t = require("@babel/types");

        const { isFor, isForStatement, isIfStatement, isStatement } = t;

        function WithStatement(node) {
          this.word("with");
          this.space();
          this.token("(");
          this.print(node.object, node);
          this.token(")");
          this.printBlock(node);
        }

        function IfStatement(node) {
          this.word("if");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.space();
          const needsBlock =
            node.alternate && isIfStatement(getLastStatement(node.consequent));

          if (needsBlock) {
            this.token("{");
            this.newline();
            this.indent();
          }

          this.printAndIndentOnComments(node.consequent, node);

          if (needsBlock) {
            this.dedent();
            this.newline();
            this.token("}");
          }

          if (node.alternate) {
            if (this.endsWith(125)) this.space();
            this.word("else");
            this.space();
            this.printAndIndentOnComments(node.alternate, node);
          }
        }

        function getLastStatement(statement) {
          if (!isStatement(statement.body)) return statement;
          return getLastStatement(statement.body);
        }

        function ForStatement(node) {
          this.word("for");
          this.space();
          this.token("(");
          this.inForStatementInitCounter++;
          this.print(node.init, node);
          this.inForStatementInitCounter--;
          this.token(";");

          if (node.test) {
            this.space();
            this.print(node.test, node);
          }

          this.token(";");

          if (node.update) {
            this.space();
            this.print(node.update, node);
          }

          this.token(")");
          this.printBlock(node);
        }

        function WhileStatement(node) {
          this.word("while");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.printBlock(node);
        }

        const buildForXStatement = function (op) {
          return function (node) {
            this.word("for");
            this.space();

            if (op === "of" && node.await) {
              this.word("await");
              this.space();
            }

            this.token("(");
            this.print(node.left, node);
            this.space();
            this.word(op);
            this.space();
            this.print(node.right, node);
            this.token(")");
            this.printBlock(node);
          };
        };

        const ForInStatement = buildForXStatement("in");
        exports.ForInStatement = ForInStatement;
        const ForOfStatement = buildForXStatement("of");
        exports.ForOfStatement = ForOfStatement;

        function DoWhileStatement(node) {
          this.word("do");
          this.space();
          this.print(node.body, node);
          this.space();
          this.word("while");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.semicolon();
        }

        function buildLabelStatement(prefix, key = "label") {
          return function (node) {
            this.word(prefix);
            const label = node[key];

            if (label) {
              this.space();
              const isLabel = key == "label";
              const terminatorState = this.startTerminatorless(isLabel);
              this.print(label, node);
              this.endTerminatorless(terminatorState);
            }

            this.semicolon();
          };
        }

        const ContinueStatement = buildLabelStatement("continue");
        exports.ContinueStatement = ContinueStatement;
        const ReturnStatement = buildLabelStatement("return", "argument");
        exports.ReturnStatement = ReturnStatement;
        const BreakStatement = buildLabelStatement("break");
        exports.BreakStatement = BreakStatement;
        const ThrowStatement = buildLabelStatement("throw", "argument");
        exports.ThrowStatement = ThrowStatement;

        function LabeledStatement(node) {
          this.print(node.label, node);
          this.token(":");
          this.space();
          this.print(node.body, node);
        }

        function TryStatement(node) {
          this.word("try");
          this.space();
          this.print(node.block, node);
          this.space();

          if (node.handlers) {
            this.print(node.handlers[0], node);
          } else {
            this.print(node.handler, node);
          }

          if (node.finalizer) {
            this.space();
            this.word("finally");
            this.space();
            this.print(node.finalizer, node);
          }
        }

        function CatchClause(node) {
          this.word("catch");
          this.space();

          if (node.param) {
            this.token("(");
            this.print(node.param, node);
            this.print(node.param.typeAnnotation, node);
            this.token(")");
            this.space();
          }

          this.print(node.body, node);
        }

        function SwitchStatement(node) {
          this.word("switch");
          this.space();
          this.token("(");
          this.print(node.discriminant, node);
          this.token(")");
          this.space();
          this.token("{");
          this.printSequence(node.cases, node, {
            indent: true,

            addNewlines(leading, cas) {
              if (!leading && node.cases[node.cases.length - 1] === cas)
                return -1;
            },
          });
          this.token("}");
        }

        function SwitchCase(node) {
          if (node.test) {
            this.word("case");
            this.space();
            this.print(node.test, node);
            this.token(":");
          } else {
            this.word("default");
            this.token(":");
          }

          if (node.consequent.length) {
            this.newline();
            this.printSequence(node.consequent, node, {
              indent: true,
            });
          }
        }

        function DebuggerStatement() {
          this.word("debugger");
          this.semicolon();
        }

        function variableDeclarationIndent() {
          this.token(",");
          this.newline();

          if (this.endsWith(10)) {
            for (let i = 0; i < 4; i++) this.space(true);
          }
        }

        function constDeclarationIndent() {
          this.token(",");
          this.newline();

          if (this.endsWith(10)) {
            for (let i = 0; i < 6; i++) this.space(true);
          }
        }

        function VariableDeclaration(node, parent) {
          if (node.declare) {
            this.word("declare");
            this.space();
          }

          this.word(node.kind);
          this.space();
          let hasInits = false;

          if (!isFor(parent)) {
            for (const declar of node.declarations) {
              if (declar.init) {
                hasInits = true;
              }
            }
          }

          let separator;

          if (hasInits) {
            separator =
              node.kind === "const"
                ? constDeclarationIndent
                : variableDeclarationIndent;
          }

          this.printList(node.declarations, node, {
            separator,
          });

          if (isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node) return;
            } else {
              if (parent.left === node) return;
            }
          }

          this.semicolon();
        }

        function VariableDeclarator(node) {
          this.print(node.id, node);
          if (node.definite) this.token("!");
          this.print(node.id.typeAnnotation, node);

          if (node.init) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.init, node);
          }
        }
      },
      { "@babel/types": 168 },
    ],
    52: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.TaggedTemplateExpression = TaggedTemplateExpression;
        exports.TemplateElement = TemplateElement;
        exports.TemplateLiteral = TemplateLiteral;

        var t = require("@babel/types");

        function TaggedTemplateExpression(node) {
          this.print(node.tag, node);
          this.print(node.typeParameters, node);
          this.print(node.quasi, node);
        }

        function TemplateElement(node, parent) {
          const isFirst = parent.quasis[0] === node;
          const isLast = parent.quasis[parent.quasis.length - 1] === node;
          const value =
            (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
          this.token(value);
        }

        function TemplateLiteral(node) {
          const quasis = node.quasis;

          for (let i = 0; i < quasis.length; i++) {
            this.print(quasis[i], node);

            if (i + 1 < quasis.length) {
              this.print(node.expressions[i], node);
            }
          }
        }
      },
      { "@babel/types": 168 },
    ],
    53: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Identifier = Identifier;
        exports.ArgumentPlaceholder = ArgumentPlaceholder;
        exports.SpreadElement = exports.RestElement = RestElement;
        exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
        exports.ObjectMethod = ObjectMethod;
        exports.ObjectProperty = ObjectProperty;
        exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
        exports.RecordExpression = RecordExpression;
        exports.TupleExpression = TupleExpression;
        exports.RegExpLiteral = RegExpLiteral;
        exports.BooleanLiteral = BooleanLiteral;
        exports.NullLiteral = NullLiteral;
        exports.NumericLiteral = NumericLiteral;
        exports.StringLiteral = StringLiteral;
        exports.BigIntLiteral = BigIntLiteral;
        exports.DecimalLiteral = DecimalLiteral;
        exports.TopicReference = TopicReference;
        exports.PipelineTopicExpression = PipelineTopicExpression;
        exports.PipelineBareFunction = PipelineBareFunction;
        exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;

        var t = require("@babel/types");

        var _jsesc = require("jsesc");

        const { isAssignmentPattern, isIdentifier } = t;

        function Identifier(node) {
          this.exactSource(node.loc, () => {
            this.word(node.name);
          });
        }

        function ArgumentPlaceholder() {
          this.token("?");
        }

        function RestElement(node) {
          this.token("...");
          this.print(node.argument, node);
        }

        function ObjectExpression(node) {
          const props = node.properties;
          this.token("{");
          this.printInnerComments(node);

          if (props.length) {
            this.space();
            this.printList(props, node, {
              indent: true,
              statement: true,
            });
            this.space();
          }

          this.token("}");
        }

        function ObjectMethod(node) {
          this.printJoin(node.decorators, node);

          this._methodHead(node);

          this.space();
          this.print(node.body, node);
        }

        function ObjectProperty(node) {
          this.printJoin(node.decorators, node);

          if (node.computed) {
            this.token("[");
            this.print(node.key, node);
            this.token("]");
          } else {
            if (
              isAssignmentPattern(node.value) &&
              isIdentifier(node.key) &&
              node.key.name === node.value.left.name
            ) {
              this.print(node.value, node);
              return;
            }

            this.print(node.key, node);

            if (
              node.shorthand &&
              isIdentifier(node.key) &&
              isIdentifier(node.value) &&
              node.key.name === node.value.name
            ) {
              return;
            }
          }

          this.token(":");
          this.space();
          this.print(node.value, node);
        }

        function ArrayExpression(node) {
          const elems = node.elements;
          const len = elems.length;
          this.token("[");
          this.printInnerComments(node);

          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];

            if (elem) {
              if (i > 0) this.space();
              this.print(elem, node);
              if (i < len - 1) this.token(",");
            } else {
              this.token(",");
            }
          }

          this.token("]");
        }

        function RecordExpression(node) {
          const props = node.properties;
          let startToken;
          let endToken;

          if (this.format.recordAndTupleSyntaxType === "bar") {
            startToken = "{|";
            endToken = "|}";
          } else if (this.format.recordAndTupleSyntaxType === "hash") {
            startToken = "#{";
            endToken = "}";
          } else {
            throw new Error(
              `The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(
                this.format.recordAndTupleSyntaxType
              )} received).`
            );
          }

          this.token(startToken);
          this.printInnerComments(node);

          if (props.length) {
            this.space();
            this.printList(props, node, {
              indent: true,
              statement: true,
            });
            this.space();
          }

          this.token(endToken);
        }

        function TupleExpression(node) {
          const elems = node.elements;
          const len = elems.length;
          let startToken;
          let endToken;

          if (this.format.recordAndTupleSyntaxType === "bar") {
            startToken = "[|";
            endToken = "|]";
          } else if (this.format.recordAndTupleSyntaxType === "hash") {
            startToken = "#[";
            endToken = "]";
          } else {
            throw new Error(
              `${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`
            );
          }

          this.token(startToken);
          this.printInnerComments(node);

          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];

            if (elem) {
              if (i > 0) this.space();
              this.print(elem, node);
              if (i < len - 1) this.token(",");
            }
          }

          this.token(endToken);
        }

        function RegExpLiteral(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }

        function BooleanLiteral(node) {
          this.word(node.value ? "true" : "false");
        }

        function NullLiteral() {
          this.word("null");
        }

        function NumericLiteral(node) {
          const raw = this.getPossibleRaw(node);
          const opts = this.format.jsescOption;
          const value = node.value + "";

          if (opts.numbers) {
            this.number(_jsesc(node.value, opts));
          } else if (raw == null) {
            this.number(value);
          } else if (this.format.minified) {
            this.number(raw.length < value.length ? raw : value);
          } else {
            this.number(raw);
          }
        }

        function StringLiteral(node) {
          const raw = this.getPossibleRaw(node);

          if (!this.format.minified && raw != null) {
            this.token(raw);
            return;
          }

          const val = _jsesc(
            node.value,
            Object.assign(
              this.format.jsescOption,
              this.format.jsonCompatibleStrings && {
                json: true,
              }
            )
          );

          return this.token(val);
        }

        function BigIntLiteral(node) {
          const raw = this.getPossibleRaw(node);

          if (!this.format.minified && raw != null) {
            this.word(raw);
            return;
          }

          this.word(node.value + "n");
        }

        function DecimalLiteral(node) {
          const raw = this.getPossibleRaw(node);

          if (!this.format.minified && raw != null) {
            this.word(raw);
            return;
          }

          this.word(node.value + "m");
        }

        function TopicReference() {
          const { topicToken } = this.format;

          switch (topicToken) {
            case "#":
              this.token("#");
              break;

            default: {
              const givenTopicTokenJSON = JSON.stringify(topicToken);
              const message = `The "topicToken" generator option must be "#" (${givenTopicTokenJSON} received instead).`;
              throw new Error(message);
            }
          }
        }

        function PipelineTopicExpression(node) {
          this.print(node.expression, node);
        }

        function PipelineBareFunction(node) {
          this.print(node.callee, node);
        }

        function PipelinePrimaryTopicReference() {
          this.token("#");
        }
      },
      { "@babel/types": 168, jsesc: 254 },
    ],
    54: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.TSTypeAnnotation = TSTypeAnnotation;
        exports.TSTypeParameterDeclaration =
          exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
        exports.TSTypeParameter = TSTypeParameter;
        exports.TSParameterProperty = TSParameterProperty;
        exports.TSDeclareFunction = TSDeclareFunction;
        exports.TSDeclareMethod = TSDeclareMethod;
        exports.TSQualifiedName = TSQualifiedName;
        exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
        exports.TSConstructSignatureDeclaration =
          TSConstructSignatureDeclaration;
        exports.TSPropertySignature = TSPropertySignature;
        exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
        exports.TSMethodSignature = TSMethodSignature;
        exports.TSIndexSignature = TSIndexSignature;
        exports.TSAnyKeyword = TSAnyKeyword;
        exports.TSBigIntKeyword = TSBigIntKeyword;
        exports.TSUnknownKeyword = TSUnknownKeyword;
        exports.TSNumberKeyword = TSNumberKeyword;
        exports.TSObjectKeyword = TSObjectKeyword;
        exports.TSBooleanKeyword = TSBooleanKeyword;
        exports.TSStringKeyword = TSStringKeyword;
        exports.TSSymbolKeyword = TSSymbolKeyword;
        exports.TSVoidKeyword = TSVoidKeyword;
        exports.TSUndefinedKeyword = TSUndefinedKeyword;
        exports.TSNullKeyword = TSNullKeyword;
        exports.TSNeverKeyword = TSNeverKeyword;
        exports.TSIntrinsicKeyword = TSIntrinsicKeyword;
        exports.TSThisType = TSThisType;
        exports.TSFunctionType = TSFunctionType;
        exports.TSConstructorType = TSConstructorType;
        exports.tsPrintFunctionOrConstructorType =
          tsPrintFunctionOrConstructorType;
        exports.TSTypeReference = TSTypeReference;
        exports.TSTypePredicate = TSTypePredicate;
        exports.TSTypeQuery = TSTypeQuery;
        exports.TSTypeLiteral = TSTypeLiteral;
        exports.tsPrintTypeLiteralOrInterfaceBody =
          tsPrintTypeLiteralOrInterfaceBody;
        exports.tsPrintBraced = tsPrintBraced;
        exports.TSArrayType = TSArrayType;
        exports.TSTupleType = TSTupleType;
        exports.TSOptionalType = TSOptionalType;
        exports.TSRestType = TSRestType;
        exports.TSNamedTupleMember = TSNamedTupleMember;
        exports.TSUnionType = TSUnionType;
        exports.TSIntersectionType = TSIntersectionType;
        exports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;
        exports.TSConditionalType = TSConditionalType;
        exports.TSInferType = TSInferType;
        exports.TSParenthesizedType = TSParenthesizedType;
        exports.TSTypeOperator = TSTypeOperator;
        exports.TSIndexedAccessType = TSIndexedAccessType;
        exports.TSMappedType = TSMappedType;
        exports.TSLiteralType = TSLiteralType;
        exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
        exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
        exports.TSInterfaceBody = TSInterfaceBody;
        exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
        exports.TSAsExpression = TSAsExpression;
        exports.TSTypeAssertion = TSTypeAssertion;
        exports.TSEnumDeclaration = TSEnumDeclaration;
        exports.TSEnumMember = TSEnumMember;
        exports.TSModuleDeclaration = TSModuleDeclaration;
        exports.TSModuleBlock = TSModuleBlock;
        exports.TSImportType = TSImportType;
        exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
        exports.TSExternalModuleReference = TSExternalModuleReference;
        exports.TSNonNullExpression = TSNonNullExpression;
        exports.TSExportAssignment = TSExportAssignment;
        exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
        exports.tsPrintSignatureDeclarationBase =
          tsPrintSignatureDeclarationBase;
        exports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;

        var t = require("@babel/types");

        function TSTypeAnnotation(node) {
          this.token(":");
          this.space();
          if (node.optional) this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function TSTypeParameterInstantiation(node) {
          this.token("<");
          this.printList(node.params, node, {});
          this.token(">");
        }

        function TSTypeParameter(node) {
          this.word(node.name);

          if (node.constraint) {
            this.space();
            this.word("extends");
            this.space();
            this.print(node.constraint, node);
          }

          if (node.default) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.default, node);
          }
        }

        function TSParameterProperty(node) {
          if (node.accessibility) {
            this.word(node.accessibility);
            this.space();
          }

          if (node.readonly) {
            this.word("readonly");
            this.space();
          }

          this._param(node.parameter);
        }

        function TSDeclareFunction(node) {
          if (node.declare) {
            this.word("declare");
            this.space();
          }

          this._functionHead(node);

          this.token(";");
        }

        function TSDeclareMethod(node) {
          this._classMethodHead(node);

          this.token(";");
        }

        function TSQualifiedName(node) {
          this.print(node.left, node);
          this.token(".");
          this.print(node.right, node);
        }

        function TSCallSignatureDeclaration(node) {
          this.tsPrintSignatureDeclarationBase(node);
          this.token(";");
        }

        function TSConstructSignatureDeclaration(node) {
          this.word("new");
          this.space();
          this.tsPrintSignatureDeclarationBase(node);
          this.token(";");
        }

        function TSPropertySignature(node) {
          const { readonly, initializer } = node;

          if (readonly) {
            this.word("readonly");
            this.space();
          }

          this.tsPrintPropertyOrMethodName(node);
          this.print(node.typeAnnotation, node);

          if (initializer) {
            this.space();
            this.token("=");
            this.space();
            this.print(initializer, node);
          }

          this.token(";");
        }

        function tsPrintPropertyOrMethodName(node) {
          if (node.computed) {
            this.token("[");
          }

          this.print(node.key, node);

          if (node.computed) {
            this.token("]");
          }

          if (node.optional) {
            this.token("?");
          }
        }

        function TSMethodSignature(node) {
          const { kind } = node;

          if (kind === "set" || kind === "get") {
            this.word(kind);
            this.space();
          }

          this.tsPrintPropertyOrMethodName(node);
          this.tsPrintSignatureDeclarationBase(node);
          this.token(";");
        }

        function TSIndexSignature(node) {
          const { readonly, static: isStatic } = node;

          if (isStatic) {
            this.word("static");
            this.space();
          }

          if (readonly) {
            this.word("readonly");
            this.space();
          }

          this.token("[");

          this._parameters(node.parameters, node);

          this.token("]");
          this.print(node.typeAnnotation, node);
          this.token(";");
        }

        function TSAnyKeyword() {
          this.word("any");
        }

        function TSBigIntKeyword() {
          this.word("bigint");
        }

        function TSUnknownKeyword() {
          this.word("unknown");
        }

        function TSNumberKeyword() {
          this.word("number");
        }

        function TSObjectKeyword() {
          this.word("object");
        }

        function TSBooleanKeyword() {
          this.word("boolean");
        }

        function TSStringKeyword() {
          this.word("string");
        }

        function TSSymbolKeyword() {
          this.word("symbol");
        }

        function TSVoidKeyword() {
          this.word("void");
        }

        function TSUndefinedKeyword() {
          this.word("undefined");
        }

        function TSNullKeyword() {
          this.word("null");
        }

        function TSNeverKeyword() {
          this.word("never");
        }

        function TSIntrinsicKeyword() {
          this.word("intrinsic");
        }

        function TSThisType() {
          this.word("this");
        }

        function TSFunctionType(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }

        function TSConstructorType(node) {
          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          this.word("new");
          this.space();
          this.tsPrintFunctionOrConstructorType(node);
        }

        function tsPrintFunctionOrConstructorType(node) {
          const { typeParameters, parameters } = node;
          this.print(typeParameters, node);
          this.token("(");

          this._parameters(parameters, node);

          this.token(")");
          this.space();
          this.token("=>");
          this.space();
          this.print(node.typeAnnotation.typeAnnotation, node);
        }

        function TSTypeReference(node) {
          this.print(node.typeName, node);
          this.print(node.typeParameters, node);
        }

        function TSTypePredicate(node) {
          if (node.asserts) {
            this.word("asserts");
            this.space();
          }

          this.print(node.parameterName);

          if (node.typeAnnotation) {
            this.space();
            this.word("is");
            this.space();
            this.print(node.typeAnnotation.typeAnnotation);
          }
        }

        function TSTypeQuery(node) {
          this.word("typeof");
          this.space();
          this.print(node.exprName);
        }

        function TSTypeLiteral(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
        }

        function tsPrintTypeLiteralOrInterfaceBody(members, node) {
          this.tsPrintBraced(members, node);
        }

        function tsPrintBraced(members, node) {
          this.token("{");

          if (members.length) {
            this.indent();
            this.newline();

            for (const member of members) {
              this.print(member, node);
              this.newline();
            }

            this.dedent();
            this.rightBrace();
          } else {
            this.token("}");
          }
        }

        function TSArrayType(node) {
          this.print(node.elementType, node);
          this.token("[]");
        }

        function TSTupleType(node) {
          this.token("[");
          this.printList(node.elementTypes, node);
          this.token("]");
        }

        function TSOptionalType(node) {
          this.print(node.typeAnnotation, node);
          this.token("?");
        }

        function TSRestType(node) {
          this.token("...");
          this.print(node.typeAnnotation, node);
        }

        function TSNamedTupleMember(node) {
          this.print(node.label, node);
          if (node.optional) this.token("?");
          this.token(":");
          this.space();
          this.print(node.elementType, node);
        }

        function TSUnionType(node) {
          this.tsPrintUnionOrIntersectionType(node, "|");
        }

        function TSIntersectionType(node) {
          this.tsPrintUnionOrIntersectionType(node, "&");
        }

        function tsPrintUnionOrIntersectionType(node, sep) {
          this.printJoin(node.types, node, {
            separator() {
              this.space();
              this.token(sep);
              this.space();
            },
          });
        }

        function TSConditionalType(node) {
          this.print(node.checkType);
          this.space();
          this.word("extends");
          this.space();
          this.print(node.extendsType);
          this.space();
          this.token("?");
          this.space();
          this.print(node.trueType);
          this.space();
          this.token(":");
          this.space();
          this.print(node.falseType);
        }

        function TSInferType(node) {
          this.token("infer");
          this.space();
          this.print(node.typeParameter);
        }

        function TSParenthesizedType(node) {
          this.token("(");
          this.print(node.typeAnnotation, node);
          this.token(")");
        }

        function TSTypeOperator(node) {
          this.word(node.operator);
          this.space();
          this.print(node.typeAnnotation, node);
        }

        function TSIndexedAccessType(node) {
          this.print(node.objectType, node);
          this.token("[");
          this.print(node.indexType, node);
          this.token("]");
        }

        function TSMappedType(node) {
          const { nameType, optional, readonly, typeParameter } = node;
          this.token("{");
          this.space();

          if (readonly) {
            tokenIfPlusMinus(this, readonly);
            this.word("readonly");
            this.space();
          }

          this.token("[");
          this.word(typeParameter.name);
          this.space();
          this.word("in");
          this.space();
          this.print(typeParameter.constraint, typeParameter);

          if (nameType) {
            this.space();
            this.word("as");
            this.space();
            this.print(nameType, node);
          }

          this.token("]");

          if (optional) {
            tokenIfPlusMinus(this, optional);
            this.token("?");
          }

          this.token(":");
          this.space();
          this.print(node.typeAnnotation, node);
          this.space();
          this.token("}");
        }

        function tokenIfPlusMinus(self, tok) {
          if (tok !== true) {
            self.token(tok);
          }
        }

        function TSLiteralType(node) {
          this.print(node.literal, node);
        }

        function TSExpressionWithTypeArguments(node) {
          this.print(node.expression, node);
          this.print(node.typeParameters, node);
        }

        function TSInterfaceDeclaration(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;

          if (declare) {
            this.word("declare");
            this.space();
          }

          this.word("interface");
          this.space();
          this.print(id, node);
          this.print(typeParameters, node);

          if (extendz != null && extendz.length) {
            this.space();
            this.word("extends");
            this.space();
            this.printList(extendz, node);
          }

          this.space();
          this.print(body, node);
        }

        function TSInterfaceBody(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
        }

        function TSTypeAliasDeclaration(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;

          if (declare) {
            this.word("declare");
            this.space();
          }

          this.word("type");
          this.space();
          this.print(id, node);
          this.print(typeParameters, node);
          this.space();
          this.token("=");
          this.space();
          this.print(typeAnnotation, node);
          this.token(";");
        }

        function TSAsExpression(node) {
          const { expression, typeAnnotation } = node;
          this.print(expression, node);
          this.space();
          this.word("as");
          this.space();
          this.print(typeAnnotation, node);
        }

        function TSTypeAssertion(node) {
          const { typeAnnotation, expression } = node;
          this.token("<");
          this.print(typeAnnotation, node);
          this.token(">");
          this.space();
          this.print(expression, node);
        }

        function TSEnumDeclaration(node) {
          const { declare, const: isConst, id, members } = node;

          if (declare) {
            this.word("declare");
            this.space();
          }

          if (isConst) {
            this.word("const");
            this.space();
          }

          this.word("enum");
          this.space();
          this.print(id, node);
          this.space();
          this.tsPrintBraced(members, node);
        }

        function TSEnumMember(node) {
          const { id, initializer } = node;
          this.print(id, node);

          if (initializer) {
            this.space();
            this.token("=");
            this.space();
            this.print(initializer, node);
          }

          this.token(",");
        }

        function TSModuleDeclaration(node) {
          const { declare, id } = node;

          if (declare) {
            this.word("declare");
            this.space();
          }

          if (!node.global) {
            this.word(id.type === "Identifier" ? "namespace" : "module");
            this.space();
          }

          this.print(id, node);

          if (!node.body) {
            this.token(";");
            return;
          }

          let body = node.body;

          while (body.type === "TSModuleDeclaration") {
            this.token(".");
            this.print(body.id, body);
            body = body.body;
          }

          this.space();
          this.print(body, node);
        }

        function TSModuleBlock(node) {
          this.tsPrintBraced(node.body, node);
        }

        function TSImportType(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import");
          this.token("(");
          this.print(argument, node);
          this.token(")");

          if (qualifier) {
            this.token(".");
            this.print(qualifier, node);
          }

          if (typeParameters) {
            this.print(typeParameters, node);
          }
        }

        function TSImportEqualsDeclaration(node) {
          const { isExport, id, moduleReference } = node;

          if (isExport) {
            this.word("export");
            this.space();
          }

          this.word("import");
          this.space();
          this.print(id, node);
          this.space();
          this.token("=");
          this.space();
          this.print(moduleReference, node);
          this.token(";");
        }

        function TSExternalModuleReference(node) {
          this.token("require(");
          this.print(node.expression, node);
          this.token(")");
        }

        function TSNonNullExpression(node) {
          this.print(node.expression, node);
          this.token("!");
        }

        function TSExportAssignment(node) {
          this.word("export");
          this.space();
          this.token("=");
          this.space();
          this.print(node.expression, node);
          this.token(";");
        }

        function TSNamespaceExportDeclaration(node) {
          this.word("export");
          this.space();
          this.word("as");
          this.space();
          this.word("namespace");
          this.space();
          this.print(node.id, node);
        }

        function tsPrintSignatureDeclarationBase(node) {
          const { typeParameters, parameters } = node;
          this.print(typeParameters, node);
          this.token("(");

          this._parameters(parameters, node);

          this.token(")");
          this.print(node.typeAnnotation, node);
        }

        function tsPrintClassMemberModifiers(node, isField) {
          if (isField && node.declare) {
            this.word("declare");
            this.space();
          }

          if (node.accessibility) {
            this.word(node.accessibility);
            this.space();
          }

          if (node.static) {
            this.word("static");
            this.space();
          }

          if (node.override) {
            this.word("override");
            this.space();
          }

          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          if (isField && node.readonly) {
            this.word("readonly");
            this.space();
          }
        }
      },
      { "@babel/types": 168 },
    ],
    55: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = generate;
        exports.CodeGenerator = void 0;

        var _sourceMap = require("./source-map");

        var _printer = require("./printer");

        class Generator extends _printer.default {
          constructor(ast, opts = {}, code) {
            const format = normalizeOptions(code, opts);
            const map = opts.sourceMaps
              ? new _sourceMap.default(opts, code)
              : null;
            super(format, map);
            this.ast = void 0;
            this.ast = ast;
          }

          generate() {
            return super.generate(this.ast);
          }
        }

        function normalizeOptions(code, opts) {
          const format = {
            auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
            auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
            shouldPrintComment: opts.shouldPrintComment,
            retainLines: opts.retainLines,
            retainFunctionParens: opts.retainFunctionParens,
            comments: opts.comments == null || opts.comments,
            compact: opts.compact,
            minified: opts.minified,
            concise: opts.concise,
            indent: {
              adjustMultilineComment: true,
              style: "  ",
              base: 0,
            },
            decoratorsBeforeExport: !!opts.decoratorsBeforeExport,
            jsescOption: Object.assign(
              {
                quotes: "double",
                wrap: true,
                minimal: false,
              },
              opts.jsescOption
            ),
            recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType,
            topicToken: opts.topicToken,
          };
          {
            format.jsonCompatibleStrings = opts.jsonCompatibleStrings;
          }

          if (format.minified) {
            format.compact = true;

            format.shouldPrintComment =
              format.shouldPrintComment || (() => format.comments);
          } else {
            format.shouldPrintComment =
              format.shouldPrintComment ||
              ((value) =>
                format.comments ||
                value.indexOf("@license") >= 0 ||
                value.indexOf("@preserve") >= 0);
          }

          if (format.compact === "auto") {
            format.compact = code.length > 500000;

            if (format.compact) {
              console.error(
                "[BABEL] Note: The code generator has deoptimised the styling of " +
                  `${opts.filename} as it exceeds the max of ${"500KB"}.`
              );
            }
          }

          if (format.compact) {
            format.indent.adjustMultilineComment = false;
          }

          return format;
        }

        class CodeGenerator {
          constructor(ast, opts, code) {
            this._generator = void 0;
            this._generator = new Generator(ast, opts, code);
          }

          generate() {
            return this._generator.generate();
          }
        }

        exports.CodeGenerator = CodeGenerator;

        function generate(ast, opts, code) {
          const gen = new Generator(ast, opts, code);
          return gen.generate();
        }
      },
      { "./printer": 59, "./source-map": 60 },
    ],
    56: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.needsWhitespace = needsWhitespace;
        exports.needsWhitespaceBefore = needsWhitespaceBefore;
        exports.needsWhitespaceAfter = needsWhitespaceAfter;
        exports.needsParens = needsParens;

        var whitespace = require("./whitespace");

        var parens = require("./parentheses");

        var t = require("@babel/types");

        const {
          isCallExpression,
          isExpressionStatement,
          isMemberExpression,
          isNewExpression,
        } = t;

        function expandAliases(obj) {
          const newObj = {};

          function add(type, func) {
            const fn = newObj[type];
            newObj[type] = fn
              ? function (node, parent, stack) {
                  const result = fn(node, parent, stack);
                  return result == null ? func(node, parent, stack) : result;
                }
              : func;
          }

          for (const type of Object.keys(obj)) {
            const aliases = t.FLIPPED_ALIAS_KEYS[type];

            if (aliases) {
              for (const alias of aliases) {
                add(alias, obj[type]);
              }
            } else {
              add(type, obj[type]);
            }
          }

          return newObj;
        }

        const expandedParens = expandAliases(parens);
        const expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        const expandedWhitespaceList = expandAliases(whitespace.list);

        function find(obj, node, parent, printStack) {
          const fn = obj[node.type];
          return fn ? fn(node, parent, printStack) : null;
        }

        function isOrHasCallExpression(node) {
          if (isCallExpression(node)) {
            return true;
          }

          return isMemberExpression(node) && isOrHasCallExpression(node.object);
        }

        function needsWhitespace(node, parent, type) {
          if (!node) return 0;

          if (isExpressionStatement(node)) {
            node = node.expression;
          }

          let linesInfo = find(expandedWhitespaceNodes, node, parent);

          if (!linesInfo) {
            const items = find(expandedWhitespaceList, node, parent);

            if (items) {
              for (let i = 0; i < items.length; i++) {
                linesInfo = needsWhitespace(items[i], node, type);
                if (linesInfo) break;
              }
            }
          }

          if (typeof linesInfo === "object" && linesInfo !== null) {
            return linesInfo[type] || 0;
          }

          return 0;
        }

        function needsWhitespaceBefore(node, parent) {
          return needsWhitespace(node, parent, "before");
        }

        function needsWhitespaceAfter(node, parent) {
          return needsWhitespace(node, parent, "after");
        }

        function needsParens(node, parent, printStack) {
          if (!parent) return false;

          if (isNewExpression(parent) && parent.callee === node) {
            if (isOrHasCallExpression(node)) return true;
          }

          return find(expandedParens, node, parent, printStack);
        }
      },
      { "./parentheses": 57, "./whitespace": 58, "@babel/types": 168 },
    ],
    57: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.NullableTypeAnnotation = NullableTypeAnnotation;
        exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
        exports.UpdateExpression = UpdateExpression;
        exports.ObjectExpression = ObjectExpression;
        exports.DoExpression = DoExpression;
        exports.Binary = Binary;
        exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation =
          UnionTypeAnnotation;
        exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
        exports.TSAsExpression = TSAsExpression;
        exports.TSTypeAssertion = TSTypeAssertion;
        exports.TSIntersectionType = exports.TSUnionType = TSUnionType;
        exports.TSInferType = TSInferType;
        exports.BinaryExpression = BinaryExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.AwaitExpression = exports.YieldExpression = YieldExpression;
        exports.ClassExpression = ClassExpression;
        exports.UnaryLike = UnaryLike;
        exports.FunctionExpression = FunctionExpression;
        exports.ArrowFunctionExpression = ArrowFunctionExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.OptionalCallExpression = exports.OptionalMemberExpression =
          OptionalMemberExpression;
        exports.AssignmentExpression = AssignmentExpression;
        exports.LogicalExpression = LogicalExpression;
        exports.Identifier = Identifier;

        var t = require("@babel/types");

        const {
          isArrayTypeAnnotation,
          isArrowFunctionExpression,
          isAssignmentExpression,
          isAwaitExpression,
          isBinary,
          isBinaryExpression,
          isCallExpression,
          isClassDeclaration,
          isClassExpression,
          isConditional,
          isConditionalExpression,
          isExportDeclaration,
          isExportDefaultDeclaration,
          isExpressionStatement,
          isFor,
          isForInStatement,
          isForOfStatement,
          isForStatement,
          isIfStatement,
          isIndexedAccessType,
          isIntersectionTypeAnnotation,
          isLogicalExpression,
          isMemberExpression,
          isNewExpression,
          isNullableTypeAnnotation,
          isObjectPattern,
          isOptionalCallExpression,
          isOptionalMemberExpression,
          isReturnStatement,
          isSequenceExpression,
          isSwitchStatement,
          isTSArrayType,
          isTSAsExpression,
          isTSIntersectionType,
          isTSNonNullExpression,
          isTSOptionalType,
          isTSRestType,
          isTSTypeAssertion,
          isTSUnionType,
          isTaggedTemplateExpression,
          isThrowStatement,
          isTypeAnnotation,
          isUnaryLike,
          isUnionTypeAnnotation,
          isVariableDeclarator,
          isWhileStatement,
          isYieldExpression,
        } = t;
        const PRECEDENCE = {
          "||": 0,
          "??": 0,
          "&&": 1,
          "|": 2,
          "^": 3,
          "&": 4,
          "==": 5,
          "===": 5,
          "!=": 5,
          "!==": 5,
          "<": 6,
          ">": 6,
          "<=": 6,
          ">=": 6,
          in: 6,
          instanceof: 6,
          ">>": 7,
          "<<": 7,
          ">>>": 7,
          "+": 8,
          "-": 8,
          "*": 9,
          "/": 9,
          "%": 9,
          "**": 10,
        };

        const isClassExtendsClause = (node, parent) =>
          (isClassDeclaration(parent) || isClassExpression(parent)) &&
          parent.superClass === node;

        const hasPostfixPart = (node, parent) =>
          ((isMemberExpression(parent) || isOptionalMemberExpression(parent)) &&
            parent.object === node) ||
          ((isCallExpression(parent) ||
            isOptionalCallExpression(parent) ||
            isNewExpression(parent)) &&
            parent.callee === node) ||
          (isTaggedTemplateExpression(parent) && parent.tag === node) ||
          isTSNonNullExpression(parent);

        function NullableTypeAnnotation(node, parent) {
          return isArrayTypeAnnotation(parent);
        }

        function FunctionTypeAnnotation(node, parent, printStack) {
          return (
            isUnionTypeAnnotation(parent) ||
            isIntersectionTypeAnnotation(parent) ||
            isArrayTypeAnnotation(parent) ||
            (isTypeAnnotation(parent) &&
              isArrowFunctionExpression(printStack[printStack.length - 3]))
          );
        }

        function UpdateExpression(node, parent) {
          return (
            hasPostfixPart(node, parent) || isClassExtendsClause(node, parent)
          );
        }

        function ObjectExpression(node, parent, printStack) {
          return isFirstInContext(printStack, {
            expressionStatement: true,
            arrowBody: true,
          });
        }

        function DoExpression(node, parent, printStack) {
          return (
            !node.async &&
            isFirstInContext(printStack, {
              expressionStatement: true,
            })
          );
        }

        function Binary(node, parent) {
          if (
            node.operator === "**" &&
            isBinaryExpression(parent, {
              operator: "**",
            })
          ) {
            return parent.left === node;
          }

          if (isClassExtendsClause(node, parent)) {
            return true;
          }

          if (
            hasPostfixPart(node, parent) ||
            isUnaryLike(parent) ||
            isAwaitExpression(parent)
          ) {
            return true;
          }

          if (isBinary(parent)) {
            const parentOp = parent.operator;
            const parentPos = PRECEDENCE[parentOp];
            const nodeOp = node.operator;
            const nodePos = PRECEDENCE[nodeOp];

            if (
              (parentPos === nodePos &&
                parent.right === node &&
                !isLogicalExpression(parent)) ||
              parentPos > nodePos
            ) {
              return true;
            }
          }
        }

        function UnionTypeAnnotation(node, parent) {
          return (
            isArrayTypeAnnotation(parent) ||
            isNullableTypeAnnotation(parent) ||
            isIntersectionTypeAnnotation(parent) ||
            isUnionTypeAnnotation(parent)
          );
        }

        function OptionalIndexedAccessType(node, parent) {
          return isIndexedAccessType(parent, {
            objectType: node,
          });
        }

        function TSAsExpression() {
          return true;
        }

        function TSTypeAssertion() {
          return true;
        }

        function TSUnionType(node, parent) {
          return (
            isTSArrayType(parent) ||
            isTSOptionalType(parent) ||
            isTSIntersectionType(parent) ||
            isTSUnionType(parent) ||
            isTSRestType(parent)
          );
        }

        function TSInferType(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent);
        }

        function BinaryExpression(node, parent) {
          return (
            node.operator === "in" &&
            (isVariableDeclarator(parent) || isFor(parent))
          );
        }

        function SequenceExpression(node, parent) {
          if (
            isForStatement(parent) ||
            isThrowStatement(parent) ||
            isReturnStatement(parent) ||
            (isIfStatement(parent) && parent.test === node) ||
            (isWhileStatement(parent) && parent.test === node) ||
            (isForInStatement(parent) && parent.right === node) ||
            (isSwitchStatement(parent) && parent.discriminant === node) ||
            (isExpressionStatement(parent) && parent.expression === node)
          ) {
            return false;
          }

          return true;
        }

        function YieldExpression(node, parent) {
          return (
            isBinary(parent) ||
            isUnaryLike(parent) ||
            hasPostfixPart(node, parent) ||
            (isAwaitExpression(parent) && isYieldExpression(node)) ||
            (isConditionalExpression(parent) && node === parent.test) ||
            isClassExtendsClause(node, parent)
          );
        }

        function ClassExpression(node, parent, printStack) {
          return isFirstInContext(printStack, {
            expressionStatement: true,
            exportDefault: true,
          });
        }

        function UnaryLike(node, parent) {
          return (
            hasPostfixPart(node, parent) ||
            isBinaryExpression(parent, {
              operator: "**",
              left: node,
            }) ||
            isClassExtendsClause(node, parent)
          );
        }

        function FunctionExpression(node, parent, printStack) {
          return isFirstInContext(printStack, {
            expressionStatement: true,
            exportDefault: true,
          });
        }

        function ArrowFunctionExpression(node, parent) {
          return (
            isExportDeclaration(parent) || ConditionalExpression(node, parent)
          );
        }

        function ConditionalExpression(node, parent) {
          if (
            isUnaryLike(parent) ||
            isBinary(parent) ||
            isConditionalExpression(parent, {
              test: node,
            }) ||
            isAwaitExpression(parent) ||
            isTSTypeAssertion(parent) ||
            isTSAsExpression(parent)
          ) {
            return true;
          }

          return UnaryLike(node, parent);
        }

        function OptionalMemberExpression(node, parent) {
          return (
            isCallExpression(parent, {
              callee: node,
            }) ||
            isMemberExpression(parent, {
              object: node,
            })
          );
        }

        function AssignmentExpression(node, parent) {
          if (isObjectPattern(node.left)) {
            return true;
          } else {
            return ConditionalExpression(node, parent);
          }
        }

        function LogicalExpression(node, parent) {
          switch (node.operator) {
            case "||":
              if (!isLogicalExpression(parent)) return false;
              return parent.operator === "??" || parent.operator === "&&";

            case "&&":
              return isLogicalExpression(parent, {
                operator: "??",
              });

            case "??":
              return isLogicalExpression(parent) && parent.operator !== "??";
          }
        }

        function Identifier(node, parent, printStack) {
          if (node.name === "let") {
            const isFollowedByBracket =
              isMemberExpression(parent, {
                object: node,
                computed: true,
              }) ||
              isOptionalMemberExpression(parent, {
                object: node,
                computed: true,
                optional: false,
              });
            return isFirstInContext(printStack, {
              expressionStatement: isFollowedByBracket,
              forHead: isFollowedByBracket,
              forInHead: isFollowedByBracket,
              forOfHead: true,
            });
          }

          return (
            node.name === "async" &&
            isForOfStatement(parent) &&
            node === parent.left
          );
        }

        function isFirstInContext(
          printStack,
          {
            expressionStatement = false,
            arrowBody = false,
            exportDefault = false,
            forHead = false,
            forInHead = false,
            forOfHead = false,
          }
        ) {
          let i = printStack.length - 1;
          let node = printStack[i];
          i--;
          let parent = printStack[i];

          while (i >= 0) {
            if (
              (expressionStatement &&
                isExpressionStatement(parent, {
                  expression: node,
                })) ||
              (exportDefault &&
                isExportDefaultDeclaration(parent, {
                  declaration: node,
                })) ||
              (arrowBody &&
                isArrowFunctionExpression(parent, {
                  body: node,
                })) ||
              (forHead &&
                isForStatement(parent, {
                  init: node,
                })) ||
              (forInHead &&
                isForInStatement(parent, {
                  left: node,
                })) ||
              (forOfHead &&
                isForOfStatement(parent, {
                  left: node,
                }))
            ) {
              return true;
            }

            if (
              (hasPostfixPart(node, parent) && !isNewExpression(parent)) ||
              (isSequenceExpression(parent) &&
                parent.expressions[0] === node) ||
              isConditional(parent, {
                test: node,
              }) ||
              isBinary(parent, {
                left: node,
              }) ||
              isAssignmentExpression(parent, {
                left: node,
              })
            ) {
              node = parent;
              i--;
              parent = printStack[i];
            } else {
              return false;
            }
          }

          return false;
        }
      },
      { "@babel/types": 168 },
    ],
    58: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.list = exports.nodes = void 0;

        var t = require("@babel/types");

        const {
          isArrayExpression,
          isAssignmentExpression,
          isBinary,
          isBlockStatement,
          isCallExpression,
          isFunction,
          isIdentifier,
          isLiteral,
          isMemberExpression,
          isObjectExpression,
          isOptionalCallExpression,
          isOptionalMemberExpression,
          isStringLiteral,
        } = t;

        function crawl(node, state = {}) {
          if (isMemberExpression(node) || isOptionalMemberExpression(node)) {
            crawl(node.object, state);
            if (node.computed) crawl(node.property, state);
          } else if (isBinary(node) || isAssignmentExpression(node)) {
            crawl(node.left, state);
            crawl(node.right, state);
          } else if (isCallExpression(node) || isOptionalCallExpression(node)) {
            state.hasCall = true;
            crawl(node.callee, state);
          } else if (isFunction(node)) {
            state.hasFunction = true;
          } else if (isIdentifier(node)) {
            state.hasHelper = state.hasHelper || isHelper(node.callee);
          }

          return state;
        }

        function isHelper(node) {
          if (isMemberExpression(node)) {
            return isHelper(node.object) || isHelper(node.property);
          } else if (isIdentifier(node)) {
            return node.name === "require" || node.name[0] === "_";
          } else if (isCallExpression(node)) {
            return isHelper(node.callee);
          } else if (isBinary(node) || isAssignmentExpression(node)) {
            return (
              (isIdentifier(node.left) && isHelper(node.left)) ||
              isHelper(node.right)
            );
          } else {
            return false;
          }
        }

        function isType(node) {
          return (
            isLiteral(node) ||
            isObjectExpression(node) ||
            isArrayExpression(node) ||
            isIdentifier(node) ||
            isMemberExpression(node)
          );
        }

        const nodes = {
          AssignmentExpression(node) {
            const state = crawl(node.right);

            if ((state.hasCall && state.hasHelper) || state.hasFunction) {
              return {
                before: state.hasFunction,
                after: true,
              };
            }
          },

          SwitchCase(node, parent) {
            return {
              before: !!node.consequent.length || parent.cases[0] === node,
              after:
                !node.consequent.length &&
                parent.cases[parent.cases.length - 1] === node,
            };
          },

          LogicalExpression(node) {
            if (isFunction(node.left) || isFunction(node.right)) {
              return {
                after: true,
              };
            }
          },

          Literal(node) {
            if (isStringLiteral(node) && node.value === "use strict") {
              return {
                after: true,
              };
            }
          },

          CallExpression(node) {
            if (isFunction(node.callee) || isHelper(node)) {
              return {
                before: true,
                after: true,
              };
            }
          },

          OptionalCallExpression(node) {
            if (isFunction(node.callee)) {
              return {
                before: true,
                after: true,
              };
            }
          },

          VariableDeclaration(node) {
            for (let i = 0; i < node.declarations.length; i++) {
              const declar = node.declarations[i];
              let enabled = isHelper(declar.id) && !isType(declar.init);

              if (!enabled) {
                const state = crawl(declar.init);
                enabled =
                  (isHelper(declar.init) && state.hasCall) || state.hasFunction;
              }

              if (enabled) {
                return {
                  before: true,
                  after: true,
                };
              }
            }
          },

          IfStatement(node) {
            if (isBlockStatement(node.consequent)) {
              return {
                before: true,
                after: true,
              };
            }
          },
        };
        exports.nodes = nodes;

        nodes.ObjectProperty =
          nodes.ObjectTypeProperty =
          nodes.ObjectMethod =
            function (node, parent) {
              if (parent.properties[0] === node) {
                return {
                  before: true,
                };
              }
            };

        nodes.ObjectTypeCallProperty = function (node, parent) {
          var _parent$properties;

          if (
            parent.callProperties[0] === node &&
            !(
              (_parent$properties = parent.properties) != null &&
              _parent$properties.length
            )
          ) {
            return {
              before: true,
            };
          }
        };

        nodes.ObjectTypeIndexer = function (node, parent) {
          var _parent$properties2, _parent$callPropertie;

          if (
            parent.indexers[0] === node &&
            !(
              (_parent$properties2 = parent.properties) != null &&
              _parent$properties2.length
            ) &&
            !(
              (_parent$callPropertie = parent.callProperties) != null &&
              _parent$callPropertie.length
            )
          ) {
            return {
              before: true,
            };
          }
        };

        nodes.ObjectTypeInternalSlot = function (node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;

          if (
            parent.internalSlots[0] === node &&
            !(
              (_parent$properties3 = parent.properties) != null &&
              _parent$properties3.length
            ) &&
            !(
              (_parent$callPropertie2 = parent.callProperties) != null &&
              _parent$callPropertie2.length
            ) &&
            !(
              (_parent$indexers = parent.indexers) != null &&
              _parent$indexers.length
            )
          ) {
            return {
              before: true,
            };
          }
        };

        const list = {
          VariableDeclaration(node) {
            return node.declarations.map((decl) => decl.init);
          },

          ArrayExpression(node) {
            return node.elements;
          },

          ObjectExpression(node) {
            return node.properties;
          },
        };
        exports.list = list;
        [
          ["Function", true],
          ["Class", true],
          ["Loop", true],
          ["LabeledStatement", true],
          ["SwitchStatement", true],
          ["TryStatement", true],
        ].forEach(function ([type, amounts]) {
          if (typeof amounts === "boolean") {
            amounts = {
              after: amounts,
              before: amounts,
            };
          }

          [type]
            .concat(t.FLIPPED_ALIAS_KEYS[type] || [])
            .forEach(function (type) {
              nodes[type] = function () {
                return amounts;
              };
            });
        });
      },
      { "@babel/types": 168 },
    ],
    59: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _buffer = require("./buffer");

        var n = require("./node");

        var t = require("@babel/types");

        var generatorFunctions = require("./generators");

        const SCIENTIFIC_NOTATION = /e/i;
        const ZERO_DECIMAL_INTEGER = /\.0+$/;
        const NON_DECIMAL_LITERAL = /^0[box]/;
        const PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/;
        const { isProgram, isFile, isEmptyStatement } = t;
        const { needsParens, needsWhitespaceAfter, needsWhitespaceBefore } = n;

        class Printer {
          constructor(format, map) {
            this.inForStatementInitCounter = 0;
            this._printStack = [];
            this._indent = 0;
            this._insideAux = false;
            this._parenPushNewlineState = null;
            this._noLineTerminator = false;
            this._printAuxAfterOnNextUserNode = false;
            this._printedComments = new WeakSet();
            this._endsWithInteger = false;
            this._endsWithWord = false;
            this.format = format;
            this._buf = new _buffer.default(map);
          }

          generate(ast) {
            this.print(ast);

            this._maybeAddAuxComment();

            return this._buf.get();
          }

          indent() {
            if (this.format.compact || this.format.concise) return;
            this._indent++;
          }

          dedent() {
            if (this.format.compact || this.format.concise) return;
            this._indent--;
          }

          semicolon(force = false) {
            this._maybeAddAuxComment();

            this._append(";", !force);
          }

          rightBrace() {
            if (this.format.minified) {
              this._buf.removeLastSemicolon();
            }

            this.token("}");
          }

          space(force = false) {
            if (this.format.compact) return;

            if (force) {
              this._space();
            } else if (this._buf.hasContent()) {
              const lastCp = this.getLastChar();

              if (lastCp !== 32 && lastCp !== 10) {
                this._space();
              }
            }
          }

          word(str) {
            if (
              this._endsWithWord ||
              (this.endsWith(47) && str.charCodeAt(0) === 47)
            ) {
              this._space();
            }

            this._maybeAddAuxComment();

            this._append(str);

            this._endsWithWord = true;
          }

          number(str) {
            this.word(str);
            this._endsWithInteger =
              Number.isInteger(+str) &&
              !NON_DECIMAL_LITERAL.test(str) &&
              !SCIENTIFIC_NOTATION.test(str) &&
              !ZERO_DECIMAL_INTEGER.test(str) &&
              str.charCodeAt(str.length - 1) !== 46;
          }

          token(str) {
            const lastChar = this.getLastChar();
            const strFirst = str.charCodeAt(0);

            if (
              (str === "--" && lastChar === 33) ||
              (strFirst === 43 && lastChar === 43) ||
              (strFirst === 45 && lastChar === 45) ||
              (strFirst === 46 && this._endsWithInteger)
            ) {
              this._space();
            }

            this._maybeAddAuxComment();

            this._append(str);
          }

          newline(i = 1) {
            if (this.format.retainLines || this.format.compact) return;

            if (this.format.concise) {
              this.space();
              return;
            }

            const charBeforeNewline = this.endsWithCharAndNewline();
            if (charBeforeNewline === 10) return;

            if (charBeforeNewline === 123 || charBeforeNewline === 58) {
              i--;
            }

            if (i <= 0) return;

            for (let j = 0; j < i; j++) {
              this._newline();
            }
          }

          endsWith(char) {
            return this.getLastChar() === char;
          }

          getLastChar() {
            return this._buf.getLastChar();
          }

          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }

          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }

          exactSource(loc, cb) {
            this._catchUp("start", loc);

            this._buf.exactSource(loc, cb);
          }

          source(prop, loc) {
            this._catchUp(prop, loc);

            this._buf.source(prop, loc);
          }

          withSource(prop, loc, cb) {
            this._catchUp(prop, loc);

            this._buf.withSource(prop, loc, cb);
          }

          _space() {
            this._append(" ", true);
          }

          _newline() {
            this._append("\n", true);
          }

          _append(str, queue = false) {
            this._maybeAddParen(str);

            this._maybeIndent(str);

            if (queue) this._buf.queue(str);
            else this._buf.append(str);
            this._endsWithWord = false;
            this._endsWithInteger = false;
          }

          _maybeIndent(str) {
            if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {
              this._buf.queue(this._getIndent());
            }
          }

          _maybeAddParen(str) {
            const parenPushNewlineState = this._parenPushNewlineState;
            if (!parenPushNewlineState) return;
            let i;

            for (i = 0; i < str.length && str[i] === " "; i++) continue;

            if (i === str.length) {
              return;
            }

            const cha = str[i];

            if (cha !== "\n") {
              if (cha !== "/" || i + 1 === str.length) {
                this._parenPushNewlineState = null;
                return;
              }

              const chaPost = str[i + 1];

              if (chaPost === "*") {
                if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {
                  return;
                }
              } else if (chaPost !== "/") {
                this._parenPushNewlineState = null;
                return;
              }
            }

            this.token("(");
            this.indent();
            parenPushNewlineState.printed = true;
          }

          _catchUp(prop, loc) {
            if (!this.format.retainLines) return;
            const pos = loc ? loc[prop] : null;

            if ((pos == null ? void 0 : pos.line) != null) {
              const count = pos.line - this._buf.getCurrentLine();

              for (let i = 0; i < count; i++) {
                this._newline();
              }
            }
          }

          _getIndent() {
            return this.format.indent.style.repeat(this._indent);
          }

          startTerminatorless(isLabel = false) {
            if (isLabel) {
              this._noLineTerminator = true;
              return null;
            } else {
              return (this._parenPushNewlineState = {
                printed: false,
              });
            }
          }

          endTerminatorless(state) {
            this._noLineTerminator = false;

            if (state != null && state.printed) {
              this.dedent();
              this.newline();
              this.token(")");
            }
          }

          print(node, parent) {
            if (!node) return;
            const oldConcise = this.format.concise;

            if (node._compact) {
              this.format.concise = true;
            }

            const printMethod = this[node.type];

            if (!printMethod) {
              throw new ReferenceError(
                `unknown node of type ${JSON.stringify(
                  node.type
                )} with constructor ${JSON.stringify(
                  node == null ? void 0 : node.constructor.name
                )}`
              );
            }

            this._printStack.push(node);

            const oldInAux = this._insideAux;
            this._insideAux = !node.loc;

            this._maybeAddAuxComment(this._insideAux && !oldInAux);

            let shouldPrintParens = needsParens(node, parent, this._printStack);

            if (
              this.format.retainFunctionParens &&
              node.type === "FunctionExpression" &&
              node.extra &&
              node.extra.parenthesized
            ) {
              shouldPrintParens = true;
            }

            if (shouldPrintParens) this.token("(");

            this._printLeadingComments(node);

            const loc = isProgram(node) || isFile(node) ? null : node.loc;
            this.withSource("start", loc, () => {
              printMethod.call(this, node, parent);
            });

            this._printTrailingComments(node);

            if (shouldPrintParens) this.token(")");

            this._printStack.pop();

            this.format.concise = oldConcise;
            this._insideAux = oldInAux;
          }

          _maybeAddAuxComment(enteredPositionlessNode) {
            if (enteredPositionlessNode) this._printAuxBeforeComment();
            if (!this._insideAux) this._printAuxAfterComment();
          }

          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;

            if (comment) {
              this._printComment({
                type: "CommentBlock",
                value: comment,
              });
            }
          }

          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;

            if (comment) {
              this._printComment({
                type: "CommentBlock",
                value: comment,
              });
            }
          }

          getPossibleRaw(node) {
            const extra = node.extra;

            if (
              extra &&
              extra.raw != null &&
              extra.rawValue != null &&
              node.value === extra.rawValue
            ) {
              return extra.raw;
            }
          }

          printJoin(nodes, parent, opts = {}) {
            if (!(nodes != null && nodes.length)) return;
            if (opts.indent) this.indent();
            const newlineOpts = {
              addNewlines: opts.addNewlines,
            };

            for (let i = 0; i < nodes.length; i++) {
              const node = nodes[i];
              if (!node) continue;
              if (opts.statement)
                this._printNewline(true, node, parent, newlineOpts);
              this.print(node, parent);

              if (opts.iterator) {
                opts.iterator(node, i);
              }

              if (opts.separator && i < nodes.length - 1) {
                opts.separator.call(this);
              }

              if (opts.statement)
                this._printNewline(false, node, parent, newlineOpts);
            }

            if (opts.indent) this.dedent();
          }

          printAndIndentOnComments(node, parent) {
            const indent =
              node.leadingComments && node.leadingComments.length > 0;
            if (indent) this.indent();
            this.print(node, parent);
            if (indent) this.dedent();
          }

          printBlock(parent) {
            const node = parent.body;

            if (!isEmptyStatement(node)) {
              this.space();
            }

            this.print(node, parent);
          }

          _printTrailingComments(node) {
            this._printComments(this._getComments(false, node));
          }

          _printLeadingComments(node) {
            this._printComments(this._getComments(true, node), true);
          }

          printInnerComments(node, indent = true) {
            var _node$innerComments;

            if (
              !(
                (_node$innerComments = node.innerComments) != null &&
                _node$innerComments.length
              )
            )
              return;
            if (indent) this.indent();

            this._printComments(node.innerComments);

            if (indent) this.dedent();
          }

          printSequence(nodes, parent, opts = {}) {
            opts.statement = true;
            return this.printJoin(nodes, parent, opts);
          }

          printList(items, parent, opts = {}) {
            if (opts.separator == null) {
              opts.separator = commaSeparator;
            }

            return this.printJoin(items, parent, opts);
          }

          _printNewline(leading, node, parent, opts) {
            if (this.format.retainLines || this.format.compact) return;

            if (this.format.concise) {
              this.space();
              return;
            }

            let lines = 0;

            if (this._buf.hasContent()) {
              if (!leading) lines++;
              if (opts.addNewlines)
                lines += opts.addNewlines(leading, node) || 0;
              const needs = leading
                ? needsWhitespaceBefore
                : needsWhitespaceAfter;
              if (needs(node, parent)) lines++;
            }

            this.newline(Math.min(2, lines));
          }

          _getComments(leading, node) {
            return (
              (node &&
                (leading ? node.leadingComments : node.trailingComments)) ||
              []
            );
          }

          _printComment(comment, skipNewLines) {
            if (!this.format.shouldPrintComment(comment.value)) return;
            if (comment.ignore) return;
            if (this._printedComments.has(comment)) return;

            this._printedComments.add(comment);

            const isBlockComment = comment.type === "CommentBlock";
            const printNewLines =
              isBlockComment && !skipNewLines && !this._noLineTerminator;
            if (printNewLines && this._buf.hasContent()) this.newline(1);
            const lastCharCode = this.getLastChar();

            if (lastCharCode !== 91 && lastCharCode !== 123) {
              this.space();
            }

            let val =
              !isBlockComment && !this._noLineTerminator
                ? `//${comment.value}\n`
                : `/*${comment.value}*/`;

            if (isBlockComment && this.format.indent.adjustMultilineComment) {
              var _comment$loc;

              const offset =
                (_comment$loc = comment.loc) == null
                  ? void 0
                  : _comment$loc.start.column;

              if (offset) {
                const newlineRegex = new RegExp(
                  "\\n\\s{1," + offset + "}",
                  "g"
                );
                val = val.replace(newlineRegex, "\n");
              }

              const indentSize = Math.max(
                this._getIndent().length,
                this.format.retainLines ? 0 : this._buf.getCurrentColumn()
              );
              val = val.replace(/\n(?!$)/g, `\n${" ".repeat(indentSize)}`);
            }

            if (this.endsWith(47)) this._space();
            this.withSource("start", comment.loc, () => {
              this._append(val);
            });
            if (printNewLines) this.newline(1);
          }

          _printComments(comments, inlinePureAnnotation) {
            if (!(comments != null && comments.length)) return;

            if (
              inlinePureAnnotation &&
              comments.length === 1 &&
              PURE_ANNOTATION_RE.test(comments[0].value)
            ) {
              this._printComment(
                comments[0],
                this._buf.hasContent() && !this.endsWith(10)
              );
            } else {
              for (const comment of comments) {
                this._printComment(comment);
              }
            }
          }

          printAssertions(node) {
            var _node$assertions;

            if (
              (_node$assertions = node.assertions) != null &&
              _node$assertions.length
            ) {
              this.space();
              this.word("assert");
              this.space();
              this.token("{");
              this.space();
              this.printList(node.assertions, node);
              this.space();
              this.token("}");
            }
          }
        }

        Object.assign(Printer.prototype, generatorFunctions);
        {
          Printer.prototype.Noop = function Noop() {};
        }
        var _default = Printer;
        exports.default = _default;

        function commaSeparator() {
          this.token(",");
          this.space();
        }
      },
      { "./buffer": 42, "./generators": 47, "./node": 56, "@babel/types": 168 },
    ],
    60: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _sourceMap = require("source-map");

        class SourceMap {
          constructor(opts, code) {
            this._cachedMap = void 0;
            this._code = void 0;
            this._opts = void 0;
            this._rawMappings = void 0;
            this._lastGenLine = void 0;
            this._lastSourceLine = void 0;
            this._lastSourceColumn = void 0;
            this._cachedMap = null;
            this._code = code;
            this._opts = opts;
            this._rawMappings = [];
          }

          get() {
            if (!this._cachedMap) {
              const map = (this._cachedMap = new _sourceMap.SourceMapGenerator({
                sourceRoot: this._opts.sourceRoot,
              }));
              const code = this._code;

              if (typeof code === "string") {
                map.setSourceContent(
                  this._opts.sourceFileName.replace(/\\/g, "/"),
                  code
                );
              } else if (typeof code === "object") {
                Object.keys(code).forEach((sourceFileName) => {
                  map.setSourceContent(
                    sourceFileName.replace(/\\/g, "/"),
                    code[sourceFileName]
                  );
                });
              }

              this._rawMappings.forEach(
                (mapping) => map.addMapping(mapping),
                map
              );
            }

            return this._cachedMap.toJSON();
          }

          getRawMappings() {
            return this._rawMappings.slice();
          }

          mark(
            generatedLine,
            generatedColumn,
            line,
            column,
            identifierName,
            filename,
            force
          ) {
            if (this._lastGenLine !== generatedLine && line === null) return;

            if (
              !force &&
              this._lastGenLine === generatedLine &&
              this._lastSourceLine === line &&
              this._lastSourceColumn === column
            ) {
              return;
            }

            this._cachedMap = null;
            this._lastGenLine = generatedLine;
            this._lastSourceLine = line;
            this._lastSourceColumn = column;

            this._rawMappings.push({
              name: identifierName || undefined,
              generated: {
                line: generatedLine,
                column: generatedColumn,
              },
              source:
                line == null
                  ? undefined
                  : (filename || this._opts.sourceFileName).replace(/\\/g, "/"),
              original:
                line == null
                  ? undefined
                  : {
                      line: line,
                      column: column,
                    },
            });
          }
        }

        exports.default = SourceMap;
      },
      { "source-map": 439 },
    ],
    61: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = _default;

        var _helperGetFunctionArity = require("@babel/helper-get-function-arity");

        var _template = require("@babel/template");

        var t = require("@babel/types");

        const buildPropertyMethodAssignmentWrapper = (0, _template.default)(`
    (function (FUNCTION_KEY) {
      function FUNCTION_ID() {
        return FUNCTION_KEY.apply(this, arguments);
      }
  
      FUNCTION_ID.toString = function () {
        return FUNCTION_KEY.toString();
      }
  
      return FUNCTION_ID;
    })(FUNCTION)
  `);
        const buildGeneratorPropertyMethodAssignmentWrapper = (0,
        _template.default)(`
    (function (FUNCTION_KEY) {
      function* FUNCTION_ID() {
        return yield* FUNCTION_KEY.apply(this, arguments);
      }
  
      FUNCTION_ID.toString = function () {
        return FUNCTION_KEY.toString();
      };
  
      return FUNCTION_ID;
    })(FUNCTION)
  `);
        const visitor = {
          "ReferencedIdentifier|BindingIdentifier"(path, state) {
            if (path.node.name !== state.name) return;
            const localDeclar = path.scope.getBindingIdentifier(state.name);
            if (localDeclar !== state.outerDeclar) return;
            state.selfReference = true;
            path.stop();
          },
        };

        function getNameFromLiteralId(id) {
          if (t.isNullLiteral(id)) {
            return "null";
          }

          if (t.isRegExpLiteral(id)) {
            return `_${id.pattern}_${id.flags}`;
          }

          if (t.isTemplateLiteral(id)) {
            return id.quasis.map((quasi) => quasi.value.raw).join("");
          }

          if (id.value !== undefined) {
            return id.value + "";
          }

          return "";
        }

        function wrap(state, method, id, scope) {
          if (state.selfReference) {
            if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
              scope.rename(id.name);
            } else {
              if (!t.isFunction(method)) return;
              let build = buildPropertyMethodAssignmentWrapper;

              if (method.generator) {
                build = buildGeneratorPropertyMethodAssignmentWrapper;
              }

              const template = build({
                FUNCTION: method,
                FUNCTION_ID: id,
                FUNCTION_KEY: scope.generateUidIdentifier(id.name),
              }).expression;
              const params = template.callee.body.body[0].params;

              for (
                let i = 0, len = (0, _helperGetFunctionArity.default)(method);
                i < len;
                i++
              ) {
                params.push(scope.generateUidIdentifier("x"));
              }

              return template;
            }
          }

          method.id = id;
          scope.getProgramParent().references[id.name] = true;
        }

        function visit(node, name, scope) {
          const state = {
            selfAssignment: false,
            selfReference: false,
            outerDeclar: scope.getBindingIdentifier(name),
            references: [],
            name: name,
          };
          const binding = scope.getOwnBinding(name);

          if (binding) {
            if (binding.kind === "param") {
              state.selfReference = true;
            } else {
            }
          } else if (state.outerDeclar || scope.hasGlobal(name)) {
            scope.traverse(node, visitor, state);
          }

          return state;
        }

        function _default({ node, parent, scope, id }, localBinding = false) {
          if (node.id) return;

          if (
            (t.isObjectProperty(parent) ||
              t.isObjectMethod(parent, {
                kind: "method",
              })) &&
            (!parent.computed || t.isLiteral(parent.key))
          ) {
            id = parent.key;
          } else if (t.isVariableDeclarator(parent)) {
            id = parent.id;

            if (t.isIdentifier(id) && !localBinding) {
              const binding = scope.parent.getBinding(id.name);

              if (
                binding &&
                binding.constant &&
                scope.getBinding(id.name) === binding
              ) {
                node.id = t.cloneNode(id);
                node.id[t.NOT_LOCAL_BINDING] = true;
                return;
              }
            }
          } else if (
            t.isAssignmentExpression(parent, {
              operator: "=",
            })
          ) {
            id = parent.left;
          } else if (!id) {
            return;
          }

          let name;

          if (id && t.isLiteral(id)) {
            name = getNameFromLiteralId(id);
          } else if (id && t.isIdentifier(id)) {
            name = id.name;
          }

          if (name === undefined) {
            return;
          }

          name = t.toBindingIdentifierName(name);
          id = t.identifier(name);
          id[t.NOT_LOCAL_BINDING] = true;
          const state = visit(node, name, scope);
          return wrap(state, node, id, scope) || node;
        }
      },
      {
        "@babel/helper-get-function-arity": 62,
        "@babel/template": 90,
        "@babel/types": 168,
      },
    ],
    62: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = _default;

        var t = require("@babel/types");

        function _default(node) {
          const params = node.params;

          for (let i = 0; i < params.length; i++) {
            const param = params[i];

            if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
              return i;
            }
          }

          return params.length;
        }
      },
      { "@babel/types": 168 },
    ],
    63: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = hoistVariables;

        var t = require("@babel/types");

        const visitor = {
          Scope(path, state) {
            if (state.kind === "let") path.skip();
          },

          FunctionParent(path) {
            path.skip();
          },

          VariableDeclaration(path, state) {
            if (state.kind && path.node.kind !== state.kind) return;
            const nodes = [];
            const declarations = path.get("declarations");
            let firstId;

            for (const declar of declarations) {
              firstId = declar.node.id;

              if (declar.node.init) {
                nodes.push(
                  t.expressionStatement(
                    t.assignmentExpression(
                      "=",
                      declar.node.id,
                      declar.node.init
                    )
                  )
                );
              }

              for (const name of Object.keys(declar.getBindingIdentifiers())) {
                state.emit(t.identifier(name), name, declar.node.init !== null);
              }
            }

            if (
              path.parentPath.isFor({
                left: path.node,
              })
            ) {
              path.replaceWith(firstId);
            } else {
              path.replaceWithMultiple(nodes);
            }
          },
        };

        function hoistVariables(path, emit, kind = "var") {
          path.traverse(visitor, {
            kind,
            emit,
          });
        }
      },
      { "@babel/types": 168 },
    ],
    64: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var t = require("@babel/types");

        function _interopNamespace(e) {
          if (e && e.__esModule) return e;
          var n = Object.create(null);
          if (e) {
            Object.keys(e).forEach(function (k) {
              if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(
                  n,
                  k,
                  d.get
                    ? d
                    : {
                        enumerable: true,
                        get: function () {
                          return e[k];
                        },
                      }
                );
              }
            });
          }
          n["default"] = e;
          return Object.freeze(n);
        }

        var t__namespace = /*#__PURE__*/ _interopNamespace(t);

        function willPathCastToBoolean(path) {
          const maybeWrapped = path;
          const { node, parentPath } = maybeWrapped;

          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;

            if (
              operator === "&&" ||
              operator === "||" ||
              (operator === "??" && node === right)
            ) {
              return willPathCastToBoolean(parentPath);
            }
          }

          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;

            if (expressions[expressions.length - 1] === node) {
              return willPathCastToBoolean(parentPath);
            } else {
              return true;
            }
          }

          return (
            parentPath.isConditional({
              test: node,
            }) ||
            parentPath.isUnaryExpression({
              operator: "!",
            }) ||
            parentPath.isLoop({
              test: node,
            })
          );
        }

        class AssignmentMemoiser {
          constructor() {
            this._map = void 0;
            this._map = new WeakMap();
          }

          has(key) {
            return this._map.has(key);
          }

          get(key) {
            if (!this.has(key)) return;

            const record = this._map.get(key);

            const { value } = record;
            record.count--;

            if (record.count === 0) {
              return t__namespace.assignmentExpression("=", value, key);
            }

            return value;
          }

          set(key, value, count) {
            return this._map.set(key, {
              count,
              value,
            });
          }
        }

        function toNonOptional(path, base) {
          const { node } = path;

          if (t__namespace.isOptionalMemberExpression(node)) {
            return t__namespace.memberExpression(
              base,
              node.property,
              node.computed
            );
          }

          if (path.isOptionalCallExpression()) {
            const callee = path.get("callee");

            if (path.node.optional && callee.isOptionalMemberExpression()) {
              const { object } = callee.node;
              const context =
                path.scope.maybeGenerateMemoised(object) || object;
              callee
                .get("object")
                .replaceWith(
                  t__namespace.assignmentExpression("=", context, object)
                );
              return t__namespace.callExpression(
                t__namespace.memberExpression(
                  base,
                  t__namespace.identifier("call")
                ),
                [context, ...path.node.arguments]
              );
            }

            return t__namespace.callExpression(base, path.node.arguments);
          }

          return path.node;
        }

        function isInDetachedTree(path) {
          while (path) {
            if (path.isProgram()) break;
            const { parentPath, container, listKey } = path;
            const parentNode = parentPath.node;

            if (listKey) {
              if (container !== parentNode[listKey]) return true;
            } else {
              if (container !== parentNode) return true;
            }

            path = parentPath;
          }

          return false;
        }

        const handle = {
          memoise() {},

          handle(member, noDocumentAll) {
            const { node, parent, parentPath, scope } = member;

            if (member.isOptionalMemberExpression()) {
              if (isInDetachedTree(member)) return;
              const endPath = member.find(({ node, parent }) => {
                if (t__namespace.isOptionalMemberExpression(parent)) {
                  return parent.optional || parent.object !== node;
                }

                if (t__namespace.isOptionalCallExpression(parent)) {
                  return (
                    (node !== member.node && parent.optional) ||
                    parent.callee !== node
                  );
                }

                return true;
              });

              if (scope.path.isPattern()) {
                endPath.replaceWith(
                  t__namespace.callExpression(
                    t__namespace.arrowFunctionExpression([], endPath.node),
                    []
                  )
                );
                return;
              }

              const willEndPathCastToBoolean = willPathCastToBoolean(endPath);
              const rootParentPath = endPath.parentPath;

              if (
                rootParentPath.isUpdateExpression({
                  argument: node,
                }) ||
                rootParentPath.isAssignmentExpression({
                  left: node,
                })
              ) {
                throw member.buildCodeFrameError(`can't handle assignment`);
              }

              const isDeleteOperation = rootParentPath.isUnaryExpression({
                operator: "delete",
              });

              if (
                isDeleteOperation &&
                endPath.isOptionalMemberExpression() &&
                endPath.get("property").isPrivateName()
              ) {
                throw member.buildCodeFrameError(
                  `can't delete a private class element`
                );
              }

              let startingOptional = member;

              for (;;) {
                if (startingOptional.isOptionalMemberExpression()) {
                  if (startingOptional.node.optional) break;
                  startingOptional = startingOptional.get("object");
                  continue;
                } else if (startingOptional.isOptionalCallExpression()) {
                  if (startingOptional.node.optional) break;
                  startingOptional = startingOptional.get("callee");
                  continue;
                }

                throw new Error(
                  `Internal error: unexpected ${startingOptional.node.type}`
                );
              }

              const startingProp = startingOptional.isOptionalMemberExpression()
                ? "object"
                : "callee";
              const startingNode = startingOptional.node[startingProp];
              const baseNeedsMemoised =
                scope.maybeGenerateMemoised(startingNode);
              const baseRef =
                baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;
              const parentIsOptionalCall = parentPath.isOptionalCallExpression({
                callee: node,
              });

              const isOptionalCall = (parent) => parentIsOptionalCall;

              const parentIsCall = parentPath.isCallExpression({
                callee: node,
              });
              startingOptional.replaceWith(
                toNonOptional(startingOptional, baseRef)
              );

              if (isOptionalCall()) {
                if (parent.optional) {
                  parentPath.replaceWith(
                    this.optionalCall(member, parent.arguments)
                  );
                } else {
                  parentPath.replaceWith(this.call(member, parent.arguments));
                }
              } else if (parentIsCall) {
                member.replaceWith(this.boundGet(member));
              } else {
                member.replaceWith(this.get(member));
              }

              let regular = member.node;

              for (let current = member; current !== endPath; ) {
                const parentPath = current.parentPath;

                if (
                  parentPath === endPath &&
                  isOptionalCall() &&
                  parent.optional
                ) {
                  regular = parentPath.node;
                  break;
                }

                regular = toNonOptional(parentPath, regular);
                current = parentPath;
              }

              let context;
              const endParentPath = endPath.parentPath;

              if (
                t__namespace.isMemberExpression(regular) &&
                endParentPath.isOptionalCallExpression({
                  callee: endPath.node,
                  optional: true,
                })
              ) {
                const { object } = regular;
                context = member.scope.maybeGenerateMemoised(object);

                if (context) {
                  regular.object = t__namespace.assignmentExpression(
                    "=",
                    context,
                    object
                  );
                }
              }

              let replacementPath = endPath;

              if (isDeleteOperation) {
                replacementPath = endParentPath;
                regular = endParentPath.node;
              }

              const baseMemoised = baseNeedsMemoised
                ? t__namespace.assignmentExpression(
                    "=",
                    t__namespace.cloneNode(baseRef),
                    t__namespace.cloneNode(startingNode)
                  )
                : t__namespace.cloneNode(baseRef);

              if (willEndPathCastToBoolean) {
                let nonNullishCheck;

                if (noDocumentAll) {
                  nonNullishCheck = t__namespace.binaryExpression(
                    "!=",
                    baseMemoised,
                    t__namespace.nullLiteral()
                  );
                } else {
                  nonNullishCheck = t__namespace.logicalExpression(
                    "&&",
                    t__namespace.binaryExpression(
                      "!==",
                      baseMemoised,
                      t__namespace.nullLiteral()
                    ),
                    t__namespace.binaryExpression(
                      "!==",
                      t__namespace.cloneNode(baseRef),
                      scope.buildUndefinedNode()
                    )
                  );
                }

                replacementPath.replaceWith(
                  t__namespace.logicalExpression("&&", nonNullishCheck, regular)
                );
              } else {
                let nullishCheck;

                if (noDocumentAll) {
                  nullishCheck = t__namespace.binaryExpression(
                    "==",
                    baseMemoised,
                    t__namespace.nullLiteral()
                  );
                } else {
                  nullishCheck = t__namespace.logicalExpression(
                    "||",
                    t__namespace.binaryExpression(
                      "===",
                      baseMemoised,
                      t__namespace.nullLiteral()
                    ),
                    t__namespace.binaryExpression(
                      "===",
                      t__namespace.cloneNode(baseRef),
                      scope.buildUndefinedNode()
                    )
                  );
                }

                replacementPath.replaceWith(
                  t__namespace.conditionalExpression(
                    nullishCheck,
                    isDeleteOperation
                      ? t__namespace.booleanLiteral(true)
                      : scope.buildUndefinedNode(),
                    regular
                  )
                );
              }

              if (context) {
                const endParent = endParentPath.node;
                endParentPath.replaceWith(
                  t__namespace.optionalCallExpression(
                    t__namespace.optionalMemberExpression(
                      endParent.callee,
                      t__namespace.identifier("call"),
                      false,
                      true
                    ),
                    [t__namespace.cloneNode(context), ...endParent.arguments],
                    false
                  )
                );
              }

              return;
            }

            if (
              t__namespace.isUpdateExpression(parent, {
                argument: node,
              })
            ) {
              if (this.simpleSet) {
                member.replaceWith(this.simpleSet(member));
                return;
              }

              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const value = t__namespace.binaryExpression(
                operator[0],
                t__namespace.unaryExpression("+", this.get(member)),
                t__namespace.numericLiteral(1)
              );

              if (prefix) {
                parentPath.replaceWith(this.set(member, value));
              } else {
                const { scope } = member;
                const ref = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({
                  id: ref,
                });
                value.left = t__namespace.assignmentExpression(
                  "=",
                  t__namespace.cloneNode(ref),
                  value.left
                );
                parentPath.replaceWith(
                  t__namespace.sequenceExpression([
                    this.set(member, value),
                    t__namespace.cloneNode(ref),
                  ])
                );
              }

              return;
            }

            if (
              parentPath.isAssignmentExpression({
                left: node,
              })
            ) {
              if (this.simpleSet) {
                member.replaceWith(this.simpleSet(member));
                return;
              }

              const { operator, right: value } = parentPath.node;

              if (operator === "=") {
                parentPath.replaceWith(this.set(member, value));
              } else {
                const operatorTrunc = operator.slice(0, -1);

                if (t__namespace.LOGICAL_OPERATORS.includes(operatorTrunc)) {
                  this.memoise(member, 1);
                  parentPath.replaceWith(
                    t__namespace.logicalExpression(
                      operatorTrunc,
                      this.get(member),
                      this.set(member, value)
                    )
                  );
                } else {
                  this.memoise(member, 2);
                  parentPath.replaceWith(
                    this.set(
                      member,
                      t__namespace.binaryExpression(
                        operatorTrunc,
                        this.get(member),
                        value
                      )
                    )
                  );
                }
              }

              return;
            }

            if (
              parentPath.isCallExpression({
                callee: node,
              })
            ) {
              parentPath.replaceWith(
                this.call(member, parentPath.node.arguments)
              );
              return;
            }

            if (
              parentPath.isOptionalCallExpression({
                callee: node,
              })
            ) {
              if (scope.path.isPattern()) {
                parentPath.replaceWith(
                  t__namespace.callExpression(
                    t__namespace.arrowFunctionExpression([], parentPath.node),
                    []
                  )
                );
                return;
              }

              parentPath.replaceWith(
                this.optionalCall(member, parentPath.node.arguments)
              );
              return;
            }

            if (
              parentPath.isForXStatement({
                left: node,
              }) ||
              (parentPath.isObjectProperty({
                value: node,
              }) &&
                parentPath.parentPath.isObjectPattern()) ||
              (parentPath.isAssignmentPattern({
                left: node,
              }) &&
                parentPath.parentPath.isObjectProperty({
                  value: parent,
                }) &&
                parentPath.parentPath.parentPath.isObjectPattern()) ||
              parentPath.isArrayPattern() ||
              (parentPath.isAssignmentPattern({
                left: node,
              }) &&
                parentPath.parentPath.isArrayPattern()) ||
              parentPath.isRestElement()
            ) {
              member.replaceWith(this.destructureSet(member));
              return;
            }

            if (parentPath.isTaggedTemplateExpression()) {
              member.replaceWith(this.boundGet(member));
            } else {
              member.replaceWith(this.get(member));
            }
          },
        };
        function memberExpressionToFunctions(path, visitor, state) {
          path.traverse(
            visitor,
            Object.assign({}, handle, state, {
              memoiser: new AssignmentMemoiser(),
            })
          );
        }

        exports.default = memberExpressionToFunctions;
      },
      { "@babel/types": 168 },
    ],
    65: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _assert = require("assert");

        var t = require("@babel/types");

        class ImportBuilder {
          constructor(importedSource, scope, hub) {
            this._statements = [];
            this._resultName = null;
            this._scope = null;
            this._hub = null;
            this._importedSource = void 0;
            this._scope = scope;
            this._hub = hub;
            this._importedSource = importedSource;
          }

          done() {
            return {
              statements: this._statements,
              resultName: this._resultName,
            };
          }

          import() {
            this._statements.push(
              t.importDeclaration([], t.stringLiteral(this._importedSource))
            );

            return this;
          }

          require() {
            this._statements.push(
              t.expressionStatement(
                t.callExpression(t.identifier("require"), [
                  t.stringLiteral(this._importedSource),
                ])
              )
            );

            return this;
          }

          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name);

            const statement = this._statements[this._statements.length - 1];

            _assert(statement.type === "ImportDeclaration");

            _assert(statement.specifiers.length === 0);

            statement.specifiers = [t.importNamespaceSpecifier(local)];
            this._resultName = t.cloneNode(local);
            return this;
          }

          default(name) {
            name = this._scope.generateUidIdentifier(name);
            const statement = this._statements[this._statements.length - 1];

            _assert(statement.type === "ImportDeclaration");

            _assert(statement.specifiers.length === 0);

            statement.specifiers = [t.importDefaultSpecifier(name)];
            this._resultName = t.cloneNode(name);
            return this;
          }

          named(name, importName) {
            if (importName === "default") return this.default(name);
            name = this._scope.generateUidIdentifier(name);
            const statement = this._statements[this._statements.length - 1];

            _assert(statement.type === "ImportDeclaration");

            _assert(statement.specifiers.length === 0);

            statement.specifiers = [
              t.importSpecifier(name, t.identifier(importName)),
            ];
            this._resultName = t.cloneNode(name);
            return this;
          }

          var(name) {
            name = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];

            if (statement.type !== "ExpressionStatement") {
              _assert(this._resultName);

              statement = t.expressionStatement(this._resultName);

              this._statements.push(statement);
            }

            this._statements[this._statements.length - 1] =
              t.variableDeclaration("var", [
                t.variableDeclarator(name, statement.expression),
              ]);
            this._resultName = t.cloneNode(name);
            return this;
          }

          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }

          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }

          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];

            if (statement.type === "ExpressionStatement") {
              statement.expression = t.callExpression(callee, [
                statement.expression,
              ]);
            } else if (statement.type === "VariableDeclaration") {
              _assert(statement.declarations.length === 1);

              statement.declarations[0].init = t.callExpression(callee, [
                statement.declarations[0].init,
              ]);
            } else {
              _assert.fail("Unexpected type.");
            }

            return this;
          }

          prop(name) {
            const statement = this._statements[this._statements.length - 1];

            if (statement.type === "ExpressionStatement") {
              statement.expression = t.memberExpression(
                statement.expression,
                t.identifier(name)
              );
            } else if (statement.type === "VariableDeclaration") {
              _assert(statement.declarations.length === 1);

              statement.declarations[0].init = t.memberExpression(
                statement.declarations[0].init,
                t.identifier(name)
              );
            } else {
              _assert.fail("Unexpected type:" + statement.type);
            }

            return this;
          }

          read(name) {
            this._resultName = t.memberExpression(
              this._resultName,
              t.identifier(name)
            );
          }
        }

        exports.default = ImportBuilder;
      },
      { "@babel/types": 168, assert: 205 },
    ],
    66: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _assert = require("assert");

        var t = require("@babel/types");

        var _importBuilder = require("./import-builder");

        var _isModule = require("./is-module");

        class ImportInjector {
          constructor(path, importedSource, opts) {
            this._defaultOpts = {
              importedSource: null,
              importedType: "commonjs",
              importedInterop: "babel",
              importingInterop: "babel",
              ensureLiveReference: false,
              ensureNoContext: false,
              importPosition: "before",
            };
            const programPath = path.find((p) => p.isProgram());
            this._programPath = programPath;
            this._programScope = programPath.scope;
            this._hub = programPath.hub;
            this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }

          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }

          addNamed(importName, importedSourceIn, opts) {
            _assert(typeof importName === "string");

            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              importName
            );
          }

          addNamespace(importedSourceIn, opts) {
            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              null
            );
          }

          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              false
            );
          }

          _applyDefaults(importedSource, opts, isInit = false) {
            const optsList = [];

            if (typeof importedSource === "string") {
              optsList.push({
                importedSource,
              });
              optsList.push(opts);
            } else {
              _assert(!opts, "Unexpected secondary arguments.");

              optsList.push(importedSource);
            }

            const newOpts = Object.assign({}, this._defaultOpts);

            for (const opts of optsList) {
              if (!opts) continue;
              Object.keys(newOpts).forEach((key) => {
                if (opts[key] !== undefined) newOpts[key] = opts[key];
              });

              if (!isInit) {
                if (opts.nameHint !== undefined)
                  newOpts.nameHint = opts.nameHint;
                if (opts.blockHoist !== undefined)
                  newOpts.blockHoist = opts.blockHoist;
              }
            }

            return newOpts;
          }

          _generateImport(opts, importName) {
            const isDefault = importName === "default";
            const isNamed = !!importName && !isDefault;
            const isNamespace = importName === null;
            const {
              importedSource,
              importedType,
              importedInterop,
              importingInterop,
              ensureLiveReference,
              ensureNoContext,
              nameHint,
              importPosition,
              blockHoist,
            } = opts;
            let name = nameHint || importName;
            const isMod = (0, _isModule.default)(this._programPath);
            const isModuleForNode = isMod && importingInterop === "node";
            const isModuleForBabel = isMod && importingInterop === "babel";

            if (importPosition === "after" && !isMod) {
              throw new Error(
                `"importPosition": "after" is only supported in modules`
              );
            }

            const builder = new _importBuilder.default(
              importedSource,
              this._programScope,
              this._hub
            );

            if (importedType === "es6") {
              if (!isModuleForNode && !isModuleForBabel) {
                throw new Error("Cannot import an ES6 module from CommonJS");
              }

              builder.import();

              if (isNamespace) {
                builder.namespace(nameHint || importedSource);
              } else if (isDefault || isNamed) {
                builder.named(name, importName);
              }
            } else if (importedType !== "commonjs") {
              throw new Error(`Unexpected interopType "${importedType}"`);
            } else if (importedInterop === "babel") {
              if (isModuleForNode) {
                name = name !== "default" ? name : importedSource;
                const es6Default = `${importedSource}$es6Default`;
                builder.import();

                if (isNamespace) {
                  builder
                    .default(es6Default)
                    .var(name || importedSource)
                    .wildcardInterop();
                } else if (isDefault) {
                  if (ensureLiveReference) {
                    builder
                      .default(es6Default)
                      .var(name || importedSource)
                      .defaultInterop()
                      .read("default");
                  } else {
                    builder
                      .default(es6Default)
                      .var(name)
                      .defaultInterop()
                      .prop(importName);
                  }
                } else if (isNamed) {
                  builder.default(es6Default).read(importName);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.namespace(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource).wildcardInterop();
                } else if ((isDefault || isNamed) && ensureLiveReference) {
                  if (isDefault) {
                    name = name !== "default" ? name : importedSource;
                    builder.var(name).read(importName);
                    builder.defaultInterop();
                  } else {
                    builder.var(importedSource).read(importName);
                  }
                } else if (isDefault) {
                  builder.var(name).defaultInterop().prop(importName);
                } else if (isNamed) {
                  builder.var(name).prop(importName);
                }
              }
            } else if (importedInterop === "compiled") {
              if (isModuleForNode) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.default(importedSource).read(name);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.namespace(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource);
                } else if (isDefault || isNamed) {
                  if (ensureLiveReference) {
                    builder.var(importedSource).read(name);
                  } else {
                    builder.prop(importName).var(name);
                  }
                }
              }
            } else if (importedInterop === "uncompiled") {
              if (isDefault && ensureLiveReference) {
                throw new Error("No live reference for commonjs default");
              }

              if (isModuleForNode) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault) {
                  builder.default(name);
                } else if (isNamed) {
                  builder.default(importedSource).read(name);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault) {
                  builder.default(name);
                } else if (isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource);
                } else if (isDefault) {
                  builder.var(name);
                } else if (isNamed) {
                  if (ensureLiveReference) {
                    builder.var(importedSource).read(name);
                  } else {
                    builder.var(name).prop(importName);
                  }
                }
              }
            } else {
              throw new Error(`Unknown importedInterop "${importedInterop}".`);
            }

            const { statements, resultName } = builder.done();

            this._insertStatements(statements, importPosition, blockHoist);

            if (
              (isDefault || isNamed) &&
              ensureNoContext &&
              resultName.type !== "Identifier"
            ) {
              return t.sequenceExpression([t.numericLiteral(0), resultName]);
            }

            return resultName;
          }

          _insertStatements(
            statements,
            importPosition = "before",
            blockHoist = 3
          ) {
            const body = this._programPath.get("body");

            if (importPosition === "after") {
              for (let i = body.length - 1; i >= 0; i--) {
                if (body[i].isImportDeclaration()) {
                  body[i].insertAfter(statements);
                  return;
                }
              }
            } else {
              statements.forEach((node) => {
                node._blockHoist = blockHoist;
              });
              const targetPath = body.find((p) => {
                const val = p.node._blockHoist;
                return Number.isFinite(val) && val < 4;
              });

              if (targetPath) {
                targetPath.insertBefore(statements);
                return;
              }
            }

            this._programPath.unshiftContainer("body", statements);
          }
        }

        exports.default = ImportInjector;
      },
      {
        "./import-builder": 65,
        "./is-module": 68,
        "@babel/types": 168,
        assert: 205,
      },
    ],
    67: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.addDefault = addDefault;
        exports.addNamed = addNamed;
        exports.addNamespace = addNamespace;
        exports.addSideEffect = addSideEffect;
        Object.defineProperty(exports, "ImportInjector", {
          enumerable: true,
          get: function () {
            return _importInjector.default;
          },
        });
        Object.defineProperty(exports, "isModule", {
          enumerable: true,
          get: function () {
            return _isModule.default;
          },
        });

        var _importInjector = require("./import-injector");

        var _isModule = require("./is-module");

        function addDefault(path, importedSource, opts) {
          return new _importInjector.default(path).addDefault(
            importedSource,
            opts
          );
        }

        function addNamed(path, name, importedSource, opts) {
          return new _importInjector.default(path).addNamed(
            name,
            importedSource,
            opts
          );
        }

        function addNamespace(path, importedSource, opts) {
          return new _importInjector.default(path).addNamespace(
            importedSource,
            opts
          );
        }

        function addSideEffect(path, importedSource, opts) {
          return new _importInjector.default(path).addSideEffect(
            importedSource,
            opts
          );
        }
      },
      { "./import-injector": 66, "./is-module": 68 },
    ],
    68: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isModule;

        function isModule(path) {
          const { sourceType } = path.node;

          if (sourceType !== "module" && sourceType !== "script") {
            throw path.buildCodeFrameError(
              `Unknown sourceType "${sourceType}", cannot transform.`
            );
          }

          return path.node.sourceType === "module";
        }
      },
      {},
    ],
    69: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;

          exports.default = getModuleName = function getModuleName(
            rootOpts,
            pluginOpts
          ) {
            var _pluginOpts$moduleId,
              _pluginOpts$moduleIds,
              _pluginOpts$getModule,
              _pluginOpts$moduleRoo;

            return originalGetModuleName(rootOpts, {
              moduleId:
                (_pluginOpts$moduleId = pluginOpts.moduleId) != null
                  ? _pluginOpts$moduleId
                  : rootOpts.moduleId,
              moduleIds:
                (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null
                  ? _pluginOpts$moduleIds
                  : rootOpts.moduleIds,
              getModuleId:
                (_pluginOpts$getModule = pluginOpts.getModuleId) != null
                  ? _pluginOpts$getModule
                  : rootOpts.getModuleId,
              moduleRoot:
                (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null
                  ? _pluginOpts$moduleRoo
                  : rootOpts.moduleRoot,
            });
          };
        }

        function getModuleName(rootOpts, pluginOpts) {
          const {
            filename,
            filenameRelative = filename,
            sourceRoot = pluginOpts.moduleRoot,
          } = rootOpts;
          const {
            moduleId,
            moduleIds = !!moduleId,
            getModuleId,
            moduleRoot = sourceRoot,
          } = pluginOpts;
          if (!moduleIds) return null;

          if (moduleId != null && !getModuleId) {
            return moduleId;
          }

          let moduleName = moduleRoot != null ? moduleRoot + "/" : "";

          if (filenameRelative) {
            const sourceRootReplacer =
              sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative
              .replace(sourceRootReplacer, "")
              .replace(/\.(\w*?)$/, "");
          }

          moduleName = moduleName.replace(/\\/g, "/");

          if (getModuleId) {
            return getModuleId(moduleName) || moduleName;
          } else {
            return moduleName;
          }
        }
      },
      {},
    ],
    70: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.rewriteModuleStatementsAndPrepareHeader =
          rewriteModuleStatementsAndPrepareHeader;
        exports.ensureStatementsHoisted = ensureStatementsHoisted;
        exports.wrapInterop = wrapInterop;
        exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
        Object.defineProperty(exports, "isModule", {
          enumerable: true,
          get: function () {
            return _helperModuleImports.isModule;
          },
        });
        Object.defineProperty(exports, "rewriteThis", {
          enumerable: true,
          get: function () {
            return _rewriteThis.default;
          },
        });
        Object.defineProperty(exports, "hasExports", {
          enumerable: true,
          get: function () {
            return _normalizeAndLoadMetadata.hasExports;
          },
        });
        Object.defineProperty(exports, "isSideEffectImport", {
          enumerable: true,
          get: function () {
            return _normalizeAndLoadMetadata.isSideEffectImport;
          },
        });
        Object.defineProperty(exports, "getModuleName", {
          enumerable: true,
          get: function () {
            return _getModuleName.default;
          },
        });

        var _assert = require("assert");

        var t = require("@babel/types");

        var _template = require("@babel/template");

        var _helperModuleImports = require("@babel/helper-module-imports");

        var _rewriteThis = require("./rewrite-this");

        var _rewriteLiveReferences = require("./rewrite-live-references");

        var _normalizeAndLoadMetadata = require("./normalize-and-load-metadata");

        var _getModuleName = require("./get-module-name");

        function rewriteModuleStatementsAndPrepareHeader(
          path,
          {
            loose,
            exportName,
            strict,
            allowTopLevelThis,
            strictMode,
            noInterop,
            importInterop = noInterop ? "none" : "babel",
            lazy,
            esNamespaceOnly,
            constantReexports = loose,
            enumerableModuleMeta = loose,
            noIncompleteNsImportDetection,
          }
        ) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(
            importInterop
          );

          _assert(
            (0, _helperModuleImports.isModule)(path),
            "Cannot process module statements in a script"
          );

          path.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(
            path,
            exportName,
            {
              importInterop,
              initializeReexports: constantReexports,
              lazy,
              esNamespaceOnly,
            }
          );

          if (!allowTopLevelThis) {
            (0, _rewriteThis.default)(path);
          }

          (0, _rewriteLiveReferences.default)(path, meta);

          if (strictMode !== false) {
            const hasStrict = path.node.directives.some((directive) => {
              return directive.value.value === "use strict";
            });

            if (!hasStrict) {
              path.unshiftContainer(
                "directives",
                t.directive(t.directiveLiteral("use strict"))
              );
            }
          }

          const headers = [];

          if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
            headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
          }

          const nameList = buildExportNameListDeclaration(path, meta);

          if (nameList) {
            meta.exportNameListName = nameList.name;
            headers.push(nameList.statement);
          }

          headers.push(
            ...buildExportInitializationStatements(
              path,
              meta,
              constantReexports,
              noIncompleteNsImportDetection
            )
          );
          return {
            meta,
            headers,
          };
        }

        function ensureStatementsHoisted(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }

        function wrapInterop(programPath, expr, type) {
          if (type === "none") {
            return null;
          }

          if (type === "node-namespace") {
            return t.callExpression(
              programPath.hub.addHelper("interopRequireWildcard"),
              [expr, t.booleanLiteral(true)]
            );
          } else if (type === "node-default") {
            return null;
          }

          let helper;

          if (type === "default") {
            helper = "interopRequireDefault";
          } else if (type === "namespace") {
            helper = "interopRequireWildcard";
          } else {
            throw new Error(`Unknown interop: ${type}`);
          }

          return t.callExpression(programPath.hub.addHelper(helper), [expr]);
        }

        function buildNamespaceInitStatements(
          metadata,
          sourceMetadata,
          constantReexports = false
        ) {
          const statements = [];
          let srcNamespace = t.identifier(sourceMetadata.name);
          if (sourceMetadata.lazy)
            srcNamespace = t.callExpression(srcNamespace, []);

          for (const localName of sourceMetadata.importsNamespace) {
            if (localName === sourceMetadata.name) continue;
            statements.push(
              _template.default.statement`var NAME = SOURCE;`({
                NAME: localName,
                SOURCE: t.cloneNode(srcNamespace),
              })
            );
          }

          if (constantReexports) {
            statements.push(
              ...buildReexportsFromMeta(metadata, sourceMetadata, true)
            );
          }

          for (const exportName of sourceMetadata.reexportNamespace) {
            statements.push(
              (sourceMetadata.lazy
                ? _template.default.statement`
              Object.defineProperty(EXPORTS, "NAME", {
                enumerable: true,
                get: function() {
                  return NAMESPACE;
                }
              });
            `
                : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({
                EXPORTS: metadata.exportName,
                NAME: exportName,
                NAMESPACE: t.cloneNode(srcNamespace),
              })
            );
          }

          if (sourceMetadata.reexportAll) {
            const statement = buildNamespaceReexport(
              metadata,
              t.cloneNode(srcNamespace),
              constantReexports
            );
            statement.loc = sourceMetadata.reexportAll.loc;
            statements.push(statement);
          }

          return statements;
        }

        const ReexportTemplate = {
          constant: _template.default
            .statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,
          constantComputed: _template.default
            .statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`,
          spec: (0, _template.default)`
      Object.defineProperty(EXPORTS, "EXPORT_NAME", {
        enumerable: true,
        get: function() {
          return NAMESPACE_IMPORT;
        },
      });
      `,
        };

        const buildReexportsFromMeta = (meta, metadata, constantReexports) => {
          const namespace = metadata.lazy
            ? t.callExpression(t.identifier(metadata.name), [])
            : t.identifier(metadata.name);
          const { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName]) => {
            let NAMESPACE_IMPORT = t.cloneNode(namespace);

            if (
              importName === "default" &&
              metadata.interop === "node-default"
            ) {
            } else if (stringSpecifiers.has(importName)) {
              NAMESPACE_IMPORT = t.memberExpression(
                NAMESPACE_IMPORT,
                t.stringLiteral(importName),
                true
              );
            } else {
              NAMESPACE_IMPORT = t.memberExpression(
                NAMESPACE_IMPORT,
                t.identifier(importName)
              );
            }

            const astNodes = {
              EXPORTS: meta.exportName,
              EXPORT_NAME: exportName,
              NAMESPACE_IMPORT,
            };

            if (constantReexports || t.isIdentifier(NAMESPACE_IMPORT)) {
              if (stringSpecifiers.has(exportName)) {
                return ReexportTemplate.constantComputed(astNodes);
              } else {
                return ReexportTemplate.constant(astNodes);
              }
            } else {
              return ReexportTemplate.spec(astNodes);
            }
          });
        };

        function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
          return (
            enumerableModuleMeta
              ? _template.default.statement`
          EXPORTS.__esModule = true;
        `
              : _template.default.statement`
          Object.defineProperty(EXPORTS, "__esModule", {
            value: true,
          });
        `
          )({
            EXPORTS: metadata.exportName,
          });
        }

        function buildNamespaceReexport(
          metadata,
          namespace,
          constantReexports
        ) {
          return (
            constantReexports
              ? _template.default.statement`
          Object.keys(NAMESPACE).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            VERIFY_NAME_LIST;
            if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;
  
            EXPORTS[key] = NAMESPACE[key];
          });
        `
              : _template.default.statement`
          Object.keys(NAMESPACE).forEach(function(key) {
            if (key === "default" || key === "__esModule") return;
            VERIFY_NAME_LIST;
            if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;
  
            Object.defineProperty(EXPORTS, key, {
              enumerable: true,
              get: function() {
                return NAMESPACE[key];
              },
            });
          });
      `
          )({
            NAMESPACE: namespace,
            EXPORTS: metadata.exportName,
            VERIFY_NAME_LIST: metadata.exportNameListName
              ? (0, _template.default)`
              if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
            `({
                  EXPORTS_LIST: metadata.exportNameListName,
                })
              : null,
          });
        }

        function buildExportNameListDeclaration(programPath, metadata) {
          const exportedVars = Object.create(null);

          for (const data of metadata.local.values()) {
            for (const name of data.names) {
              exportedVars[name] = true;
            }
          }

          let hasReexport = false;

          for (const data of metadata.source.values()) {
            for (const exportName of data.reexports.keys()) {
              exportedVars[exportName] = true;
            }

            for (const exportName of data.reexportNamespace) {
              exportedVars[exportName] = true;
            }

            hasReexport = hasReexport || !!data.reexportAll;
          }

          if (!hasReexport || Object.keys(exportedVars).length === 0)
            return null;
          const name = programPath.scope.generateUidIdentifier("exportNames");
          delete exportedVars.default;
          return {
            name: name.name,
            statement: t.variableDeclaration("var", [
              t.variableDeclarator(name, t.valueToNode(exportedVars)),
            ]),
          };
        }

        function buildExportInitializationStatements(
          programPath,
          metadata,
          constantReexports = false,
          noIncompleteNsImportDetection = false
        ) {
          const initStatements = [];
          const exportNames = [];

          for (const [localName, data] of metadata.local) {
            if (data.kind === "import") {
            } else if (data.kind === "hoisted") {
              initStatements.push(
                buildInitStatement(
                  metadata,
                  data.names,
                  t.identifier(localName)
                )
              );
            } else {
              exportNames.push(...data.names);
            }
          }

          for (const data of metadata.source.values()) {
            if (!constantReexports) {
              initStatements.push(
                ...buildReexportsFromMeta(metadata, data, false)
              );
            }

            for (const exportName of data.reexportNamespace) {
              exportNames.push(exportName);
            }
          }

          if (!noIncompleteNsImportDetection) {
            initStatements.push(
              ...chunk(exportNames, 100).map((members) => {
                return buildInitStatement(
                  metadata,
                  members,
                  programPath.scope.buildUndefinedNode()
                );
              })
            );
          }

          return initStatements;
        }

        const InitTemplate = {
          computed: _template.default.expression`EXPORTS["NAME"] = VALUE`,
          default: _template.default.expression`EXPORTS.NAME = VALUE`,
        };

        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: EXPORTS } = metadata;
          return t.expressionStatement(
            exportNames.reduce((acc, exportName) => {
              const params = {
                EXPORTS,
                NAME: exportName,
                VALUE: acc,
              };

              if (stringSpecifiers.has(exportName)) {
                return InitTemplate.computed(params);
              } else {
                return InitTemplate.default(params);
              }
            }, initExpr)
          );
        }

        function chunk(array, size) {
          const chunks = [];

          for (let i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
          }

          return chunks;
        }
      },
      {
        "./get-module-name": 69,
        "./normalize-and-load-metadata": 71,
        "./rewrite-live-references": 72,
        "./rewrite-this": 73,
        "@babel/helper-module-imports": 67,
        "@babel/template": 90,
        "@babel/types": 168,
        assert: 205,
      },
    ],
    71: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.hasExports = hasExports;
        exports.isSideEffectImport = isSideEffectImport;
        exports.validateImportInteropOption = validateImportInteropOption;
        exports.default = normalizeModuleAndLoadMetadata;

        var _path = require("path");

        var _helperValidatorIdentifier = require("@babel/helper-validator-identifier");

        var _helperSplitExportDeclaration = require("@babel/helper-split-export-declaration");

        function hasExports(metadata) {
          return metadata.hasExports;
        }

        function isSideEffectImport(source) {
          return (
            source.imports.size === 0 &&
            source.importsNamespace.size === 0 &&
            source.reexports.size === 0 &&
            source.reexportNamespace.size === 0 &&
            !source.reexportAll
          );
        }

        function validateImportInteropOption(importInterop) {
          if (
            typeof importInterop !== "function" &&
            importInterop !== "none" &&
            importInterop !== "babel" &&
            importInterop !== "node"
          ) {
            throw new Error(
              `.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`
            );
          }

          return importInterop;
        }

        function resolveImportInterop(importInterop, source) {
          if (typeof importInterop === "function") {
            return validateImportInteropOption(importInterop(source));
          }

          return importInterop;
        }

        function normalizeModuleAndLoadMetadata(
          programPath,
          exportName,
          {
            importInterop,
            initializeReexports = false,
            lazy = false,
            esNamespaceOnly = false,
          }
        ) {
          if (!exportName) {
            exportName =
              programPath.scope.generateUidIdentifier("exports").name;
          }

          const stringSpecifiers = new Set();
          nameAnonymousExports(programPath);
          const { local, source, hasExports } = getModuleMetadata(
            programPath,
            {
              initializeReexports,
              lazy,
            },
            stringSpecifiers
          );
          removeModuleDeclarations(programPath);

          for (const [, metadata] of source) {
            if (metadata.importsNamespace.size > 0) {
              metadata.name = metadata.importsNamespace.values().next().value;
            }

            const resolvedInterop = resolveImportInterop(
              importInterop,
              metadata.source
            );

            if (resolvedInterop === "none") {
              metadata.interop = "none";
            } else if (
              resolvedInterop === "node" &&
              metadata.interop === "namespace"
            ) {
              metadata.interop = "node-namespace";
            } else if (
              resolvedInterop === "node" &&
              metadata.interop === "default"
            ) {
              metadata.interop = "node-default";
            } else if (esNamespaceOnly && metadata.interop === "namespace") {
              metadata.interop = "default";
            }
          }

          return {
            exportName,
            exportNameListName: null,
            hasExports,
            local,
            source,
            stringSpecifiers,
          };
        }

        function getExportSpecifierName(path, stringSpecifiers) {
          if (path.isIdentifier()) {
            return path.node.name;
          } else if (path.isStringLiteral()) {
            const stringValue = path.node.value;

            if (
              !(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)
            ) {
              stringSpecifiers.add(stringValue);
            }

            return stringValue;
          } else {
            throw new Error(
              `Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`
            );
          }
        }

        function assertExportSpecifier(path) {
          if (path.isExportSpecifier()) {
            return;
          } else if (path.isExportNamespaceSpecifier()) {
            throw path.buildCodeFrameError(
              "Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`."
            );
          } else {
            throw path.buildCodeFrameError("Unexpected export specifier type");
          }
        }

        function getModuleMetadata(
          programPath,
          { lazy, initializeReexports },
          stringSpecifiers
        ) {
          const localData = getLocalExportMetadata(
            programPath,
            initializeReexports,
            stringSpecifiers
          );
          const sourceData = new Map();

          const getData = (sourceNode) => {
            const source = sourceNode.value;
            let data = sourceData.get(source);

            if (!data) {
              data = {
                name: programPath.scope.generateUidIdentifier(
                  (0, _path.basename)(source, (0, _path.extname)(source))
                ).name,
                interop: "none",
                loc: null,
                imports: new Map(),
                importsNamespace: new Set(),
                reexports: new Map(),
                reexportNamespace: new Set(),
                reexportAll: null,
                lazy: false,
                source,
              };
              sourceData.set(source, data);
            }

            return data;
          };

          let hasExports = false;
          programPath.get("body").forEach((child) => {
            if (child.isImportDeclaration()) {
              const data = getData(child.node.source);
              if (!data.loc) data.loc = child.node.loc;
              child.get("specifiers").forEach((spec) => {
                if (spec.isImportDefaultSpecifier()) {
                  const localName = spec.get("local").node.name;
                  data.imports.set(localName, "default");
                  const reexport = localData.get(localName);

                  if (reexport) {
                    localData.delete(localName);
                    reexport.names.forEach((name) => {
                      data.reexports.set(name, "default");
                    });
                  }
                } else if (spec.isImportNamespaceSpecifier()) {
                  const localName = spec.get("local").node.name;
                  data.importsNamespace.add(localName);
                  const reexport = localData.get(localName);

                  if (reexport) {
                    localData.delete(localName);
                    reexport.names.forEach((name) => {
                      data.reexportNamespace.add(name);
                    });
                  }
                } else if (spec.isImportSpecifier()) {
                  const importName = getExportSpecifierName(
                    spec.get("imported"),
                    stringSpecifiers
                  );
                  const localName = spec.get("local").node.name;
                  data.imports.set(localName, importName);
                  const reexport = localData.get(localName);

                  if (reexport) {
                    localData.delete(localName);
                    reexport.names.forEach((name) => {
                      data.reexports.set(name, importName);
                    });
                  }
                }
              });
            } else if (child.isExportAllDeclaration()) {
              hasExports = true;
              const data = getData(child.node.source);
              if (!data.loc) data.loc = child.node.loc;
              data.reexportAll = {
                loc: child.node.loc,
              };
            } else if (child.isExportNamedDeclaration() && child.node.source) {
              hasExports = true;
              const data = getData(child.node.source);
              if (!data.loc) data.loc = child.node.loc;
              child.get("specifiers").forEach((spec) => {
                assertExportSpecifier(spec);
                const importName = getExportSpecifierName(
                  spec.get("local"),
                  stringSpecifiers
                );
                const exportName = getExportSpecifierName(
                  spec.get("exported"),
                  stringSpecifiers
                );
                data.reexports.set(exportName, importName);

                if (exportName === "__esModule") {
                  throw spec
                    .get("exported")
                    .buildCodeFrameError('Illegal export "__esModule".');
                }
              });
            } else if (
              child.isExportNamedDeclaration() ||
              child.isExportDefaultDeclaration()
            ) {
              hasExports = true;
            }
          });

          for (const metadata of sourceData.values()) {
            let needsDefault = false;
            let needsNamed = false;

            if (metadata.importsNamespace.size > 0) {
              needsDefault = true;
              needsNamed = true;
            }

            if (metadata.reexportAll) {
              needsNamed = true;
            }

            for (const importName of metadata.imports.values()) {
              if (importName === "default") needsDefault = true;
              else needsNamed = true;
            }

            for (const importName of metadata.reexports.values()) {
              if (importName === "default") needsDefault = true;
              else needsNamed = true;
            }

            if (needsDefault && needsNamed) {
              metadata.interop = "namespace";
            } else if (needsDefault) {
              metadata.interop = "default";
            }
          }

          for (const [source, metadata] of sourceData) {
            if (
              lazy !== false &&
              !(isSideEffectImport(metadata) || metadata.reexportAll)
            ) {
              if (lazy === true) {
                metadata.lazy = !/\./.test(source);
              } else if (Array.isArray(lazy)) {
                metadata.lazy = lazy.indexOf(source) !== -1;
              } else if (typeof lazy === "function") {
                metadata.lazy = lazy(source);
              } else {
                throw new Error(
                  `.lazy must be a boolean, string array, or function`
                );
              }
            }
          }

          return {
            hasExports,
            local: localData,
            source: sourceData,
          };
        }

        function getLocalExportMetadata(
          programPath,
          initializeReexports,
          stringSpecifiers
        ) {
          const bindingKindLookup = new Map();
          programPath.get("body").forEach((child) => {
            let kind;

            if (child.isImportDeclaration()) {
              kind = "import";
            } else {
              if (child.isExportDefaultDeclaration())
                child = child.get("declaration");

              if (child.isExportNamedDeclaration()) {
                if (child.node.declaration) {
                  child = child.get("declaration");
                } else if (
                  initializeReexports &&
                  child.node.source &&
                  child.get("source").isStringLiteral()
                ) {
                  child.get("specifiers").forEach((spec) => {
                    assertExportSpecifier(spec);
                    bindingKindLookup.set(spec.get("local").node.name, "block");
                  });
                  return;
                }
              }

              if (child.isFunctionDeclaration()) {
                kind = "hoisted";
              } else if (child.isClassDeclaration()) {
                kind = "block";
              } else if (
                child.isVariableDeclaration({
                  kind: "var",
                })
              ) {
                kind = "var";
              } else if (child.isVariableDeclaration()) {
                kind = "block";
              } else {
                return;
              }
            }

            Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
              bindingKindLookup.set(name, kind);
            });
          });
          const localMetadata = new Map();

          const getLocalMetadata = (idPath) => {
            const localName = idPath.node.name;
            let metadata = localMetadata.get(localName);

            if (!metadata) {
              const kind = bindingKindLookup.get(localName);

              if (kind === undefined) {
                throw idPath.buildCodeFrameError(
                  `Exporting local "${localName}", which is not declared.`
                );
              }

              metadata = {
                names: [],
                kind,
              };
              localMetadata.set(localName, metadata);
            }

            return metadata;
          };

          programPath.get("body").forEach((child) => {
            if (
              child.isExportNamedDeclaration() &&
              (initializeReexports || !child.node.source)
            ) {
              if (child.node.declaration) {
                const declaration = child.get("declaration");
                const ids = declaration.getOuterBindingIdentifierPaths();
                Object.keys(ids).forEach((name) => {
                  if (name === "__esModule") {
                    throw declaration.buildCodeFrameError(
                      'Illegal export "__esModule".'
                    );
                  }

                  getLocalMetadata(ids[name]).names.push(name);
                });
              } else {
                child.get("specifiers").forEach((spec) => {
                  const local = spec.get("local");
                  const exported = spec.get("exported");
                  const localMetadata = getLocalMetadata(local);
                  const exportName = getExportSpecifierName(
                    exported,
                    stringSpecifiers
                  );

                  if (exportName === "__esModule") {
                    throw exported.buildCodeFrameError(
                      'Illegal export "__esModule".'
                    );
                  }

                  localMetadata.names.push(exportName);
                });
              }
            } else if (child.isExportDefaultDeclaration()) {
              const declaration = child.get("declaration");

              if (
                declaration.isFunctionDeclaration() ||
                declaration.isClassDeclaration()
              ) {
                getLocalMetadata(declaration.get("id")).names.push("default");
              } else {
                throw declaration.buildCodeFrameError(
                  "Unexpected default expression export."
                );
              }
            }
          });
          return localMetadata;
        }

        function nameAnonymousExports(programPath) {
          programPath.get("body").forEach((child) => {
            if (!child.isExportDefaultDeclaration()) return;
            (0, _helperSplitExportDeclaration.default)(child);
          });
        }

        function removeModuleDeclarations(programPath) {
          programPath.get("body").forEach((child) => {
            if (child.isImportDeclaration()) {
              child.remove();
            } else if (child.isExportNamedDeclaration()) {
              if (child.node.declaration) {
                child.node.declaration._blockHoist = child.node._blockHoist;
                child.replaceWith(child.node.declaration);
              } else {
                child.remove();
              }
            } else if (child.isExportDefaultDeclaration()) {
              const declaration = child.get("declaration");

              if (
                declaration.isFunctionDeclaration() ||
                declaration.isClassDeclaration()
              ) {
                declaration._blockHoist = child.node._blockHoist;
                child.replaceWith(declaration);
              } else {
                throw declaration.buildCodeFrameError(
                  "Unexpected default expression export."
                );
              }
            } else if (child.isExportAllDeclaration()) {
              child.remove();
            }
          });
        }
      },
      {
        "@babel/helper-split-export-declaration": 77,
        "@babel/helper-validator-identifier": 79,
        path: 424,
      },
    ],
    72: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = rewriteLiveReferences;

        var _assert = require("assert");

        var t = require("@babel/types");

        var _template = require("@babel/template");

        var _helperSimpleAccess = require("@babel/helper-simple-access");

        function rewriteLiveReferences(programPath, metadata) {
          const imported = new Map();
          const exported = new Map();

          const requeueInParent = (path) => {
            programPath.requeue(path);
          };

          for (const [source, data] of metadata.source) {
            for (const [localName, importName] of data.imports) {
              imported.set(localName, [source, importName, null]);
            }

            for (const localName of data.importsNamespace) {
              imported.set(localName, [source, null, localName]);
            }
          }

          for (const [local, data] of metadata.local) {
            let exportMeta = exported.get(local);

            if (!exportMeta) {
              exportMeta = [];
              exported.set(local, exportMeta);
            }

            exportMeta.push(...data.names);
          }

          const rewriteBindingInitVisitorState = {
            metadata,
            requeueInParent,
            scope: programPath.scope,
            exported,
          };
          programPath.traverse(
            rewriteBindingInitVisitor,
            rewriteBindingInitVisitorState
          );
          (0, _helperSimpleAccess.default)(
            programPath,
            new Set([
              ...Array.from(imported.keys()),
              ...Array.from(exported.keys()),
            ])
          );
          const rewriteReferencesVisitorState = {
            seen: new WeakSet(),
            metadata,
            requeueInParent,
            scope: programPath.scope,
            imported,
            exported,
            buildImportReference: (
              [source, importName, localName],
              identNode
            ) => {
              const meta = metadata.source.get(source);

              if (localName) {
                if (meta.lazy) identNode = t.callExpression(identNode, []);
                return identNode;
              }

              let namespace = t.identifier(meta.name);
              if (meta.lazy) namespace = t.callExpression(namespace, []);

              if (importName === "default" && meta.interop === "node-default") {
                return namespace;
              }

              const computed = metadata.stringSpecifiers.has(importName);
              return t.memberExpression(
                namespace,
                computed
                  ? t.stringLiteral(importName)
                  : t.identifier(importName),
                computed
              );
            },
          };
          programPath.traverse(
            rewriteReferencesVisitor,
            rewriteReferencesVisitorState
          );
        }

        const rewriteBindingInitVisitor = {
          Scope(path) {
            path.skip();
          },

          ClassDeclaration(path) {
            const { requeueInParent, exported, metadata } = this;
            const { id } = path.node;
            if (!id) throw new Error("Expected class to have a name");
            const localName = id.name;
            const exportNames = exported.get(localName) || [];

            if (exportNames.length > 0) {
              const statement = t.expressionStatement(
                buildBindingExportAssignmentExpression(
                  metadata,
                  exportNames,
                  t.identifier(localName)
                )
              );
              statement._blockHoist = path.node._blockHoist;
              requeueInParent(path.insertAfter(statement)[0]);
            }
          },

          VariableDeclaration(path) {
            const { requeueInParent, exported, metadata } = this;
            Object.keys(path.getOuterBindingIdentifiers()).forEach(
              (localName) => {
                const exportNames = exported.get(localName) || [];

                if (exportNames.length > 0) {
                  const statement = t.expressionStatement(
                    buildBindingExportAssignmentExpression(
                      metadata,
                      exportNames,
                      t.identifier(localName)
                    )
                  );
                  statement._blockHoist = path.node._blockHoist;
                  requeueInParent(path.insertAfter(statement)[0]);
                }
              }
            );
          },
        };

        const buildBindingExportAssignmentExpression = (
          metadata,
          exportNames,
          localExpr
        ) => {
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata;
            const computed = stringSpecifiers.has(exportName);
            return t.assignmentExpression(
              "=",
              t.memberExpression(
                t.identifier(metadata.exportName),
                computed
                  ? t.stringLiteral(exportName)
                  : t.identifier(exportName),
                computed
              ),
              expr
            );
          }, localExpr);
        };

        const buildImportThrow = (localName) => {
          return _template.default.expression.ast`
      (function() {
        throw new Error('"' + '${localName}' + '" is read-only.');
      })()
    `;
        };

        const rewriteReferencesVisitor = {
          ReferencedIdentifier(path) {
            const {
              seen,
              buildImportReference,
              scope,
              imported,
              requeueInParent,
            } = this;
            if (seen.has(path.node)) return;
            seen.add(path.node);
            const localName = path.node.name;
            const importData = imported.get(localName);

            if (importData) {
              const localBinding = path.scope.getBinding(localName);
              const rootBinding = scope.getBinding(localName);
              if (rootBinding !== localBinding) return;
              const ref = buildImportReference(importData, path.node);
              ref.loc = path.node.loc;

              if (
                (path.parentPath.isCallExpression({
                  callee: path.node,
                }) ||
                  path.parentPath.isOptionalCallExpression({
                    callee: path.node,
                  }) ||
                  path.parentPath.isTaggedTemplateExpression({
                    tag: path.node,
                  })) &&
                t.isMemberExpression(ref)
              ) {
                path.replaceWith(
                  t.sequenceExpression([t.numericLiteral(0), ref])
                );
              } else if (path.isJSXIdentifier() && t.isMemberExpression(ref)) {
                const { object, property } = ref;
                path.replaceWith(
                  t.jsxMemberExpression(
                    t.jsxIdentifier(object.name),
                    t.jsxIdentifier(property.name)
                  )
                );
              } else {
                path.replaceWith(ref);
              }

              requeueInParent(path);
              path.skip();
            }
          },

          AssignmentExpression: {
            exit(path) {
              const {
                scope,
                seen,
                imported,
                exported,
                requeueInParent,
                buildImportReference,
              } = this;
              if (seen.has(path.node)) return;
              seen.add(path.node);
              const left = path.get("left");
              if (left.isMemberExpression()) return;

              if (left.isIdentifier()) {
                const localName = left.node.name;

                if (
                  scope.getBinding(localName) !==
                  path.scope.getBinding(localName)
                ) {
                  return;
                }

                const exportedNames = exported.get(localName);
                const importData = imported.get(localName);

                if (
                  (exportedNames == null ? void 0 : exportedNames.length) > 0 ||
                  importData
                ) {
                  _assert(
                    path.node.operator === "=",
                    "Path was not simplified"
                  );

                  const assignment = path.node;

                  if (importData) {
                    assignment.left = buildImportReference(
                      importData,
                      assignment.left
                    );
                    assignment.right = t.sequenceExpression([
                      assignment.right,
                      buildImportThrow(localName),
                    ]);
                  }

                  path.replaceWith(
                    buildBindingExportAssignmentExpression(
                      this.metadata,
                      exportedNames,
                      assignment
                    )
                  );
                  requeueInParent(path);
                }
              } else {
                const ids = left.getOuterBindingIdentifiers();
                const programScopeIds = Object.keys(ids).filter(
                  (localName) =>
                    scope.getBinding(localName) ===
                    path.scope.getBinding(localName)
                );
                const id = programScopeIds.find((localName) =>
                  imported.has(localName)
                );

                if (id) {
                  path.node.right = t.sequenceExpression([
                    path.node.right,
                    buildImportThrow(id),
                  ]);
                }

                const items = [];
                programScopeIds.forEach((localName) => {
                  const exportedNames = exported.get(localName) || [];

                  if (exportedNames.length > 0) {
                    items.push(
                      buildBindingExportAssignmentExpression(
                        this.metadata,
                        exportedNames,
                        t.identifier(localName)
                      )
                    );
                  }
                });

                if (items.length > 0) {
                  let node = t.sequenceExpression(items);

                  if (path.parentPath.isExpressionStatement()) {
                    node = t.expressionStatement(node);
                    node._blockHoist = path.parentPath.node._blockHoist;
                  }

                  const statement = path.insertAfter(node)[0];
                  requeueInParent(statement);
                }
              }
            },
          },

          "ForOfStatement|ForInStatement"(path) {
            const { scope, node } = path;
            const { left } = node;
            const { exported, imported, scope: programScope } = this;

            if (!t.isVariableDeclaration(left)) {
              let didTransformExport = false,
                importConstViolationName;
              const loopBodyScope = path.get("body").scope;

              for (const name of Object.keys(
                t.getOuterBindingIdentifiers(left)
              )) {
                if (programScope.getBinding(name) === scope.getBinding(name)) {
                  if (exported.has(name)) {
                    didTransformExport = true;

                    if (loopBodyScope.hasOwnBinding(name)) {
                      loopBodyScope.rename(name);
                    }
                  }

                  if (imported.has(name) && !importConstViolationName) {
                    importConstViolationName = name;
                  }
                }
              }

              if (!didTransformExport && !importConstViolationName) {
                return;
              }

              path.ensureBlock();
              const bodyPath = path.get("body");
              const newLoopId = scope.generateUidIdentifierBasedOnNode(left);
              path
                .get("left")
                .replaceWith(
                  t.variableDeclaration("let", [
                    t.variableDeclarator(t.cloneNode(newLoopId)),
                  ])
                );
              scope.registerDeclaration(path.get("left"));

              if (didTransformExport) {
                bodyPath.unshiftContainer(
                  "body",
                  t.expressionStatement(
                    t.assignmentExpression("=", left, newLoopId)
                  )
                );
              }

              if (importConstViolationName) {
                bodyPath.unshiftContainer(
                  "body",
                  t.expressionStatement(
                    buildImportThrow(importConstViolationName)
                  )
                );
              }
            }
          },
        };
      },
      {
        "@babel/helper-simple-access": 76,
        "@babel/template": 90,
        "@babel/types": 168,
        assert: 205,
      },
    ],
    73: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = rewriteThis;

        var _helperReplaceSupers = require("@babel/helper-replace-supers");

        var _traverse = require("@babel/traverse");

        var t = require("@babel/types");

        function rewriteThis(programPath) {
          (0, _traverse.default)(
            programPath.node,
            Object.assign({}, rewriteThisVisitor, {
              noScope: true,
            })
          );
        }

        const rewriteThisVisitor = _traverse.default.visitors.merge([
          _helperReplaceSupers.environmentVisitor,
          {
            ThisExpression(path) {
              path.replaceWith(
                t.unaryExpression("void", t.numericLiteral(0), true)
              );
            },
          },
        ]);
      },
      {
        "@babel/helper-replace-supers": 75,
        "@babel/traverse": 99,
        "@babel/types": 168,
      },
    ],
    74: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = optimiseCallExpression;

        var t = require("@babel/types");

        function optimiseCallExpression(callee, thisNode, args, optional) {
          if (
            args.length === 1 &&
            t.isSpreadElement(args[0]) &&
            t.isIdentifier(args[0].argument, {
              name: "arguments",
            })
          ) {
            if (optional) {
              return t.optionalCallExpression(
                t.optionalMemberExpression(
                  callee,
                  t.identifier("apply"),
                  false,
                  true
                ),
                [thisNode, args[0].argument],
                false
              );
            }

            return t.callExpression(
              t.memberExpression(callee, t.identifier("apply")),
              [thisNode, args[0].argument]
            );
          } else {
            if (optional) {
              return t.optionalCallExpression(
                t.optionalMemberExpression(
                  callee,
                  t.identifier("call"),
                  false,
                  true
                ),
                [thisNode, ...args],
                false
              );
            }

            return t.callExpression(
              t.memberExpression(callee, t.identifier("call")),
              [thisNode, ...args]
            );
          }
        }
      },
      { "@babel/types": 168 },
    ],
    75: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.skipAllButComputedKey = skipAllButComputedKey;
        exports.default = exports.environmentVisitor = void 0;

        var _traverse = require("@babel/traverse");

        var _helperMemberExpressionToFunctions = require("@babel/helper-member-expression-to-functions");

        var _helperOptimiseCallExpression = require("@babel/helper-optimise-call-expression");

        var t = require("@babel/types");

        function getPrototypeOfExpression(
          objectRef,
          isStatic,
          file,
          isPrivateMethod
        ) {
          objectRef = t.cloneNode(objectRef);
          const targetRef =
            isStatic || isPrivateMethod
              ? objectRef
              : t.memberExpression(objectRef, t.identifier("prototype"));
          return t.callExpression(file.addHelper("getPrototypeOf"), [
            targetRef,
          ]);
        }

        function skipAllButComputedKey(path) {
          if (!path.node.computed) {
            path.skip();
            return;
          }

          const keys = t.VISITOR_KEYS[path.type];

          for (const key of keys) {
            if (key !== "key") path.skipKey(key);
          }
        }

        const environmentVisitor = {
          [`${
            t.staticBlock ? "StaticBlock|" : ""
          }ClassPrivateProperty|TypeAnnotation`](path) {
            path.skip();
          },

          Function(path) {
            if (path.isMethod()) return;
            if (path.isArrowFunctionExpression()) return;
            path.skip();
          },

          "Method|ClassProperty"(path) {
            skipAllButComputedKey(path);
          },
        };
        exports.environmentVisitor = environmentVisitor;

        const visitor = _traverse.default.visitors.merge([
          environmentVisitor,
          {
            Super(path, state) {
              const { node, parentPath } = path;
              if (
                !parentPath.isMemberExpression({
                  object: node,
                })
              )
                return;
              state.handle(parentPath);
            },
          },
        ]);

        const unshadowSuperBindingVisitor = _traverse.default.visitors.merge([
          environmentVisitor,
          {
            Scopable(path, { refName }) {
              const binding = path.scope.getOwnBinding(refName);

              if (binding && binding.identifier.name === refName) {
                path.scope.rename(refName);
              }
            },
          },
        ]);

        const specHandlers = {
          memoise(superMember, count) {
            const { scope, node } = superMember;
            const { computed, property } = node;

            if (!computed) {
              return;
            }

            const memo = scope.maybeGenerateMemoised(property);

            if (!memo) {
              return;
            }

            this.memoiser.set(property, memo, count);
          },

          prop(superMember) {
            const { computed, property } = superMember.node;

            if (this.memoiser.has(property)) {
              return t.cloneNode(this.memoiser.get(property));
            }

            if (computed) {
              return t.cloneNode(property);
            }

            return t.stringLiteral(property.name);
          },

          get(superMember) {
            return this._get(superMember, this._getThisRefs());
          },

          _get(superMember, thisRefs) {
            const proto = getPrototypeOfExpression(
              this.getObjectRef(),
              this.isStatic,
              this.file,
              this.isPrivateMethod
            );
            return t.callExpression(this.file.addHelper("get"), [
              thisRefs.memo
                ? t.sequenceExpression([thisRefs.memo, proto])
                : proto,
              this.prop(superMember),
              thisRefs.this,
            ]);
          },

          _getThisRefs() {
            if (!this.isDerivedConstructor) {
              return {
                this: t.thisExpression(),
              };
            }

            const thisRef =
              this.scope.generateDeclaredUidIdentifier("thisSuper");
            return {
              memo: t.assignmentExpression("=", thisRef, t.thisExpression()),
              this: t.cloneNode(thisRef),
            };
          },

          set(superMember, value) {
            const thisRefs = this._getThisRefs();

            const proto = getPrototypeOfExpression(
              this.getObjectRef(),
              this.isStatic,
              this.file,
              this.isPrivateMethod
            );
            return t.callExpression(this.file.addHelper("set"), [
              thisRefs.memo
                ? t.sequenceExpression([thisRefs.memo, proto])
                : proto,
              this.prop(superMember),
              value,
              thisRefs.this,
              t.booleanLiteral(superMember.isInStrictMode()),
            ]);
          },

          destructureSet(superMember) {
            throw superMember.buildCodeFrameError(
              `Destructuring to a super field is not supported yet.`
            );
          },

          call(superMember, args) {
            const thisRefs = this._getThisRefs();

            return (0, _helperOptimiseCallExpression.default)(
              this._get(superMember, thisRefs),
              t.cloneNode(thisRefs.this),
              args,
              false
            );
          },

          optionalCall(superMember, args) {
            const thisRefs = this._getThisRefs();

            return (0, _helperOptimiseCallExpression.default)(
              this._get(superMember, thisRefs),
              t.cloneNode(thisRefs.this),
              args,
              true
            );
          },
        };
        const looseHandlers = Object.assign({}, specHandlers, {
          prop(superMember) {
            const { property } = superMember.node;

            if (this.memoiser.has(property)) {
              return t.cloneNode(this.memoiser.get(property));
            }

            return t.cloneNode(property);
          },

          get(superMember) {
            const { isStatic, getSuperRef } = this;
            const { computed } = superMember.node;
            const prop = this.prop(superMember);
            let object;

            if (isStatic) {
              var _getSuperRef;

              object =
                (_getSuperRef = getSuperRef()) != null
                  ? _getSuperRef
                  : t.memberExpression(
                      t.identifier("Function"),
                      t.identifier("prototype")
                    );
            } else {
              var _getSuperRef2;

              object = t.memberExpression(
                (_getSuperRef2 = getSuperRef()) != null
                  ? _getSuperRef2
                  : t.identifier("Object"),
                t.identifier("prototype")
              );
            }

            return t.memberExpression(object, prop, computed);
          },

          set(superMember, value) {
            const { computed } = superMember.node;
            const prop = this.prop(superMember);
            return t.assignmentExpression(
              "=",
              t.memberExpression(t.thisExpression(), prop, computed),
              value
            );
          },

          destructureSet(superMember) {
            const { computed } = superMember.node;
            const prop = this.prop(superMember);
            return t.memberExpression(t.thisExpression(), prop, computed);
          },

          call(superMember, args) {
            return (0, _helperOptimiseCallExpression.default)(
              this.get(superMember),
              t.thisExpression(),
              args,
              false
            );
          },

          optionalCall(superMember, args) {
            return (0, _helperOptimiseCallExpression.default)(
              this.get(superMember),
              t.thisExpression(),
              args,
              true
            );
          },
        });

        class ReplaceSupers {
          constructor(opts) {
            var _opts$constantSuper;

            const path = opts.methodPath;
            this.methodPath = path;
            this.isDerivedConstructor =
              path.isClassMethod({
                kind: "constructor",
              }) && !!opts.superRef;
            this.isStatic =
              path.isObjectMethod() ||
              path.node.static ||
              (path.isStaticBlock == null ? void 0 : path.isStaticBlock());
            this.isPrivateMethod = path.isPrivate() && path.isMethod();
            this.file = opts.file;
            this.constantSuper =
              (_opts$constantSuper = opts.constantSuper) != null
                ? _opts$constantSuper
                : opts.isLoose;
            this.opts = opts;
          }

          getObjectRef() {
            return t.cloneNode(this.opts.objectRef || this.opts.getObjectRef());
          }

          getSuperRef() {
            if (this.opts.superRef) return t.cloneNode(this.opts.superRef);
            if (this.opts.getSuperRef)
              return t.cloneNode(this.opts.getSuperRef());
          }

          replace() {
            if (this.opts.refToPreserve) {
              this.methodPath.traverse(unshadowSuperBindingVisitor, {
                refName: this.opts.refToPreserve.name,
              });
            }

            const handler = this.constantSuper ? looseHandlers : specHandlers;
            (0, _helperMemberExpressionToFunctions.default)(
              this.methodPath,
              visitor,
              Object.assign(
                {
                  file: this.file,
                  scope: this.methodPath.scope,
                  isDerivedConstructor: this.isDerivedConstructor,
                  isStatic: this.isStatic,
                  isPrivateMethod: this.isPrivateMethod,
                  getObjectRef: this.getObjectRef.bind(this),
                  getSuperRef: this.getSuperRef.bind(this),
                  boundGet: handler.get,
                },
                handler
              )
            );
          }
        }

        exports.default = ReplaceSupers;
      },
      {
        "@babel/helper-member-expression-to-functions": 64,
        "@babel/helper-optimise-call-expression": 74,
        "@babel/traverse": 99,
        "@babel/types": 168,
      },
    ],
    76: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = simplifyAccess;

        var t = require("@babel/types");

        function simplifyAccess(path, bindingNames) {
          path.traverse(simpleAssignmentVisitor, {
            scope: path.scope,
            bindingNames,
            seen: new WeakSet(),
          });
        }

        const simpleAssignmentVisitor = {
          UpdateExpression: {
            exit(path) {
              const { scope, bindingNames } = this;
              const arg = path.get("argument");
              if (!arg.isIdentifier()) return;
              const localName = arg.node.name;
              if (!bindingNames.has(localName)) return;

              if (
                scope.getBinding(localName) !== path.scope.getBinding(localName)
              ) {
                return;
              }

              if (
                path.parentPath.isExpressionStatement() &&
                !path.isCompletionRecord()
              ) {
                const operator = path.node.operator == "++" ? "+=" : "-=";
                path.replaceWith(
                  t.assignmentExpression(
                    operator,
                    arg.node,
                    t.numericLiteral(1)
                  )
                );
              } else if (path.node.prefix) {
                path.replaceWith(
                  t.assignmentExpression(
                    "=",
                    t.identifier(localName),
                    t.binaryExpression(
                      path.node.operator[0],
                      t.unaryExpression("+", arg.node),
                      t.numericLiteral(1)
                    )
                  )
                );
              } else {
                const old = path.scope.generateUidIdentifierBasedOnNode(
                  arg.node,
                  "old"
                );
                const varName = old.name;
                path.scope.push({
                  id: old,
                });
                const binary = t.binaryExpression(
                  path.node.operator[0],
                  t.identifier(varName),
                  t.numericLiteral(1)
                );
                path.replaceWith(
                  t.sequenceExpression([
                    t.assignmentExpression(
                      "=",
                      t.identifier(varName),
                      t.unaryExpression("+", arg.node)
                    ),
                    t.assignmentExpression("=", t.cloneNode(arg.node), binary),
                    t.identifier(varName),
                  ])
                );
              }
            },
          },
          AssignmentExpression: {
            exit(path) {
              const { scope, seen, bindingNames } = this;
              if (path.node.operator === "=") return;
              if (seen.has(path.node)) return;
              seen.add(path.node);
              const left = path.get("left");
              if (!left.isIdentifier()) return;
              const localName = left.node.name;
              if (!bindingNames.has(localName)) return;

              if (
                scope.getBinding(localName) !== path.scope.getBinding(localName)
              ) {
                return;
              }

              const operator = path.node.operator.slice(0, -1);

              if (t.LOGICAL_OPERATORS.includes(operator)) {
                path.replaceWith(
                  t.logicalExpression(
                    operator,
                    path.node.left,
                    t.assignmentExpression(
                      "=",
                      t.cloneNode(path.node.left),
                      path.node.right
                    )
                  )
                );
              } else {
                path.node.right = t.binaryExpression(
                  operator,
                  t.cloneNode(path.node.left),
                  path.node.right
                );
                path.node.operator = "=";
              }
            },
          },
        };
      },
      { "@babel/types": 168 },
    ],
    77: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = splitExportDeclaration;

        var t = require("@babel/types");

        function splitExportDeclaration(exportDeclaration) {
          if (!exportDeclaration.isExportDeclaration()) {
            throw new Error("Only export declarations can be split.");
          }

          const isDefault = exportDeclaration.isExportDefaultDeclaration();
          const declaration = exportDeclaration.get("declaration");
          const isClassDeclaration = declaration.isClassDeclaration();

          if (isDefault) {
            const standaloneDeclaration =
              declaration.isFunctionDeclaration() || isClassDeclaration;
            const scope = declaration.isScope()
              ? declaration.scope.parent
              : declaration.scope;
            let id = declaration.node.id;
            let needBindingRegistration = false;

            if (!id) {
              needBindingRegistration = true;
              id = scope.generateUidIdentifier("default");

              if (
                standaloneDeclaration ||
                declaration.isFunctionExpression() ||
                declaration.isClassExpression()
              ) {
                declaration.node.id = t.cloneNode(id);
              }
            }

            const updatedDeclaration = standaloneDeclaration
              ? declaration
              : t.variableDeclaration("var", [
                  t.variableDeclarator(t.cloneNode(id), declaration.node),
                ]);
            const updatedExportDeclaration = t.exportNamedDeclaration(null, [
              t.exportSpecifier(t.cloneNode(id), t.identifier("default")),
            ]);
            exportDeclaration.insertAfter(updatedExportDeclaration);
            exportDeclaration.replaceWith(updatedDeclaration);

            if (needBindingRegistration) {
              scope.registerDeclaration(exportDeclaration);
            }

            return exportDeclaration;
          }

          if (exportDeclaration.get("specifiers").length > 0) {
            throw new Error(
              "It doesn't make sense to split exported specifiers."
            );
          }

          const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
          const specifiers = Object.keys(bindingIdentifiers).map((name) => {
            return t.exportSpecifier(t.identifier(name), t.identifier(name));
          });
          const aliasDeclar = t.exportNamedDeclaration(null, specifiers);
          exportDeclaration.insertAfter(aliasDeclar);
          exportDeclaration.replaceWith(declaration.node);
          return exportDeclaration;
        }
      },
      { "@babel/types": 168 },
    ],
    78: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.isIdentifierStart = isIdentifierStart;
        exports.isIdentifierChar = isIdentifierChar;
        exports.isIdentifierName = isIdentifierName;
        let nonASCIIidentifierStartChars =
          "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
        let nonASCIIidentifierChars =
          "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
        const nonASCIIidentifierStart = new RegExp(
          "[" + nonASCIIidentifierStartChars + "]"
        );
        const nonASCIIidentifier = new RegExp(
          "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
        );
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [
          0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4,
          48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35,
          5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2,
          1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55,
          7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53,
          11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7,
          1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27,
          35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2,
          24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6,
          2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1,
          2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43,
          117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38,
          17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264,
          8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2,
          31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070,
          4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18,
          689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8,
          8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991,
          84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3,
          7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30,
          2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11,
          6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2,
          0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1,
          2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2,
          3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12,
          221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938,
        ];
        const astralIdentifierCodes = [
          509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166,
          1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46,
          10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2,
          11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0,
          11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8,
          28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71,
          5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2,
          3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5,
          4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306,
          9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1,
          5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9,
          0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10,
          9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239,
        ];

        function isInAstralSet(code, set) {
          let pos = 0x10000;

          for (let i = 0, length = set.length; i < length; i += 2) {
            pos += set[i];
            if (pos > code) return false;
            pos += set[i + 1];
            if (pos >= code) return true;
          }

          return false;
        }

        function isIdentifierStart(code) {
          if (code < 65) return code === 36;
          if (code <= 90) return true;
          if (code < 97) return code === 95;
          if (code <= 122) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa &&
              nonASCIIidentifierStart.test(String.fromCharCode(code))
            );
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }

        function isIdentifierChar(code) {
          if (code < 48) return code === 36;
          if (code < 58) return true;
          if (code < 65) return false;
          if (code <= 90) return true;
          if (code < 97) return code === 95;
          if (code <= 122) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
            );
          }

          return (
            isInAstralSet(code, astralIdentifierStartCodes) ||
            isInAstralSet(code, astralIdentifierCodes)
          );
        }

        function isIdentifierName(name) {
          let isFirst = true;

          for (let i = 0; i < name.length; i++) {
            let cp = name.charCodeAt(i);

            if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {
              const trail = name.charCodeAt(++i);

              if ((trail & 0xfc00) === 0xdc00) {
                cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
              }
            }

            if (isFirst) {
              isFirst = false;

              if (!isIdentifierStart(cp)) {
                return false;
              }
            } else if (!isIdentifierChar(cp)) {
              return false;
            }
          }

          return !isFirst;
        }
      },
      {},
    ],
    79: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "isIdentifierName", {
          enumerable: true,
          get: function () {
            return _identifier.isIdentifierName;
          },
        });
        Object.defineProperty(exports, "isIdentifierChar", {
          enumerable: true,
          get: function () {
            return _identifier.isIdentifierChar;
          },
        });
        Object.defineProperty(exports, "isIdentifierStart", {
          enumerable: true,
          get: function () {
            return _identifier.isIdentifierStart;
          },
        });
        Object.defineProperty(exports, "isReservedWord", {
          enumerable: true,
          get: function () {
            return _keyword.isReservedWord;
          },
        });
        Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
          enumerable: true,
          get: function () {
            return _keyword.isStrictBindOnlyReservedWord;
          },
        });
        Object.defineProperty(exports, "isStrictBindReservedWord", {
          enumerable: true,
          get: function () {
            return _keyword.isStrictBindReservedWord;
          },
        });
        Object.defineProperty(exports, "isStrictReservedWord", {
          enumerable: true,
          get: function () {
            return _keyword.isStrictReservedWord;
          },
        });
        Object.defineProperty(exports, "isKeyword", {
          enumerable: true,
          get: function () {
            return _keyword.isKeyword;
          },
        });

        var _identifier = require("./identifier");

        var _keyword = require("./keyword");
      },
      { "./identifier": 78, "./keyword": 80 },
    ],
    80: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.isReservedWord = isReservedWord;
        exports.isStrictReservedWord = isStrictReservedWord;
        exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
        exports.isStrictBindReservedWord = isStrictBindReservedWord;
        exports.isKeyword = isKeyword;
        const reservedWords = {
          keyword: [
            "break",
            "case",
            "catch",
            "continue",
            "debugger",
            "default",
            "do",
            "else",
            "finally",
            "for",
            "function",
            "if",
            "return",
            "switch",
            "throw",
            "try",
            "var",
            "const",
            "while",
            "with",
            "new",
            "this",
            "super",
            "class",
            "extends",
            "export",
            "import",
            "null",
            "true",
            "false",
            "in",
            "instanceof",
            "typeof",
            "void",
            "delete",
          ],
          strict: [
            "implements",
            "interface",
            "let",
            "package",
            "private",
            "protected",
            "public",
            "static",
            "yield",
          ],
          strictBind: ["eval", "arguments"],
        };
        const keywords = new Set(reservedWords.keyword);
        const reservedWordsStrictSet = new Set(reservedWords.strict);
        const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);

        function isReservedWord(word, inModule) {
          return (inModule && word === "await") || word === "enum";
        }

        function isStrictReservedWord(word, inModule) {
          return (
            isReservedWord(word, inModule) || reservedWordsStrictSet.has(word)
          );
        }

        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }

        function isStrictBindReservedWord(word, inModule) {
          return (
            isStrictReservedWord(word, inModule) ||
            isStrictBindOnlyReservedWord(word)
          );
        }

        function isKeyword(word) {
          return keywords.has(word);
        }
      },
      {},
    ],
    81: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.wrapRegExp =
          exports.typeof =
          exports.objectSpread2 =
          exports.jsx =
            void 0;

        var _template = require("@babel/template");

        const jsx = {
          minVersion: "7.0.0-beta.0",
          ast: () =>
            _template.default.program.ast(
              '\nvar REACT_ELEMENT_TYPE;\nexport default function _createRawReactElement(type, props, key, children) {\n  if (!REACT_ELEMENT_TYPE) {\n    REACT_ELEMENT_TYPE =\n      (typeof Symbol === "function" &&\n        \n        Symbol["for"] &&\n        Symbol["for"]("react.element")) ||\n      0xeac7;\n  }\n  var defaultProps = type && type.defaultProps;\n  var childrenLength = arguments.length - 3;\n  if (!props && childrenLength !== 0) {\n    \n    \n    props = { children: void 0 };\n  }\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = new Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 3];\n    }\n    props.children = childArray;\n  }\n  if (props && defaultProps) {\n    for (var propName in defaultProps) {\n      if (props[propName] === void 0) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  } else if (!props) {\n    props = defaultProps || {};\n  }\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key === undefined ? null : "" + key,\n    ref: null,\n    props: props,\n    _owner: null,\n  };\n}\n'
            ),
        };
        exports.jsx = jsx;
        const objectSpread2 = {
          minVersion: "7.5.0",
          ast: () =>
            _template.default.program.ast(
              '\nimport defineProperty from "defineProperty";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(source, key)\n        );\n      });\n    }\n  }\n  return target;\n}\n'
            ),
        };
        exports.objectSpread2 = objectSpread2;
        const _typeof = {
          minVersion: "7.0.0-beta.0",
          ast: () =>
            _template.default.program.ast(
              '\nexport default function _typeof(obj) {\n  "@babel/helpers - typeof";\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj &&\n        typeof Symbol === "function" &&\n        obj.constructor === Symbol &&\n        obj !== Symbol.prototype\n        ? "symbol"\n        : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n'
            ),
        };
        exports.typeof = _typeof;
        const wrapRegExp = {
          minVersion: "7.2.6",
          ast: () =>
            _template.default.program.ast(
              '\nimport setPrototypeOf from "setPrototypeOf";\nimport inherits from "inherits";\nexport default function _wrapRegExp() {\n  _wrapRegExp = function (re, groups) {\n    return new BabelRegExp(re, undefined, groups);\n  };\n  var _super = RegExp.prototype;\n  var _groups = new WeakMap();\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n    \n    _groups.set(_this, groups || _groups.get(re));\n    return setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n  inherits(BabelRegExp, RegExp);\n  BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n    if (result) result.groups = buildGroups(result, this);\n    return result;\n  };\n  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (typeof substitution === "string") {\n      var groups = _groups.get(this);\n      return _super[Symbol.replace].call(\n        this,\n        str,\n        substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n          return "$" + groups[name];\n        })\n      );\n    } else if (typeof substitution === "function") {\n      var _this = this;\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n        \n        if (typeof args[args.length - 1] !== "object") {\n          args = [].slice.call(args);\n          args.push(buildGroups(args, _this));\n        }\n        return substitution.apply(this, args);\n      });\n    } else {\n      return _super[Symbol.replace].call(this, str, substitution);\n    }\n  };\n  function buildGroups(result, re) {\n    \n    \n    var g = _groups.get(re);\n    return Object.keys(g).reduce(function (groups, name) {\n      groups[name] = result[g[name]];\n      return groups;\n    }, Object.create(null));\n  }\n  return _wrapRegExp.apply(this, arguments);\n}\n'
            ),
        };
        exports.wrapRegExp = wrapRegExp;
      },
      { "@babel/template": 90 },
    ],
    82: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _template = require("@babel/template");

        var generated = require("./helpers-generated");

        const helpers = Object.assign(
          {
            __proto__: null,
          },
          generated
        );
        var _default = helpers;
        exports.default = _default;

        const helper = (minVersion) => (tpl) => ({
          minVersion,
          ast: () => _template.default.program.ast(tpl),
        });

        helpers.asyncIterator = helper("7.0.0-beta.0")`
    export default function _asyncIterator(iterable) {
      var method;
      if (typeof Symbol !== "undefined") {
        if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator];
        if (method == null && Symbol.iterator) method = iterable[Symbol.iterator];
      }
      if (method == null) method = iterable["@@asyncIterator"];
      if (method == null) method = iterable["@@iterator"]
      if (method == null) throw new TypeError("Object is not async iterable");
      return method.call(iterable);
    }
  `;
        helpers.AwaitValue = helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `;
        helpers.AsyncGenerator = helper("7.0.0-beta.0")`
    import AwaitValue from "AwaitValue";
  
    export default function AsyncGenerator(gen) {
      var front, back;
  
      function send(key, arg) {
        return new Promise(function (resolve, reject) {
          var request = {
            key: key,
            arg: arg,
            resolve: resolve,
            reject: reject,
            next: null,
          };
  
          if (back) {
            back = back.next = request;
          } else {
            front = back = request;
            resume(key, arg);
          }
        });
      }
  
      function resume(key, arg) {
        try {
          var result = gen[key](arg)
          var value = result.value;
          var wrappedAwait = value instanceof AwaitValue;
  
          Promise.resolve(wrappedAwait ? value.wrapped : value).then(
            function (arg) {
              if (wrappedAwait) {
                resume(key === "return" ? "return" : "next", arg);
                return
              }
  
              settle(result.done ? "return" : "normal", arg);
            },
            function (err) { resume("throw", err); });
        } catch (err) {
          settle("throw", err);
        }
      }
  
      function settle(type, value) {
        switch (type) {
          case "return":
            front.resolve({ value: value, done: true });
            break;
          case "throw":
            front.reject(value);
            break;
          default:
            front.resolve({ value: value, done: false });
            break;
        }
  
        front = front.next;
        if (front) {
          resume(front.key, front.arg);
        } else {
          back = null;
        }
      }
  
      this._invoke = send;
  
      // Hide "return" method if generator return is not supported
      if (typeof gen.return !== "function") {
        this.return = undefined;
      }
    }
  
    AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; };
  
    AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };
    AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };
    AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };
  `;
        helpers.wrapAsyncGenerator = helper("7.0.0-beta.0")`
    import AsyncGenerator from "AsyncGenerator";
  
    export default function _wrapAsyncGenerator(fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    }
  `;
        helpers.awaitAsyncGenerator = helper("7.0.0-beta.0")`
    import AwaitValue from "AwaitValue";
  
    export default function _awaitAsyncGenerator(value) {
      return new AwaitValue(value);
    }
  `;
        helpers.asyncGeneratorDelegate = helper("7.0.0-beta.0")`
    export default function _asyncGeneratorDelegate(inner, awaitWrap) {
      var iter = {}, waiting = false;
  
      function pump(key, value) {
        waiting = true;
        value = new Promise(function (resolve) { resolve(inner[key](value)); });
        return { done: false, value: awaitWrap(value) };
      };
  
      iter[typeof Symbol !== "undefined" && Symbol.iterator || "@@iterator"] = function () { return this; };
  
      iter.next = function (value) {
        if (waiting) {
          waiting = false;
          return value;
        }
        return pump("next", value);
      };
  
      if (typeof inner.throw === "function") {
        iter.throw = function (value) {
          if (waiting) {
            waiting = false;
            throw value;
          }
          return pump("throw", value);
        };
      }
  
      if (typeof inner.return === "function") {
        iter.return = function (value) {
          if (waiting) {
            waiting = false;
            return value;
          }
          return pump("return", value);
        };
      }
  
      return iter;
    }
  `;
        helpers.asyncToGenerator = helper("7.0.0-beta.0")`
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
  
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
  
    export default function _asyncToGenerator(fn) {
      return function () {
        var self = this, args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
  
          _next(undefined);
        });
      };
    }
  `;
        helpers.classCallCheck = helper("7.0.0-beta.0")`
    export default function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
  `;
        helpers.createClass = helper("7.0.0-beta.0")`
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i ++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
  
    export default function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
  `;
        helpers.defineEnumerableProperties = helper("7.0.0-beta.0")`
    export default function _defineEnumerableProperties(obj, descs) {
      for (var key in descs) {
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
      }
  
      // Symbols are not enumerated over by for-in loops. If native
      // Symbols are available, fetch all of the descs object's own
      // symbol properties and define them on our target object too.
      if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for (var i = 0; i < objectSymbols.length; i++) {
          var sym = objectSymbols[i];
          var desc = descs[sym];
          desc.configurable = desc.enumerable = true;
          if ("value" in desc) desc.writable = true;
          Object.defineProperty(obj, sym, desc);
        }
      }
      return obj;
    }
  `;
        helpers.defaults = helper("7.0.0-beta.0")`
    export default function _defaults(obj, defaults) {
      var keys = Object.getOwnPropertyNames(defaults);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === undefined) {
          Object.defineProperty(obj, key, value);
        }
      }
      return obj;
    }
  `;
        helpers.defineProperty = helper("7.0.0-beta.0")`
    export default function _defineProperty(obj, key, value) {
      // Shortcircuit the slow defineProperty path when possible.
      // We are trying to avoid issues where setters defined on the
      // prototype cause side effects under the fast path of simple
      // assignment. By checking for existence of the property with
      // the in operator, we can optimize most of this overhead away.
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
  `;
        helpers.extends = helper("7.0.0-beta.0")`
    export default function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  
      return _extends.apply(this, arguments);
    }
  `;
        helpers.objectSpread = helper("7.0.0-beta.0")`
    import defineProperty from "defineProperty";
  
    export default function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = (arguments[i] != null) ? Object(arguments[i]) : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
  `;
        helpers.inherits = helper("7.0.0-beta.0")`
    import setPrototypeOf from "setPrototypeOf";
  
    export default function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }
  `;
        helpers.inheritsLoose = helper("7.0.0-beta.0")`
    import setPrototypeOf from "setPrototypeOf";
  
    export default function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      setPrototypeOf(subClass, superClass);
    }
  `;
        helpers.getPrototypeOf = helper("7.0.0-beta.0")`
    export default function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          };
      return _getPrototypeOf(o);
    }
  `;
        helpers.setPrototypeOf = helper("7.0.0-beta.0")`
    export default function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }
  `;
        helpers.isNativeReflectConstruct = helper("7.9.0")`
    export default function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  
      // core-js@3
      if (Reflect.construct.sham) return false;
  
      // Proxy can't be polyfilled. Every browser implemented
      // proxies before or at the same time as Reflect.construct,
      // so if they support Proxy they also support Reflect.construct.
      if (typeof Proxy === "function") return true;
  
      // Since Reflect.construct can't be properly polyfilled, some
      // implementations (e.g. core-js@2) don't set the correct internal slots.
      // Those polyfills don't allow us to subclass built-ins, so we need to
      // use our fallback implementation.
      try {
        // If the internal slots aren't set, this throws an error similar to
        //   TypeError: this is not a Boolean object.
  
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
      } catch (e) {
        return false;
      }
    }
  `;
        helpers.construct = helper("7.0.0-beta.0")`
    import setPrototypeOf from "setPrototypeOf";
    import isNativeReflectConstruct from "isNativeReflectConstruct";
  
    export default function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        // NOTE: If Parent !== Class, the correct __proto__ is set *after*
        //       calling the constructor.
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }
      // Avoid issues with Class being present but undefined when it wasn't
      // present in the original call.
      return _construct.apply(null, arguments);
    }
  `;
        helpers.isNativeFunction = helper("7.0.0-beta.0")`
    export default function _isNativeFunction(fn) {
      // Note: This function returns "true" for core-js functions.
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
  `;
        helpers.wrapNativeSuper = helper("7.0.0-beta.0")`
    import getPrototypeOf from "getPrototypeOf";
    import setPrototypeOf from "setPrototypeOf";
    import isNativeFunction from "isNativeFunction";
    import construct from "construct";
  
    export default function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;
  
      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
          return construct(Class, arguments, getPrototypeOf(this).constructor)
        }
        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true,
          }
        });
  
        return setPrototypeOf(Wrapper, Class);
      }
  
      return _wrapNativeSuper(Class)
    }
  `;
        helpers.instanceof = helper("7.0.0-beta.0")`
    export default function _instanceof(left, right) {
      if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
      } else {
        return left instanceof right;
      }
    }
  `;
        helpers.interopRequireDefault = helper("7.0.0-beta.0")`
    export default function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  `;
        helpers.interopRequireWildcard = helper("7.14.0")`
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
  
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function (nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
  
    export default function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
  
      if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
        return { default: obj }
      }
  
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
  
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
  `;
        helpers.newArrowCheck = helper("7.0.0-beta.0")`
    export default function _newArrowCheck(innerThis, boundThis) {
      if (innerThis !== boundThis) {
        throw new TypeError("Cannot instantiate an arrow function");
      }
    }
  `;
        helpers.objectDestructuringEmpty = helper("7.0.0-beta.0")`
    export default function _objectDestructuringEmpty(obj) {
      if (obj == null) throw new TypeError("Cannot destructure undefined");
    }
  `;
        helpers.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
    export default function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
  
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
  
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
  
      return target;
    }
  `;
        helpers.objectWithoutProperties = helper("7.0.0-beta.0")`
    import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";
  
    export default function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
  
      var target = objectWithoutPropertiesLoose(source, excluded);
      var key, i;
  
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
  
      return target;
    }
  `;
        helpers.assertThisInitialized = helper("7.0.0-beta.0")`
    export default function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
  `;
        helpers.possibleConstructorReturn = helper("7.0.0-beta.0")`
    import assertThisInitialized from "assertThisInitialized";
  
    export default function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
  
      return assertThisInitialized(self);
    }
  `;
        helpers.createSuper = helper("7.9.0")`
    import getPrototypeOf from "getPrototypeOf";
    import isNativeReflectConstruct from "isNativeReflectConstruct";
    import possibleConstructorReturn from "possibleConstructorReturn";
  
    export default function _createSuper(Derived) {
      var hasNativeReflectConstruct = isNativeReflectConstruct();
  
      return function _createSuperInternal() {
        var Super = getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          // NOTE: This doesn't work if this.__proto__.constructor has been modified.
          var NewTarget = getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn(this, result);
      }
    }
   `;
        helpers.superPropBase = helper("7.0.0-beta.0")`
    import getPrototypeOf from "getPrototypeOf";
  
    export default function _superPropBase(object, property) {
      // Yes, this throws if object is null to being with, that's on purpose.
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf(object);
        if (object === null) break;
      }
      return object;
    }
  `;
        helpers.get = helper("7.0.0-beta.0")`
    import superPropBase from "superPropBase";
  
    export default function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get(target, property, receiver) {
          var base = superPropBase(target, property);
  
          if (!base) return;
  
          var desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(receiver);
          }
  
          return desc.value;
        };
      }
      return _get(target, property, receiver || target);
    }
  `;
        helpers.set = helper("7.0.0-beta.0")`
    import superPropBase from "superPropBase";
    import defineProperty from "defineProperty";
  
    function set(target, property, value, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.set) {
        set = Reflect.set;
      } else {
        set = function set(target, property, value, receiver) {
          var base = superPropBase(target, property);
          var desc;
  
          if (base) {
            desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.set) {
              desc.set.call(receiver, value);
              return true;
            } else if (!desc.writable) {
              // Both getter and non-writable fall into this.
              return false;
            }
          }
  
          // Without a super that defines the property, spec boils down to
          // "define on receiver" for some reason.
          desc = Object.getOwnPropertyDescriptor(receiver, property);
          if (desc) {
            if (!desc.writable) {
              // Setter, getter, and non-writable fall into this.
              return false;
            }
  
            desc.value = value;
            Object.defineProperty(receiver, property, desc);
          } else {
            // Avoid setters that may be defined on Sub's prototype, but not on
            // the instance.
            defineProperty(receiver, property, value);
          }
  
          return true;
        };
      }
  
      return set(target, property, value, receiver);
    }
  
    export default function _set(target, property, value, receiver, isStrict) {
      var s = set(target, property, value, receiver || target);
      if (!s && isStrict) {
        throw new Error('failed to set property');
      }
  
      return value;
    }
  `;
        helpers.taggedTemplateLiteral = helper("7.0.0-beta.0")`
    export default function _taggedTemplateLiteral(strings, raw) {
      if (!raw) { raw = strings.slice(0); }
      return Object.freeze(Object.defineProperties(strings, {
          raw: { value: Object.freeze(raw) }
      }));
    }
  `;
        helpers.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
    export default function _taggedTemplateLiteralLoose(strings, raw) {
      if (!raw) { raw = strings.slice(0); }
      strings.raw = raw;
      return strings;
    }
  `;
        helpers.readOnlyError = helper("7.0.0-beta.0")`
    export default function _readOnlyError(name) {
      throw new TypeError("\\"" + name + "\\" is read-only");
    }
  `;
        helpers.writeOnlyError = helper("7.12.13")`
    export default function _writeOnlyError(name) {
      throw new TypeError("\\"" + name + "\\" is write-only");
    }
  `;
        helpers.classNameTDZError = helper("7.0.0-beta.0")`
    export default function _classNameTDZError(name) {
      throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
    }
  `;
        helpers.temporalUndefined = helper("7.0.0-beta.0")`
    // This function isn't mean to be called, but to be used as a reference.
    // We can't use a normal object because it isn't hoisted.
    export default function _temporalUndefined() {}
  `;
        helpers.tdz = helper("7.5.5")`
    export default function _tdzError(name) {
      throw new ReferenceError(name + " is not defined - temporal dead zone");
    }
  `;
        helpers.temporalRef = helper("7.0.0-beta.0")`
    import undef from "temporalUndefined";
    import err from "tdz";
  
    export default function _temporalRef(val, name) {
      return val === undef ? err(name) : val;
    }
  `;
        helpers.slicedToArray = helper("7.0.0-beta.0")`
    import arrayWithHoles from "arrayWithHoles";
    import iterableToArrayLimit from "iterableToArrayLimit";
    import unsupportedIterableToArray from "unsupportedIterableToArray";
    import nonIterableRest from "nonIterableRest";
  
    export default function _slicedToArray(arr, i) {
      return (
        arrayWithHoles(arr) ||
        iterableToArrayLimit(arr, i) ||
        unsupportedIterableToArray(arr, i) ||
        nonIterableRest()
      );
    }
  `;
        helpers.slicedToArrayLoose = helper("7.0.0-beta.0")`
    import arrayWithHoles from "arrayWithHoles";
    import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
    import unsupportedIterableToArray from "unsupportedIterableToArray";
    import nonIterableRest from "nonIterableRest";
  
    export default function _slicedToArrayLoose(arr, i) {
      return (
        arrayWithHoles(arr) ||
        iterableToArrayLimitLoose(arr, i) ||
        unsupportedIterableToArray(arr, i) ||
        nonIterableRest()
      );
    }
  `;
        helpers.toArray = helper("7.0.0-beta.0")`
    import arrayWithHoles from "arrayWithHoles";
    import iterableToArray from "iterableToArray";
    import unsupportedIterableToArray from "unsupportedIterableToArray";
    import nonIterableRest from "nonIterableRest";
  
    export default function _toArray(arr) {
      return (
        arrayWithHoles(arr) ||
        iterableToArray(arr) ||
        unsupportedIterableToArray(arr) ||
        nonIterableRest()
      );
    }
  `;
        helpers.toConsumableArray = helper("7.0.0-beta.0")`
    import arrayWithoutHoles from "arrayWithoutHoles";
    import iterableToArray from "iterableToArray";
    import unsupportedIterableToArray from "unsupportedIterableToArray";
    import nonIterableSpread from "nonIterableSpread";
  
    export default function _toConsumableArray(arr) {
      return (
        arrayWithoutHoles(arr) ||
        iterableToArray(arr) ||
        unsupportedIterableToArray(arr) ||
        nonIterableSpread()
      );
    }
  `;
        helpers.arrayWithoutHoles = helper("7.0.0-beta.0")`
    import arrayLikeToArray from "arrayLikeToArray";
  
    export default function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return arrayLikeToArray(arr);
    }
  `;
        helpers.arrayWithHoles = helper("7.0.0-beta.0")`
    export default function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
  `;
        helpers.maybeArrayLike = helper("7.9.0")`
    import arrayLikeToArray from "arrayLikeToArray";
  
    export default function _maybeArrayLike(next, arr, i) {
      if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
        var len = arr.length;
        return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
      }
      return next(arr, i);
    }
  `;
        helpers.iterableToArray = helper("7.0.0-beta.0")`
    export default function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
  `;
        helpers.iterableToArrayLimit = helper("7.0.0-beta.0")`
    export default function _iterableToArrayLimit(arr, i) {
      // this is an expanded form of \`for...of\` that properly supports abrupt completions of
      // iterators etc. variable names have been minimised to reduce the size of this massive
      // helper. sometimes spec compliance is annoying :(
      //
      // _n = _iteratorNormalCompletion
      // _d = _didIteratorError
      // _e = _iteratorError
      // _i = _iterator
      // _s = _step
  
      var _i = arr == null ? null : (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
      if (_i == null) return;
  
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  `;
        helpers.iterableToArrayLimitLoose = helper("7.0.0-beta.0")`
    export default function _iterableToArrayLimitLoose(arr, i) {
      var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
      if (_i == null) return;
  
      var _arr = [];
      for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
        _arr.push(_step.value);
        if (i && _arr.length === i) break;
      }
      return _arr;
    }
  `;
        helpers.unsupportedIterableToArray = helper("7.9.0")`
    import arrayLikeToArray from "arrayLikeToArray";
  
    export default function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return arrayLikeToArray(o, minLen);
    }
  `;
        helpers.arrayLikeToArray = helper("7.9.0")`
    export default function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
  `;
        helpers.nonIterableSpread = helper("7.0.0-beta.0")`
    export default function _nonIterableSpread() {
      throw new TypeError(
        "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
      );
    }
  `;
        helpers.nonIterableRest = helper("7.0.0-beta.0")`
    export default function _nonIterableRest() {
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
      );
    }
  `;
        helpers.createForOfIteratorHelper = helper("7.9.0")`
    import unsupportedIterableToArray from "unsupportedIterableToArray";
  
    // s: start (create the iterator)
    // n: next
    // e: error (called whenever something throws)
    // f: finish (always called at the end)
  
    export default function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  
      if (!it) {
        // Fallback for engines without symbol support
        if (
          Array.isArray(o) ||
          (it = unsupportedIterableToArray(o)) ||
          (allowArrayLike && o && typeof o.length === "number")
        ) {
          if (it) o = it;
          var i = 0;
          var F = function(){};
          return {
            s: F,
            n: function() {
              if (i >= o.length) return { done: true };
              return { done: false, value: o[i++] };
            },
            e: function(e) { throw e; },
            f: F,
          };
        }
  
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
  
      var normalCompletion = true, didErr = false, err;
  
      return {
        s: function() {
          it = it.call(o);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(e) {
          didErr = true;
          err = e;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }
  `;
        helpers.createForOfIteratorHelperLoose = helper("7.9.0")`
    import unsupportedIterableToArray from "unsupportedIterableToArray";
  
    export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  
      if (it) return (it = it.call(o)).next.bind(it);
  
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        return function() {
          if (i >= o.length) return { done: true };
          return { done: false, value: o[i++] };
        }
      }
  
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
  `;
        helpers.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
    export default function _skipFirstGeneratorNext(fn) {
      return function () {
        var it = fn.apply(this, arguments);
        it.next();
        return it;
      }
    }
  `;
        helpers.toPrimitive = helper("7.1.5")`
    export default function _toPrimitive(
      input,
      hint /*: "default" | "string" | "number" | void */
    ) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
  `;
        helpers.toPropertyKey = helper("7.1.5")`
    import toPrimitive from "toPrimitive";
  
    export default function _toPropertyKey(arg) {
      var key = toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
  `;
        helpers.initializerWarningHelper = helper("7.0.0-beta.0")`
      export default function _initializerWarningHelper(descriptor, context){
          throw new Error(
            'Decorating class property failed. Please ensure that ' +
            'proposal-class-properties is enabled and runs after the decorators transform.'
          );
      }
  `;
        helpers.initializerDefineProperty = helper("7.0.0-beta.0")`
      export default function _initializerDefineProperty(target, property, descriptor, context){
          if (!descriptor) return;
  
          Object.defineProperty(target, property, {
              enumerable: descriptor.enumerable,
              configurable: descriptor.configurable,
              writable: descriptor.writable,
              value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
          });
      }
  `;
        helpers.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
      export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
          var desc = {};
          Object.keys(descriptor).forEach(function(key){
              desc[key] = descriptor[key];
          });
          desc.enumerable = !!desc.enumerable;
          desc.configurable = !!desc.configurable;
          if ('value' in desc || desc.initializer){
              desc.writable = true;
          }
  
          desc = decorators.slice().reverse().reduce(function(desc, decorator){
              return decorator(target, property, desc) || desc;
          }, desc);
  
          if (context && desc.initializer !== void 0){
              desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
              desc.initializer = undefined;
          }
  
          if (desc.initializer === void 0){
              Object.defineProperty(target, property, desc);
              desc = null;
          }
  
          return desc;
      }
  `;
        helpers.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
    var id = 0;
    export default function _classPrivateFieldKey(name) {
      return "__private_" + (id++) + "_" + name;
    }
  `;
        helpers.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
    export default function _classPrivateFieldBase(receiver, privateKey) {
      if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
      }
      return receiver;
    }
  `;
        helpers.classPrivateFieldGet = helper("7.0.0-beta.0")`
    import classApplyDescriptorGet from "classApplyDescriptorGet";
    import classExtractFieldDescriptor from "classExtractFieldDescriptor";
    export default function _classPrivateFieldGet(receiver, privateMap) {
      var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
      return classApplyDescriptorGet(receiver, descriptor);
    }
  `;
        helpers.classPrivateFieldSet = helper("7.0.0-beta.0")`
    import classApplyDescriptorSet from "classApplyDescriptorSet";
    import classExtractFieldDescriptor from "classExtractFieldDescriptor";
    export default function _classPrivateFieldSet(receiver, privateMap, value) {
      var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
      classApplyDescriptorSet(receiver, descriptor, value);
      return value;
    }
  `;
        helpers.classPrivateFieldDestructureSet = helper("7.4.4")`
    import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
    import classExtractFieldDescriptor from "classExtractFieldDescriptor";
    export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
      var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
      return classApplyDescriptorDestructureSet(receiver, descriptor);
    }
  `;
        helpers.classExtractFieldDescriptor = helper("7.13.10")`
    export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
      }
      return privateMap.get(receiver);
    }
  `;
        helpers.classStaticPrivateFieldSpecGet = helper("7.0.2")`
    import classApplyDescriptorGet from "classApplyDescriptorGet";
    import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
    import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
    export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
      classCheckPrivateStaticAccess(receiver, classConstructor);
      classCheckPrivateStaticFieldDescriptor(descriptor, "get");
      return classApplyDescriptorGet(receiver, descriptor);
    }
  `;
        helpers.classStaticPrivateFieldSpecSet = helper("7.0.2")`
    import classApplyDescriptorSet from "classApplyDescriptorSet";
    import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
    import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
    export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
      classCheckPrivateStaticAccess(receiver, classConstructor);
      classCheckPrivateStaticFieldDescriptor(descriptor, "set");
      classApplyDescriptorSet(receiver, descriptor, value);
      return value;
    }
  `;
        helpers.classStaticPrivateMethodGet = helper("7.3.2")`
    import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
    export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
      classCheckPrivateStaticAccess(receiver, classConstructor);
      return method;
    }
  `;
        helpers.classStaticPrivateMethodSet = helper("7.3.2")`
    export default function _classStaticPrivateMethodSet() {
      throw new TypeError("attempted to set read only static private field");
    }
  `;
        helpers.classApplyDescriptorGet = helper("7.13.10")`
    export default function _classApplyDescriptorGet(receiver, descriptor) {
      if (descriptor.get) {
        return descriptor.get.call(receiver);
      }
      return descriptor.value;
    }
  `;
        helpers.classApplyDescriptorSet = helper("7.13.10")`
    export default function _classApplyDescriptorSet(receiver, descriptor, value) {
      if (descriptor.set) {
        descriptor.set.call(receiver, value);
      } else {
        if (!descriptor.writable) {
          // This should only throw in strict mode, but class bodies are
          // always strict and private fields can only be used inside
          // class bodies.
          throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
      }
    }
  `;
        helpers.classApplyDescriptorDestructureSet = helper("7.13.10")`
    export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
      if (descriptor.set) {
        if (!("__destrObj" in descriptor)) {
          descriptor.__destrObj = {
            set value(v) {
              descriptor.set.call(receiver, v)
            },
          };
        }
        return descriptor.__destrObj;
      } else {
        if (!descriptor.writable) {
          // This should only throw in strict mode, but class bodies are
          // always strict and private fields can only be used inside
          // class bodies.
          throw new TypeError("attempted to set read only private field");
        }
  
        return descriptor;
      }
    }
  `;
        helpers.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
    import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
    import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
    import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
    export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
      classCheckPrivateStaticAccess(receiver, classConstructor);
      classCheckPrivateStaticFieldDescriptor(descriptor, "set");
      return classApplyDescriptorDestructureSet(receiver, descriptor);
    }
  `;
        helpers.classCheckPrivateStaticAccess = helper("7.13.10")`
    export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
      if (receiver !== classConstructor) {
        throw new TypeError("Private static access of wrong provenance");
      }
    }
  `;
        helpers.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
    export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
      if (descriptor === undefined) {
        throw new TypeError("attempted to " + action + " private static field before its declaration");
      }
    }
  `;
        helpers.decorate = helper("7.1.5")`
    import toArray from "toArray";
    import toPropertyKey from "toPropertyKey";
  
    // These comments are stripped by @babel/template
    /*::
    type PropertyDescriptor =
      | {
          value: any,
          writable: boolean,
          configurable: boolean,
          enumerable: boolean,
        }
      | {
          get?: () => any,
          set?: (v: any) => void,
          configurable: boolean,
          enumerable: boolean,
        };
  
    type FieldDescriptor ={
      writable: boolean,
      configurable: boolean,
      enumerable: boolean,
    };
  
    type Placement = "static" | "prototype" | "own";
    type Key = string | symbol; // PrivateName is not supported yet.
  
    type ElementDescriptor =
      | {
          kind: "method",
          key: Key,
          placement: Placement,
          descriptor: PropertyDescriptor
        }
      | {
          kind: "field",
          key: Key,
          placement: Placement,
          descriptor: FieldDescriptor,
          initializer?: () => any,
        };
  
    // This is exposed to the user code
    type ElementObjectInput = ElementDescriptor & {
      [@@toStringTag]?: "Descriptor"
    };
  
    // This is exposed to the user code
    type ElementObjectOutput = ElementDescriptor & {
      [@@toStringTag]?: "Descriptor"
      extras?: ElementDescriptor[],
      finisher?: ClassFinisher,
    };
  
    // This is exposed to the user code
    type ClassObject = {
      [@@toStringTag]?: "Descriptor",
      kind: "class",
      elements: ElementDescriptor[],
    };
  
    type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
    type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
    type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;
  
    // Only used by Babel in the transform output, not part of the spec.
    type ElementDefinition =
      | {
          kind: "method",
          value: any,
          key: Key,
          static?: boolean,
          decorators?: ElementDecorator[],
        }
      | {
          kind: "field",
          value: () => any,
          key: Key,
          static?: boolean,
          decorators?: ElementDecorator[],
      };
  
    declare function ClassFactory<C>(initialize: (instance: C) => void): {
      F: Class<C>,
      d: ElementDefinition[]
    }
  
    */
  
    /*::
    // Various combinations with/without extras and with one or many finishers
  
    type ElementFinisherExtras = {
      element: ElementDescriptor,
      finisher?: ClassFinisher,
      extras?: ElementDescriptor[],
    };
  
    type ElementFinishersExtras = {
      element: ElementDescriptor,
      finishers: ClassFinisher[],
      extras: ElementDescriptor[],
    };
  
    type ElementsFinisher = {
      elements: ElementDescriptor[],
      finisher?: ClassFinisher,
    };
  
    type ElementsFinishers = {
      elements: ElementDescriptor[],
      finishers: ClassFinisher[],
    };
  
    */
  
    /*::
  
    type Placements = {
      static: Key[],
      prototype: Key[],
      own: Key[],
    };
  
    */
  
    // ClassDefinitionEvaluation (Steps 26-*)
    export default function _decorate(
      decorators /*: ClassDecorator[] */,
      factory /*: ClassFactory */,
      superClass /*: ?Class<*> */,
      mixins /*: ?Array<Function> */,
    ) /*: Class<*> */ {
      var api = _getDecoratorsApi();
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          api = mixins[i](api);
        }
      }
  
      var r = factory(function initialize(O) {
        api.initializeInstanceElements(O, decorated.elements);
      }, superClass);
      var decorated = api.decorateClass(
        _coalesceClassElements(r.d.map(_createElementDescriptor)),
        decorators,
      );
  
      api.initializeClassElements(r.F, decorated.elements);
  
      return api.runClassFinishers(r.F, decorated.finishers);
    }
  
    function _getDecoratorsApi() {
      _getDecoratorsApi = function() {
        return api;
      };
  
      var api = {
        elementsDefinitionOrder: [["method"], ["field"]],
  
        // InitializeInstanceElements
        initializeInstanceElements: function(
          /*::<C>*/ O /*: C */,
          elements /*: ElementDescriptor[] */,
        ) {
          ["method", "field"].forEach(function(kind) {
            elements.forEach(function(element /*: ElementDescriptor */) {
              if (element.kind === kind && element.placement === "own") {
                this.defineClassElement(O, element);
              }
            }, this);
          }, this);
        },
  
        // InitializeClassElements
        initializeClassElements: function(
          /*::<C>*/ F /*: Class<C> */,
          elements /*: ElementDescriptor[] */,
        ) {
          var proto = F.prototype;
  
          ["method", "field"].forEach(function(kind) {
            elements.forEach(function(element /*: ElementDescriptor */) {
              var placement = element.placement;
              if (
                element.kind === kind &&
                (placement === "static" || placement === "prototype")
              ) {
                var receiver = placement === "static" ? F : proto;
                this.defineClassElement(receiver, element);
              }
            }, this);
          }, this);
        },
  
        // DefineClassElement
        defineClassElement: function(
          /*::<C>*/ receiver /*: C | Class<C> */,
          element /*: ElementDescriptor */,
        ) {
          var descriptor /*: PropertyDescriptor */ = element.descriptor;
          if (element.kind === "field") {
            var initializer = element.initializer;
            descriptor = {
              enumerable: descriptor.enumerable,
              writable: descriptor.writable,
              configurable: descriptor.configurable,
              value: initializer === void 0 ? void 0 : initializer.call(receiver),
            };
          }
          Object.defineProperty(receiver, element.key, descriptor);
        },
  
        // DecorateClass
        decorateClass: function(
          elements /*: ElementDescriptor[] */,
          decorators /*: ClassDecorator[] */,
        ) /*: ElementsFinishers */ {
          var newElements /*: ElementDescriptor[] */ = [];
          var finishers /*: ClassFinisher[] */ = [];
          var placements /*: Placements */ = {
            static: [],
            prototype: [],
            own: [],
          };
  
          elements.forEach(function(element /*: ElementDescriptor */) {
            this.addElementPlacement(element, placements);
          }, this);
  
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (!_hasDecorators(element)) return newElements.push(element);
  
            var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
              element,
              placements,
            );
            newElements.push(elementFinishersExtras.element);
            newElements.push.apply(newElements, elementFinishersExtras.extras);
            finishers.push.apply(finishers, elementFinishersExtras.finishers);
          }, this);
  
          if (!decorators) {
            return { elements: newElements, finishers: finishers };
          }
  
          var result /*: ElementsFinishers */ = this.decorateConstructor(
            newElements,
            decorators,
          );
          finishers.push.apply(finishers, result.finishers);
          result.finishers = finishers;
  
          return result;
        },
  
        // AddElementPlacement
        addElementPlacement: function(
          element /*: ElementDescriptor */,
          placements /*: Placements */,
          silent /*: boolean */,
        ) {
          var keys = placements[element.placement];
          if (!silent && keys.indexOf(element.key) !== -1) {
            throw new TypeError("Duplicated element (" + element.key + ")");
          }
          keys.push(element.key);
        },
  
        // DecorateElement
        decorateElement: function(
          element /*: ElementDescriptor */,
          placements /*: Placements */,
        ) /*: ElementFinishersExtras */ {
          var extras /*: ElementDescriptor[] */ = [];
          var finishers /*: ClassFinisher[] */ = [];
  
          for (
            var decorators = element.decorators, i = decorators.length - 1;
            i >= 0;
            i--
          ) {
            // (inlined) RemoveElementPlacement
            var keys = placements[element.placement];
            keys.splice(keys.indexOf(element.key), 1);
  
            var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
              element,
            );
            var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
              (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
                elementObject,
            );
  
            element = elementFinisherExtras.element;
            this.addElementPlacement(element, placements);
  
            if (elementFinisherExtras.finisher) {
              finishers.push(elementFinisherExtras.finisher);
            }
  
            var newExtras /*: ElementDescriptor[] | void */ =
              elementFinisherExtras.extras;
            if (newExtras) {
              for (var j = 0; j < newExtras.length; j++) {
                this.addElementPlacement(newExtras[j], placements);
              }
              extras.push.apply(extras, newExtras);
            }
          }
  
          return { element: element, finishers: finishers, extras: extras };
        },
  
        // DecorateConstructor
        decorateConstructor: function(
          elements /*: ElementDescriptor[] */,
          decorators /*: ClassDecorator[] */,
        ) /*: ElementsFinishers */ {
          var finishers /*: ClassFinisher[] */ = [];
  
          for (var i = decorators.length - 1; i >= 0; i--) {
            var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
            var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
              (0, decorators[i])(obj) /*: ClassObject */ || obj,
            );
  
            if (elementsAndFinisher.finisher !== undefined) {
              finishers.push(elementsAndFinisher.finisher);
            }
  
            if (elementsAndFinisher.elements !== undefined) {
              elements = elementsAndFinisher.elements;
  
              for (var j = 0; j < elements.length - 1; j++) {
                for (var k = j + 1; k < elements.length; k++) {
                  if (
                    elements[j].key === elements[k].key &&
                    elements[j].placement === elements[k].placement
                  ) {
                    throw new TypeError(
                      "Duplicated element (" + elements[j].key + ")",
                    );
                  }
                }
              }
            }
          }
  
          return { elements: elements, finishers: finishers };
        },
  
        // FromElementDescriptor
        fromElementDescriptor: function(
          element /*: ElementDescriptor */,
        ) /*: ElementObject */ {
          var obj /*: ElementObject */ = {
            kind: element.kind,
            key: element.key,
            placement: element.placement,
            descriptor: element.descriptor,
          };
  
          var desc = {
            value: "Descriptor",
            configurable: true,
          };
          Object.defineProperty(obj, Symbol.toStringTag, desc);
  
          if (element.kind === "field") obj.initializer = element.initializer;
  
          return obj;
        },
  
        // ToElementDescriptors
        toElementDescriptors: function(
          elementObjects /*: ElementObject[] */,
        ) /*: ElementDescriptor[] */ {
          if (elementObjects === undefined) return;
          return toArray(elementObjects).map(function(elementObject) {
            var element = this.toElementDescriptor(elementObject);
            this.disallowProperty(elementObject, "finisher", "An element descriptor");
            this.disallowProperty(elementObject, "extras", "An element descriptor");
            return element;
          }, this);
        },
  
        // ToElementDescriptor
        toElementDescriptor: function(
          elementObject /*: ElementObject */,
        ) /*: ElementDescriptor */ {
          var kind = String(elementObject.kind);
          if (kind !== "method" && kind !== "field") {
            throw new TypeError(
              'An element descriptor\\'s .kind property must be either "method" or' +
                ' "field", but a decorator created an element descriptor with' +
                ' .kind "' +
                kind +
                '"',
            );
          }
  
          var key = toPropertyKey(elementObject.key);
  
          var placement = String(elementObject.placement);
          if (
            placement !== "static" &&
            placement !== "prototype" &&
            placement !== "own"
          ) {
            throw new TypeError(
              'An element descriptor\\'s .placement property must be one of "static",' +
                ' "prototype" or "own", but a decorator created an element descriptor' +
                ' with .placement "' +
                placement +
                '"',
            );
          }
  
          var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;
  
          this.disallowProperty(elementObject, "elements", "An element descriptor");
  
          var element /*: ElementDescriptor */ = {
            kind: kind,
            key: key,
            placement: placement,
            descriptor: Object.assign({}, descriptor),
          };
  
          if (kind !== "field") {
            this.disallowProperty(elementObject, "initializer", "A method descriptor");
          } else {
            this.disallowProperty(
              descriptor,
              "get",
              "The property descriptor of a field descriptor",
            );
            this.disallowProperty(
              descriptor,
              "set",
              "The property descriptor of a field descriptor",
            );
            this.disallowProperty(
              descriptor,
              "value",
              "The property descriptor of a field descriptor",
            );
  
            element.initializer = elementObject.initializer;
          }
  
          return element;
        },
  
        toElementFinisherExtras: function(
          elementObject /*: ElementObject */,
        ) /*: ElementFinisherExtras */ {
          var element /*: ElementDescriptor */ = this.toElementDescriptor(
            elementObject,
          );
          var finisher /*: ClassFinisher */ = _optionalCallableProperty(
            elementObject,
            "finisher",
          );
          var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
            elementObject.extras,
          );
  
          return { element: element, finisher: finisher, extras: extras };
        },
  
        // FromClassDescriptor
        fromClassDescriptor: function(
          elements /*: ElementDescriptor[] */,
        ) /*: ClassObject */ {
          var obj = {
            kind: "class",
            elements: elements.map(this.fromElementDescriptor, this),
          };
  
          var desc = { value: "Descriptor", configurable: true };
          Object.defineProperty(obj, Symbol.toStringTag, desc);
  
          return obj;
        },
  
        // ToClassDescriptor
        toClassDescriptor: function(
          obj /*: ClassObject */,
        ) /*: ElementsFinisher */ {
          var kind = String(obj.kind);
          if (kind !== "class") {
            throw new TypeError(
              'A class descriptor\\'s .kind property must be "class", but a decorator' +
                ' created a class descriptor with .kind "' +
                kind +
                '"',
            );
          }
  
          this.disallowProperty(obj, "key", "A class descriptor");
          this.disallowProperty(obj, "placement", "A class descriptor");
          this.disallowProperty(obj, "descriptor", "A class descriptor");
          this.disallowProperty(obj, "initializer", "A class descriptor");
          this.disallowProperty(obj, "extras", "A class descriptor");
  
          var finisher = _optionalCallableProperty(obj, "finisher");
          var elements = this.toElementDescriptors(obj.elements);
  
          return { elements: elements, finisher: finisher };
        },
  
        // RunClassFinishers
        runClassFinishers: function(
          constructor /*: Class<*> */,
          finishers /*: ClassFinisher[] */,
        ) /*: Class<*> */ {
          for (var i = 0; i < finishers.length; i++) {
            var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
            if (newConstructor !== undefined) {
              // NOTE: This should check if IsConstructor(newConstructor) is false.
              if (typeof newConstructor !== "function") {
                throw new TypeError("Finishers must return a constructor.");
              }
              constructor = newConstructor;
            }
          }
          return constructor;
        },
  
        disallowProperty: function(obj, name, objectType) {
          if (obj[name] !== undefined) {
            throw new TypeError(objectType + " can't have a ." + name + " property.");
          }
        }
      };
  
      return api;
    }
  
    // ClassElementEvaluation
    function _createElementDescriptor(
      def /*: ElementDefinition */,
    ) /*: ElementDescriptor */ {
      var key = toPropertyKey(def.key);
  
      var descriptor /*: PropertyDescriptor */;
      if (def.kind === "method") {
        descriptor = {
          value: def.value,
          writable: true,
          configurable: true,
          enumerable: false,
        };
      } else if (def.kind === "get") {
        descriptor = { get: def.value, configurable: true, enumerable: false };
      } else if (def.kind === "set") {
        descriptor = { set: def.value, configurable: true, enumerable: false };
      } else if (def.kind === "field") {
        descriptor = { configurable: true, writable: true, enumerable: true };
      }
  
      var element /*: ElementDescriptor */ = {
        kind: def.kind === "field" ? "field" : "method",
        key: key,
        placement: def.static
          ? "static"
          : def.kind === "field"
          ? "own"
          : "prototype",
        descriptor: descriptor,
      };
      if (def.decorators) element.decorators = def.decorators;
      if (def.kind === "field") element.initializer = def.value;
  
      return element;
    }
  
    // CoalesceGetterSetter
    function _coalesceGetterSetter(
      element /*: ElementDescriptor */,
      other /*: ElementDescriptor */,
    ) {
      if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
      } else {
        other.descriptor.set = element.descriptor.set;
      }
    }
  
    // CoalesceClassElements
    function _coalesceClassElements(
      elements /*: ElementDescriptor[] */,
    ) /*: ElementDescriptor[] */ {
      var newElements /*: ElementDescriptor[] */ = [];
  
      var isSameElement = function(
        other /*: ElementDescriptor */,
      ) /*: boolean */ {
        return (
          other.kind === "method" &&
          other.key === element.key &&
          other.placement === element.placement
        );
      };
  
      for (var i = 0; i < elements.length; i++) {
        var element /*: ElementDescriptor */ = elements[i];
        var other /*: ElementDescriptor */;
  
        if (
          element.kind === "method" &&
          (other = newElements.find(isSameElement))
        ) {
          if (
            _isDataDescriptor(element.descriptor) ||
            _isDataDescriptor(other.descriptor)
          ) {
            if (_hasDecorators(element) || _hasDecorators(other)) {
              throw new ReferenceError(
                "Duplicated methods (" + element.key + ") can't be decorated.",
              );
            }
            other.descriptor = element.descriptor;
          } else {
            if (_hasDecorators(element)) {
              if (_hasDecorators(other)) {
                throw new ReferenceError(
                  "Decorators can't be placed on different accessors with for " +
                    "the same property (" +
                    element.key +
                    ").",
                );
              }
              other.decorators = element.decorators;
            }
            _coalesceGetterSetter(element, other);
          }
        } else {
          newElements.push(element);
        }
      }
  
      return newElements;
    }
  
    function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
      return element.decorators && element.decorators.length;
    }
  
    function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
      return (
        desc !== undefined &&
        !(desc.value === undefined && desc.writable === undefined)
      );
    }
  
    function _optionalCallableProperty /*::<T>*/(
      obj /*: T */,
      name /*: $Keys<T> */,
    ) /*: ?Function */ {
      var value = obj[name];
      if (value !== undefined && typeof value !== "function") {
        throw new TypeError("Expected '" + name + "' to be a function");
      }
      return value;
    }
  
  `;
        helpers.classPrivateMethodGet = helper("7.1.6")`
    export default function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
  `;
        {
          helpers.classPrivateMethodSet = helper("7.1.6")`
      export default function _classPrivateMethodSet() {
        throw new TypeError("attempted to reassign private method");
      }
    `;
        }
      },
      { "./helpers-generated": 81, "@babel/template": 90 },
    ],
    83: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.get = get;
        exports.minVersion = minVersion;
        exports.getDependencies = getDependencies;
        exports.ensure = ensure;
        exports.default = exports.list = void 0;

        var _traverse = require("@babel/traverse");

        var t = require("@babel/types");

        var _helpers = require("./helpers");

        function makePath(path) {
          const parts = [];

          for (; path.parentPath; path = path.parentPath) {
            parts.push(path.key);
            if (path.inList) parts.push(path.listKey);
          }

          return parts.reverse().join(".");
        }

        let fileClass = undefined;

        function getHelperMetadata(file) {
          const globals = new Set();
          const localBindingNames = new Set();
          const dependencies = new Map();
          let exportName;
          let exportPath;
          const exportBindingAssignments = [];
          const importPaths = [];
          const importBindingsReferences = [];
          const dependencyVisitor = {
            ImportDeclaration(child) {
              const name = child.node.source.value;

              if (!_helpers.default[name]) {
                throw child.buildCodeFrameError(`Unknown helper ${name}`);
              }

              if (
                child.get("specifiers").length !== 1 ||
                !child.get("specifiers.0").isImportDefaultSpecifier()
              ) {
                throw child.buildCodeFrameError(
                  "Helpers can only import a default value"
                );
              }

              const bindingIdentifier = child.node.specifiers[0].local;
              dependencies.set(bindingIdentifier, name);
              importPaths.push(makePath(child));
            },

            ExportDefaultDeclaration(child) {
              const decl = child.get("declaration");

              if (decl.isFunctionDeclaration()) {
                if (!decl.node.id) {
                  throw decl.buildCodeFrameError(
                    "Helpers should give names to their exported func declaration"
                  );
                }

                exportName = decl.node.id.name;
              }

              exportPath = makePath(child);
            },

            ExportAllDeclaration(child) {
              throw child.buildCodeFrameError(
                "Helpers can only export default"
              );
            },

            ExportNamedDeclaration(child) {
              throw child.buildCodeFrameError(
                "Helpers can only export default"
              );
            },

            Statement(child) {
              if (child.isModuleDeclaration()) return;
              child.skip();
            },
          };
          const referenceVisitor = {
            Program(path) {
              const bindings = path.scope.getAllBindings();
              Object.keys(bindings).forEach((name) => {
                if (name === exportName) return;
                if (dependencies.has(bindings[name].identifier)) return;
                localBindingNames.add(name);
              });
            },

            ReferencedIdentifier(child) {
              const name = child.node.name;
              const binding = child.scope.getBinding(name, true);

              if (!binding) {
                globals.add(name);
              } else if (dependencies.has(binding.identifier)) {
                importBindingsReferences.push(makePath(child));
              }
            },

            AssignmentExpression(child) {
              const left = child.get("left");
              if (!(exportName in left.getBindingIdentifiers())) return;

              if (!left.isIdentifier()) {
                throw left.buildCodeFrameError(
                  "Only simple assignments to exports are allowed in helpers"
                );
              }

              const binding = child.scope.getBinding(exportName);

              if (binding != null && binding.scope.path.isProgram()) {
                exportBindingAssignments.push(makePath(child));
              }
            },
          };
          (0, _traverse.default)(file.ast, dependencyVisitor, file.scope);
          (0, _traverse.default)(file.ast, referenceVisitor, file.scope);
          if (!exportPath)
            throw new Error("Helpers must default-export something.");
          exportBindingAssignments.reverse();
          return {
            globals: Array.from(globals),
            localBindingNames: Array.from(localBindingNames),
            dependencies,
            exportBindingAssignments,
            exportPath,
            exportName,
            importBindingsReferences,
            importPaths,
          };
        }

        function permuteHelperAST(
          file,
          metadata,
          id,
          localBindings,
          getDependency
        ) {
          if (localBindings && !id) {
            throw new Error(
              "Unexpected local bindings for module-based helpers."
            );
          }

          if (!id) return;
          const {
            localBindingNames,
            dependencies,
            exportBindingAssignments,
            exportPath,
            exportName,
            importBindingsReferences,
            importPaths,
          } = metadata;
          const dependenciesRefs = {};
          dependencies.forEach((name, id) => {
            dependenciesRefs[id.name] =
              (typeof getDependency === "function" && getDependency(name)) ||
              id;
          });
          const toRename = {};
          const bindings = new Set(localBindings || []);
          localBindingNames.forEach((name) => {
            let newName = name;

            while (bindings.has(newName)) newName = "_" + newName;

            if (newName !== name) toRename[name] = newName;
          });

          if (id.type === "Identifier" && exportName !== id.name) {
            toRename[exportName] = id.name;
          }

          const visitor = {
            Program(path) {
              const exp = path.get(exportPath);
              const imps = importPaths.map((p) => path.get(p));
              const impsBindingRefs = importBindingsReferences.map((p) =>
                path.get(p)
              );
              const decl = exp.get("declaration");

              if (id.type === "Identifier") {
                if (decl.isFunctionDeclaration()) {
                  exp.replaceWith(decl);
                } else {
                  exp.replaceWith(
                    t.variableDeclaration("var", [
                      t.variableDeclarator(id, decl.node),
                    ])
                  );
                }
              } else if (id.type === "MemberExpression") {
                if (decl.isFunctionDeclaration()) {
                  exportBindingAssignments.forEach((assignPath) => {
                    const assign = path.get(assignPath);
                    assign.replaceWith(
                      t.assignmentExpression("=", id, assign.node)
                    );
                  });
                  exp.replaceWith(decl);
                  path.pushContainer(
                    "body",
                    t.expressionStatement(
                      t.assignmentExpression("=", id, t.identifier(exportName))
                    )
                  );
                } else {
                  exp.replaceWith(
                    t.expressionStatement(
                      t.assignmentExpression("=", id, decl.node)
                    )
                  );
                }
              } else {
                throw new Error("Unexpected helper format.");
              }

              Object.keys(toRename).forEach((name) => {
                path.scope.rename(name, toRename[name]);
              });

              for (const path of imps) path.remove();

              for (const path of impsBindingRefs) {
                const node = t.cloneNode(dependenciesRefs[path.node.name]);
                path.replaceWith(node);
              }

              path.stop();
            },
          };
          (0, _traverse.default)(file.ast, visitor, file.scope);
        }

        const helperData = Object.create(null);

        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpers.default[name];

            if (!helper) {
              throw Object.assign(
                new ReferenceError(`Unknown helper ${name}`),
                {
                  code: "BABEL_HELPER_UNKNOWN",
                  helper: name,
                }
              );
            }

            const fn = () => {
              const file = {
                ast: t.file(helper.ast()),
              };

              if (fileClass) {
                return new fileClass(
                  {
                    filename: `babel-helper://${name}`,
                  },
                  file
                );
              }

              return file;
            };

            const metadata = getHelperMetadata(fn());
            helperData[name] = {
              build(getDependency, id, localBindings) {
                const file = fn();
                permuteHelperAST(
                  file,
                  metadata,
                  id,
                  localBindings,
                  getDependency
                );
                return {
                  nodes: file.ast.program.body,
                  globals: metadata.globals,
                };
              },

              minVersion() {
                return helper.minVersion;
              },

              dependencies: metadata.dependencies,
            };
          }

          return helperData[name];
        }

        function get(name, getDependency, id, localBindings) {
          return loadHelper(name).build(getDependency, id, localBindings);
        }

        function minVersion(name) {
          return loadHelper(name).minVersion();
        }

        function getDependencies(name) {
          return Array.from(loadHelper(name).dependencies.values());
        }

        function ensure(name, newFileClass) {
          if (!fileClass) {
            fileClass = newFileClass;
          }

          loadHelper(name);
        }

        const list = Object.keys(_helpers.default)
          .map((name) => name.replace(/^_/, ""))
          .filter((name) => name !== "__esModule");
        exports.list = list;
        var _default = get;
        exports.default = _default;
      },
      { "./helpers": 82, "@babel/traverse": 99, "@babel/types": 168 },
    ],
    84: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.shouldHighlight = shouldHighlight;
        exports.getChalk = getChalk;
        exports.default = highlight;

        var _jsTokens = require("js-tokens");

        var _helperValidatorIdentifier = require("@babel/helper-validator-identifier");

        var _chalk = require("chalk");

        const sometimesKeywords = new Set([
          "as",
          "async",
          "from",
          "get",
          "of",
          "set",
        ]);

        function getDefs(chalk) {
          return {
            keyword: chalk.cyan,
            capitalized: chalk.yellow,
            jsxIdentifier: chalk.yellow,
            punctuator: chalk.yellow,
            number: chalk.magenta,
            string: chalk.green,
            regex: chalk.magenta,
            comment: chalk.grey,
            invalid: chalk.white.bgRed.bold,
          };
        }

        const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
        const BRACKET = /^[()[\]{}]$/;
        let tokenize;
        {
          const JSX_TAG = /^[a-z][\w-]*$/i;

          const getTokenType = function (token, offset, text) {
            if (token.type === "name") {
              if (
                (0, _helperValidatorIdentifier.isKeyword)(token.value) ||
                (0, _helperValidatorIdentifier.isStrictReservedWord)(
                  token.value,
                  true
                ) ||
                sometimesKeywords.has(token.value)
              ) {
                return "keyword";
              }

              if (
                JSX_TAG.test(token.value) &&
                (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")
              ) {
                return "jsxIdentifier";
              }

              if (token.value[0] !== token.value[0].toLowerCase()) {
                return "capitalized";
              }
            }

            if (token.type === "punctuator" && BRACKET.test(token.value)) {
              return "bracket";
            }

            if (
              token.type === "invalid" &&
              (token.value === "@" || token.value === "#")
            ) {
              return "punctuator";
            }

            return token.type;
          };

          tokenize = function* (text) {
            let match;

            while ((match = _jsTokens.default.exec(text))) {
              const token = _jsTokens.matchToToken(match);

              yield {
                type: getTokenType(token, match.index, text),
                value: token.value,
              };
            }
          };
        }

        function highlightTokens(defs, text) {
          let highlighted = "";

          for (const { type, value } of tokenize(text)) {
            const colorize = defs[type];

            if (colorize) {
              highlighted += value
                .split(NEWLINE)
                .map((str) => colorize(str))
                .join("\n");
            } else {
              highlighted += value;
            }
          }

          return highlighted;
        }

        function shouldHighlight(options) {
          return !!_chalk.supportsColor || options.forceColor;
        }

        function getChalk(options) {
          return options.forceColor
            ? new _chalk.constructor({
                enabled: true,
                level: 1,
              })
            : _chalk;
        }

        function highlight(code, options = {}) {
          if (shouldHighlight(options)) {
            const chalk = getChalk(options);
            const defs = getDefs(chalk);
            return highlightTokens(defs, code);
          } else {
            return code;
          }
        }
      },
      {
        "@babel/helper-validator-identifier": 79,
        chalk: 240,
        "js-tokens": 253,
      },
    ],
    85: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        const beforeExpr = true;
        const startsExpr = true;
        const isLoop = true;
        const isAssign = true;
        const prefix = true;
        const postfix = true;
        class TokenType {
          constructor(label, conf = {}) {
            this.label = void 0;
            this.keyword = void 0;
            this.beforeExpr = void 0;
            this.startsExpr = void 0;
            this.rightAssociative = void 0;
            this.isLoop = void 0;
            this.isAssign = void 0;
            this.prefix = void 0;
            this.postfix = void 0;
            this.binop = void 0;
            this.updateContext = void 0;
            this.label = label;
            this.keyword = conf.keyword;
            this.beforeExpr = !!conf.beforeExpr;
            this.startsExpr = !!conf.startsExpr;
            this.rightAssociative = !!conf.rightAssociative;
            this.isLoop = !!conf.isLoop;
            this.isAssign = !!conf.isAssign;
            this.prefix = !!conf.prefix;
            this.postfix = !!conf.postfix;
            this.binop = conf.binop != null ? conf.binop : null;
            this.updateContext = null;
          }
        }
        const keywords$1 = new Map();

        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = new TokenType(name, options);
          keywords$1.set(name, token);
          return token;
        }

        function createBinop(name, binop) {
          return new TokenType(name, {
            beforeExpr,
            binop,
          });
        }

        const types$1 = {
          num: new TokenType("num", {
            startsExpr,
          }),
          bigint: new TokenType("bigint", {
            startsExpr,
          }),
          decimal: new TokenType("decimal", {
            startsExpr,
          }),
          regexp: new TokenType("regexp", {
            startsExpr,
          }),
          string: new TokenType("string", {
            startsExpr,
          }),
          name: new TokenType("name", {
            startsExpr,
          }),
          privateName: new TokenType("#name", {
            startsExpr,
          }),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr,
            startsExpr,
          }),
          bracketHashL: new TokenType("#[", {
            beforeExpr,
            startsExpr,
          }),
          bracketBarL: new TokenType("[|", {
            beforeExpr,
            startsExpr,
          }),
          bracketR: new TokenType("]"),
          bracketBarR: new TokenType("|]"),
          braceL: new TokenType("{", {
            beforeExpr,
            startsExpr,
          }),
          braceBarL: new TokenType("{|", {
            beforeExpr,
            startsExpr,
          }),
          braceHashL: new TokenType("#{", {
            beforeExpr,
            startsExpr,
          }),
          braceR: new TokenType("}", {
            beforeExpr,
          }),
          braceBarR: new TokenType("|}"),
          parenL: new TokenType("(", {
            beforeExpr,
            startsExpr,
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", {
            beforeExpr,
          }),
          semi: new TokenType(";", {
            beforeExpr,
          }),
          colon: new TokenType(":", {
            beforeExpr,
          }),
          doubleColon: new TokenType("::", {
            beforeExpr,
          }),
          dot: new TokenType("."),
          question: new TokenType("?", {
            beforeExpr,
          }),
          questionDot: new TokenType("?."),
          arrow: new TokenType("=>", {
            beforeExpr,
          }),
          template: new TokenType("template"),
          ellipsis: new TokenType("...", {
            beforeExpr,
          }),
          backQuote: new TokenType("`", {
            startsExpr,
          }),
          dollarBraceL: new TokenType("${", {
            beforeExpr,
            startsExpr,
          }),
          at: new TokenType("@"),
          hash: new TokenType("#", {
            startsExpr,
          }),
          interpreterDirective: new TokenType("#!..."),
          eq: new TokenType("=", {
            beforeExpr,
            isAssign,
          }),
          assign: new TokenType("_=", {
            beforeExpr,
            isAssign,
          }),
          slashAssign: new TokenType("_=", {
            beforeExpr,
            isAssign,
          }),
          moduloAssign: new TokenType("_=", {
            beforeExpr,
            isAssign,
          }),
          incDec: new TokenType("++/--", {
            prefix,
            postfix,
            startsExpr,
          }),
          bang: new TokenType("!", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
          tilde: new TokenType("~", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
          pipeline: createBinop("|>", 0),
          nullishCoalescing: createBinop("??", 1),
          logicalOR: createBinop("||", 1),
          logicalAND: createBinop("&&", 2),
          bitwiseOR: createBinop("|", 3),
          bitwiseXOR: createBinop("^", 4),
          bitwiseAND: createBinop("&", 5),
          equality: createBinop("==/!=/===/!==", 6),
          relational: createBinop("</>/<=/>=", 7),
          bitShift: createBinop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr,
            binop: 9,
            prefix,
            startsExpr,
          }),
          modulo: new TokenType("%", {
            binop: 10,
            startsExpr,
          }),
          star: new TokenType("*", {
            binop: 10,
          }),
          slash: createBinop("/", 10),
          exponent: new TokenType("**", {
            beforeExpr,
            binop: 11,
            rightAssociative: true,
          }),
          _break: createKeyword("break"),
          _case: createKeyword("case", {
            beforeExpr,
          }),
          _catch: createKeyword("catch"),
          _continue: createKeyword("continue"),
          _debugger: createKeyword("debugger"),
          _default: createKeyword("default", {
            beforeExpr,
          }),
          _do: createKeyword("do", {
            isLoop,
            beforeExpr,
          }),
          _else: createKeyword("else", {
            beforeExpr,
          }),
          _finally: createKeyword("finally"),
          _for: createKeyword("for", {
            isLoop,
          }),
          _function: createKeyword("function", {
            startsExpr,
          }),
          _if: createKeyword("if"),
          _return: createKeyword("return", {
            beforeExpr,
          }),
          _switch: createKeyword("switch"),
          _throw: createKeyword("throw", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
          _try: createKeyword("try"),
          _var: createKeyword("var"),
          _const: createKeyword("const"),
          _while: createKeyword("while", {
            isLoop,
          }),
          _with: createKeyword("with"),
          _new: createKeyword("new", {
            beforeExpr,
            startsExpr,
          }),
          _this: createKeyword("this", {
            startsExpr,
          }),
          _super: createKeyword("super", {
            startsExpr,
          }),
          _class: createKeyword("class", {
            startsExpr,
          }),
          _extends: createKeyword("extends", {
            beforeExpr,
          }),
          _export: createKeyword("export"),
          _import: createKeyword("import", {
            startsExpr,
          }),
          _null: createKeyword("null", {
            startsExpr,
          }),
          _true: createKeyword("true", {
            startsExpr,
          }),
          _false: createKeyword("false", {
            startsExpr,
          }),
          _in: createKeyword("in", {
            beforeExpr,
            binop: 7,
          }),
          _instanceof: createKeyword("instanceof", {
            beforeExpr,
            binop: 7,
          }),
          _typeof: createKeyword("typeof", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
          _void: createKeyword("void", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
          _delete: createKeyword("delete", {
            beforeExpr,
            prefix,
            startsExpr,
          }),
        };

        const lineBreak = /\r\n?|[\n\u2028\u2029]/;
        const lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          switch (code) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;

            default:
              return false;
          }
        }
        const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        const skipWhiteSpaceInLine =
          /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
        const skipWhiteSpaceToLineBreak = new RegExp(
          "(?=(" +
            skipWhiteSpaceInLine.source +
            "))\\1" +
            /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source,
          "y"
        );
        function isWhitespace(code) {
          switch (code) {
            case 0x0009:
            case 0x000b:
            case 0x000c:
            case 32:
            case 160:
            case 5760:
            case 0x2000:
            case 0x2001:
            case 0x2002:
            case 0x2003:
            case 0x2004:
            case 0x2005:
            case 0x2006:
            case 0x2007:
            case 0x2008:
            case 0x2009:
            case 0x200a:
            case 0x202f:
            case 0x205f:
            case 0x3000:
            case 0xfeff:
              return true;

            default:
              return false;
          }
        }

        class Position {
          constructor(line, col) {
            this.line = void 0;
            this.column = void 0;
            this.line = line;
            this.column = col;
          }
        }
        class SourceLocation {
          constructor(start, end) {
            this.start = void 0;
            this.end = void 0;
            this.filename = void 0;
            this.identifierName = void 0;
            this.start = start;
            this.end = end;
          }
        }
        function getLineInfo(input, offset) {
          let line = 1;
          let lineStart = 0;
          let match;
          lineBreakG.lastIndex = 0;

          while ((match = lineBreakG.exec(input)) && match.index < offset) {
            line++;
            lineStart = lineBreakG.lastIndex;
          }

          return new Position(line, offset - lineStart);
        }

        class BaseParser {
          constructor() {
            this.sawUnambiguousESM = false;
            this.ambiguousScriptDifferentAst = false;
          }

          hasPlugin(name) {
            return this.plugins.has(name);
          }

          getPluginOption(plugin, name) {
            if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];
          }
        }

        function setTrailingComments(node, comments) {
          if (node.trailingComments === undefined) {
            node.trailingComments = comments;
          } else {
            node.trailingComments.unshift(...comments);
          }
        }

        function setInnerComments(node, comments) {
          if (node.innerComments === undefined) {
            node.innerComments = comments;
          } else if (comments !== undefined) {
            node.innerComments.unshift(...comments);
          }
        }

        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null;
          let i = elements.length;

          while (lastElement === null && i > 0) {
            lastElement = elements[--i];
          }

          if (lastElement === null || lastElement.start > commentWS.start) {
            setInnerComments(node, commentWS.comments);
          } else {
            setTrailingComments(lastElement, commentWS.comments);
          }
        }

        class CommentsParser extends BaseParser {
          addComment(comment) {
            if (this.filename) comment.loc.filename = this.filename;
            this.state.comments.push(comment);
          }

          processComment(node) {
            const { commentStack } = this.state;
            const commentStackLength = commentStack.length;
            if (commentStackLength === 0) return;
            let i = commentStackLength - 1;
            const lastCommentWS = commentStack[i];

            if (lastCommentWS.start === node.end) {
              lastCommentWS.leadingNode = node;
              i--;
            }

            const { start: nodeStart } = node;

            for (; i >= 0; i--) {
              const commentWS = commentStack[i];
              const commentEnd = commentWS.end;

              if (commentEnd > nodeStart) {
                commentWS.containingNode = node;
                this.finalizeComment(commentWS);
                commentStack.splice(i, 1);
              } else {
                if (commentEnd === nodeStart) {
                  commentWS.trailingNode = node;
                }

                break;
              }
            }
          }

          finalizeComment(commentWS) {
            const { comments } = commentWS;

            if (
              commentWS.leadingNode !== null ||
              commentWS.trailingNode !== null
            ) {
              if (commentWS.leadingNode !== null) {
                setTrailingComments(commentWS.leadingNode, comments);
              }

              if (commentWS.trailingNode !== null) {
                commentWS.trailingNode.leadingComments = comments;
              }
            } else {
              const { containingNode: node, start: commentStart } = commentWS;

              if (this.input.charCodeAt(commentStart - 1) === 44) {
                switch (node.type) {
                  case "ObjectExpression":
                  case "ObjectPattern":
                  case "RecordExpression":
                    adjustInnerComments(node, node.properties, commentWS);
                    break;

                  case "CallExpression":
                  case "OptionalCallExpression":
                    adjustInnerComments(node, node.arguments, commentWS);
                    break;

                  case "FunctionDeclaration":
                  case "FunctionExpression":
                  case "ArrowFunctionExpression":
                  case "ObjectMethod":
                  case "ClassMethod":
                  case "ClassPrivateMethod":
                    adjustInnerComments(node, node.params, commentWS);
                    break;

                  case "ArrayExpression":
                  case "ArrayPattern":
                  case "TupleExpression":
                    adjustInnerComments(node, node.elements, commentWS);
                    break;

                  case "ExportNamedDeclaration":
                  case "ImportDeclaration":
                    adjustInnerComments(node, node.specifiers, commentWS);
                    break;

                  default: {
                    setInnerComments(node, comments);
                  }
                }
              } else {
                setInnerComments(node, comments);
              }
            }
          }

          finalizeRemainingComments() {
            const { commentStack } = this.state;

            for (let i = commentStack.length - 1; i >= 0; i--) {
              this.finalizeComment(commentStack[i]);
            }

            this.state.commentStack = [];
          }

          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state;
            const { length } = commentStack;
            if (length === 0) return;
            const commentWS = commentStack[length - 1];

            if (commentWS.leadingNode === node) {
              commentWS.leadingNode = null;
            }
          }
        }

        const ErrorCodes = Object.freeze({
          SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
          SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED",
        });

        const ErrorMessages = makeErrorTemplates(
          {
            AccessorIsGenerator: "A %0ter cannot be a generator.",
            ArgumentsInClass:
              "'arguments' is only allowed in functions and class methods.",
            AsyncFunctionInSingleStatementContext:
              "Async functions can only be declared at the top level or inside a block.",
            AwaitBindingIdentifier:
              "Can not use 'await' as identifier inside an async function.",
            AwaitBindingIdentifierInStaticBlock:
              "Can not use 'await' as identifier inside a static block.",
            AwaitExpressionFormalParameter:
              "'await' is not allowed in async function parameters.",
            AwaitNotInAsyncContext:
              "'await' is only allowed within async functions and at the top levels of modules.",
            AwaitNotInAsyncFunction:
              "'await' is only allowed within async functions.",
            BadGetterArity:
              "A 'get' accesor must not have any formal parameters.",
            BadSetterArity:
              "A 'set' accesor must have exactly one formal parameter.",
            BadSetterRestParameter:
              "A 'set' accesor function argument must not be a rest parameter.",
            ConstructorClassField:
              "Classes may not have a field named 'constructor'.",
            ConstructorClassPrivateField:
              "Classes may not have a private field named '#constructor'.",
            ConstructorIsAccessor: "Class constructor may not be an accessor.",
            ConstructorIsAsync: "Constructor can't be an async function.",
            ConstructorIsGenerator: "Constructor can't be a generator.",
            DeclarationMissingInitializer:
              "'%0' require an initialization value.",
            DecoratorBeforeExport:
              "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
            DecoratorConstructor:
              "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
            DecoratorExportClass:
              "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
            DecoratorSemicolon:
              "Decorators must not be followed by a semicolon.",
            DecoratorStaticBlock:
              "Decorators can't be used with a static block.",
            DeletePrivateField: "Deleting a private field is not allowed.",
            DestructureNamedImport:
              "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
            DuplicateConstructor: "Duplicate constructor in the same class.",
            DuplicateDefaultExport:
              "Only one default export allowed per module.",
            DuplicateExport:
              "`%0` has already been exported. Exported identifiers must be unique.",
            DuplicateProto: "Redefinition of __proto__ property.",
            DuplicateRegExpFlags: "Duplicate regular expression flag.",
            ElementAfterRest: "Rest element must be last element.",
            EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
            ExportBindingIsString:
              "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
            ExportDefaultFromAsIdentifier:
              "'from' is not allowed as an identifier after 'export default'.",
            ForInOfLoopInitializer:
              "'%0' loop variable declaration may not have an initializer.",
            ForOfAsync:
              "The left-hand side of a for-of loop may not be 'async'.",
            ForOfLet:
              "The left-hand side of a for-of loop may not start with 'let'.",
            GeneratorInSingleStatementContext:
              "Generators can only be declared at the top level or inside a block.",
            IllegalBreakContinue: "Unsyntactic %0.",
            IllegalLanguageModeDirective:
              "Illegal 'use strict' directive in function with non-simple parameter list.",
            IllegalReturn: "'return' outside of function.",
            ImportBindingIsString:
              'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
            ImportCallArgumentTrailingComma:
              "Trailing comma is disallowed inside import(...) arguments.",
            ImportCallArity: "`import()` requires exactly %0.",
            ImportCallNotNewExpression: "Cannot use new with import(...).",
            ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
            InvalidBigIntLiteral: "Invalid BigIntLiteral.",
            InvalidCodePoint: "Code point out of bounds.",
            InvalidDecimal: "Invalid decimal.",
            InvalidDigit: "Expected number in radix %0.",
            InvalidEscapeSequence: "Bad character escape sequence.",
            InvalidEscapeSequenceTemplate:
              "Invalid escape sequence in template.",
            InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
            InvalidIdentifier: "Invalid identifier %0.",
            InvalidLhs: "Invalid left-hand side in %0.",
            InvalidLhsBinding: "Binding invalid left-hand side in %0.",
            InvalidNumber: "Invalid number.",
            InvalidOrMissingExponent:
              "Floating-point numbers require a valid exponent after the 'e'.",
            InvalidOrUnexpectedToken: "Unexpected character '%0'.",
            InvalidParenthesizedAssignment:
              "Invalid parenthesized assignment pattern.",
            InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
            InvalidPropertyBindingPattern: "Binding member expression.",
            InvalidRecordProperty:
              "Only properties and spread elements are allowed in record definitions.",
            InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
            LabelRedeclaration: "Label '%0' is already declared.",
            LetInLexicalBinding:
              "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
            LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
            MalformedRegExpFlags: "Invalid regular expression flag.",
            MissingClassName: "A class name is required.",
            MissingEqInAssignment:
              "Only '=' operator can be used for specifying default value.",
            MissingSemicolon: "Missing semicolon.",
            MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
            MixingCoalesceWithLogical:
              "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
            ModuleAttributeDifferentFromType:
              "The only accepted module attribute is `type`.",
            ModuleAttributeInvalidValue:
              "Only string literals are allowed as module attribute values.",
            ModuleAttributesWithDuplicateKeys:
              'Duplicate key "%0" is not allowed in module attributes.',
            ModuleExportNameHasLoneSurrogate:
              "An export name cannot include a lone surrogate, found '\\u%0'.",
            ModuleExportUndefined: "Export '%0' is not defined.",
            MultipleDefaultsInSwitch: "Multiple default clauses.",
            NewlineAfterThrow: "Illegal newline after throw.",
            NoCatchOrFinally: "Missing catch or finally clause.",
            NumberIdentifier: "Identifier directly after number.",
            NumericSeparatorInEscapeSequence:
              "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
            ObsoleteAwaitStar:
              "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
            OptionalChainingNoNew:
              "Constructors in/after an Optional Chain are not allowed.",
            OptionalChainingNoTemplate:
              "Tagged Template Literals are not allowed in optionalChain.",
            OverrideOnConstructor:
              "'override' modifier cannot appear on a constructor declaration.",
            ParamDupe: "Argument name clash.",
            PatternHasAccessor:
              "Object pattern can't contain getter or setter.",
            PatternHasMethod: "Object pattern can't contain methods.",
            PipeBodyIsTighter:
              "Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
            PipeTopicRequiresHackPipes:
              'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
            PipeTopicUnbound:
              "Topic reference is unbound; it must be inside a pipe body.",
            PipeTopicUnconfiguredToken:
              'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "%0" }.',
            PipeTopicUnused:
              "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
            PipelineBodyNoArrow:
              'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
            PipelineBodySequenceExpression:
              "Pipeline body may not be a comma-separated sequence expression.",
            PipelineHeadSequenceExpression:
              "Pipeline head should not be a comma-separated sequence expression.",
            PipelineTopicUnused:
              "Pipeline is in topic style but does not use topic reference.",
            PrimaryTopicNotAllowed:
              "Topic reference was used in a lexical context without topic binding.",
            PrimaryTopicRequiresSmartPipeline:
              'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
            PrivateInExpectedIn:
              "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
            PrivateNameRedeclaration: "Duplicate private name #%0.",
            RecordExpressionBarIncorrectEndSyntaxType:
              "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
            RecordExpressionBarIncorrectStartSyntaxType:
              "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
            RecordExpressionHashIncorrectStartSyntaxType:
              "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
            RecordNoProto: "'__proto__' is not allowed in Record expressions.",
            RestTrailingComma: "Unexpected trailing comma after rest element.",
            SloppyFunction:
              "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
            StaticPrototype:
              "Classes may not have static property named prototype.",
            StrictDelete: "Deleting local variable in strict mode.",
            StrictEvalArguments: "Assigning to '%0' in strict mode.",
            StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
            StrictFunction:
              "In strict mode code, functions can only be declared at top level or inside a block.",
            StrictNumericEscape:
              "The only valid numeric escape in strict mode is '\\0'.",
            StrictOctalLiteral:
              "Legacy octal literals are not allowed in strict mode.",
            StrictWith: "'with' in strict mode.",
            SuperNotAllowed:
              "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
            SuperPrivateField: "Private fields can't be accessed on super.",
            TrailingDecorator:
              "Decorators must be attached to a class element.",
            TupleExpressionBarIncorrectEndSyntaxType:
              "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
            TupleExpressionBarIncorrectStartSyntaxType:
              "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
            TupleExpressionHashIncorrectStartSyntaxType:
              "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
            UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
            UnexpectedAwaitAfterPipelineBody:
              'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
            UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
            UnexpectedImportExport:
              "'import' and 'export' may only appear at the top level.",
            UnexpectedKeyword: "Unexpected keyword '%0'.",
            UnexpectedLeadingDecorator:
              "Leading decorators must be attached to a class declaration.",
            UnexpectedLexicalDeclaration:
              "Lexical declaration cannot appear in a single-statement context.",
            UnexpectedNewTarget:
              "`new.target` can only be used in functions or class properties.",
            UnexpectedNumericSeparator:
              "A numeric separator is only allowed between two digits.",
            UnexpectedPrivateField:
              "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).",
            UnexpectedReservedWord: "Unexpected reserved word '%0'.",
            UnexpectedSuper:
              "'super' is only allowed in object methods and classes.",
            UnexpectedToken: "Unexpected token '%0'.",
            UnexpectedTokenUnaryExponentiation:
              "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
            UnsupportedBind: "Binding should be performed on object property.",
            UnsupportedDecoratorExport:
              "A decorated export must export a class declaration.",
            UnsupportedDefaultExport:
              "Only expressions, functions or classes are allowed as the `default` export.",
            UnsupportedImport:
              "`import` can only be used in `import()` or `import.meta`.",
            UnsupportedMetaProperty:
              "The only valid meta property for %0 is %0.%1.",
            UnsupportedParameterDecorator:
              "Decorators cannot be used to decorate parameters.",
            UnsupportedPropertyDecorator:
              "Decorators cannot be used to decorate object literal properties.",
            UnsupportedSuper:
              "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
            UnterminatedComment: "Unterminated comment.",
            UnterminatedRegExp: "Unterminated regular expression.",
            UnterminatedString: "Unterminated string constant.",
            UnterminatedTemplate: "Unterminated template.",
            VarRedeclaration: "Identifier '%0' has already been declared.",
            YieldBindingIdentifier:
              "Can not use 'yield' as identifier inside a generator.",
            YieldInParameter:
              "Yield expression is not allowed in formal parameters.",
            ZeroDigitNumericSeparator:
              "Numeric separator can not be used after leading 0.",
          },
          ErrorCodes.SyntaxError
        );
        const SourceTypeModuleErrorMessages = makeErrorTemplates(
          {
            ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
            ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`,
          },
          ErrorCodes.SourceTypeModuleError
        );

        function makeErrorTemplates(messages, code) {
          const templates = {};
          Object.keys(messages).forEach((reasonCode) => {
            templates[reasonCode] = Object.freeze({
              code,
              reasonCode,
              template: messages[reasonCode],
            });
          });
          return Object.freeze(templates);
        }
        class ParserError extends CommentsParser {
          getLocationForPosition(pos) {
            let loc;
            if (pos === this.state.start) loc = this.state.startLoc;
            else if (pos === this.state.lastTokStart)
              loc = this.state.lastTokStartLoc;
            else if (pos === this.state.end) loc = this.state.endLoc;
            else if (pos === this.state.lastTokEnd)
              loc = this.state.lastTokEndLoc;
            else loc = getLineInfo(this.input, pos);
            return loc;
          }

          raise(pos, { code, reasonCode, template }, ...params) {
            return this.raiseWithData(
              pos,
              {
                code,
                reasonCode,
              },
              template,
              ...params
            );
          }

          raiseOverwrite(pos, { code, template }, ...params) {
            const loc = this.getLocationForPosition(pos);
            const message =
              template.replace(/%(\d+)/g, (_, i) => params[i]) +
              ` (${loc.line}:${loc.column})`;

            if (this.options.errorRecovery) {
              const errors = this.state.errors;

              for (let i = errors.length - 1; i >= 0; i--) {
                const error = errors[i];

                if (error.pos === pos) {
                  return Object.assign(error, {
                    message,
                  });
                } else if (error.pos < pos) {
                  break;
                }
              }
            }

            return this._raise(
              {
                code,
                loc,
                pos,
              },
              message
            );
          }

          raiseWithData(pos, data, errorTemplate, ...params) {
            const loc = this.getLocationForPosition(pos);
            const message =
              errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) +
              ` (${loc.line}:${loc.column})`;
            return this._raise(
              Object.assign(
                {
                  loc,
                  pos,
                },
                data
              ),
              message
            );
          }

          _raise(errorContext, message) {
            const err = new SyntaxError(message);
            Object.assign(err, errorContext);

            if (this.options.errorRecovery) {
              if (!this.isLookahead) this.state.errors.push(err);
              return err;
            } else {
              throw err;
            }
          }
        }

        var estree = (superClass) =>
          class extends superClass {
            parseRegExpLiteral({ pattern, flags }) {
              let regex = null;

              try {
                regex = new RegExp(pattern, flags);
              } catch (e) {}

              const node = this.estreeParseLiteral(regex);
              node.regex = {
                pattern,
                flags,
              };
              return node;
            }

            parseBigIntLiteral(value) {
              let bigInt;

              try {
                bigInt = BigInt(value);
              } catch (_unused) {
                bigInt = null;
              }

              const node = this.estreeParseLiteral(bigInt);
              node.bigint = String(node.value || value);
              return node;
            }

            parseDecimalLiteral(value) {
              const decimal = null;
              const node = this.estreeParseLiteral(decimal);
              node.decimal = String(node.value || value);
              return node;
            }

            estreeParseLiteral(value) {
              return this.parseLiteral(value, "Literal");
            }

            parseStringLiteral(value) {
              return this.estreeParseLiteral(value);
            }

            parseNumericLiteral(value) {
              return this.estreeParseLiteral(value);
            }

            parseNullLiteral() {
              return this.estreeParseLiteral(null);
            }

            parseBooleanLiteral(value) {
              return this.estreeParseLiteral(value);
            }

            directiveToStmt(directive) {
              const directiveLiteral = directive.value;
              const stmt = this.startNodeAt(
                directive.start,
                directive.loc.start
              );
              const expression = this.startNodeAt(
                directiveLiteral.start,
                directiveLiteral.loc.start
              );
              expression.value = directiveLiteral.extra.expressionValue;
              expression.raw = directiveLiteral.extra.raw;
              stmt.expression = this.finishNodeAt(
                expression,
                "Literal",
                directiveLiteral.end,
                directiveLiteral.loc.end
              );
              stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
              return this.finishNodeAt(
                stmt,
                "ExpressionStatement",
                directive.end,
                directive.loc.end
              );
            }

            initFunction(node, isAsync) {
              super.initFunction(node, isAsync);
              node.expression = false;
            }

            checkDeclaration(node) {
              if (node != null && this.isObjectProperty(node)) {
                this.checkDeclaration(node.value);
              } else {
                super.checkDeclaration(node);
              }
            }

            getObjectOrClassMethodParams(method) {
              return method.value.params;
            }

            isValidDirective(stmt) {
              var _stmt$expression$extr;

              return (
                stmt.type === "ExpressionStatement" &&
                stmt.expression.type === "Literal" &&
                typeof stmt.expression.value === "string" &&
                !(
                  (_stmt$expression$extr = stmt.expression.extra) != null &&
                  _stmt$expression$extr.parenthesized
                )
              );
            }

            stmtToDirective(stmt) {
              const value = stmt.expression.value;
              const directive = super.stmtToDirective(stmt);
              this.addExtra(directive.value, "expressionValue", value);
              return directive;
            }

            parseBlockBody(node, ...args) {
              super.parseBlockBody(node, ...args);
              const directiveStatements = node.directives.map((d) =>
                this.directiveToStmt(d)
              );
              node.body = directiveStatements.concat(node.body);
              delete node.directives;
            }

            pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor,
              allowsDirectSuper
            ) {
              this.parseMethod(
                method,
                isGenerator,
                isAsync,
                isConstructor,
                allowsDirectSuper,
                "ClassMethod",
                true
              );

              if (method.typeParameters) {
                method.value.typeParameters = method.typeParameters;
                delete method.typeParameters;
              }

              classBody.body.push(method);
            }

            parseMaybePrivateName(...args) {
              const node = super.parseMaybePrivateName(...args);

              if (
                node.type === "PrivateName" &&
                this.getPluginOption("estree", "classFeatures")
              ) {
                return this.convertPrivateNameToPrivateIdentifier(node);
              }

              return node;
            }

            convertPrivateNameToPrivateIdentifier(node) {
              const name = super.getPrivateNameSV(node);
              node = node;
              delete node.id;
              node.name = name;
              node.type = "PrivateIdentifier";
              return node;
            }

            isPrivateName(node) {
              if (!this.getPluginOption("estree", "classFeatures")) {
                return super.isPrivateName(node);
              }

              return node.type === "PrivateIdentifier";
            }

            getPrivateNameSV(node) {
              if (!this.getPluginOption("estree", "classFeatures")) {
                return super.getPrivateNameSV(node);
              }

              return node.name;
            }

            parseLiteral(value, type) {
              const node = super.parseLiteral(value, type);
              node.raw = node.extra.raw;
              delete node.extra;
              return node;
            }

            parseFunctionBody(node, allowExpression, isMethod = false) {
              super.parseFunctionBody(node, allowExpression, isMethod);
              node.expression = node.body.type !== "BlockStatement";
            }

            parseMethod(
              node,
              isGenerator,
              isAsync,
              isConstructor,
              allowDirectSuper,
              type,
              inClassScope = false
            ) {
              let funcNode = this.startNode();
              funcNode.kind = node.kind;
              funcNode = super.parseMethod(
                funcNode,
                isGenerator,
                isAsync,
                isConstructor,
                allowDirectSuper,
                type,
                inClassScope
              );
              funcNode.type = "FunctionExpression";
              delete funcNode.kind;
              node.value = funcNode;

              if (type === "ClassPrivateMethod") {
                node.computed = false;
              }

              type = "MethodDefinition";
              return this.finishNode(node, type);
            }

            parseClassProperty(...args) {
              const propertyNode = super.parseClassProperty(...args);

              if (this.getPluginOption("estree", "classFeatures")) {
                propertyNode.type = "PropertyDefinition";
              }

              return propertyNode;
            }

            parseClassPrivateProperty(...args) {
              const propertyNode = super.parseClassPrivateProperty(...args);

              if (this.getPluginOption("estree", "classFeatures")) {
                propertyNode.type = "PropertyDefinition";
                propertyNode.computed = false;
              }

              return propertyNode;
            }

            parseObjectMethod(
              prop,
              isGenerator,
              isAsync,
              isPattern,
              isAccessor
            ) {
              const node = super.parseObjectMethod(
                prop,
                isGenerator,
                isAsync,
                isPattern,
                isAccessor
              );

              if (node) {
                node.type = "Property";
                if (node.kind === "method") node.kind = "init";
                node.shorthand = false;
              }

              return node;
            }

            parseObjectProperty(
              prop,
              startPos,
              startLoc,
              isPattern,
              refExpressionErrors
            ) {
              const node = super.parseObjectProperty(
                prop,
                startPos,
                startLoc,
                isPattern,
                refExpressionErrors
              );

              if (node) {
                node.kind = "init";
                node.type = "Property";
              }

              return node;
            }

            isAssignable(node, isBinding) {
              if (node != null && this.isObjectProperty(node)) {
                return this.isAssignable(node.value, isBinding);
              }

              return super.isAssignable(node, isBinding);
            }

            toAssignable(node, isLHS = false) {
              if (node != null && this.isObjectProperty(node)) {
                this.toAssignable(node.value, isLHS);
                return node;
              }

              return super.toAssignable(node, isLHS);
            }

            toAssignableObjectExpressionProp(prop, ...args) {
              if (prop.kind === "get" || prop.kind === "set") {
                this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);
              } else if (prop.method) {
                this.raise(prop.key.start, ErrorMessages.PatternHasMethod);
              } else {
                super.toAssignableObjectExpressionProp(prop, ...args);
              }
            }

            finishCallExpression(node, optional) {
              super.finishCallExpression(node, optional);

              if (node.callee.type === "Import") {
                node.type = "ImportExpression";
                node.source = node.arguments[0];

                if (this.hasPlugin("importAssertions")) {
                  var _node$arguments$;

                  node.attributes =
                    (_node$arguments$ = node.arguments[1]) != null
                      ? _node$arguments$
                      : null;
                }

                delete node.arguments;
                delete node.callee;
              }

              return node;
            }

            toReferencedArguments(node) {
              if (node.type === "ImportExpression") {
                return;
              }

              super.toReferencedArguments(node);
            }

            parseExport(node) {
              super.parseExport(node);

              switch (node.type) {
                case "ExportAllDeclaration":
                  node.exported = null;
                  break;

                case "ExportNamedDeclaration":
                  if (
                    node.specifiers.length === 1 &&
                    node.specifiers[0].type === "ExportNamespaceSpecifier"
                  ) {
                    node.type = "ExportAllDeclaration";
                    node.exported = node.specifiers[0].exported;
                    delete node.specifiers;
                  }

                  break;
              }

              return node;
            }

            parseSubscript(base, startPos, startLoc, noCalls, state) {
              const node = super.parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                state
              );

              if (state.optionalChainMember) {
                if (
                  node.type === "OptionalMemberExpression" ||
                  node.type === "OptionalCallExpression"
                ) {
                  node.type = node.type.substring(8);
                }

                if (state.stop) {
                  const chain = this.startNodeAtNode(node);
                  chain.expression = node;
                  return this.finishNode(chain, "ChainExpression");
                }
              } else if (
                node.type === "MemberExpression" ||
                node.type === "CallExpression"
              ) {
                node.optional = false;
              }

              return node;
            }

            hasPropertyAsPrivateName(node) {
              if (node.type === "ChainExpression") {
                node = node.expression;
              }

              return super.hasPropertyAsPrivateName(node);
            }

            isOptionalChain(node) {
              return node.type === "ChainExpression";
            }

            isObjectProperty(node) {
              return (
                node.type === "Property" && node.kind === "init" && !node.method
              );
            }

            isObjectMethod(node) {
              return node.method || node.kind === "get" || node.kind === "set";
            }
          };

        class TokContext {
          constructor(token, preserveSpace) {
            this.token = void 0;
            this.preserveSpace = void 0;
            this.token = token;
            this.preserveSpace = !!preserveSpace;
          }
        }
        const types = {
          brace: new TokContext("{"),
          template: new TokContext("`", true),
        };

        types$1.braceR.updateContext = (context) => {
          context.pop();
        };

        types$1.braceL.updateContext =
          types$1.braceHashL.updateContext =
          types$1.dollarBraceL.updateContext =
            (context) => {
              context.push(types.brace);
            };

        types$1.backQuote.updateContext = (context) => {
          if (context[context.length - 1] === types.template) {
            context.pop();
          } else {
            context.push(types.template);
          }
        };

        let nonASCIIidentifierStartChars =
          "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
        let nonASCIIidentifierChars =
          "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
        const nonASCIIidentifierStart = new RegExp(
          "[" + nonASCIIidentifierStartChars + "]"
        );
        const nonASCIIidentifier = new RegExp(
          "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
        );
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [
          0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4,
          48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35,
          5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2,
          1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55,
          7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53,
          11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7,
          1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27,
          35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2,
          24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6,
          2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1,
          2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43,
          117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38,
          17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264,
          8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2,
          31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070,
          4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18,
          689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8,
          8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991,
          84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3,
          7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30,
          2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11,
          6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2,
          0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1,
          2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2,
          3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12,
          221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938,
        ];
        const astralIdentifierCodes = [
          509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166,
          1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46,
          10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2,
          11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0,
          11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8,
          28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71,
          5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2,
          3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5,
          4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306,
          9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1,
          5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9,
          0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10,
          9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239,
        ];

        function isInAstralSet(code, set) {
          let pos = 0x10000;

          for (let i = 0, length = set.length; i < length; i += 2) {
            pos += set[i];
            if (pos > code) return false;
            pos += set[i + 1];
            if (pos >= code) return true;
          }

          return false;
        }

        function isIdentifierStart(code) {
          if (code < 65) return code === 36;
          if (code <= 90) return true;
          if (code < 97) return code === 95;
          if (code <= 122) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa &&
              nonASCIIidentifierStart.test(String.fromCharCode(code))
            );
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }
        function isIdentifierChar(code) {
          if (code < 48) return code === 36;
          if (code < 58) return true;
          if (code < 65) return false;
          if (code <= 90) return true;
          if (code < 97) return code === 95;
          if (code <= 122) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
            );
          }

          return (
            isInAstralSet(code, astralIdentifierStartCodes) ||
            isInAstralSet(code, astralIdentifierCodes)
          );
        }

        const reservedWords = {
          keyword: [
            "break",
            "case",
            "catch",
            "continue",
            "debugger",
            "default",
            "do",
            "else",
            "finally",
            "for",
            "function",
            "if",
            "return",
            "switch",
            "throw",
            "try",
            "var",
            "const",
            "while",
            "with",
            "new",
            "this",
            "super",
            "class",
            "extends",
            "export",
            "import",
            "null",
            "true",
            "false",
            "in",
            "instanceof",
            "typeof",
            "void",
            "delete",
          ],
          strict: [
            "implements",
            "interface",
            "let",
            "package",
            "private",
            "protected",
            "public",
            "static",
            "yield",
          ],
          strictBind: ["eval", "arguments"],
        };
        const keywords = new Set(reservedWords.keyword);
        const reservedWordsStrictSet = new Set(reservedWords.strict);
        const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
        function isReservedWord(word, inModule) {
          return (inModule && word === "await") || word === "enum";
        }
        function isStrictReservedWord(word, inModule) {
          return (
            isReservedWord(word, inModule) || reservedWordsStrictSet.has(word)
          );
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return (
            isStrictReservedWord(word, inModule) ||
            isStrictBindOnlyReservedWord(word)
          );
        }
        function isKeyword(word) {
          return keywords.has(word);
        }

        function isIteratorStart(current, next) {
          return current === 64 && next === 64;
        }
        const reservedWordLikeSet = new Set([
          "break",
          "case",
          "catch",
          "continue",
          "debugger",
          "default",
          "do",
          "else",
          "finally",
          "for",
          "function",
          "if",
          "return",
          "switch",
          "throw",
          "try",
          "var",
          "const",
          "while",
          "with",
          "new",
          "this",
          "super",
          "class",
          "extends",
          "export",
          "import",
          "null",
          "true",
          "false",
          "in",
          "instanceof",
          "typeof",
          "void",
          "delete",
          "implements",
          "interface",
          "let",
          "package",
          "private",
          "protected",
          "public",
          "static",
          "yield",
          "eval",
          "arguments",
          "enum",
          "await",
        ]);
        function canBeReservedWord(word) {
          return reservedWordLikeSet.has(word);
        }

        const SCOPE_OTHER = 0b000000000,
          SCOPE_PROGRAM = 0b000000001,
          SCOPE_FUNCTION = 0b000000010,
          SCOPE_ARROW = 0b000000100,
          SCOPE_SIMPLE_CATCH = 0b000001000,
          SCOPE_SUPER = 0b000010000,
          SCOPE_DIRECT_SUPER = 0b000100000,
          SCOPE_CLASS = 0b001000000,
          SCOPE_STATIC_BLOCK = 0b010000000,
          SCOPE_TS_MODULE = 0b100000000,
          SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
        const BIND_KIND_VALUE = 0b000000000001,
          BIND_KIND_TYPE = 0b000000000010,
          BIND_SCOPE_VAR = 0b000000000100,
          BIND_SCOPE_LEXICAL = 0b000000001000,
          BIND_SCOPE_FUNCTION = 0b000000010000,
          BIND_FLAGS_NONE = 0b000001000000,
          BIND_FLAGS_CLASS = 0b000010000000,
          BIND_FLAGS_TS_ENUM = 0b000100000000,
          BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,
          BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,
          BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;
        const BIND_CLASS =
            BIND_KIND_VALUE |
            BIND_KIND_TYPE |
            BIND_SCOPE_LEXICAL |
            BIND_FLAGS_CLASS,
          BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,
          BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,
          BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,
          BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,
          BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,
          BIND_TS_ENUM =
            BIND_KIND_VALUE |
            BIND_KIND_TYPE |
            BIND_SCOPE_LEXICAL |
            BIND_FLAGS_TS_ENUM,
          BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
          BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,
          BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,
          BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
          BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
          BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
        const CLASS_ELEMENT_FLAG_STATIC = 0b100,
          CLASS_ELEMENT_KIND_GETTER = 0b010,
          CLASS_ELEMENT_KIND_SETTER = 0b001,
          CLASS_ELEMENT_KIND_ACCESSOR =
            CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
        const CLASS_ELEMENT_STATIC_GETTER =
            CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,
          CLASS_ELEMENT_STATIC_SETTER =
            CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,
          CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,
          CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,
          CLASS_ELEMENT_OTHER = 0;

        class Scope {
          constructor(flags) {
            this.var = new Set();
            this.lexical = new Set();
            this.functions = new Set();
            this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(raise, inModule) {
            this.scopeStack = [];
            this.undefinedExports = new Map();
            this.undefinedPrivateNames = new Map();
            this.raise = raise;
            this.inModule = inModule;
          }

          get inFunction() {
            return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
          }

          get allowSuper() {
            return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
          }

          get allowDirectSuper() {
            return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
          }

          get inClass() {
            return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
          }

          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
          }

          get inStaticBlock() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];

              if (flags & SCOPE_STATIC_BLOCK) {
                return true;
              }

              if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
                return false;
              }
            }
          }

          get inNonArrowFunction() {
            return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
          }

          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }

          createScope(flags) {
            return new Scope(flags);
          }

          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }

          exit() {
            this.scopeStack.pop();
          }

          treatFunctionsAsVarInScope(scope) {
            return !!(
              scope.flags & SCOPE_FUNCTION ||
              (!this.inModule && scope.flags & SCOPE_PROGRAM)
            );
          }

          declareName(name, bindingType, pos) {
            let scope = this.currentScope();

            if (
              bindingType & BIND_SCOPE_LEXICAL ||
              bindingType & BIND_SCOPE_FUNCTION
            ) {
              this.checkRedeclarationInScope(scope, name, bindingType, pos);

              if (bindingType & BIND_SCOPE_FUNCTION) {
                scope.functions.add(name);
              } else {
                scope.lexical.add(name);
              }

              if (bindingType & BIND_SCOPE_LEXICAL) {
                this.maybeExportDefined(scope, name);
              }
            } else if (bindingType & BIND_SCOPE_VAR) {
              for (let i = this.scopeStack.length - 1; i >= 0; --i) {
                scope = this.scopeStack[i];
                this.checkRedeclarationInScope(scope, name, bindingType, pos);
                scope.var.add(name);
                this.maybeExportDefined(scope, name);
                if (scope.flags & SCOPE_VAR) break;
              }
            }

            if (this.inModule && scope.flags & SCOPE_PROGRAM) {
              this.undefinedExports.delete(name);
            }
          }

          maybeExportDefined(scope, name) {
            if (this.inModule && scope.flags & SCOPE_PROGRAM) {
              this.undefinedExports.delete(name);
            }
          }

          checkRedeclarationInScope(scope, name, bindingType, pos) {
            if (this.isRedeclaredInScope(scope, name, bindingType)) {
              this.raise(pos, ErrorMessages.VarRedeclaration, name);
            }
          }

          isRedeclaredInScope(scope, name, bindingType) {
            if (!(bindingType & BIND_KIND_VALUE)) return false;

            if (bindingType & BIND_SCOPE_LEXICAL) {
              return (
                scope.lexical.has(name) ||
                scope.functions.has(name) ||
                scope.var.has(name)
              );
            }

            if (bindingType & BIND_SCOPE_FUNCTION) {
              return (
                scope.lexical.has(name) ||
                (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))
              );
            }

            return (
              (scope.lexical.has(name) &&
                !(
                  scope.flags & SCOPE_SIMPLE_CATCH &&
                  scope.lexical.values().next().value === name
                )) ||
              (!this.treatFunctionsAsVarInScope(scope) &&
                scope.functions.has(name))
            );
          }

          checkLocalExport(id) {
            const { name } = id;
            const topLevelScope = this.scopeStack[0];

            if (
              !topLevelScope.lexical.has(name) &&
              !topLevelScope.var.has(name) &&
              !topLevelScope.functions.has(name)
            ) {
              this.undefinedExports.set(name, id.start);
            }
          }

          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }

          currentVarScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];

              if (flags & SCOPE_VAR) {
                return flags;
              }
            }
          }

          currentThisScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];

              if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
                return flags;
              }
            }
          }
        }

        class FlowScope extends Scope {
          constructor(...args) {
            super(...args);
            this.declareFunctions = new Set();
          }
        }

        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }

          declareName(name, bindingType, pos) {
            const scope = this.currentScope();

            if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
              this.checkRedeclarationInScope(scope, name, bindingType, pos);
              this.maybeExportDefined(scope, name);
              scope.declareFunctions.add(name);
              return;
            }

            super.declareName(...arguments);
          }

          isRedeclaredInScope(scope, name, bindingType) {
            if (super.isRedeclaredInScope(...arguments)) return true;

            if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
              return (
                !scope.declareFunctions.has(name) &&
                (scope.lexical.has(name) || scope.functions.has(name))
              );
            }

            return false;
          }

          checkLocalExport(id) {
            if (!this.scopeStack[0].declareFunctions.has(id.name)) {
              super.checkLocalExport(id);
            }
          }
        }

        class State {
          constructor() {
            this.strict = void 0;
            this.curLine = void 0;
            this.startLoc = void 0;
            this.endLoc = void 0;
            this.errors = [];
            this.potentialArrowAt = -1;
            this.noArrowAt = [];
            this.noArrowParamsConversionAt = [];
            this.maybeInArrowParameters = false;
            this.inType = false;
            this.noAnonFunctionType = false;
            this.inPropertyName = false;
            this.hasFlowComment = false;
            this.isAmbientContext = false;
            this.inAbstractClass = false;
            this.topicContext = {
              maxNumOfResolvableTopics: 0,
              maxTopicIndex: null,
            };
            this.soloAwait = false;
            this.inFSharpPipelineDirectBody = false;
            this.labels = [];
            this.decoratorStack = [[]];
            this.comments = [];
            this.commentStack = [];
            this.pos = 0;
            this.lineStart = 0;
            this.type = types$1.eof;
            this.value = null;
            this.start = 0;
            this.end = 0;
            this.lastTokEndLoc = null;
            this.lastTokStartLoc = null;
            this.lastTokStart = 0;
            this.lastTokEnd = 0;
            this.context = [types.brace];
            this.exprAllowed = true;
            this.containsEsc = false;
            this.strictErrors = new Map();
            this.tokensLength = 0;
          }

          init(options) {
            this.strict =
              options.strictMode === false
                ? false
                : options.strictMode === true
                ? true
                : options.sourceType === "module";
            this.curLine = options.startLine;
            this.startLoc = this.endLoc = this.curPosition();
          }

          curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart);
          }

          clone(skipArrays) {
            const state = new State();
            const keys = Object.keys(this);

            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];
              let val = this[key];

              if (!skipArrays && Array.isArray(val)) {
                val = val.slice();
              }

              state[key] = val;
            }

            return state;
          }
        }

        var _isDigit = function isDigit(code) {
          return code >= 48 && code <= 57;
        };
        const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);
        const forbiddenNumericSeparatorSiblings = {
          decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
          hex: [46, 88, 95, 120],
        };
        const allowedNumericSeparatorSiblings = {};
        allowedNumericSeparatorSiblings.bin = [48, 49];
        allowedNumericSeparatorSiblings.oct = [
          ...allowedNumericSeparatorSiblings.bin,
          50,
          51,
          52,
          53,
          54,
          55,
        ];
        allowedNumericSeparatorSiblings.dec = [
          ...allowedNumericSeparatorSiblings.oct,
          56,
          57,
        ];
        allowedNumericSeparatorSiblings.hex = [
          ...allowedNumericSeparatorSiblings.dec,
          65,
          66,
          67,
          68,
          69,
          70,
          97,
          98,
          99,
          100,
          101,
          102,
        ];
        class Token {
          constructor(state) {
            this.type = state.type;
            this.value = state.value;
            this.start = state.start;
            this.end = state.end;
            this.loc = new SourceLocation(state.startLoc, state.endLoc);
          }
        }
        class Tokenizer extends ParserError {
          constructor(options, input) {
            super();
            this.isLookahead = void 0;
            this.tokens = [];
            this.state = new State();
            this.state.init(options);
            this.input = input;
            this.length = input.length;
            this.isLookahead = false;
          }

          pushToken(token) {
            this.tokens.length = this.state.tokensLength;
            this.tokens.push(token);
            ++this.state.tokensLength;
          }

          next() {
            this.checkKeywordEscapes();

            if (this.options.tokens) {
              this.pushToken(new Token(this.state));
            }

            this.state.lastTokEnd = this.state.end;
            this.state.lastTokStart = this.state.start;
            this.state.lastTokEndLoc = this.state.endLoc;
            this.state.lastTokStartLoc = this.state.startLoc;
            this.nextToken();
          }

          eat(type) {
            if (this.match(type)) {
              this.next();
              return true;
            } else {
              return false;
            }
          }

          match(type) {
            return this.state.type === type;
          }

          createLookaheadState(state) {
            return {
              pos: state.pos,
              value: null,
              type: state.type,
              start: state.start,
              end: state.end,
              lastTokEnd: state.end,
              context: [this.curContext()],
              inType: state.inType,
            };
          }

          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old);
            this.isLookahead = true;
            this.nextToken();
            this.isLookahead = false;
            const curr = this.state;
            this.state = old;
            return curr;
          }

          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }

          nextTokenStartSince(pos) {
            skipWhiteSpace.lastIndex = pos;
            return skipWhiteSpace.test(this.input)
              ? skipWhiteSpace.lastIndex
              : pos;
          }

          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }

          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);

            if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);

              if ((trail & 0xfc00) === 0xdc00) {
                cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
              }
            }

            return cp;
          }

          setStrict(strict) {
            this.state.strict = strict;

            if (strict) {
              this.state.strictErrors.forEach((message, pos) =>
                this.raise(pos, message)
              );
              this.state.strictErrors.clear();
            }
          }

          curContext() {
            return this.state.context[this.state.context.length - 1];
          }

          nextToken() {
            const curContext = this.curContext();
            if (!curContext.preserveSpace) this.skipSpace();
            this.state.start = this.state.pos;
            if (!this.isLookahead)
              this.state.startLoc = this.state.curPosition();

            if (this.state.pos >= this.length) {
              this.finishToken(types$1.eof);
              return;
            }

            if (curContext === types.template) {
              this.readTmplToken();
            } else {
              this.getTokenFromCode(this.codePointAtPos(this.state.pos));
            }
          }

          skipBlockComment() {
            let startLoc;
            if (!this.isLookahead) startLoc = this.state.curPosition();
            const start = this.state.pos;
            const end = this.input.indexOf("*/", start + 2);
            if (end === -1)
              throw this.raise(start, ErrorMessages.UnterminatedComment);
            this.state.pos = end + 2;
            lineBreakG.lastIndex = start + 2;

            while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
              ++this.state.curLine;
              this.state.lineStart = lineBreakG.lastIndex;
            }

            if (this.isLookahead) return;
            const comment = {
              type: "CommentBlock",
              value: this.input.slice(start + 2, end),
              start,
              end: end + 2,
              loc: new SourceLocation(startLoc, this.state.curPosition()),
            };
            if (this.options.tokens) this.pushToken(comment);
            return comment;
          }

          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            if (!this.isLookahead) startLoc = this.state.curPosition();
            let ch = this.input.charCodeAt((this.state.pos += startSkip));

            if (this.state.pos < this.length) {
              while (!isNewLine(ch) && ++this.state.pos < this.length) {
                ch = this.input.charCodeAt(this.state.pos);
              }
            }

            if (this.isLookahead) return;
            const end = this.state.pos;
            const value = this.input.slice(start + startSkip, end);
            const comment = {
              type: "CommentLine",
              value,
              start,
              end,
              loc: new SourceLocation(startLoc, this.state.curPosition()),
            };
            if (this.options.tokens) this.pushToken(comment);
            return comment;
          }

          skipSpace() {
            const spaceStart = this.state.pos;
            const comments = [];

            loop: while (this.state.pos < this.length) {
              const ch = this.input.charCodeAt(this.state.pos);

              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;

                case 13:
                  if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                    ++this.state.pos;
                  }

                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos;
                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  break;

                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment();

                      if (comment !== undefined) {
                        this.addComment(comment);
                        if (this.options.attachComment) comments.push(comment);
                      }

                      break;
                    }

                    case 47: {
                      const comment = this.skipLineComment(2);

                      if (comment !== undefined) {
                        this.addComment(comment);
                        if (this.options.attachComment) comments.push(comment);
                      }

                      break;
                    }

                    default:
                      break loop;
                  }

                  break;

                default:
                  if (isWhitespace(ch)) {
                    ++this.state.pos;
                  } else if (ch === 45 && !this.inModule) {
                    const pos = this.state.pos;

                    if (
                      this.input.charCodeAt(pos + 1) === 45 &&
                      this.input.charCodeAt(pos + 2) === 62 &&
                      (spaceStart === 0 || this.state.lineStart > spaceStart)
                    ) {
                      const comment = this.skipLineComment(3);

                      if (comment !== undefined) {
                        this.addComment(comment);
                        if (this.options.attachComment) comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else if (ch === 60 && !this.inModule) {
                    const pos = this.state.pos;

                    if (
                      this.input.charCodeAt(pos + 1) === 33 &&
                      this.input.charCodeAt(pos + 2) === 45 &&
                      this.input.charCodeAt(pos + 3) === 45
                    ) {
                      const comment = this.skipLineComment(4);

                      if (comment !== undefined) {
                        this.addComment(comment);
                        if (this.options.attachComment) comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else {
                    break loop;
                  }
              }
            }

            if (comments.length > 0) {
              const end = this.state.pos;
              const CommentWhitespace = {
                start: spaceStart,
                end,
                comments,
                leadingNode: null,
                trailingNode: null,
                containingNode: null,
              };
              this.state.commentStack.push(CommentWhitespace);
            }
          }

          finishToken(type, val) {
            this.state.end = this.state.pos;
            const prevType = this.state.type;
            this.state.type = type;
            this.state.value = val;

            if (!this.isLookahead) {
              this.state.endLoc = this.state.curPosition();
              this.updateContext(prevType);
            }
          }

          readToken_numberSign() {
            if (this.state.pos === 0 && this.readToken_interpreter()) {
              return;
            }

            const nextPos = this.state.pos + 1;
            const next = this.codePointAtPos(nextPos);

            if (next >= 48 && next <= 57) {
              throw this.raise(
                this.state.pos,
                ErrorMessages.UnexpectedDigitAfterHash
              );
            }

            if (
              next === 123 ||
              (next === 91 && this.hasPlugin("recordAndTuple"))
            ) {
              this.expectPlugin("recordAndTuple");

              if (
                this.getPluginOption("recordAndTuple", "syntaxType") !== "hash"
              ) {
                throw this.raise(
                  this.state.pos,
                  next === 123
                    ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType
                    : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType
                );
              }

              this.state.pos += 2;

              if (next === 123) {
                this.finishToken(types$1.braceHashL);
              } else {
                this.finishToken(types$1.bracketHashL);
              }
            } else if (isIdentifierStart(next)) {
              ++this.state.pos;
              this.finishToken(types$1.privateName, this.readWord1(next));
            } else if (next === 92) {
              ++this.state.pos;
              this.finishToken(types$1.privateName, this.readWord1());
            } else {
              this.finishOp(types$1.hash, 1);
            }
          }

          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next >= 48 && next <= 57) {
              this.readNumber(true);
              return;
            }

            if (
              next === 46 &&
              this.input.charCodeAt(this.state.pos + 2) === 46
            ) {
              this.state.pos += 3;
              this.finishToken(types$1.ellipsis);
            } else {
              ++this.state.pos;
              this.finishToken(types$1.dot);
            }
          }

          readToken_slash() {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(types$1.slashAssign, 2);
            } else {
              this.finishOp(types$1.slash, 1);
            }
          }

          readToken_interpreter() {
            if (this.state.pos !== 0 || this.length < 2) return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (ch !== 33) return false;
            const start = this.state.pos;
            this.state.pos += 1;

            while (!isNewLine(ch) && ++this.state.pos < this.length) {
              ch = this.input.charCodeAt(this.state.pos);
            }

            const value = this.input.slice(start + 2, this.state.pos);
            this.finishToken(types$1.interpreterDirective, value);
            return true;
          }

          readToken_mult_modulo(code) {
            let type = code === 42 ? types$1.star : types$1.modulo;
            let width = 1;
            let next = this.input.charCodeAt(this.state.pos + 1);

            if (code === 42 && next === 42) {
              width++;
              next = this.input.charCodeAt(this.state.pos + 2);
              type = types$1.exponent;
            }

            if (next === 61 && !this.state.inType) {
              width++;
              type = code === 37 ? types$1.moduloAssign : types$1.assign;
            }

            this.finishOp(type, width);
          }

          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next === code) {
              if (this.input.charCodeAt(this.state.pos + 2) === 61) {
                this.finishOp(types$1.assign, 3);
              } else {
                this.finishOp(
                  code === 124 ? types$1.logicalOR : types$1.logicalAND,
                  2
                );
              }

              return;
            }

            if (code === 124) {
              if (next === 62) {
                this.finishOp(types$1.pipeline, 2);
                return;
              }

              if (this.hasPlugin("recordAndTuple") && next === 125) {
                if (
                  this.getPluginOption("recordAndTuple", "syntaxType") !== "bar"
                ) {
                  throw this.raise(
                    this.state.pos,
                    ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType
                  );
                }

                this.state.pos += 2;
                this.finishToken(types$1.braceBarR);
                return;
              }

              if (this.hasPlugin("recordAndTuple") && next === 93) {
                if (
                  this.getPluginOption("recordAndTuple", "syntaxType") !== "bar"
                ) {
                  throw this.raise(
                    this.state.pos,
                    ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType
                  );
                }

                this.state.pos += 2;
                this.finishToken(types$1.bracketBarR);
                return;
              }
            }

            if (next === 61) {
              this.finishOp(types$1.assign, 2);
              return;
            }

            this.finishOp(
              code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND,
              1
            );
          }

          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(types$1.assign, 2);
            } else {
              this.finishOp(types$1.bitwiseXOR, 1);
            }
          }

          readToken_plus_min(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next === code) {
              this.finishOp(types$1.incDec, 2);
              return;
            }

            if (next === 61) {
              this.finishOp(types$1.assign, 2);
            } else {
              this.finishOp(types$1.plusMin, 1);
            }
          }

          readToken_lt_gt(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            let size = 1;

            if (next === code) {
              size =
                code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62
                  ? 3
                  : 2;

              if (this.input.charCodeAt(this.state.pos + size) === 61) {
                this.finishOp(types$1.assign, size + 1);
                return;
              }

              this.finishOp(types$1.bitShift, size);
              return;
            }

            if (next === 61) {
              size = 2;
            }

            this.finishOp(types$1.relational, size);
          }

          readToken_eq_excl(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(
                types$1.equality,
                this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2
              );
              return;
            }

            if (code === 61 && next === 62) {
              this.state.pos += 2;
              this.finishToken(types$1.arrow);
              return;
            }

            this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);
          }

          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            const next2 = this.input.charCodeAt(this.state.pos + 2);

            if (next === 63) {
              if (next2 === 61) {
                this.finishOp(types$1.assign, 3);
              } else {
                this.finishOp(types$1.nullishCoalescing, 2);
              }
            } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
              this.state.pos += 2;
              this.finishToken(types$1.questionDot);
            } else {
              ++this.state.pos;
              this.finishToken(types$1.question);
            }
          }

          getTokenFromCode(code) {
            switch (code) {
              case 46:
                this.readToken_dot();
                return;

              case 40:
                ++this.state.pos;
                this.finishToken(types$1.parenL);
                return;

              case 41:
                ++this.state.pos;
                this.finishToken(types$1.parenR);
                return;

              case 59:
                ++this.state.pos;
                this.finishToken(types$1.semi);
                return;

              case 44:
                ++this.state.pos;
                this.finishToken(types$1.comma);
                return;

              case 91:
                if (
                  this.hasPlugin("recordAndTuple") &&
                  this.input.charCodeAt(this.state.pos + 1) === 124
                ) {
                  if (
                    this.getPluginOption("recordAndTuple", "syntaxType") !==
                    "bar"
                  ) {
                    throw this.raise(
                      this.state.pos,
                      ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType
                    );
                  }

                  this.state.pos += 2;
                  this.finishToken(types$1.bracketBarL);
                } else {
                  ++this.state.pos;
                  this.finishToken(types$1.bracketL);
                }

                return;

              case 93:
                ++this.state.pos;
                this.finishToken(types$1.bracketR);
                return;

              case 123:
                if (
                  this.hasPlugin("recordAndTuple") &&
                  this.input.charCodeAt(this.state.pos + 1) === 124
                ) {
                  if (
                    this.getPluginOption("recordAndTuple", "syntaxType") !==
                    "bar"
                  ) {
                    throw this.raise(
                      this.state.pos,
                      ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType
                    );
                  }

                  this.state.pos += 2;
                  this.finishToken(types$1.braceBarL);
                } else {
                  ++this.state.pos;
                  this.finishToken(types$1.braceL);
                }

                return;

              case 125:
                ++this.state.pos;
                this.finishToken(types$1.braceR);
                return;

              case 58:
                if (
                  this.hasPlugin("functionBind") &&
                  this.input.charCodeAt(this.state.pos + 1) === 58
                ) {
                  this.finishOp(types$1.doubleColon, 2);
                } else {
                  ++this.state.pos;
                  this.finishToken(types$1.colon);
                }

                return;

              case 63:
                this.readToken_question();
                return;

              case 96:
                ++this.state.pos;
                this.finishToken(types$1.backQuote);
                return;

              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);

                if (next === 120 || next === 88) {
                  this.readRadixNumber(16);
                  return;
                }

                if (next === 111 || next === 79) {
                  this.readRadixNumber(8);
                  return;
                }

                if (next === 98 || next === 66) {
                  this.readRadixNumber(2);
                  return;
                }
              }

              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                this.readNumber(false);
                return;

              case 34:
              case 39:
                this.readString(code);
                return;

              case 47:
                this.readToken_slash();
                return;

              case 37:
              case 42:
                this.readToken_mult_modulo(code);
                return;

              case 124:
              case 38:
                this.readToken_pipe_amp(code);
                return;

              case 94:
                this.readToken_caret();
                return;

              case 43:
              case 45:
                this.readToken_plus_min(code);
                return;

              case 60:
              case 62:
                this.readToken_lt_gt(code);
                return;

              case 61:
              case 33:
                this.readToken_eq_excl(code);
                return;

              case 126:
                this.finishOp(types$1.tilde, 1);
                return;

              case 64:
                ++this.state.pos;
                this.finishToken(types$1.at);
                return;

              case 35:
                this.readToken_numberSign();
                return;

              case 92:
                this.readWord();
                return;

              default:
                if (isIdentifierStart(code)) {
                  this.readWord(code);
                  return;
                }
            }

            throw this.raise(
              this.state.pos,
              ErrorMessages.InvalidOrUnexpectedToken,
              String.fromCodePoint(code)
            );
          }

          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size;
            this.finishToken(type, str);
          }

          readRegexp() {
            const start = this.state.start + 1;
            let escaped, inClass;
            let { pos } = this.state;

            for (; ; ++pos) {
              if (pos >= this.length) {
                throw this.raise(start, ErrorMessages.UnterminatedRegExp);
              }

              const ch = this.input.charCodeAt(pos);

              if (isNewLine(ch)) {
                throw this.raise(start, ErrorMessages.UnterminatedRegExp);
              }

              if (escaped) {
                escaped = false;
              } else {
                if (ch === 91) {
                  inClass = true;
                } else if (ch === 93 && inClass) {
                  inClass = false;
                } else if (ch === 47 && !inClass) {
                  break;
                }

                escaped = ch === 92;
              }
            }

            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";

            while (pos < this.length) {
              const cp = this.codePointAtPos(pos);
              const char = String.fromCharCode(cp);

              if (VALID_REGEX_FLAGS.has(cp)) {
                if (mods.includes(char)) {
                  this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);
                }
              } else if (isIdentifierChar(cp) || cp === 92) {
                this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);
              } else {
                break;
              }

              ++pos;
              mods += char;
            }

            this.state.pos = pos;
            this.finishToken(types$1.regexp, {
              pattern: content,
              flags: mods,
            });
          }

          readInt(radix, len, forceLen, allowNumSeparator = true) {
            const start = this.state.pos;
            const forbiddenSiblings =
              radix === 16
                ? forbiddenNumericSeparatorSiblings.hex
                : forbiddenNumericSeparatorSiblings.decBinOct;
            const allowedSiblings =
              radix === 16
                ? allowedNumericSeparatorSiblings.hex
                : radix === 10
                ? allowedNumericSeparatorSiblings.dec
                : radix === 8
                ? allowedNumericSeparatorSiblings.oct
                : allowedNumericSeparatorSiblings.bin;
            let invalid = false;
            let total = 0;

            for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
              const code = this.input.charCodeAt(this.state.pos);
              let val;

              if (code === 95) {
                const prev = this.input.charCodeAt(this.state.pos - 1);
                const next = this.input.charCodeAt(this.state.pos + 1);

                if (allowedSiblings.indexOf(next) === -1) {
                  this.raise(
                    this.state.pos,
                    ErrorMessages.UnexpectedNumericSeparator
                  );
                } else if (
                  forbiddenSiblings.indexOf(prev) > -1 ||
                  forbiddenSiblings.indexOf(next) > -1 ||
                  Number.isNaN(next)
                ) {
                  this.raise(
                    this.state.pos,
                    ErrorMessages.UnexpectedNumericSeparator
                  );
                }

                if (!allowNumSeparator) {
                  this.raise(
                    this.state.pos,
                    ErrorMessages.NumericSeparatorInEscapeSequence
                  );
                }

                ++this.state.pos;
                continue;
              }

              if (code >= 97) {
                val = code - 97 + 10;
              } else if (code >= 65) {
                val = code - 65 + 10;
              } else if (_isDigit(code)) {
                val = code - 48;
              } else {
                val = Infinity;
              }

              if (val >= radix) {
                if (this.options.errorRecovery && val <= 9) {
                  val = 0;
                  this.raise(
                    this.state.start + i + 2,
                    ErrorMessages.InvalidDigit,
                    radix
                  );
                } else if (forceLen) {
                  val = 0;
                  invalid = true;
                } else {
                  break;
                }
              }

              ++this.state.pos;
              total = total * radix + val;
            }

            if (
              this.state.pos === start ||
              (len != null && this.state.pos - start !== len) ||
              invalid
            ) {
              return null;
            }

            return total;
          }

          readRadixNumber(radix) {
            const start = this.state.pos;
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);

            if (val == null) {
              this.raise(
                this.state.start + 2,
                ErrorMessages.InvalidDigit,
                radix
              );
            }

            const next = this.input.charCodeAt(this.state.pos);

            if (next === 110) {
              ++this.state.pos;
              isBigInt = true;
            } else if (next === 109) {
              throw this.raise(start, ErrorMessages.InvalidDecimal);
            }

            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
              throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
            }

            if (isBigInt) {
              const str = this.input
                .slice(start, this.state.pos)
                .replace(/[_n]/g, "");
              this.finishToken(types$1.bigint, str);
              return;
            }

            this.finishToken(types$1.num, val);
          }

          readNumber(startsWithDot) {
            const start = this.state.pos;
            let isFloat = false;
            let isBigInt = false;
            let isDecimal = false;
            let hasExponent = false;
            let isOctal = false;

            if (!startsWithDot && this.readInt(10) === null) {
              this.raise(start, ErrorMessages.InvalidNumber);
            }

            const hasLeadingZero =
              this.state.pos - start >= 2 &&
              this.input.charCodeAt(start) === 48;

            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              this.recordStrictModeErrors(
                start,
                ErrorMessages.StrictOctalLiteral
              );

              if (!this.state.strict) {
                const underscorePos = integer.indexOf("_");

                if (underscorePos > 0) {
                  this.raise(
                    underscorePos + start,
                    ErrorMessages.ZeroDigitNumericSeparator
                  );
                }
              }

              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }

            let next = this.input.charCodeAt(this.state.pos);

            if (next === 46 && !isOctal) {
              ++this.state.pos;
              this.readInt(10);
              isFloat = true;
              next = this.input.charCodeAt(this.state.pos);
            }

            if ((next === 69 || next === 101) && !isOctal) {
              next = this.input.charCodeAt(++this.state.pos);

              if (next === 43 || next === 45) {
                ++this.state.pos;
              }

              if (this.readInt(10) === null) {
                this.raise(start, ErrorMessages.InvalidOrMissingExponent);
              }

              isFloat = true;
              hasExponent = true;
              next = this.input.charCodeAt(this.state.pos);
            }

            if (next === 110) {
              if (isFloat || hasLeadingZero) {
                this.raise(start, ErrorMessages.InvalidBigIntLiteral);
              }

              ++this.state.pos;
              isBigInt = true;
            }

            if (next === 109) {
              this.expectPlugin("decimal", this.state.pos);

              if (hasExponent || hasLeadingZero) {
                this.raise(start, ErrorMessages.InvalidDecimal);
              }

              ++this.state.pos;
              isDecimal = true;
            }

            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
              throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
            }

            const str = this.input
              .slice(start, this.state.pos)
              .replace(/[_mn]/g, "");

            if (isBigInt) {
              this.finishToken(types$1.bigint, str);
              return;
            }

            if (isDecimal) {
              this.finishToken(types$1.decimal, str);
              return;
            }

            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(types$1.num, val);
          }

          readCodePoint(throwOnInvalid) {
            const ch = this.input.charCodeAt(this.state.pos);
            let code;

            if (ch === 123) {
              const codePos = ++this.state.pos;
              code = this.readHexChar(
                this.input.indexOf("}", this.state.pos) - this.state.pos,
                true,
                throwOnInvalid
              );
              ++this.state.pos;

              if (code !== null && code > 0x10ffff) {
                if (throwOnInvalid) {
                  this.raise(codePos, ErrorMessages.InvalidCodePoint);
                } else {
                  return null;
                }
              }
            } else {
              code = this.readHexChar(4, false, throwOnInvalid);
            }

            return code;
          }

          readString(quote) {
            let out = "",
              chunkStart = ++this.state.pos;

            for (;;) {
              if (this.state.pos >= this.length) {
                throw this.raise(
                  this.state.start,
                  ErrorMessages.UnterminatedString
                );
              }

              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote) break;

              if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.readEscapedChar(false);
                chunkStart = this.state.pos;
              } else if (ch === 8232 || ch === 8233) {
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
              } else if (isNewLine(ch)) {
                throw this.raise(
                  this.state.start,
                  ErrorMessages.UnterminatedString
                );
              } else {
                ++this.state.pos;
              }
            }

            out += this.input.slice(chunkStart, this.state.pos++);
            this.finishToken(types$1.string, out);
          }

          readTmplToken() {
            let out = "",
              chunkStart = this.state.pos,
              containsInvalid = false;

            for (;;) {
              if (this.state.pos >= this.length) {
                throw this.raise(
                  this.state.start,
                  ErrorMessages.UnterminatedTemplate
                );
              }

              const ch = this.input.charCodeAt(this.state.pos);

              if (
                ch === 96 ||
                (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123)
              ) {
                if (
                  this.state.pos === this.state.start &&
                  this.match(types$1.template)
                ) {
                  if (ch === 36) {
                    this.state.pos += 2;
                    this.finishToken(types$1.dollarBraceL);
                    return;
                  } else {
                    ++this.state.pos;
                    this.finishToken(types$1.backQuote);
                    return;
                  }
                }

                out += this.input.slice(chunkStart, this.state.pos);
                this.finishToken(
                  types$1.template,
                  containsInvalid ? null : out
                );
                return;
              }

              if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                const escaped = this.readEscapedChar(true);

                if (escaped === null) {
                  containsInvalid = true;
                } else {
                  out += escaped;
                }

                chunkStart = this.state.pos;
              } else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                ++this.state.pos;

                switch (ch) {
                  case 13:
                    if (this.input.charCodeAt(this.state.pos) === 10) {
                      ++this.state.pos;
                    }

                  case 10:
                    out += "\n";
                    break;

                  default:
                    out += String.fromCharCode(ch);
                    break;
                }

                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
            }
          }

          recordStrictModeErrors(pos, message) {
            if (this.state.strict && !this.state.strictErrors.has(pos)) {
              this.raise(pos, message);
            } else {
              this.state.strictErrors.set(pos, message);
            }
          }

          readEscapedChar(inTemplate) {
            const throwOnInvalid = !inTemplate;
            const ch = this.input.charCodeAt(++this.state.pos);
            ++this.state.pos;

            switch (ch) {
              case 110:
                return "\n";

              case 114:
                return "\r";

              case 120: {
                const code = this.readHexChar(2, false, throwOnInvalid);
                return code === null ? null : String.fromCharCode(code);
              }

              case 117: {
                const code = this.readCodePoint(throwOnInvalid);
                return code === null ? null : String.fromCodePoint(code);
              }

              case 116:
                return "\t";

              case 98:
                return "\b";

              case 118:
                return "\u000b";

              case 102:
                return "\f";

              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                }

              case 10:
                this.state.lineStart = this.state.pos;
                ++this.state.curLine;

              case 8232:
              case 8233:
                return "";

              case 56:
              case 57:
                if (inTemplate) {
                  return null;
                } else {
                  this.recordStrictModeErrors(
                    this.state.pos - 1,
                    ErrorMessages.StrictNumericEscape
                  );
                }

              default:
                if (ch >= 48 && ch <= 55) {
                  const codePos = this.state.pos - 1;
                  const match = this.input
                    .substr(this.state.pos - 1, 3)
                    .match(/^[0-7]+/);
                  let octalStr = match[0];
                  let octal = parseInt(octalStr, 8);

                  if (octal > 255) {
                    octalStr = octalStr.slice(0, -1);
                    octal = parseInt(octalStr, 8);
                  }

                  this.state.pos += octalStr.length - 1;
                  const next = this.input.charCodeAt(this.state.pos);

                  if (octalStr !== "0" || next === 56 || next === 57) {
                    if (inTemplate) {
                      return null;
                    } else {
                      this.recordStrictModeErrors(
                        codePos,
                        ErrorMessages.StrictNumericEscape
                      );
                    }
                  }

                  return String.fromCharCode(octal);
                }

                return String.fromCharCode(ch);
            }
          }

          readHexChar(len, forceLen, throwOnInvalid) {
            const codePos = this.state.pos;
            const n = this.readInt(16, len, forceLen, false);

            if (n === null) {
              if (throwOnInvalid) {
                this.raise(codePos, ErrorMessages.InvalidEscapeSequence);
              } else {
                this.state.pos = codePos - 1;
              }
            }

            return n;
          }

          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;

            if (firstCode !== undefined) {
              this.state.pos += firstCode <= 0xffff ? 1 : 2;
            }

            while (this.state.pos < this.length) {
              const ch = this.codePointAtPos(this.state.pos);

              if (isIdentifierChar(ch)) {
                this.state.pos += ch <= 0xffff ? 1 : 2;
              } else if (ch === 92) {
                this.state.containsEsc = true;
                word += this.input.slice(chunkStart, this.state.pos);
                const escStart = this.state.pos;
                const identifierCheck =
                  this.state.pos === start
                    ? isIdentifierStart
                    : isIdentifierChar;

                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                  this.raise(
                    this.state.pos,
                    ErrorMessages.MissingUnicodeEscape
                  );
                  chunkStart = this.state.pos - 1;
                  continue;
                }

                ++this.state.pos;
                const esc = this.readCodePoint(true);

                if (esc !== null) {
                  if (!identifierCheck(esc)) {
                    this.raise(
                      escStart,
                      ErrorMessages.EscapedCharNotAnIdentifier
                    );
                  }

                  word += String.fromCodePoint(esc);
                }

                chunkStart = this.state.pos;
              } else {
                break;
              }
            }

            return word + this.input.slice(chunkStart, this.state.pos);
          }

          readWord(firstCode) {
            const word = this.readWord1(firstCode);
            const type = keywords$1.get(word) || types$1.name;
            this.finishToken(type, word);
          }

          checkKeywordEscapes() {
            const kw = this.state.type.keyword;

            if (kw && this.state.containsEsc) {
              this.raise(
                this.state.start,
                ErrorMessages.InvalidEscapedReservedWord,
                kw
              );
            }
          }

          updateContext(prevType) {
            var _this$state$type$upda, _this$state$type;

            (_this$state$type$upda = (_this$state$type = this.state.type)
              .updateContext) == null
              ? void 0
              : _this$state$type$upda.call(
                  _this$state$type,
                  this.state.context
                );
          }
        }

        class ClassScope {
          constructor() {
            this.privateNames = new Set();
            this.loneAccessors = new Map();
            this.undefinedPrivateNames = new Map();
          }
        }
        class ClassScopeHandler {
          constructor(raise) {
            this.stack = [];
            this.undefinedPrivateNames = new Map();
            this.raise = raise;
          }

          current() {
            return this.stack[this.stack.length - 1];
          }

          enter() {
            this.stack.push(new ClassScope());
          }

          exit() {
            const oldClassScope = this.stack.pop();
            const current = this.current();

            for (const [name, pos] of Array.from(
              oldClassScope.undefinedPrivateNames
            )) {
              if (current) {
                if (!current.undefinedPrivateNames.has(name)) {
                  current.undefinedPrivateNames.set(name, pos);
                }
              } else {
                this.raise(
                  pos,
                  ErrorMessages.InvalidPrivateFieldResolution,
                  name
                );
              }
            }
          }

          declarePrivateName(name, elementType, pos) {
            const classScope = this.current();
            let redefined = classScope.privateNames.has(name);

            if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
              const accessor = redefined && classScope.loneAccessors.get(name);

              if (accessor) {
                const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
                const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
                const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
                const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
                redefined = oldKind === newKind || oldStatic !== newStatic;
                if (!redefined) classScope.loneAccessors.delete(name);
              } else if (!redefined) {
                classScope.loneAccessors.set(name, elementType);
              }
            }

            if (redefined) {
              this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);
            }

            classScope.privateNames.add(name);
            classScope.undefinedPrivateNames.delete(name);
          }

          usePrivateName(name, pos) {
            let classScope;

            for (classScope of this.stack) {
              if (classScope.privateNames.has(name)) return;
            }

            if (classScope) {
              classScope.undefinedPrivateNames.set(name, pos);
            } else {
              this.raise(
                pos,
                ErrorMessages.InvalidPrivateFieldResolution,
                name
              );
            }
          }
        }

        const kExpression = 0,
          kMaybeArrowParameterDeclaration = 1,
          kMaybeAsyncArrowParameterDeclaration = 2,
          kParameterDeclaration = 3;

        class ExpressionScope {
          constructor(type = kExpression) {
            this.type = void 0;
            this.type = type;
          }

          canBeArrowParameterDeclaration() {
            return (
              this.type === kMaybeAsyncArrowParameterDeclaration ||
              this.type === kMaybeArrowParameterDeclaration
            );
          }

          isCertainlyParameterDeclaration() {
            return this.type === kParameterDeclaration;
          }
        }

        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type);
            this.errors = new Map();
          }

          recordDeclarationError(pos, template) {
            this.errors.set(pos, template);
          }

          clearDeclarationError(pos) {
            this.errors.delete(pos);
          }

          iterateErrors(iterator) {
            this.errors.forEach(iterator);
          }
        }

        class ExpressionScopeHandler {
          constructor(raise) {
            this.stack = [new ExpressionScope()];
            this.raise = raise;
          }

          enter(scope) {
            this.stack.push(scope);
          }

          exit() {
            this.stack.pop();
          }

          recordParameterInitializerError(pos, template) {
            const { stack } = this;
            let i = stack.length - 1;
            let scope = stack[i];

            while (!scope.isCertainlyParameterDeclaration()) {
              if (scope.canBeArrowParameterDeclaration()) {
                scope.recordDeclarationError(pos, template);
              } else {
                return;
              }

              scope = stack[--i];
            }

            this.raise(pos, template);
          }

          recordParenthesizedIdentifierError(pos, template) {
            const { stack } = this;
            const scope = stack[stack.length - 1];

            if (scope.isCertainlyParameterDeclaration()) {
              this.raise(pos, template);
            } else if (scope.canBeArrowParameterDeclaration()) {
              scope.recordDeclarationError(pos, template);
            } else {
              return;
            }
          }

          recordAsyncArrowParametersError(pos, template) {
            const { stack } = this;
            let i = stack.length - 1;
            let scope = stack[i];

            while (scope.canBeArrowParameterDeclaration()) {
              if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
                scope.recordDeclarationError(pos, template);
              }

              scope = stack[--i];
            }
          }

          validateAsPattern() {
            const { stack } = this;
            const currentScope = stack[stack.length - 1];
            if (!currentScope.canBeArrowParameterDeclaration()) return;
            currentScope.iterateErrors((template, pos) => {
              this.raise(pos, template);
              let i = stack.length - 2;
              let scope = stack[i];

              while (scope.canBeArrowParameterDeclaration()) {
                scope.clearDeclarationError(pos);
                scope = stack[--i];
              }
            });
          }
        }
        function newParameterDeclarationScope() {
          return new ExpressionScope(kParameterDeclaration);
        }
        function newArrowHeadScope() {
          return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
        }
        function newAsyncArrowScope() {
          return new ArrowHeadParsingScope(
            kMaybeAsyncArrowParameterDeclaration
          );
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }

        const PARAM = 0b0000,
          PARAM_YIELD = 0b0001,
          PARAM_AWAIT = 0b0010,
          PARAM_RETURN = 0b0100,
          PARAM_IN = 0b1000;
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }

          enter(flags) {
            this.stacks.push(flags);
          }

          exit() {
            this.stacks.pop();
          }

          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }

          get hasAwait() {
            return (this.currentFlags() & PARAM_AWAIT) > 0;
          }

          get hasYield() {
            return (this.currentFlags() & PARAM_YIELD) > 0;
          }

          get hasReturn() {
            return (this.currentFlags() & PARAM_RETURN) > 0;
          }

          get hasIn() {
            return (this.currentFlags() & PARAM_IN) > 0;
          }
        }
        function functionFlags(isAsync, isGenerator) {
          return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
        }

        class UtilParser extends Tokenizer {
          addExtra(node, key, val) {
            if (!node) return;
            const extra = (node.extra = node.extra || {});
            extra[key] = val;
          }

          isRelational(op) {
            return this.match(types$1.relational) && this.state.value === op;
          }

          expectRelational(op) {
            if (this.isRelational(op)) {
              this.next();
            } else {
              this.unexpected(null, types$1.relational);
            }
          }

          isContextual(name) {
            return (
              this.match(types$1.name) &&
              this.state.value === name &&
              !this.state.containsEsc
            );
          }

          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;

            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(
                isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800
              );
            }

            return false;
          }

          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }

          eatContextual(name) {
            return this.isContextual(name) && this.eat(types$1.name);
          }

          expectContextual(name, template) {
            if (!this.eatContextual(name)) this.unexpected(null, template);
          }

          canInsertSemicolon() {
            return (
              this.match(types$1.eof) ||
              this.match(types$1.braceR) ||
              this.hasPrecedingLineBreak()
            );
          }

          hasPrecedingLineBreak() {
            return lineBreak.test(
              this.input.slice(this.state.lastTokEnd, this.state.start)
            );
          }

          hasFollowingLineBreak() {
            skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
            return skipWhiteSpaceToLineBreak.test(this.input);
          }

          isLineTerminator() {
            return this.eat(types$1.semi) || this.canInsertSemicolon();
          }

          semicolon(allowAsi = true) {
            if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi))
              return;
            this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);
          }

          expect(type, pos) {
            this.eat(type) || this.unexpected(pos, type);
          }

          assertNoSpace(message = "Unexpected space.") {
            if (this.state.start > this.state.lastTokEnd) {
              this.raise(this.state.lastTokEnd, {
                code: ErrorCodes.SyntaxError,
                reasonCode: "UnexpectedSpace",
                template: message,
              });
            }
          }

          unexpected(
            pos,
            messageOrType = {
              code: ErrorCodes.SyntaxError,
              reasonCode: "UnexpectedToken",
              template: "Unexpected token",
            }
          ) {
            if (messageOrType instanceof TokenType) {
              messageOrType = {
                code: ErrorCodes.SyntaxError,
                reasonCode: "UnexpectedToken",
                template: `Unexpected token, expected "${messageOrType.label}"`,
              };
            }

            throw this.raise(
              pos != null ? pos : this.state.start,
              messageOrType
            );
          }

          expectPlugin(name, pos) {
            if (!this.hasPlugin(name)) {
              throw this.raiseWithData(
                pos != null ? pos : this.state.start,
                {
                  missingPlugin: [name],
                },
                `This experimental syntax requires enabling the parser plugin: '${name}'`
              );
            }

            return true;
          }

          expectOnePlugin(names, pos) {
            if (!names.some((n) => this.hasPlugin(n))) {
              throw this.raiseWithData(
                pos != null ? pos : this.state.start,
                {
                  missingPlugin: names,
                },
                `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(
                  ", "
                )}'`
              );
            }
          }

          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = {
              node: null,
            };

            try {
              const node = fn((node = null) => {
                abortSignal.node = node;
                throw abortSignal;
              });

              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                this.state = oldState;
                this.state.tokensLength = failState.tokensLength;
                return {
                  node,
                  error: failState.errors[oldState.errors.length],
                  thrown: false,
                  aborted: false,
                  failState,
                };
              }

              return {
                node,
                error: null,
                thrown: false,
                aborted: false,
                failState: null,
              };
            } catch (error) {
              const failState = this.state;
              this.state = oldState;

              if (error instanceof SyntaxError) {
                return {
                  node: null,
                  error,
                  thrown: true,
                  aborted: false,
                  failState,
                };
              }

              if (error === abortSignal) {
                return {
                  node: abortSignal.node,
                  error: null,
                  thrown: false,
                  aborted: true,
                  failState,
                };
              }

              throw error;
            }
          }

          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors) return false;
            const { shorthandAssign, doubleProto, optionalParameters } =
              refExpressionErrors;

            if (!andThrow) {
              return (
                shorthandAssign >= 0 ||
                doubleProto >= 0 ||
                optionalParameters >= 0
              );
            }

            if (shorthandAssign >= 0) {
              this.unexpected(shorthandAssign);
            }

            if (doubleProto >= 0) {
              this.raise(doubleProto, ErrorMessages.DuplicateProto);
            }

            if (optionalParameters >= 0) {
              this.unexpected(optionalParameters);
            }
          }

          isLiteralPropertyName() {
            return (
              this.match(types$1.name) ||
              !!this.state.type.keyword ||
              this.match(types$1.string) ||
              this.match(types$1.num) ||
              this.match(types$1.bigint) ||
              this.match(types$1.decimal)
            );
          }

          isPrivateName(node) {
            return node.type === "PrivateName";
          }

          getPrivateNameSV(node) {
            return node.id.name;
          }

          hasPropertyAsPrivateName(node) {
            return (
              (node.type === "MemberExpression" ||
                node.type === "OptionalMemberExpression") &&
              this.isPrivateName(node.property)
            );
          }

          isOptionalChain(node) {
            return (
              node.type === "OptionalMemberExpression" ||
              node.type === "OptionalCallExpression"
            );
          }

          isObjectProperty(node) {
            return node.type === "ObjectProperty";
          }

          isObjectMethod(node) {
            return node.type === "ObjectMethod";
          }

          initializeScopes(inModule = this.options.sourceType === "module") {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope;
            const ScopeHandler = this.getScopeHandler();
            this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this.raise.bind(this));
            const oldExpressionScope = this.expressionScope;
            this.expressionScope = new ExpressionScopeHandler(
              this.raise.bind(this)
            );
            return () => {
              this.state.labels = oldLabels;
              this.exportedIdentifiers = oldExportedIdentifiers;
              this.inModule = oldInModule;
              this.scope = oldScope;
              this.prodParam = oldProdParam;
              this.classScope = oldClassScope;
              this.expressionScope = oldExpressionScope;
            };
          }

          enterInitialScopes() {
            let paramFlags = PARAM;

            if (this.inModule) {
              paramFlags |= PARAM_AWAIT;
            }

            this.scope.enter(SCOPE_PROGRAM);
            this.prodParam.enter(paramFlags);
          }
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssign = -1;
            this.doubleProto = -1;
            this.optionalParameters = -1;
          }
        }

        class Node {
          constructor(parser, pos, loc) {
            this.type = "";
            this.start = pos;
            this.end = 0;
            this.loc = new SourceLocation(loc);
            if (parser != null && parser.options.ranges) this.range = [pos, 0];
            if (parser != null && parser.filename)
              this.loc.filename = parser.filename;
          }
        }

        const NodePrototype = Node.prototype;
        {
          NodePrototype.__clone = function () {
            const newNode = new Node();
            const keys = Object.keys(this);

            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];

              if (
                key !== "leadingComments" &&
                key !== "trailingComments" &&
                key !== "innerComments"
              ) {
                newNode[key] = this[key];
              }
            }

            return newNode;
          };
        }

        function clonePlaceholder(node) {
          return cloneIdentifier(node);
        }

        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node;
          const cloned = Object.create(NodePrototype);
          cloned.type = type;
          cloned.start = start;
          cloned.end = end;
          cloned.loc = loc;
          cloned.range = range;
          cloned.extra = extra;
          cloned.name = name;

          if (type === "Placeholder") {
            cloned.expectedNode = node.expectedNode;
          }

          return cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;

          if (type === "Placeholder") {
            return clonePlaceholder(node);
          }

          const cloned = Object.create(NodePrototype);
          cloned.type = "StringLiteral";
          cloned.start = start;
          cloned.end = end;
          cloned.loc = loc;
          cloned.range = range;
          cloned.extra = extra;
          cloned.value = node.value;
          return cloned;
        }
        class NodeUtils extends UtilParser {
          startNode() {
            return new Node(this, this.state.start, this.state.startLoc);
          }

          startNodeAt(pos, loc) {
            return new Node(this, pos, loc);
          }

          startNodeAtNode(type) {
            return this.startNodeAt(type.start, type.loc.start);
          }

          finishNode(node, type) {
            return this.finishNodeAt(
              node,
              type,
              this.state.lastTokEnd,
              this.state.lastTokEndLoc
            );
          }

          finishNodeAt(node, type, pos, loc) {
            node.type = type;
            node.end = pos;
            node.loc.end = loc;
            if (this.options.ranges) node.range[1] = pos;
            if (this.options.attachComment) this.processComment(node);
            return node;
          }

          resetStartLocation(node, start, startLoc) {
            node.start = start;
            node.loc.start = startLoc;
            if (this.options.ranges) node.range[0] = start;
          }

          resetEndLocation(
            node,
            end = this.state.lastTokEnd,
            endLoc = this.state.lastTokEndLoc
          ) {
            node.end = end;
            node.loc.end = endLoc;
            if (this.options.ranges) node.range[1] = end;
          }

          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(
              node,
              locationNode.start,
              locationNode.loc.start
            );
          }
        }

        const reservedTypes = new Set([
          "_",
          "any",
          "bool",
          "boolean",
          "empty",
          "extends",
          "false",
          "interface",
          "mixed",
          "null",
          "number",
          "static",
          "string",
          "true",
          "typeof",
          "void",
        ]);
        const FlowErrors = makeErrorTemplates(
          {
            AmbiguousConditionalArrow:
              "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
            AmbiguousDeclareModuleKind:
              "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
            AssignReservedType: "Cannot overwrite reserved type %0.",
            DeclareClassElement:
              "The `declare` modifier can only appear on class fields.",
            DeclareClassFieldInitializer:
              "Initializers are not allowed in fields with the `declare` modifier.",
            DuplicateDeclareModuleExports:
              "Duplicate `declare module.exports` statement.",
            EnumBooleanMemberNotInitialized:
              "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
            EnumDuplicateMemberName:
              "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
            EnumInconsistentMemberValues:
              "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
            EnumInvalidExplicitType:
              "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
            EnumInvalidExplicitTypeUnknownSupplied:
              "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
            EnumInvalidMemberInitializerPrimaryType:
              "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
            EnumInvalidMemberInitializerSymbolType:
              "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
            EnumInvalidMemberInitializerUnknownType:
              "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
            EnumInvalidMemberName:
              "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
            EnumNumberMemberNotInitialized:
              "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
            EnumStringMemberInconsistentlyInitailized:
              "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
            GetterMayNotHaveThisParam:
              "A getter cannot have a `this` parameter.",
            ImportTypeShorthandOnlyInPureImport:
              "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
            InexactInsideExact:
              "Explicit inexact syntax cannot appear inside an explicit exact object type.",
            InexactInsideNonObject:
              "Explicit inexact syntax cannot appear in class or interface definitions.",
            InexactVariance: "Explicit inexact syntax cannot have variance.",
            InvalidNonTypeImportInDeclareModule:
              "Imports within a `declare module` body must always be `import type` or `import typeof`.",
            MissingTypeParamDefault:
              "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
            NestedDeclareModule:
              "`declare module` cannot be used inside another `declare module`.",
            NestedFlowComment:
              "Cannot have a flow comment inside another flow comment.",
            OptionalBindingPattern:
              "A binding pattern parameter cannot be optional in an implementation signature.",
            SetterMayNotHaveThisParam:
              "A setter cannot have a `this` parameter.",
            SpreadVariance: "Spread properties cannot have variance.",
            ThisParamAnnotationRequired:
              "A type annotation is required for the `this` parameter.",
            ThisParamBannedInConstructor:
              "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
            ThisParamMayNotBeOptional:
              "The `this` parameter cannot be optional.",
            ThisParamMustBeFirst:
              "The `this` parameter must be the first function parameter.",
            ThisParamNoDefault:
              "The `this` parameter may not have a default value.",
            TypeBeforeInitializer:
              "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
            TypeCastInPattern:
              "The type cast expression is expected to be wrapped with parenthesis.",
            UnexpectedExplicitInexactInObject:
              "Explicit inexact syntax must appear at the end of an inexact object.",
            UnexpectedReservedType: "Unexpected reserved type %0.",
            UnexpectedReservedUnderscore:
              "`_` is only allowed as a type argument to call or new.",
            UnexpectedSpaceBetweenModuloChecks:
              "Spaces between `%` and `checks` are not allowed here.",
            UnexpectedSpreadType:
              "Spread operator cannot appear in class or interface definitions.",
            UnexpectedSubtractionOperand:
              'Unexpected token, expected "number" or "bigint".',
            UnexpectedTokenAfterTypeParameter:
              "Expected an arrow function after this type parameter declaration.",
            UnexpectedTypeParameterBeforeAsyncArrowFunction:
              "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
            UnsupportedDeclareExportKind:
              "`declare export %0` is not supported. Use `%1` instead.",
            UnsupportedStatementInDeclareModule:
              "Only declares and type imports are allowed inside declare module.",
            UnterminatedFlowComment: "Unterminated flow-comment.",
          },
          ErrorCodes.SyntaxError
        );

        function isEsModuleType(bodyElement) {
          return (
            bodyElement.type === "DeclareExportAllDeclaration" ||
            (bodyElement.type === "DeclareExportDeclaration" &&
              (!bodyElement.declaration ||
                (bodyElement.declaration.type !== "TypeAlias" &&
                  bodyElement.declaration.type !== "InterfaceDeclaration")))
          );
        }

        function hasTypeImportKind(node) {
          return node.importKind === "type" || node.importKind === "typeof";
        }

        function isMaybeDefaultImport(state) {
          return (
            (state.type === types$1.name || !!state.type.keyword) &&
            state.value !== "from"
          );
        }

        const exportSuggestions = {
          const: "declare export var",
          let: "declare export var",
          type: "export type",
          interface: "export interface",
        };

        function partition(list, test) {
          const list1 = [];
          const list2 = [];

          for (let i = 0; i < list.length; i++) {
            (test(list[i], i, list) ? list1 : list2).push(list[i]);
          }

          return [list1, list2];
        }

        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        var flow = (superClass) =>
          class extends superClass {
            constructor(...args) {
              super(...args);
              this.flowPragma = undefined;
            }

            getScopeHandler() {
              return FlowScopeHandler;
            }

            shouldParseTypes() {
              return (
                this.getPluginOption("flow", "all") ||
                this.flowPragma === "flow"
              );
            }

            shouldParseEnums() {
              return !!this.getPluginOption("flow", "enums");
            }

            finishToken(type, val) {
              if (
                type !== types$1.string &&
                type !== types$1.semi &&
                type !== types$1.interpreterDirective
              ) {
                if (this.flowPragma === undefined) {
                  this.flowPragma = null;
                }
              }

              return super.finishToken(type, val);
            }

            addComment(comment) {
              if (this.flowPragma === undefined) {
                const matches = FLOW_PRAGMA_REGEX.exec(comment.value);

                if (!matches);
                else if (matches[1] === "flow") {
                  this.flowPragma = "flow";
                } else if (matches[1] === "noflow") {
                  this.flowPragma = "noflow";
                } else {
                  throw new Error("Unexpected flow pragma");
                }
              }

              return super.addComment(comment);
            }

            flowParseTypeInitialiser(tok) {
              const oldInType = this.state.inType;
              this.state.inType = true;
              this.expect(tok || types$1.colon);
              const type = this.flowParseType();
              this.state.inType = oldInType;
              return type;
            }

            flowParsePredicate() {
              const node = this.startNode();
              const moduloPos = this.state.start;
              this.next();
              this.expectContextual("checks");

              if (this.state.lastTokStart > moduloPos + 1) {
                this.raise(
                  moduloPos,
                  FlowErrors.UnexpectedSpaceBetweenModuloChecks
                );
              }

              if (this.eat(types$1.parenL)) {
                node.value = this.parseExpression();
                this.expect(types$1.parenR);
                return this.finishNode(node, "DeclaredPredicate");
              } else {
                return this.finishNode(node, "InferredPredicate");
              }
            }

            flowParseTypeAndPredicateInitialiser() {
              const oldInType = this.state.inType;
              this.state.inType = true;
              this.expect(types$1.colon);
              let type = null;
              let predicate = null;

              if (this.match(types$1.modulo)) {
                this.state.inType = oldInType;
                predicate = this.flowParsePredicate();
              } else {
                type = this.flowParseType();
                this.state.inType = oldInType;

                if (this.match(types$1.modulo)) {
                  predicate = this.flowParsePredicate();
                }
              }

              return [type, predicate];
            }

            flowParseDeclareClass(node) {
              this.next();
              this.flowParseInterfaceish(node, true);
              return this.finishNode(node, "DeclareClass");
            }

            flowParseDeclareFunction(node) {
              this.next();
              const id = (node.id = this.parseIdentifier());
              const typeNode = this.startNode();
              const typeContainer = this.startNode();

              if (this.isRelational("<")) {
                typeNode.typeParameters =
                  this.flowParseTypeParameterDeclaration();
              } else {
                typeNode.typeParameters = null;
              }

              this.expect(types$1.parenL);
              const tmp = this.flowParseFunctionTypeParams();
              typeNode.params = tmp.params;
              typeNode.rest = tmp.rest;
              typeNode.this = tmp._this;
              this.expect(types$1.parenR);
              [typeNode.returnType, node.predicate] =
                this.flowParseTypeAndPredicateInitialiser();
              typeContainer.typeAnnotation = this.finishNode(
                typeNode,
                "FunctionTypeAnnotation"
              );
              id.typeAnnotation = this.finishNode(
                typeContainer,
                "TypeAnnotation"
              );
              this.resetEndLocation(id);
              this.semicolon();
              this.scope.declareName(
                node.id.name,
                BIND_FLOW_DECLARE_FN,
                node.id.start
              );
              return this.finishNode(node, "DeclareFunction");
            }

            flowParseDeclare(node, insideModule) {
              if (this.match(types$1._class)) {
                return this.flowParseDeclareClass(node);
              } else if (this.match(types$1._function)) {
                return this.flowParseDeclareFunction(node);
              } else if (this.match(types$1._var)) {
                return this.flowParseDeclareVariable(node);
              } else if (this.eatContextual("module")) {
                if (this.match(types$1.dot)) {
                  return this.flowParseDeclareModuleExports(node);
                } else {
                  if (insideModule) {
                    this.raise(
                      this.state.lastTokStart,
                      FlowErrors.NestedDeclareModule
                    );
                  }

                  return this.flowParseDeclareModule(node);
                }
              } else if (this.isContextual("type")) {
                return this.flowParseDeclareTypeAlias(node);
              } else if (this.isContextual("opaque")) {
                return this.flowParseDeclareOpaqueType(node);
              } else if (this.isContextual("interface")) {
                return this.flowParseDeclareInterface(node);
              } else if (this.match(types$1._export)) {
                return this.flowParseDeclareExportDeclaration(
                  node,
                  insideModule
                );
              } else {
                throw this.unexpected();
              }
            }

            flowParseDeclareVariable(node) {
              this.next();
              node.id = this.flowParseTypeAnnotatableIdentifier(true);
              this.scope.declareName(node.id.name, BIND_VAR, node.id.start);
              this.semicolon();
              return this.finishNode(node, "DeclareVariable");
            }

            flowParseDeclareModule(node) {
              this.scope.enter(SCOPE_OTHER);

              if (this.match(types$1.string)) {
                node.id = this.parseExprAtom();
              } else {
                node.id = this.parseIdentifier();
              }

              const bodyNode = (node.body = this.startNode());
              const body = (bodyNode.body = []);
              this.expect(types$1.braceL);

              while (!this.match(types$1.braceR)) {
                let bodyNode = this.startNode();

                if (this.match(types$1._import)) {
                  this.next();

                  if (
                    !this.isContextual("type") &&
                    !this.match(types$1._typeof)
                  ) {
                    this.raise(
                      this.state.lastTokStart,
                      FlowErrors.InvalidNonTypeImportInDeclareModule
                    );
                  }

                  this.parseImport(bodyNode);
                } else {
                  this.expectContextual(
                    "declare",
                    FlowErrors.UnsupportedStatementInDeclareModule
                  );
                  bodyNode = this.flowParseDeclare(bodyNode, true);
                }

                body.push(bodyNode);
              }

              this.scope.exit();
              this.expect(types$1.braceR);
              this.finishNode(bodyNode, "BlockStatement");
              let kind = null;
              let hasModuleExport = false;
              body.forEach((bodyElement) => {
                if (isEsModuleType(bodyElement)) {
                  if (kind === "CommonJS") {
                    this.raise(
                      bodyElement.start,
                      FlowErrors.AmbiguousDeclareModuleKind
                    );
                  }

                  kind = "ES";
                } else if (bodyElement.type === "DeclareModuleExports") {
                  if (hasModuleExport) {
                    this.raise(
                      bodyElement.start,
                      FlowErrors.DuplicateDeclareModuleExports
                    );
                  }

                  if (kind === "ES") {
                    this.raise(
                      bodyElement.start,
                      FlowErrors.AmbiguousDeclareModuleKind
                    );
                  }

                  kind = "CommonJS";
                  hasModuleExport = true;
                }
              });
              node.kind = kind || "CommonJS";
              return this.finishNode(node, "DeclareModule");
            }

            flowParseDeclareExportDeclaration(node, insideModule) {
              this.expect(types$1._export);

              if (this.eat(types$1._default)) {
                if (
                  this.match(types$1._function) ||
                  this.match(types$1._class)
                ) {
                  node.declaration = this.flowParseDeclare(this.startNode());
                } else {
                  node.declaration = this.flowParseType();
                  this.semicolon();
                }

                node.default = true;
                return this.finishNode(node, "DeclareExportDeclaration");
              } else {
                if (
                  this.match(types$1._const) ||
                  this.isLet() ||
                  ((this.isContextual("type") ||
                    this.isContextual("interface")) &&
                    !insideModule)
                ) {
                  const label = this.state.value;
                  const suggestion = exportSuggestions[label];
                  throw this.raise(
                    this.state.start,
                    FlowErrors.UnsupportedDeclareExportKind,
                    label,
                    suggestion
                  );
                }

                if (
                  this.match(types$1._var) ||
                  this.match(types$1._function) ||
                  this.match(types$1._class) ||
                  this.isContextual("opaque")
                ) {
                  node.declaration = this.flowParseDeclare(this.startNode());
                  node.default = false;
                  return this.finishNode(node, "DeclareExportDeclaration");
                } else if (
                  this.match(types$1.star) ||
                  this.match(types$1.braceL) ||
                  this.isContextual("interface") ||
                  this.isContextual("type") ||
                  this.isContextual("opaque")
                ) {
                  node = this.parseExport(node);

                  if (node.type === "ExportNamedDeclaration") {
                    node.type = "ExportDeclaration";
                    node.default = false;
                    delete node.exportKind;
                  }

                  node.type = "Declare" + node.type;
                  return node;
                }
              }

              throw this.unexpected();
            }

            flowParseDeclareModuleExports(node) {
              this.next();
              this.expectContextual("exports");
              node.typeAnnotation = this.flowParseTypeAnnotation();
              this.semicolon();
              return this.finishNode(node, "DeclareModuleExports");
            }

            flowParseDeclareTypeAlias(node) {
              this.next();
              this.flowParseTypeAlias(node);
              node.type = "DeclareTypeAlias";
              return node;
            }

            flowParseDeclareOpaqueType(node) {
              this.next();
              this.flowParseOpaqueType(node, true);
              node.type = "DeclareOpaqueType";
              return node;
            }

            flowParseDeclareInterface(node) {
              this.next();
              this.flowParseInterfaceish(node);
              return this.finishNode(node, "DeclareInterface");
            }

            flowParseInterfaceish(node, isClass = false) {
              node.id = this.flowParseRestrictedIdentifier(!isClass, true);
              this.scope.declareName(
                node.id.name,
                isClass ? BIND_FUNCTION : BIND_LEXICAL,
                node.id.start
              );

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.extends = [];
              node.implements = [];
              node.mixins = [];

              if (this.eat(types$1._extends)) {
                do {
                  node.extends.push(this.flowParseInterfaceExtends());
                } while (!isClass && this.eat(types$1.comma));
              }

              if (this.isContextual("mixins")) {
                this.next();

                do {
                  node.mixins.push(this.flowParseInterfaceExtends());
                } while (this.eat(types$1.comma));
              }

              if (this.isContextual("implements")) {
                this.next();

                do {
                  node.implements.push(this.flowParseInterfaceExtends());
                } while (this.eat(types$1.comma));
              }

              node.body = this.flowParseObjectType({
                allowStatic: isClass,
                allowExact: false,
                allowSpread: false,
                allowProto: isClass,
                allowInexact: false,
              });
            }

            flowParseInterfaceExtends() {
              const node = this.startNode();
              node.id = this.flowParseQualifiedTypeIdentifier();

              if (this.isRelational("<")) {
                node.typeParameters =
                  this.flowParseTypeParameterInstantiation();
              } else {
                node.typeParameters = null;
              }

              return this.finishNode(node, "InterfaceExtends");
            }

            flowParseInterface(node) {
              this.flowParseInterfaceish(node);
              return this.finishNode(node, "InterfaceDeclaration");
            }

            checkNotUnderscore(word) {
              if (word === "_") {
                this.raise(
                  this.state.start,
                  FlowErrors.UnexpectedReservedUnderscore
                );
              }
            }

            checkReservedType(word, startLoc, declaration) {
              if (!reservedTypes.has(word)) return;
              this.raise(
                startLoc,
                declaration
                  ? FlowErrors.AssignReservedType
                  : FlowErrors.UnexpectedReservedType,
                word
              );
            }

            flowParseRestrictedIdentifier(liberal, declaration) {
              this.checkReservedType(
                this.state.value,
                this.state.start,
                declaration
              );
              return this.parseIdentifier(liberal);
            }

            flowParseTypeAlias(node) {
              node.id = this.flowParseRestrictedIdentifier(false, true);
              this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.right = this.flowParseTypeInitialiser(types$1.eq);
              this.semicolon();
              return this.finishNode(node, "TypeAlias");
            }

            flowParseOpaqueType(node, declare) {
              this.expectContextual("type");
              node.id = this.flowParseRestrictedIdentifier(true, true);
              this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.supertype = null;

              if (this.match(types$1.colon)) {
                node.supertype = this.flowParseTypeInitialiser(types$1.colon);
              }

              node.impltype = null;

              if (!declare) {
                node.impltype = this.flowParseTypeInitialiser(types$1.eq);
              }

              this.semicolon();
              return this.finishNode(node, "OpaqueType");
            }

            flowParseTypeParameter(requireDefault = false) {
              const nodeStart = this.state.start;
              const node = this.startNode();
              const variance = this.flowParseVariance();
              const ident = this.flowParseTypeAnnotatableIdentifier();
              node.name = ident.name;
              node.variance = variance;
              node.bound = ident.typeAnnotation;

              if (this.match(types$1.eq)) {
                this.eat(types$1.eq);
                node.default = this.flowParseType();
              } else {
                if (requireDefault) {
                  this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);
                }
              }

              return this.finishNode(node, "TypeParameter");
            }

            flowParseTypeParameterDeclaration() {
              const oldInType = this.state.inType;
              const node = this.startNode();
              node.params = [];
              this.state.inType = true;

              if (this.isRelational("<") || this.match(types$1.jsxTagStart)) {
                this.next();
              } else {
                this.unexpected();
              }

              let defaultRequired = false;

              do {
                const typeParameter =
                  this.flowParseTypeParameter(defaultRequired);
                node.params.push(typeParameter);

                if (typeParameter.default) {
                  defaultRequired = true;
                }

                if (!this.isRelational(">")) {
                  this.expect(types$1.comma);
                }
              } while (!this.isRelational(">"));

              this.expectRelational(">");
              this.state.inType = oldInType;
              return this.finishNode(node, "TypeParameterDeclaration");
            }

            flowParseTypeParameterInstantiation() {
              const node = this.startNode();
              const oldInType = this.state.inType;
              node.params = [];
              this.state.inType = true;
              this.expectRelational("<");
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = false;

              while (!this.isRelational(">")) {
                node.params.push(this.flowParseType());

                if (!this.isRelational(">")) {
                  this.expect(types$1.comma);
                }
              }

              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              this.expectRelational(">");
              this.state.inType = oldInType;
              return this.finishNode(node, "TypeParameterInstantiation");
            }

            flowParseTypeParameterInstantiationCallOrNew() {
              const node = this.startNode();
              const oldInType = this.state.inType;
              node.params = [];
              this.state.inType = true;
              this.expectRelational("<");

              while (!this.isRelational(">")) {
                node.params.push(this.flowParseTypeOrImplicitInstantiation());

                if (!this.isRelational(">")) {
                  this.expect(types$1.comma);
                }
              }

              this.expectRelational(">");
              this.state.inType = oldInType;
              return this.finishNode(node, "TypeParameterInstantiation");
            }

            flowParseInterfaceType() {
              const node = this.startNode();
              this.expectContextual("interface");
              node.extends = [];

              if (this.eat(types$1._extends)) {
                do {
                  node.extends.push(this.flowParseInterfaceExtends());
                } while (this.eat(types$1.comma));
              }

              node.body = this.flowParseObjectType({
                allowStatic: false,
                allowExact: false,
                allowSpread: false,
                allowProto: false,
                allowInexact: false,
              });
              return this.finishNode(node, "InterfaceTypeAnnotation");
            }

            flowParseObjectPropertyKey() {
              return this.match(types$1.num) || this.match(types$1.string)
                ? this.parseExprAtom()
                : this.parseIdentifier(true);
            }

            flowParseObjectTypeIndexer(node, isStatic, variance) {
              node.static = isStatic;

              if (this.lookahead().type === types$1.colon) {
                node.id = this.flowParseObjectPropertyKey();
                node.key = this.flowParseTypeInitialiser();
              } else {
                node.id = null;
                node.key = this.flowParseType();
              }

              this.expect(types$1.bracketR);
              node.value = this.flowParseTypeInitialiser();
              node.variance = variance;
              return this.finishNode(node, "ObjectTypeIndexer");
            }

            flowParseObjectTypeInternalSlot(node, isStatic) {
              node.static = isStatic;
              node.id = this.flowParseObjectPropertyKey();
              this.expect(types$1.bracketR);
              this.expect(types$1.bracketR);

              if (this.isRelational("<") || this.match(types$1.parenL)) {
                node.method = true;
                node.optional = false;
                node.value = this.flowParseObjectTypeMethodish(
                  this.startNodeAt(node.start, node.loc.start)
                );
              } else {
                node.method = false;

                if (this.eat(types$1.question)) {
                  node.optional = true;
                }

                node.value = this.flowParseTypeInitialiser();
              }

              return this.finishNode(node, "ObjectTypeInternalSlot");
            }

            flowParseObjectTypeMethodish(node) {
              node.params = [];
              node.rest = null;
              node.typeParameters = null;
              node.this = null;

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              this.expect(types$1.parenL);

              if (this.match(types$1._this)) {
                node.this = this.flowParseFunctionTypeParam(true);
                node.this.name = null;

                if (!this.match(types$1.parenR)) {
                  this.expect(types$1.comma);
                }
              }

              while (
                !this.match(types$1.parenR) &&
                !this.match(types$1.ellipsis)
              ) {
                node.params.push(this.flowParseFunctionTypeParam(false));

                if (!this.match(types$1.parenR)) {
                  this.expect(types$1.comma);
                }
              }

              if (this.eat(types$1.ellipsis)) {
                node.rest = this.flowParseFunctionTypeParam(false);
              }

              this.expect(types$1.parenR);
              node.returnType = this.flowParseTypeInitialiser();
              return this.finishNode(node, "FunctionTypeAnnotation");
            }

            flowParseObjectTypeCallProperty(node, isStatic) {
              const valueNode = this.startNode();
              node.static = isStatic;
              node.value = this.flowParseObjectTypeMethodish(valueNode);
              return this.finishNode(node, "ObjectTypeCallProperty");
            }

            flowParseObjectType({
              allowStatic,
              allowExact,
              allowSpread,
              allowProto,
              allowInexact,
            }) {
              const oldInType = this.state.inType;
              this.state.inType = true;
              const nodeStart = this.startNode();
              nodeStart.callProperties = [];
              nodeStart.properties = [];
              nodeStart.indexers = [];
              nodeStart.internalSlots = [];
              let endDelim;
              let exact;
              let inexact = false;

              if (allowExact && this.match(types$1.braceBarL)) {
                this.expect(types$1.braceBarL);
                endDelim = types$1.braceBarR;
                exact = true;
              } else {
                this.expect(types$1.braceL);
                endDelim = types$1.braceR;
                exact = false;
              }

              nodeStart.exact = exact;

              while (!this.match(endDelim)) {
                let isStatic = false;
                let protoStart = null;
                let inexactStart = null;
                const node = this.startNode();

                if (allowProto && this.isContextual("proto")) {
                  const lookahead = this.lookahead();

                  if (
                    lookahead.type !== types$1.colon &&
                    lookahead.type !== types$1.question
                  ) {
                    this.next();
                    protoStart = this.state.start;
                    allowStatic = false;
                  }
                }

                if (allowStatic && this.isContextual("static")) {
                  const lookahead = this.lookahead();

                  if (
                    lookahead.type !== types$1.colon &&
                    lookahead.type !== types$1.question
                  ) {
                    this.next();
                    isStatic = true;
                  }
                }

                const variance = this.flowParseVariance();

                if (this.eat(types$1.bracketL)) {
                  if (protoStart != null) {
                    this.unexpected(protoStart);
                  }

                  if (this.eat(types$1.bracketL)) {
                    if (variance) {
                      this.unexpected(variance.start);
                    }

                    nodeStart.internalSlots.push(
                      this.flowParseObjectTypeInternalSlot(node, isStatic)
                    );
                  } else {
                    nodeStart.indexers.push(
                      this.flowParseObjectTypeIndexer(node, isStatic, variance)
                    );
                  }
                } else if (
                  this.match(types$1.parenL) ||
                  this.isRelational("<")
                ) {
                  if (protoStart != null) {
                    this.unexpected(protoStart);
                  }

                  if (variance) {
                    this.unexpected(variance.start);
                  }

                  nodeStart.callProperties.push(
                    this.flowParseObjectTypeCallProperty(node, isStatic)
                  );
                } else {
                  let kind = "init";

                  if (this.isContextual("get") || this.isContextual("set")) {
                    const lookahead = this.lookahead();

                    if (
                      lookahead.type === types$1.name ||
                      lookahead.type === types$1.string ||
                      lookahead.type === types$1.num
                    ) {
                      kind = this.state.value;
                      this.next();
                    }
                  }

                  const propOrInexact = this.flowParseObjectTypeProperty(
                    node,
                    isStatic,
                    protoStart,
                    variance,
                    kind,
                    allowSpread,
                    allowInexact != null ? allowInexact : !exact
                  );

                  if (propOrInexact === null) {
                    inexact = true;
                    inexactStart = this.state.lastTokStart;
                  } else {
                    nodeStart.properties.push(propOrInexact);
                  }
                }

                this.flowObjectTypeSemicolon();

                if (
                  inexactStart &&
                  !this.match(types$1.braceR) &&
                  !this.match(types$1.braceBarR)
                ) {
                  this.raise(
                    inexactStart,
                    FlowErrors.UnexpectedExplicitInexactInObject
                  );
                }
              }

              this.expect(endDelim);

              if (allowSpread) {
                nodeStart.inexact = inexact;
              }

              const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
              this.state.inType = oldInType;
              return out;
            }

            flowParseObjectTypeProperty(
              node,
              isStatic,
              protoStart,
              variance,
              kind,
              allowSpread,
              allowInexact
            ) {
              if (this.eat(types$1.ellipsis)) {
                const isInexactToken =
                  this.match(types$1.comma) ||
                  this.match(types$1.semi) ||
                  this.match(types$1.braceR) ||
                  this.match(types$1.braceBarR);

                if (isInexactToken) {
                  if (!allowSpread) {
                    this.raise(
                      this.state.lastTokStart,
                      FlowErrors.InexactInsideNonObject
                    );
                  } else if (!allowInexact) {
                    this.raise(
                      this.state.lastTokStart,
                      FlowErrors.InexactInsideExact
                    );
                  }

                  if (variance) {
                    this.raise(variance.start, FlowErrors.InexactVariance);
                  }

                  return null;
                }

                if (!allowSpread) {
                  this.raise(
                    this.state.lastTokStart,
                    FlowErrors.UnexpectedSpreadType
                  );
                }

                if (protoStart != null) {
                  this.unexpected(protoStart);
                }

                if (variance) {
                  this.raise(variance.start, FlowErrors.SpreadVariance);
                }

                node.argument = this.flowParseType();
                return this.finishNode(node, "ObjectTypeSpreadProperty");
              } else {
                node.key = this.flowParseObjectPropertyKey();
                node.static = isStatic;
                node.proto = protoStart != null;
                node.kind = kind;
                let optional = false;

                if (this.isRelational("<") || this.match(types$1.parenL)) {
                  node.method = true;

                  if (protoStart != null) {
                    this.unexpected(protoStart);
                  }

                  if (variance) {
                    this.unexpected(variance.start);
                  }

                  node.value = this.flowParseObjectTypeMethodish(
                    this.startNodeAt(node.start, node.loc.start)
                  );

                  if (kind === "get" || kind === "set") {
                    this.flowCheckGetterSetterParams(node);
                  }

                  if (
                    !allowSpread &&
                    node.key.name === "constructor" &&
                    node.value.this
                  ) {
                    this.raise(
                      node.value.this.start,
                      FlowErrors.ThisParamBannedInConstructor
                    );
                  }
                } else {
                  if (kind !== "init") this.unexpected();
                  node.method = false;

                  if (this.eat(types$1.question)) {
                    optional = true;
                  }

                  node.value = this.flowParseTypeInitialiser();
                  node.variance = variance;
                }

                node.optional = optional;
                return this.finishNode(node, "ObjectTypeProperty");
              }
            }

            flowCheckGetterSetterParams(property) {
              const paramCount = property.kind === "get" ? 0 : 1;
              const start = property.start;
              const length =
                property.value.params.length + (property.value.rest ? 1 : 0);

              if (property.value.this) {
                this.raise(
                  property.value.this.start,
                  property.kind === "get"
                    ? FlowErrors.GetterMayNotHaveThisParam
                    : FlowErrors.SetterMayNotHaveThisParam
                );
              }

              if (length !== paramCount) {
                if (property.kind === "get") {
                  this.raise(start, ErrorMessages.BadGetterArity);
                } else {
                  this.raise(start, ErrorMessages.BadSetterArity);
                }
              }

              if (property.kind === "set" && property.value.rest) {
                this.raise(start, ErrorMessages.BadSetterRestParameter);
              }
            }

            flowObjectTypeSemicolon() {
              if (
                !this.eat(types$1.semi) &&
                !this.eat(types$1.comma) &&
                !this.match(types$1.braceR) &&
                !this.match(types$1.braceBarR)
              ) {
                this.unexpected();
              }
            }

            flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
              startPos = startPos || this.state.start;
              startLoc = startLoc || this.state.startLoc;
              let node = id || this.flowParseRestrictedIdentifier(true);

              while (this.eat(types$1.dot)) {
                const node2 = this.startNodeAt(startPos, startLoc);
                node2.qualification = node;
                node2.id = this.flowParseRestrictedIdentifier(true);
                node = this.finishNode(node2, "QualifiedTypeIdentifier");
              }

              return node;
            }

            flowParseGenericType(startPos, startLoc, id) {
              const node = this.startNodeAt(startPos, startLoc);
              node.typeParameters = null;
              node.id = this.flowParseQualifiedTypeIdentifier(
                startPos,
                startLoc,
                id
              );

              if (this.isRelational("<")) {
                node.typeParameters =
                  this.flowParseTypeParameterInstantiation();
              }

              return this.finishNode(node, "GenericTypeAnnotation");
            }

            flowParseTypeofType() {
              const node = this.startNode();
              this.expect(types$1._typeof);
              node.argument = this.flowParsePrimaryType();
              return this.finishNode(node, "TypeofTypeAnnotation");
            }

            flowParseTupleType() {
              const node = this.startNode();
              node.types = [];
              this.expect(types$1.bracketL);

              while (
                this.state.pos < this.length &&
                !this.match(types$1.bracketR)
              ) {
                node.types.push(this.flowParseType());
                if (this.match(types$1.bracketR)) break;
                this.expect(types$1.comma);
              }

              this.expect(types$1.bracketR);
              return this.finishNode(node, "TupleTypeAnnotation");
            }

            flowParseFunctionTypeParam(first) {
              let name = null;
              let optional = false;
              let typeAnnotation = null;
              const node = this.startNode();
              const lh = this.lookahead();
              const isThis = this.state.type === types$1._this;

              if (lh.type === types$1.colon || lh.type === types$1.question) {
                if (isThis && !first) {
                  this.raise(node.start, FlowErrors.ThisParamMustBeFirst);
                }

                name = this.parseIdentifier(isThis);

                if (this.eat(types$1.question)) {
                  optional = true;

                  if (isThis) {
                    this.raise(
                      node.start,
                      FlowErrors.ThisParamMayNotBeOptional
                    );
                  }
                }

                typeAnnotation = this.flowParseTypeInitialiser();
              } else {
                typeAnnotation = this.flowParseType();
              }

              node.name = name;
              node.optional = optional;
              node.typeAnnotation = typeAnnotation;
              return this.finishNode(node, "FunctionTypeParam");
            }

            reinterpretTypeAsFunctionTypeParam(type) {
              const node = this.startNodeAt(type.start, type.loc.start);
              node.name = null;
              node.optional = false;
              node.typeAnnotation = type;
              return this.finishNode(node, "FunctionTypeParam");
            }

            flowParseFunctionTypeParams(params = []) {
              let rest = null;
              let _this = null;

              if (this.match(types$1._this)) {
                _this = this.flowParseFunctionTypeParam(true);
                _this.name = null;

                if (!this.match(types$1.parenR)) {
                  this.expect(types$1.comma);
                }
              }

              while (
                !this.match(types$1.parenR) &&
                !this.match(types$1.ellipsis)
              ) {
                params.push(this.flowParseFunctionTypeParam(false));

                if (!this.match(types$1.parenR)) {
                  this.expect(types$1.comma);
                }
              }

              if (this.eat(types$1.ellipsis)) {
                rest = this.flowParseFunctionTypeParam(false);
              }

              return {
                params,
                rest,
                _this,
              };
            }

            flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
              switch (id.name) {
                case "any":
                  return this.finishNode(node, "AnyTypeAnnotation");

                case "bool":
                case "boolean":
                  return this.finishNode(node, "BooleanTypeAnnotation");

                case "mixed":
                  return this.finishNode(node, "MixedTypeAnnotation");

                case "empty":
                  return this.finishNode(node, "EmptyTypeAnnotation");

                case "number":
                  return this.finishNode(node, "NumberTypeAnnotation");

                case "string":
                  return this.finishNode(node, "StringTypeAnnotation");

                case "symbol":
                  return this.finishNode(node, "SymbolTypeAnnotation");

                default:
                  this.checkNotUnderscore(id.name);
                  return this.flowParseGenericType(startPos, startLoc, id);
              }
            }

            flowParsePrimaryType() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const node = this.startNode();
              let tmp;
              let type;
              let isGroupedType = false;
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;

              switch (this.state.type) {
                case types$1.name:
                  if (this.isContextual("interface")) {
                    return this.flowParseInterfaceType();
                  }

                  return this.flowIdentToTypeAnnotation(
                    startPos,
                    startLoc,
                    node,
                    this.parseIdentifier()
                  );

                case types$1.braceL:
                  return this.flowParseObjectType({
                    allowStatic: false,
                    allowExact: false,
                    allowSpread: true,
                    allowProto: false,
                    allowInexact: true,
                  });

                case types$1.braceBarL:
                  return this.flowParseObjectType({
                    allowStatic: false,
                    allowExact: true,
                    allowSpread: true,
                    allowProto: false,
                    allowInexact: false,
                  });

                case types$1.bracketL:
                  this.state.noAnonFunctionType = false;
                  type = this.flowParseTupleType();
                  this.state.noAnonFunctionType = oldNoAnonFunctionType;
                  return type;

                case types$1.relational:
                  if (this.state.value === "<") {
                    node.typeParameters =
                      this.flowParseTypeParameterDeclaration();
                    this.expect(types$1.parenL);
                    tmp = this.flowParseFunctionTypeParams();
                    node.params = tmp.params;
                    node.rest = tmp.rest;
                    node.this = tmp._this;
                    this.expect(types$1.parenR);
                    this.expect(types$1.arrow);
                    node.returnType = this.flowParseType();
                    return this.finishNode(node, "FunctionTypeAnnotation");
                  }

                  break;

                case types$1.parenL:
                  this.next();

                  if (
                    !this.match(types$1.parenR) &&
                    !this.match(types$1.ellipsis)
                  ) {
                    if (this.match(types$1.name) || this.match(types$1._this)) {
                      const token = this.lookahead().type;
                      isGroupedType =
                        token !== types$1.question && token !== types$1.colon;
                    } else {
                      isGroupedType = true;
                    }
                  }

                  if (isGroupedType) {
                    this.state.noAnonFunctionType = false;
                    type = this.flowParseType();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;

                    if (
                      this.state.noAnonFunctionType ||
                      !(
                        this.match(types$1.comma) ||
                        (this.match(types$1.parenR) &&
                          this.lookahead().type === types$1.arrow)
                      )
                    ) {
                      this.expect(types$1.parenR);
                      return type;
                    } else {
                      this.eat(types$1.comma);
                    }
                  }

                  if (type) {
                    tmp = this.flowParseFunctionTypeParams([
                      this.reinterpretTypeAsFunctionTypeParam(type),
                    ]);
                  } else {
                    tmp = this.flowParseFunctionTypeParams();
                  }

                  node.params = tmp.params;
                  node.rest = tmp.rest;
                  node.this = tmp._this;
                  this.expect(types$1.parenR);
                  this.expect(types$1.arrow);
                  node.returnType = this.flowParseType();
                  node.typeParameters = null;
                  return this.finishNode(node, "FunctionTypeAnnotation");

                case types$1.string:
                  return this.parseLiteral(
                    this.state.value,
                    "StringLiteralTypeAnnotation"
                  );

                case types$1._true:
                case types$1._false:
                  node.value = this.match(types$1._true);
                  this.next();
                  return this.finishNode(node, "BooleanLiteralTypeAnnotation");

                case types$1.plusMin:
                  if (this.state.value === "-") {
                    this.next();

                    if (this.match(types$1.num)) {
                      return this.parseLiteralAtNode(
                        -this.state.value,
                        "NumberLiteralTypeAnnotation",
                        node
                      );
                    }

                    if (this.match(types$1.bigint)) {
                      return this.parseLiteralAtNode(
                        -this.state.value,
                        "BigIntLiteralTypeAnnotation",
                        node
                      );
                    }

                    throw this.raise(
                      this.state.start,
                      FlowErrors.UnexpectedSubtractionOperand
                    );
                  }

                  throw this.unexpected();

                case types$1.num:
                  return this.parseLiteral(
                    this.state.value,
                    "NumberLiteralTypeAnnotation"
                  );

                case types$1.bigint:
                  return this.parseLiteral(
                    this.state.value,
                    "BigIntLiteralTypeAnnotation"
                  );

                case types$1._void:
                  this.next();
                  return this.finishNode(node, "VoidTypeAnnotation");

                case types$1._null:
                  this.next();
                  return this.finishNode(node, "NullLiteralTypeAnnotation");

                case types$1._this:
                  this.next();
                  return this.finishNode(node, "ThisTypeAnnotation");

                case types$1.star:
                  this.next();
                  return this.finishNode(node, "ExistsTypeAnnotation");

                default:
                  if (this.state.type.keyword === "typeof") {
                    return this.flowParseTypeofType();
                  } else if (this.state.type.keyword) {
                    const label = this.state.type.label;
                    this.next();
                    return super.createIdentifier(node, label);
                  }
              }

              throw this.unexpected();
            }

            flowParsePostfixType() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let type = this.flowParsePrimaryType();
              let seenOptionalIndexedAccess = false;

              while (
                (this.match(types$1.bracketL) ||
                  this.match(types$1.questionDot)) &&
                !this.canInsertSemicolon()
              ) {
                const node = this.startNodeAt(startPos, startLoc);
                const optional = this.eat(types$1.questionDot);
                seenOptionalIndexedAccess =
                  seenOptionalIndexedAccess || optional;
                this.expect(types$1.bracketL);

                if (!optional && this.match(types$1.bracketR)) {
                  node.elementType = type;
                  this.next();
                  type = this.finishNode(node, "ArrayTypeAnnotation");
                } else {
                  node.objectType = type;
                  node.indexType = this.flowParseType();
                  this.expect(types$1.bracketR);

                  if (seenOptionalIndexedAccess) {
                    node.optional = optional;
                    type = this.finishNode(node, "OptionalIndexedAccessType");
                  } else {
                    type = this.finishNode(node, "IndexedAccessType");
                  }
                }
              }

              return type;
            }

            flowParsePrefixType() {
              const node = this.startNode();

              if (this.eat(types$1.question)) {
                node.typeAnnotation = this.flowParsePrefixType();
                return this.finishNode(node, "NullableTypeAnnotation");
              } else {
                return this.flowParsePostfixType();
              }
            }

            flowParseAnonFunctionWithoutParens() {
              const param = this.flowParsePrefixType();

              if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {
                const node = this.startNodeAt(param.start, param.loc.start);
                node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
                node.rest = null;
                node.this = null;
                node.returnType = this.flowParseType();
                node.typeParameters = null;
                return this.finishNode(node, "FunctionTypeAnnotation");
              }

              return param;
            }

            flowParseIntersectionType() {
              const node = this.startNode();
              this.eat(types$1.bitwiseAND);
              const type = this.flowParseAnonFunctionWithoutParens();
              node.types = [type];

              while (this.eat(types$1.bitwiseAND)) {
                node.types.push(this.flowParseAnonFunctionWithoutParens());
              }

              return node.types.length === 1
                ? type
                : this.finishNode(node, "IntersectionTypeAnnotation");
            }

            flowParseUnionType() {
              const node = this.startNode();
              this.eat(types$1.bitwiseOR);
              const type = this.flowParseIntersectionType();
              node.types = [type];

              while (this.eat(types$1.bitwiseOR)) {
                node.types.push(this.flowParseIntersectionType());
              }

              return node.types.length === 1
                ? type
                : this.finishNode(node, "UnionTypeAnnotation");
            }

            flowParseType() {
              const oldInType = this.state.inType;
              this.state.inType = true;
              const type = this.flowParseUnionType();
              this.state.inType = oldInType;
              return type;
            }

            flowParseTypeOrImplicitInstantiation() {
              if (
                this.state.type === types$1.name &&
                this.state.value === "_"
              ) {
                const startPos = this.state.start;
                const startLoc = this.state.startLoc;
                const node = this.parseIdentifier();
                return this.flowParseGenericType(startPos, startLoc, node);
              } else {
                return this.flowParseType();
              }
            }

            flowParseTypeAnnotation() {
              const node = this.startNode();
              node.typeAnnotation = this.flowParseTypeInitialiser();
              return this.finishNode(node, "TypeAnnotation");
            }

            flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
              const ident = allowPrimitiveOverride
                ? this.parseIdentifier()
                : this.flowParseRestrictedIdentifier();

              if (this.match(types$1.colon)) {
                ident.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(ident);
              }

              return ident;
            }

            typeCastToParameter(node) {
              node.expression.typeAnnotation = node.typeAnnotation;
              this.resetEndLocation(
                node.expression,
                node.typeAnnotation.end,
                node.typeAnnotation.loc.end
              );
              return node.expression;
            }

            flowParseVariance() {
              let variance = null;

              if (this.match(types$1.plusMin)) {
                variance = this.startNode();

                if (this.state.value === "+") {
                  variance.kind = "plus";
                } else {
                  variance.kind = "minus";
                }

                this.next();
                this.finishNode(variance, "Variance");
              }

              return variance;
            }

            parseFunctionBody(node, allowExpressionBody, isMethod = false) {
              if (allowExpressionBody) {
                return this.forwardNoArrowParamsConversionAt(node, () =>
                  super.parseFunctionBody(node, true, isMethod)
                );
              }

              return super.parseFunctionBody(node, false, isMethod);
            }

            parseFunctionBodyAndFinish(node, type, isMethod = false) {
              if (this.match(types$1.colon)) {
                const typeNode = this.startNode();
                [typeNode.typeAnnotation, node.predicate] =
                  this.flowParseTypeAndPredicateInitialiser();
                node.returnType = typeNode.typeAnnotation
                  ? this.finishNode(typeNode, "TypeAnnotation")
                  : null;
              }

              super.parseFunctionBodyAndFinish(node, type, isMethod);
            }

            parseStatement(context, topLevel) {
              if (
                this.state.strict &&
                this.match(types$1.name) &&
                this.state.value === "interface"
              ) {
                const lookahead = this.lookahead();

                if (
                  lookahead.type === types$1.name ||
                  isKeyword(lookahead.value)
                ) {
                  const node = this.startNode();
                  this.next();
                  return this.flowParseInterface(node);
                }
              } else if (this.shouldParseEnums() && this.isContextual("enum")) {
                const node = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(node);
              }

              const stmt = super.parseStatement(context, topLevel);

              if (
                this.flowPragma === undefined &&
                !this.isValidDirective(stmt)
              ) {
                this.flowPragma = null;
              }

              return stmt;
            }

            parseExpressionStatement(node, expr) {
              if (expr.type === "Identifier") {
                if (expr.name === "declare") {
                  if (
                    this.match(types$1._class) ||
                    this.match(types$1.name) ||
                    this.match(types$1._function) ||
                    this.match(types$1._var) ||
                    this.match(types$1._export)
                  ) {
                    return this.flowParseDeclare(node);
                  }
                } else if (this.match(types$1.name)) {
                  if (expr.name === "interface") {
                    return this.flowParseInterface(node);
                  } else if (expr.name === "type") {
                    return this.flowParseTypeAlias(node);
                  } else if (expr.name === "opaque") {
                    return this.flowParseOpaqueType(node, false);
                  }
                }
              }

              return super.parseExpressionStatement(node, expr);
            }

            shouldParseExportDeclaration() {
              return (
                this.isContextual("type") ||
                this.isContextual("interface") ||
                this.isContextual("opaque") ||
                (this.shouldParseEnums() && this.isContextual("enum")) ||
                super.shouldParseExportDeclaration()
              );
            }

            isExportDefaultSpecifier() {
              if (
                this.match(types$1.name) &&
                (this.state.value === "type" ||
                  this.state.value === "interface" ||
                  this.state.value === "opaque" ||
                  (this.shouldParseEnums() && this.state.value === "enum"))
              ) {
                return false;
              }

              return super.isExportDefaultSpecifier();
            }

            parseExportDefaultExpression() {
              if (this.shouldParseEnums() && this.isContextual("enum")) {
                const node = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(node);
              }

              return super.parseExportDefaultExpression();
            }

            parseConditional(expr, startPos, startLoc, refExpressionErrors) {
              if (!this.match(types$1.question)) return expr;

              if (this.state.maybeInArrowParameters) {
                const nextCh = this.lookaheadCharCode();

                if (
                  nextCh === 44 ||
                  nextCh === 61 ||
                  nextCh === 58 ||
                  nextCh === 41
                ) {
                  this.setOptionalParametersError(refExpressionErrors);
                  return expr;
                }
              }

              this.expect(types$1.question);
              const state = this.state.clone();
              const originalNoArrowAt = this.state.noArrowAt;
              const node = this.startNodeAt(startPos, startLoc);
              let { consequent, failed } = this.tryParseConditionalConsequent();
              let [valid, invalid] = this.getArrowLikeExpressions(consequent);

              if (failed || invalid.length > 0) {
                const noArrowAt = [...originalNoArrowAt];

                if (invalid.length > 0) {
                  this.state = state;
                  this.state.noArrowAt = noArrowAt;

                  for (let i = 0; i < invalid.length; i++) {
                    noArrowAt.push(invalid[i].start);
                  }

                  ({ consequent, failed } =
                    this.tryParseConditionalConsequent());
                  [valid, invalid] = this.getArrowLikeExpressions(consequent);
                }

                if (failed && valid.length > 1) {
                  this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);
                }

                if (failed && valid.length === 1) {
                  this.state = state;
                  this.state.noArrowAt = noArrowAt.concat(valid[0].start);
                  ({ consequent, failed } =
                    this.tryParseConditionalConsequent());
                }
              }

              this.getArrowLikeExpressions(consequent, true);
              this.state.noArrowAt = originalNoArrowAt;
              this.expect(types$1.colon);
              node.test = expr;
              node.consequent = consequent;
              node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>
                this.parseMaybeAssign(undefined, undefined)
              );
              return this.finishNode(node, "ConditionalExpression");
            }

            tryParseConditionalConsequent() {
              this.state.noArrowParamsConversionAt.push(this.state.start);
              const consequent = this.parseMaybeAssignAllowIn();
              const failed = !this.match(types$1.colon);
              this.state.noArrowParamsConversionAt.pop();
              return {
                consequent,
                failed,
              };
            }

            getArrowLikeExpressions(node, disallowInvalid) {
              const stack = [node];
              const arrows = [];

              while (stack.length !== 0) {
                const node = stack.pop();

                if (node.type === "ArrowFunctionExpression") {
                  if (node.typeParameters || !node.returnType) {
                    this.finishArrowValidation(node);
                  } else {
                    arrows.push(node);
                  }

                  stack.push(node.body);
                } else if (node.type === "ConditionalExpression") {
                  stack.push(node.consequent);
                  stack.push(node.alternate);
                }
              }

              if (disallowInvalid) {
                arrows.forEach((node) => this.finishArrowValidation(node));
                return [arrows, []];
              }

              return partition(arrows, (node) =>
                node.params.every((param) => this.isAssignable(param, true))
              );
            }

            finishArrowValidation(node) {
              var _node$extra;

              this.toAssignableList(
                node.params,
                (_node$extra = node.extra) == null
                  ? void 0
                  : _node$extra.trailingComma,
                false
              );
              this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
              super.checkParams(node, false, true);
              this.scope.exit();
            }

            forwardNoArrowParamsConversionAt(node, parse) {
              let result;

              if (
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                this.state.noArrowParamsConversionAt.push(this.state.start);
                result = parse();
                this.state.noArrowParamsConversionAt.pop();
              } else {
                result = parse();
              }

              return result;
            }

            parseParenItem(node, startPos, startLoc) {
              node = super.parseParenItem(node, startPos, startLoc);

              if (this.eat(types$1.question)) {
                node.optional = true;
                this.resetEndLocation(node);
              }

              if (this.match(types$1.colon)) {
                const typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TypeCastExpression");
              }

              return node;
            }

            assertModuleNodeAllowed(node) {
              if (
                (node.type === "ImportDeclaration" &&
                  (node.importKind === "type" ||
                    node.importKind === "typeof")) ||
                (node.type === "ExportNamedDeclaration" &&
                  node.exportKind === "type") ||
                (node.type === "ExportAllDeclaration" &&
                  node.exportKind === "type")
              ) {
                return;
              }

              super.assertModuleNodeAllowed(node);
            }

            parseExport(node) {
              const decl = super.parseExport(node);

              if (
                decl.type === "ExportNamedDeclaration" ||
                decl.type === "ExportAllDeclaration"
              ) {
                decl.exportKind = decl.exportKind || "value";
              }

              return decl;
            }

            parseExportDeclaration(node) {
              if (this.isContextual("type")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();

                if (this.match(types$1.braceL)) {
                  node.specifiers = this.parseExportSpecifiers();
                  this.parseExportFrom(node);
                  return null;
                } else {
                  return this.flowParseTypeAlias(declarationNode);
                }
              } else if (this.isContextual("opaque")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseOpaqueType(declarationNode, false);
              } else if (this.isContextual("interface")) {
                node.exportKind = "type";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseInterface(declarationNode);
              } else if (this.shouldParseEnums() && this.isContextual("enum")) {
                node.exportKind = "value";
                const declarationNode = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(declarationNode);
              } else {
                return super.parseExportDeclaration(node);
              }
            }

            eatExportStar(node) {
              if (super.eatExportStar(...arguments)) return true;

              if (
                this.isContextual("type") &&
                this.lookahead().type === types$1.star
              ) {
                node.exportKind = "type";
                this.next();
                this.next();
                return true;
              }

              return false;
            }

            maybeParseExportNamespaceSpecifier(node) {
              const pos = this.state.start;
              const hasNamespace = super.maybeParseExportNamespaceSpecifier(
                node
              );

              if (hasNamespace && node.exportKind === "type") {
                this.unexpected(pos);
              }

              return hasNamespace;
            }

            parseClassId(node, isStatement, optionalId) {
              super.parseClassId(node, isStatement, optionalId);

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }
            }

            parseClassMember(classBody, member, state) {
              const pos = this.state.start;

              if (this.isContextual("declare")) {
                if (this.parseClassMemberFromModifier(classBody, member)) {
                  return;
                }

                member.declare = true;
              }

              super.parseClassMember(classBody, member, state);

              if (member.declare) {
                if (
                  member.type !== "ClassProperty" &&
                  member.type !== "ClassPrivateProperty" &&
                  member.type !== "PropertyDefinition"
                ) {
                  this.raise(pos, FlowErrors.DeclareClassElement);
                } else if (member.value) {
                  this.raise(
                    member.value.start,
                    FlowErrors.DeclareClassFieldInitializer
                  );
                }
              }
            }

            isIterator(word) {
              return word === "iterator" || word === "asyncIterator";
            }

            readIterator() {
              const word = super.readWord1();
              const fullWord = "@@" + word;

              if (!this.isIterator(word) || !this.state.inType) {
                this.raise(
                  this.state.pos,
                  ErrorMessages.InvalidIdentifier,
                  fullWord
                );
              }

              this.finishToken(types$1.name, fullWord);
            }

            getTokenFromCode(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (code === 123 && next === 124) {
                return this.finishOp(types$1.braceBarL, 2);
              } else if (this.state.inType && (code === 62 || code === 60)) {
                return this.finishOp(types$1.relational, 1);
              } else if (this.state.inType && code === 63) {
                if (next === 46) {
                  return this.finishOp(types$1.questionDot, 2);
                }

                return this.finishOp(types$1.question, 1);
              } else if (isIteratorStart(code, next)) {
                this.state.pos += 2;
                return this.readIterator();
              } else {
                return super.getTokenFromCode(code);
              }
            }

            isAssignable(node, isBinding) {
              if (node.type === "TypeCastExpression") {
                return this.isAssignable(node.expression, isBinding);
              } else {
                return super.isAssignable(node, isBinding);
              }
            }

            toAssignable(node, isLHS = false) {
              if (node.type === "TypeCastExpression") {
                return super.toAssignable(
                  this.typeCastToParameter(node),
                  isLHS
                );
              } else {
                return super.toAssignable(node, isLHS);
              }
            }

            toAssignableList(exprList, trailingCommaPos, isLHS) {
              for (let i = 0; i < exprList.length; i++) {
                const expr = exprList[i];

                if (
                  (expr == null ? void 0 : expr.type) === "TypeCastExpression"
                ) {
                  exprList[i] = this.typeCastToParameter(expr);
                }
              }

              return super.toAssignableList(exprList, trailingCommaPos, isLHS);
            }

            toReferencedList(exprList, isParenthesizedExpr) {
              for (let i = 0; i < exprList.length; i++) {
                var _expr$extra;

                const expr = exprList[i];

                if (
                  expr &&
                  expr.type === "TypeCastExpression" &&
                  !(
                    (_expr$extra = expr.extra) != null &&
                    _expr$extra.parenthesized
                  ) &&
                  (exprList.length > 1 || !isParenthesizedExpr)
                ) {
                  this.raise(
                    expr.typeAnnotation.start,
                    FlowErrors.TypeCastInPattern
                  );
                }
              }

              return exprList;
            }

            parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
              const node = super.parseArrayLike(
                close,
                canBePattern,
                isTuple,
                refExpressionErrors
              );

              if (canBePattern && !this.state.maybeInArrowParameters) {
                this.toReferencedList(node.elements);
              }

              return node;
            }

            checkLVal(expr, ...args) {
              if (expr.type !== "TypeCastExpression") {
                return super.checkLVal(expr, ...args);
              }
            }

            parseClassProperty(node) {
              if (this.match(types$1.colon)) {
                node.typeAnnotation = this.flowParseTypeAnnotation();
              }

              return super.parseClassProperty(node);
            }

            parseClassPrivateProperty(node) {
              if (this.match(types$1.colon)) {
                node.typeAnnotation = this.flowParseTypeAnnotation();
              }

              return super.parseClassPrivateProperty(node);
            }

            isClassMethod() {
              return this.isRelational("<") || super.isClassMethod();
            }

            isClassProperty() {
              return this.match(types$1.colon) || super.isClassProperty();
            }

            isNonstaticConstructor(method) {
              return (
                !this.match(types$1.colon) &&
                super.isNonstaticConstructor(method)
              );
            }

            pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor,
              allowsDirectSuper
            ) {
              if (method.variance) {
                this.unexpected(method.variance.start);
              }

              delete method.variance;

              if (this.isRelational("<")) {
                method.typeParameters =
                  this.flowParseTypeParameterDeclaration();
              }

              super.pushClassMethod(
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor,
                allowsDirectSuper
              );

              if (method.params && isConstructor) {
                const params = method.params;

                if (params.length > 0 && this.isThisParam(params[0])) {
                  this.raise(
                    method.start,
                    FlowErrors.ThisParamBannedInConstructor
                  );
                }
              } else if (
                method.type === "MethodDefinition" &&
                isConstructor &&
                method.value.params
              ) {
                const params = method.value.params;

                if (params.length > 0 && this.isThisParam(params[0])) {
                  this.raise(
                    method.start,
                    FlowErrors.ThisParamBannedInConstructor
                  );
                }
              }
            }

            pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
              if (method.variance) {
                this.unexpected(method.variance.start);
              }

              delete method.variance;

              if (this.isRelational("<")) {
                method.typeParameters =
                  this.flowParseTypeParameterDeclaration();
              }

              super.pushClassPrivateMethod(
                classBody,
                method,
                isGenerator,
                isAsync
              );
            }

            parseClassSuper(node) {
              super.parseClassSuper(node);

              if (node.superClass && this.isRelational("<")) {
                node.superTypeParameters =
                  this.flowParseTypeParameterInstantiation();
              }

              if (this.isContextual("implements")) {
                this.next();
                const implemented = (node.implements = []);

                do {
                  const node = this.startNode();
                  node.id = this.flowParseRestrictedIdentifier(true);

                  if (this.isRelational("<")) {
                    node.typeParameters =
                      this.flowParseTypeParameterInstantiation();
                  } else {
                    node.typeParameters = null;
                  }

                  implemented.push(this.finishNode(node, "ClassImplements"));
                } while (this.eat(types$1.comma));
              }
            }

            checkGetterSetterParams(method) {
              super.checkGetterSetterParams(method);
              const params = this.getObjectOrClassMethodParams(method);

              if (params.length > 0) {
                const param = params[0];

                if (this.isThisParam(param) && method.kind === "get") {
                  this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);
                } else if (this.isThisParam(param)) {
                  this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);
                }
              }
            }

            parsePropertyName(node, isPrivateNameAllowed) {
              const variance = this.flowParseVariance();
              const key = super.parsePropertyName(node, isPrivateNameAllowed);
              node.variance = variance;
              return key;
            }

            parseObjPropValue(
              prop,
              startPos,
              startLoc,
              isGenerator,
              isAsync,
              isPattern,
              isAccessor,
              refExpressionErrors
            ) {
              if (prop.variance) {
                this.unexpected(prop.variance.start);
              }

              delete prop.variance;
              let typeParameters;

              if (this.isRelational("<") && !isAccessor) {
                typeParameters = this.flowParseTypeParameterDeclaration();
                if (!this.match(types$1.parenL)) this.unexpected();
              }

              super.parseObjPropValue(
                prop,
                startPos,
                startLoc,
                isGenerator,
                isAsync,
                isPattern,
                isAccessor,
                refExpressionErrors
              );

              if (typeParameters) {
                (prop.value || prop).typeParameters = typeParameters;
              }
            }

            parseAssignableListItemTypes(param) {
              if (this.eat(types$1.question)) {
                if (param.type !== "Identifier") {
                  this.raise(param.start, FlowErrors.OptionalBindingPattern);
                }

                if (this.isThisParam(param)) {
                  this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);
                }

                param.optional = true;
              }

              if (this.match(types$1.colon)) {
                param.typeAnnotation = this.flowParseTypeAnnotation();
              } else if (this.isThisParam(param)) {
                this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);
              }

              if (this.match(types$1.eq) && this.isThisParam(param)) {
                this.raise(param.start, FlowErrors.ThisParamNoDefault);
              }

              this.resetEndLocation(param);
              return param;
            }

            parseMaybeDefault(startPos, startLoc, left) {
              const node = super.parseMaybeDefault(startPos, startLoc, left);

              if (
                node.type === "AssignmentPattern" &&
                node.typeAnnotation &&
                node.right.start < node.typeAnnotation.start
              ) {
                this.raise(
                  node.typeAnnotation.start,
                  FlowErrors.TypeBeforeInitializer
                );
              }

              return node;
            }

            shouldParseDefaultImport(node) {
              if (!hasTypeImportKind(node)) {
                return super.shouldParseDefaultImport(node);
              }

              return isMaybeDefaultImport(this.state);
            }

            parseImportSpecifierLocal(
              node,
              specifier,
              type,
              contextDescription
            ) {
              specifier.local = hasTypeImportKind(node)
                ? this.flowParseRestrictedIdentifier(true, true)
                : this.parseIdentifier();
              this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
              node.specifiers.push(this.finishNode(specifier, type));
            }

            maybeParseDefaultImportSpecifier(node) {
              node.importKind = "value";
              let kind = null;

              if (this.match(types$1._typeof)) {
                kind = "typeof";
              } else if (this.isContextual("type")) {
                kind = "type";
              }

              if (kind) {
                const lh = this.lookahead();

                if (kind === "type" && lh.type === types$1.star) {
                  this.unexpected(lh.start);
                }

                if (
                  isMaybeDefaultImport(lh) ||
                  lh.type === types$1.braceL ||
                  lh.type === types$1.star
                ) {
                  this.next();
                  node.importKind = kind;
                }
              }

              return super.maybeParseDefaultImportSpecifier(node);
            }

            parseImportSpecifier(node) {
              const specifier = this.startNode();
              const firstIdentIsString = this.match(types$1.string);
              const firstIdent = this.parseModuleExportName();
              let specifierTypeKind = null;

              if (firstIdent.type === "Identifier") {
                if (firstIdent.name === "type") {
                  specifierTypeKind = "type";
                } else if (firstIdent.name === "typeof") {
                  specifierTypeKind = "typeof";
                }
              }

              let isBinding = false;

              if (
                this.isContextual("as") &&
                !this.isLookaheadContextual("as")
              ) {
                const as_ident = this.parseIdentifier(true);

                if (
                  specifierTypeKind !== null &&
                  !this.match(types$1.name) &&
                  !this.state.type.keyword
                ) {
                  specifier.imported = as_ident;
                  specifier.importKind = specifierTypeKind;
                  specifier.local = cloneIdentifier(as_ident);
                } else {
                  specifier.imported = firstIdent;
                  specifier.importKind = null;
                  specifier.local = this.parseIdentifier();
                }
              } else {
                if (
                  specifierTypeKind !== null &&
                  (this.match(types$1.name) || this.state.type.keyword)
                ) {
                  specifier.imported = this.parseIdentifier(true);
                  specifier.importKind = specifierTypeKind;
                } else {
                  if (firstIdentIsString) {
                    throw this.raise(
                      specifier.start,
                      ErrorMessages.ImportBindingIsString,
                      firstIdent.value
                    );
                  }

                  specifier.imported = firstIdent;
                  specifier.importKind = null;
                }

                if (this.eatContextual("as")) {
                  specifier.local = this.parseIdentifier();
                } else {
                  isBinding = true;
                  specifier.local = cloneIdentifier(specifier.imported);
                }
              }

              const nodeIsTypeImport = hasTypeImportKind(node);
              const specifierIsTypeImport = hasTypeImportKind(specifier);

              if (nodeIsTypeImport && specifierIsTypeImport) {
                this.raise(
                  specifier.start,
                  FlowErrors.ImportTypeShorthandOnlyInPureImport
                );
              }

              if (nodeIsTypeImport || specifierIsTypeImport) {
                this.checkReservedType(
                  specifier.local.name,
                  specifier.local.start,
                  true
                );
              }

              if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
                this.checkReservedWord(
                  specifier.local.name,
                  specifier.start,
                  true,
                  true
                );
              }

              this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
              node.specifiers.push(
                this.finishNode(specifier, "ImportSpecifier")
              );
            }

            parseBindingAtom() {
              switch (this.state.type) {
                case types$1._this:
                  return this.parseIdentifier(true);

                default:
                  return super.parseBindingAtom();
              }
            }

            parseFunctionParams(node, allowModifiers) {
              const kind = node.kind;

              if (kind !== "get" && kind !== "set" && this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              super.parseFunctionParams(node, allowModifiers);
            }

            parseVarId(decl, kind) {
              super.parseVarId(decl, kind);

              if (this.match(types$1.colon)) {
                decl.id.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(decl.id);
              }
            }

            parseAsyncArrowFromCallExpression(node, call) {
              if (this.match(types$1.colon)) {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                node.returnType = this.flowParseTypeAnnotation();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
              }

              return super.parseAsyncArrowFromCallExpression(node, call);
            }

            shouldParseAsyncArrow() {
              return this.match(types$1.colon) || super.shouldParseAsyncArrow();
            }

            parseMaybeAssign(refExpressionErrors, afterLeftParse) {
              var _jsx;

              let state = null;
              let jsx;

              if (
                this.hasPlugin("jsx") &&
                (this.match(types$1.jsxTagStart) || this.isRelational("<"))
              ) {
                state = this.state.clone();
                jsx = this.tryParse(
                  () =>
                    super.parseMaybeAssign(refExpressionErrors, afterLeftParse),
                  state
                );
                if (!jsx.error) return jsx.node;
                const { context } = this.state;
                const curContext = context[context.length - 1];

                if (curContext === types.j_oTag) {
                  context.length -= 2;
                } else if (curContext === types.j_expr) {
                  context.length -= 1;
                }
              }

              if (
                ((_jsx = jsx) != null && _jsx.error) ||
                this.isRelational("<")
              ) {
                var _jsx2, _jsx3;

                state = state || this.state.clone();
                let typeParameters;
                const arrow = this.tryParse((abort) => {
                  var _arrowExpression$extr;

                  typeParameters = this.flowParseTypeParameterDeclaration();
                  const arrowExpression = this.forwardNoArrowParamsConversionAt(
                    typeParameters,
                    () => {
                      const result = super.parseMaybeAssign(
                        refExpressionErrors,
                        afterLeftParse
                      );
                      this.resetStartLocationFromNode(result, typeParameters);
                      return result;
                    }
                  );
                  if (
                    (_arrowExpression$extr = arrowExpression.extra) != null &&
                    _arrowExpression$extr.parenthesized
                  )
                    abort();
                  const expr =
                    this.maybeUnwrapTypeCastExpression(arrowExpression);
                  if (expr.type !== "ArrowFunctionExpression") abort();
                  expr.typeParameters = typeParameters;
                  this.resetStartLocationFromNode(expr, typeParameters);
                  return arrowExpression;
                }, state);
                let arrowExpression = null;

                if (
                  arrow.node &&
                  this.maybeUnwrapTypeCastExpression(arrow.node).type ===
                    "ArrowFunctionExpression"
                ) {
                  if (!arrow.error && !arrow.aborted) {
                    if (arrow.node.async) {
                      this.raise(
                        typeParameters.start,
                        FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction
                      );
                    }

                    return arrow.node;
                  }

                  arrowExpression = arrow.node;
                }

                if ((_jsx2 = jsx) != null && _jsx2.node) {
                  this.state = jsx.failState;
                  return jsx.node;
                }

                if (arrowExpression) {
                  this.state = arrow.failState;
                  return arrowExpression;
                }

                if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
                if (arrow.thrown) throw arrow.error;
                throw this.raise(
                  typeParameters.start,
                  FlowErrors.UnexpectedTokenAfterTypeParameter
                );
              }

              return super.parseMaybeAssign(
                refExpressionErrors,
                afterLeftParse
              );
            }

            parseArrow(node) {
              if (this.match(types$1.colon)) {
                const result = this.tryParse(() => {
                  const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                  this.state.noAnonFunctionType = true;
                  const typeNode = this.startNode();
                  [typeNode.typeAnnotation, node.predicate] =
                    this.flowParseTypeAndPredicateInitialiser();
                  this.state.noAnonFunctionType = oldNoAnonFunctionType;
                  if (this.canInsertSemicolon()) this.unexpected();
                  if (!this.match(types$1.arrow)) this.unexpected();
                  return typeNode;
                });
                if (result.thrown) return null;
                if (result.error) this.state = result.failState;
                node.returnType = result.node.typeAnnotation
                  ? this.finishNode(result.node, "TypeAnnotation")
                  : null;
              }

              return super.parseArrow(node);
            }

            shouldParseArrow(params) {
              return (
                this.match(types$1.colon) || super.shouldParseArrow(params)
              );
            }

            setArrowFunctionParameters(node, params) {
              if (
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                node.params = params;
              } else {
                super.setArrowFunctionParameters(node, params);
              }
            }

            checkParams(node, allowDuplicates, isArrowFunction) {
              if (
                isArrowFunction &&
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                return;
              }

              for (let i = 0; i < node.params.length; i++) {
                if (this.isThisParam(node.params[i]) && i > 0) {
                  this.raise(
                    node.params[i].start,
                    FlowErrors.ThisParamMustBeFirst
                  );
                }
              }

              return super.checkParams(...arguments);
            }

            parseParenAndDistinguishExpression(canBeArrow) {
              return super.parseParenAndDistinguishExpression(
                canBeArrow &&
                  this.state.noArrowAt.indexOf(this.state.start) === -1
              );
            }

            parseSubscripts(base, startPos, startLoc, noCalls) {
              if (
                base.type === "Identifier" &&
                base.name === "async" &&
                this.state.noArrowAt.indexOf(startPos) !== -1
              ) {
                this.next();
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.arguments = this.parseCallExpressionArguments(
                  types$1.parenR,
                  false
                );
                base = this.finishNode(node, "CallExpression");
              } else if (
                base.type === "Identifier" &&
                base.name === "async" &&
                this.isRelational("<")
              ) {
                const state = this.state.clone();
                const arrow = this.tryParse(
                  (abort) =>
                    this.parseAsyncArrowWithTypeParameters(
                      startPos,
                      startLoc
                    ) || abort(),
                  state
                );
                if (!arrow.error && !arrow.aborted) return arrow.node;
                const result = this.tryParse(
                  () =>
                    super.parseSubscripts(base, startPos, startLoc, noCalls),
                  state
                );
                if (result.node && !result.error) return result.node;

                if (arrow.node) {
                  this.state = arrow.failState;
                  return arrow.node;
                }

                if (result.node) {
                  this.state = result.failState;
                  return result.node;
                }

                throw arrow.error || result.error;
              }

              return super.parseSubscripts(base, startPos, startLoc, noCalls);
            }

            parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
              if (
                this.match(types$1.questionDot) &&
                this.isLookaheadToken_lt()
              ) {
                subscriptState.optionalChainMember = true;

                if (noCalls) {
                  subscriptState.stop = true;
                  return base;
                }

                this.next();
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.typeArguments = this.flowParseTypeParameterInstantiation();
                this.expect(types$1.parenL);
                node.arguments = this.parseCallExpressionArguments(
                  types$1.parenR,
                  false
                );
                node.optional = true;
                return this.finishCallExpression(node, true);
              } else if (
                !noCalls &&
                this.shouldParseTypes() &&
                this.isRelational("<")
              ) {
                const node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                const result = this.tryParse(() => {
                  node.typeArguments =
                    this.flowParseTypeParameterInstantiationCallOrNew();
                  this.expect(types$1.parenL);
                  node.arguments = this.parseCallExpressionArguments(
                    types$1.parenR,
                    false
                  );
                  if (subscriptState.optionalChainMember) node.optional = false;
                  return this.finishCallExpression(
                    node,
                    subscriptState.optionalChainMember
                  );
                });

                if (result.node) {
                  if (result.error) this.state = result.failState;
                  return result.node;
                }
              }

              return super.parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                subscriptState
              );
            }

            parseNewArguments(node) {
              let targs = null;

              if (this.shouldParseTypes() && this.isRelational("<")) {
                targs = this.tryParse(() =>
                  this.flowParseTypeParameterInstantiationCallOrNew()
                ).node;
              }

              node.typeArguments = targs;
              super.parseNewArguments(node);
            }

            parseAsyncArrowWithTypeParameters(startPos, startLoc) {
              const node = this.startNodeAt(startPos, startLoc);
              this.parseFunctionParams(node);
              if (!this.parseArrow(node)) return;
              return this.parseArrowExpression(node, undefined, true);
            }

            readToken_mult_modulo(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (code === 42 && next === 47 && this.state.hasFlowComment) {
                this.state.hasFlowComment = false;
                this.state.pos += 2;
                this.nextToken();
                return;
              }

              super.readToken_mult_modulo(code);
            }

            readToken_pipe_amp(code) {
              const next = this.input.charCodeAt(this.state.pos + 1);

              if (code === 124 && next === 125) {
                this.finishOp(types$1.braceBarR, 2);
                return;
              }

              super.readToken_pipe_amp(code);
            }

            parseTopLevel(file, program) {
              const fileNode = super.parseTopLevel(file, program);

              if (this.state.hasFlowComment) {
                this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);
              }

              return fileNode;
            }

            skipBlockComment() {
              if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
                if (this.state.hasFlowComment) {
                  this.unexpected(null, FlowErrors.NestedFlowComment);
                }

                this.hasFlowCommentCompletion();
                this.state.pos += this.skipFlowComment();
                this.state.hasFlowComment = true;
                return;
              }

              if (this.state.hasFlowComment) {
                const end = this.input.indexOf("*-/", (this.state.pos += 2));

                if (end === -1) {
                  throw this.raise(
                    this.state.pos - 2,
                    ErrorMessages.UnterminatedComment
                  );
                }

                this.state.pos = end + 3;
                return;
              }

              return super.skipBlockComment();
            }

            skipFlowComment() {
              const { pos } = this.state;
              let shiftToFirstNonWhiteSpace = 2;

              while (
                [32, 9].includes(
                  this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)
                )
              ) {
                shiftToFirstNonWhiteSpace++;
              }

              const ch2 = this.input.charCodeAt(
                shiftToFirstNonWhiteSpace + pos
              );
              const ch3 = this.input.charCodeAt(
                shiftToFirstNonWhiteSpace + pos + 1
              );

              if (ch2 === 58 && ch3 === 58) {
                return shiftToFirstNonWhiteSpace + 2;
              }

              if (
                this.input.slice(
                  shiftToFirstNonWhiteSpace + pos,
                  shiftToFirstNonWhiteSpace + pos + 12
                ) === "flow-include"
              ) {
                return shiftToFirstNonWhiteSpace + 12;
              }

              if (ch2 === 58 && ch3 !== 58) {
                return shiftToFirstNonWhiteSpace;
              }

              return false;
            }

            hasFlowCommentCompletion() {
              const end = this.input.indexOf("*/", this.state.pos);

              if (end === -1) {
                throw this.raise(
                  this.state.pos,
                  ErrorMessages.UnterminatedComment
                );
              }
            }

            flowEnumErrorBooleanMemberNotInitialized(
              pos,
              { enumName, memberName }
            ) {
              this.raise(
                pos,
                FlowErrors.EnumBooleanMemberNotInitialized,
                memberName,
                enumName
              );
            }

            flowEnumErrorInvalidMemberName(pos, { enumName, memberName }) {
              const suggestion =
                memberName[0].toUpperCase() + memberName.slice(1);
              this.raise(
                pos,
                FlowErrors.EnumInvalidMemberName,
                memberName,
                suggestion,
                enumName
              );
            }

            flowEnumErrorDuplicateMemberName(pos, { enumName, memberName }) {
              this.raise(
                pos,
                FlowErrors.EnumDuplicateMemberName,
                memberName,
                enumName
              );
            }

            flowEnumErrorInconsistentMemberValues(pos, { enumName }) {
              this.raise(
                pos,
                FlowErrors.EnumInconsistentMemberValues,
                enumName
              );
            }

            flowEnumErrorInvalidExplicitType(pos, { enumName, suppliedType }) {
              return this.raise(
                pos,
                suppliedType === null
                  ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied
                  : FlowErrors.EnumInvalidExplicitType,
                enumName,
                suppliedType
              );
            }

            flowEnumErrorInvalidMemberInitializer(
              pos,
              { enumName, explicitType, memberName }
            ) {
              let message = null;

              switch (explicitType) {
                case "boolean":
                case "number":
                case "string":
                  message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;
                  break;

                case "symbol":
                  message = FlowErrors.EnumInvalidMemberInitializerSymbolType;
                  break;

                default:
                  message = FlowErrors.EnumInvalidMemberInitializerUnknownType;
              }

              return this.raise(
                pos,
                message,
                enumName,
                memberName,
                explicitType
              );
            }

            flowEnumErrorNumberMemberNotInitialized(
              pos,
              { enumName, memberName }
            ) {
              this.raise(
                pos,
                FlowErrors.EnumNumberMemberNotInitialized,
                enumName,
                memberName
              );
            }

            flowEnumErrorStringMemberInconsistentlyInitailized(
              pos,
              { enumName }
            ) {
              this.raise(
                pos,
                FlowErrors.EnumStringMemberInconsistentlyInitailized,
                enumName
              );
            }

            flowEnumMemberInit() {
              const startPos = this.state.start;

              const endOfInit = () =>
                this.match(types$1.comma) || this.match(types$1.braceR);

              switch (this.state.type) {
                case types$1.num: {
                  const literal = this.parseNumericLiteral(this.state.value);

                  if (endOfInit()) {
                    return {
                      type: "number",
                      pos: literal.start,
                      value: literal,
                    };
                  }

                  return {
                    type: "invalid",
                    pos: startPos,
                  };
                }

                case types$1.string: {
                  const literal = this.parseStringLiteral(this.state.value);

                  if (endOfInit()) {
                    return {
                      type: "string",
                      pos: literal.start,
                      value: literal,
                    };
                  }

                  return {
                    type: "invalid",
                    pos: startPos,
                  };
                }

                case types$1._true:
                case types$1._false: {
                  const literal = this.parseBooleanLiteral(
                    this.match(types$1._true)
                  );

                  if (endOfInit()) {
                    return {
                      type: "boolean",
                      pos: literal.start,
                      value: literal,
                    };
                  }

                  return {
                    type: "invalid",
                    pos: startPos,
                  };
                }

                default:
                  return {
                    type: "invalid",
                    pos: startPos,
                  };
              }
            }

            flowEnumMemberRaw() {
              const pos = this.state.start;
              const id = this.parseIdentifier(true);
              const init = this.eat(types$1.eq)
                ? this.flowEnumMemberInit()
                : {
                    type: "none",
                    pos,
                  };
              return {
                id,
                init,
              };
            }

            flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {
              const { explicitType } = context;

              if (explicitType === null) {
                return;
              }

              if (explicitType !== expectedType) {
                this.flowEnumErrorInvalidMemberInitializer(pos, context);
              }
            }

            flowEnumMembers({ enumName, explicitType }) {
              const seenNames = new Set();
              const members = {
                booleanMembers: [],
                numberMembers: [],
                stringMembers: [],
                defaultedMembers: [],
              };
              let hasUnknownMembers = false;

              while (!this.match(types$1.braceR)) {
                if (this.eat(types$1.ellipsis)) {
                  hasUnknownMembers = true;
                  break;
                }

                const memberNode = this.startNode();
                const { id, init } = this.flowEnumMemberRaw();
                const memberName = id.name;

                if (memberName === "") {
                  continue;
                }

                if (/^[a-z]/.test(memberName)) {
                  this.flowEnumErrorInvalidMemberName(id.start, {
                    enumName,
                    memberName,
                  });
                }

                if (seenNames.has(memberName)) {
                  this.flowEnumErrorDuplicateMemberName(id.start, {
                    enumName,
                    memberName,
                  });
                }

                seenNames.add(memberName);
                const context = {
                  enumName,
                  explicitType,
                  memberName,
                };
                memberNode.id = id;

                switch (init.type) {
                  case "boolean": {
                    this.flowEnumCheckExplicitTypeMismatch(
                      init.pos,
                      context,
                      "boolean"
                    );
                    memberNode.init = init.value;
                    members.booleanMembers.push(
                      this.finishNode(memberNode, "EnumBooleanMember")
                    );
                    break;
                  }

                  case "number": {
                    this.flowEnumCheckExplicitTypeMismatch(
                      init.pos,
                      context,
                      "number"
                    );
                    memberNode.init = init.value;
                    members.numberMembers.push(
                      this.finishNode(memberNode, "EnumNumberMember")
                    );
                    break;
                  }

                  case "string": {
                    this.flowEnumCheckExplicitTypeMismatch(
                      init.pos,
                      context,
                      "string"
                    );
                    memberNode.init = init.value;
                    members.stringMembers.push(
                      this.finishNode(memberNode, "EnumStringMember")
                    );
                    break;
                  }

                  case "invalid": {
                    throw this.flowEnumErrorInvalidMemberInitializer(
                      init.pos,
                      context
                    );
                  }

                  case "none": {
                    switch (explicitType) {
                      case "boolean":
                        this.flowEnumErrorBooleanMemberNotInitialized(
                          init.pos,
                          context
                        );
                        break;

                      case "number":
                        this.flowEnumErrorNumberMemberNotInitialized(
                          init.pos,
                          context
                        );
                        break;

                      default:
                        members.defaultedMembers.push(
                          this.finishNode(memberNode, "EnumDefaultedMember")
                        );
                    }
                  }
                }

                if (!this.match(types$1.braceR)) {
                  this.expect(types$1.comma);
                }
              }

              return {
                members,
                hasUnknownMembers,
              };
            }

            flowEnumStringMembers(
              initializedMembers,
              defaultedMembers,
              { enumName }
            ) {
              if (initializedMembers.length === 0) {
                return defaultedMembers;
              } else if (defaultedMembers.length === 0) {
                return initializedMembers;
              } else if (defaultedMembers.length > initializedMembers.length) {
                for (const member of initializedMembers) {
                  this.flowEnumErrorStringMemberInconsistentlyInitailized(
                    member.start,
                    {
                      enumName,
                    }
                  );
                }

                return defaultedMembers;
              } else {
                for (const member of defaultedMembers) {
                  this.flowEnumErrorStringMemberInconsistentlyInitailized(
                    member.start,
                    {
                      enumName,
                    }
                  );
                }

                return initializedMembers;
              }
            }

            flowEnumParseExplicitType({ enumName }) {
              if (this.eatContextual("of")) {
                if (!this.match(types$1.name)) {
                  throw this.flowEnumErrorInvalidExplicitType(
                    this.state.start,
                    {
                      enumName,
                      suppliedType: null,
                    }
                  );
                }

                const { value } = this.state;
                this.next();

                if (
                  value !== "boolean" &&
                  value !== "number" &&
                  value !== "string" &&
                  value !== "symbol"
                ) {
                  this.flowEnumErrorInvalidExplicitType(this.state.start, {
                    enumName,
                    suppliedType: value,
                  });
                }

                return value;
              }

              return null;
            }

            flowEnumBody(node, { enumName, nameLoc }) {
              const explicitType = this.flowEnumParseExplicitType({
                enumName,
              });
              this.expect(types$1.braceL);
              const { members, hasUnknownMembers } = this.flowEnumMembers({
                enumName,
                explicitType,
              });
              node.hasUnknownMembers = hasUnknownMembers;

              switch (explicitType) {
                case "boolean":
                  node.explicitType = true;
                  node.members = members.booleanMembers;
                  this.expect(types$1.braceR);
                  return this.finishNode(node, "EnumBooleanBody");

                case "number":
                  node.explicitType = true;
                  node.members = members.numberMembers;
                  this.expect(types$1.braceR);
                  return this.finishNode(node, "EnumNumberBody");

                case "string":
                  node.explicitType = true;
                  node.members = this.flowEnumStringMembers(
                    members.stringMembers,
                    members.defaultedMembers,
                    {
                      enumName,
                    }
                  );
                  this.expect(types$1.braceR);
                  return this.finishNode(node, "EnumStringBody");

                case "symbol":
                  node.members = members.defaultedMembers;
                  this.expect(types$1.braceR);
                  return this.finishNode(node, "EnumSymbolBody");

                default: {
                  const empty = () => {
                    node.members = [];
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumStringBody");
                  };

                  node.explicitType = false;
                  const boolsLen = members.booleanMembers.length;
                  const numsLen = members.numberMembers.length;
                  const strsLen = members.stringMembers.length;
                  const defaultedLen = members.defaultedMembers.length;

                  if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
                    return empty();
                  } else if (!boolsLen && !numsLen) {
                    node.members = this.flowEnumStringMembers(
                      members.stringMembers,
                      members.defaultedMembers,
                      {
                        enumName,
                      }
                    );
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumStringBody");
                  } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                    for (const member of members.defaultedMembers) {
                      this.flowEnumErrorBooleanMemberNotInitialized(
                        member.start,
                        {
                          enumName,
                          memberName: member.id.name,
                        }
                      );
                    }

                    node.members = members.booleanMembers;
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumBooleanBody");
                  } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                    for (const member of members.defaultedMembers) {
                      this.flowEnumErrorNumberMemberNotInitialized(
                        member.start,
                        {
                          enumName,
                          memberName: member.id.name,
                        }
                      );
                    }

                    node.members = members.numberMembers;
                    this.expect(types$1.braceR);
                    return this.finishNode(node, "EnumNumberBody");
                  } else {
                    this.flowEnumErrorInconsistentMemberValues(nameLoc, {
                      enumName,
                    });
                    return empty();
                  }
                }
              }
            }

            flowParseEnumDeclaration(node) {
              const id = this.parseIdentifier();
              node.id = id;
              node.body = this.flowEnumBody(this.startNode(), {
                enumName: id.name,
                nameLoc: id.start,
              });
              return this.finishNode(node, "EnumDeclaration");
            }

            isLookaheadToken_lt() {
              const next = this.nextTokenStart();

              if (this.input.charCodeAt(next) === 60) {
                const afterNext = this.input.charCodeAt(next + 1);
                return afterNext !== 60 && afterNext !== 61;
              }

              return false;
            }

            maybeUnwrapTypeCastExpression(node) {
              return node.type === "TypeCastExpression"
                ? node.expression
                : node;
            }
          };

        const entities = {
          quot: "\u0022",
          amp: "&",
          apos: "\u0027",
          lt: "<",
          gt: ">",
          nbsp: "\u00A0",
          iexcl: "\u00A1",
          cent: "\u00A2",
          pound: "\u00A3",
          curren: "\u00A4",
          yen: "\u00A5",
          brvbar: "\u00A6",
          sect: "\u00A7",
          uml: "\u00A8",
          copy: "\u00A9",
          ordf: "\u00AA",
          laquo: "\u00AB",
          not: "\u00AC",
          shy: "\u00AD",
          reg: "\u00AE",
          macr: "\u00AF",
          deg: "\u00B0",
          plusmn: "\u00B1",
          sup2: "\u00B2",
          sup3: "\u00B3",
          acute: "\u00B4",
          micro: "\u00B5",
          para: "\u00B6",
          middot: "\u00B7",
          cedil: "\u00B8",
          sup1: "\u00B9",
          ordm: "\u00BA",
          raquo: "\u00BB",
          frac14: "\u00BC",
          frac12: "\u00BD",
          frac34: "\u00BE",
          iquest: "\u00BF",
          Agrave: "\u00C0",
          Aacute: "\u00C1",
          Acirc: "\u00C2",
          Atilde: "\u00C3",
          Auml: "\u00C4",
          Aring: "\u00C5",
          AElig: "\u00C6",
          Ccedil: "\u00C7",
          Egrave: "\u00C8",
          Eacute: "\u00C9",
          Ecirc: "\u00CA",
          Euml: "\u00CB",
          Igrave: "\u00CC",
          Iacute: "\u00CD",
          Icirc: "\u00CE",
          Iuml: "\u00CF",
          ETH: "\u00D0",
          Ntilde: "\u00D1",
          Ograve: "\u00D2",
          Oacute: "\u00D3",
          Ocirc: "\u00D4",
          Otilde: "\u00D5",
          Ouml: "\u00D6",
          times: "\u00D7",
          Oslash: "\u00D8",
          Ugrave: "\u00D9",
          Uacute: "\u00DA",
          Ucirc: "\u00DB",
          Uuml: "\u00DC",
          Yacute: "\u00DD",
          THORN: "\u00DE",
          szlig: "\u00DF",
          agrave: "\u00E0",
          aacute: "\u00E1",
          acirc: "\u00E2",
          atilde: "\u00E3",
          auml: "\u00E4",
          aring: "\u00E5",
          aelig: "\u00E6",
          ccedil: "\u00E7",
          egrave: "\u00E8",
          eacute: "\u00E9",
          ecirc: "\u00EA",
          euml: "\u00EB",
          igrave: "\u00EC",
          iacute: "\u00ED",
          icirc: "\u00EE",
          iuml: "\u00EF",
          eth: "\u00F0",
          ntilde: "\u00F1",
          ograve: "\u00F2",
          oacute: "\u00F3",
          ocirc: "\u00F4",
          otilde: "\u00F5",
          ouml: "\u00F6",
          divide: "\u00F7",
          oslash: "\u00F8",
          ugrave: "\u00F9",
          uacute: "\u00FA",
          ucirc: "\u00FB",
          uuml: "\u00FC",
          yacute: "\u00FD",
          thorn: "\u00FE",
          yuml: "\u00FF",
          OElig: "\u0152",
          oelig: "\u0153",
          Scaron: "\u0160",
          scaron: "\u0161",
          Yuml: "\u0178",
          fnof: "\u0192",
          circ: "\u02C6",
          tilde: "\u02DC",
          Alpha: "\u0391",
          Beta: "\u0392",
          Gamma: "\u0393",
          Delta: "\u0394",
          Epsilon: "\u0395",
          Zeta: "\u0396",
          Eta: "\u0397",
          Theta: "\u0398",
          Iota: "\u0399",
          Kappa: "\u039A",
          Lambda: "\u039B",
          Mu: "\u039C",
          Nu: "\u039D",
          Xi: "\u039E",
          Omicron: "\u039F",
          Pi: "\u03A0",
          Rho: "\u03A1",
          Sigma: "\u03A3",
          Tau: "\u03A4",
          Upsilon: "\u03A5",
          Phi: "\u03A6",
          Chi: "\u03A7",
          Psi: "\u03A8",
          Omega: "\u03A9",
          alpha: "\u03B1",
          beta: "\u03B2",
          gamma: "\u03B3",
          delta: "\u03B4",
          epsilon: "\u03B5",
          zeta: "\u03B6",
          eta: "\u03B7",
          theta: "\u03B8",
          iota: "\u03B9",
          kappa: "\u03BA",
          lambda: "\u03BB",
          mu: "\u03BC",
          nu: "\u03BD",
          xi: "\u03BE",
          omicron: "\u03BF",
          pi: "\u03C0",
          rho: "\u03C1",
          sigmaf: "\u03C2",
          sigma: "\u03C3",
          tau: "\u03C4",
          upsilon: "\u03C5",
          phi: "\u03C6",
          chi: "\u03C7",
          psi: "\u03C8",
          omega: "\u03C9",
          thetasym: "\u03D1",
          upsih: "\u03D2",
          piv: "\u03D6",
          ensp: "\u2002",
          emsp: "\u2003",
          thinsp: "\u2009",
          zwnj: "\u200C",
          zwj: "\u200D",
          lrm: "\u200E",
          rlm: "\u200F",
          ndash: "\u2013",
          mdash: "\u2014",
          lsquo: "\u2018",
          rsquo: "\u2019",
          sbquo: "\u201A",
          ldquo: "\u201C",
          rdquo: "\u201D",
          bdquo: "\u201E",
          dagger: "\u2020",
          Dagger: "\u2021",
          bull: "\u2022",
          hellip: "\u2026",
          permil: "\u2030",
          prime: "\u2032",
          Prime: "\u2033",
          lsaquo: "\u2039",
          rsaquo: "\u203A",
          oline: "\u203E",
          frasl: "\u2044",
          euro: "\u20AC",
          image: "\u2111",
          weierp: "\u2118",
          real: "\u211C",
          trade: "\u2122",
          alefsym: "\u2135",
          larr: "\u2190",
          uarr: "\u2191",
          rarr: "\u2192",
          darr: "\u2193",
          harr: "\u2194",
          crarr: "\u21B5",
          lArr: "\u21D0",
          uArr: "\u21D1",
          rArr: "\u21D2",
          dArr: "\u21D3",
          hArr: "\u21D4",
          forall: "\u2200",
          part: "\u2202",
          exist: "\u2203",
          empty: "\u2205",
          nabla: "\u2207",
          isin: "\u2208",
          notin: "\u2209",
          ni: "\u220B",
          prod: "\u220F",
          sum: "\u2211",
          minus: "\u2212",
          lowast: "\u2217",
          radic: "\u221A",
          prop: "\u221D",
          infin: "\u221E",
          ang: "\u2220",
          and: "\u2227",
          or: "\u2228",
          cap: "\u2229",
          cup: "\u222A",
          int: "\u222B",
          there4: "\u2234",
          sim: "\u223C",
          cong: "\u2245",
          asymp: "\u2248",
          ne: "\u2260",
          equiv: "\u2261",
          le: "\u2264",
          ge: "\u2265",
          sub: "\u2282",
          sup: "\u2283",
          nsub: "\u2284",
          sube: "\u2286",
          supe: "\u2287",
          oplus: "\u2295",
          otimes: "\u2297",
          perp: "\u22A5",
          sdot: "\u22C5",
          lceil: "\u2308",
          rceil: "\u2309",
          lfloor: "\u230A",
          rfloor: "\u230B",
          lang: "\u2329",
          rang: "\u232A",
          loz: "\u25CA",
          spades: "\u2660",
          clubs: "\u2663",
          hearts: "\u2665",
          diams: "\u2666",
        };

        const HEX_NUMBER = /^[\da-fA-F]+$/;
        const DECIMAL_NUMBER = /^\d+$/;
        const JsxErrors = makeErrorTemplates(
          {
            AttributeIsEmpty:
              "JSX attributes must only be assigned a non-empty expression.",
            MissingClosingTagElement:
              "Expected corresponding JSX closing tag for <%0>.",
            MissingClosingTagFragment:
              "Expected corresponding JSX closing tag for <>.",
            UnexpectedSequenceExpression:
              "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
            UnsupportedJsxValue:
              "JSX value should be either an expression or a quoted JSX text.",
            UnterminatedJsxContent: "Unterminated JSX contents.",
            UnwrappedAdjacentJSXElements:
              "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?",
          },
          ErrorCodes.SyntaxError
        );
        types.j_oTag = new TokContext("<tag");
        types.j_cTag = new TokContext("</tag");
        types.j_expr = new TokContext("<tag>...</tag>", true);
        types$1.jsxName = new TokenType("jsxName");
        types$1.jsxText = new TokenType("jsxText", {
          beforeExpr: true,
        });
        types$1.jsxTagStart = new TokenType("jsxTagStart", {
          startsExpr: true,
        });
        types$1.jsxTagEnd = new TokenType("jsxTagEnd");

        types$1.jsxTagStart.updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };

        function isFragment(object) {
          return object
            ? object.type === "JSXOpeningFragment" ||
                object.type === "JSXClosingFragment"
            : false;
        }

        function getQualifiedJSXName(object) {
          if (object.type === "JSXIdentifier") {
            return object.name;
          }

          if (object.type === "JSXNamespacedName") {
            return object.namespace.name + ":" + object.name.name;
          }

          if (object.type === "JSXMemberExpression") {
            return (
              getQualifiedJSXName(object.object) +
              "." +
              getQualifiedJSXName(object.property)
            );
          }

          throw new Error("Node had unexpected type: " + object.type);
        }

        var jsx = (superClass) =>
          class extends superClass {
            jsxReadToken() {
              let out = "";
              let chunkStart = this.state.pos;

              for (;;) {
                if (this.state.pos >= this.length) {
                  throw this.raise(
                    this.state.start,
                    JsxErrors.UnterminatedJsxContent
                  );
                }

                const ch = this.input.charCodeAt(this.state.pos);

                switch (ch) {
                  case 60:
                  case 123:
                    if (this.state.pos === this.state.start) {
                      if (ch === 60 && this.state.exprAllowed) {
                        ++this.state.pos;
                        return this.finishToken(types$1.jsxTagStart);
                      }

                      return super.getTokenFromCode(ch);
                    }

                    out += this.input.slice(chunkStart, this.state.pos);
                    return this.finishToken(types$1.jsxText, out);

                  case 38:
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadEntity();
                    chunkStart = this.state.pos;
                    break;

                  case 62:
                  case 125:

                  default:
                    if (isNewLine(ch)) {
                      out += this.input.slice(chunkStart, this.state.pos);
                      out += this.jsxReadNewLine(true);
                      chunkStart = this.state.pos;
                    } else {
                      ++this.state.pos;
                    }
                }
              }
            }

            jsxReadNewLine(normalizeCRLF) {
              const ch = this.input.charCodeAt(this.state.pos);
              let out;
              ++this.state.pos;

              if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
                ++this.state.pos;
                out = normalizeCRLF ? "\n" : "\r\n";
              } else {
                out = String.fromCharCode(ch);
              }

              ++this.state.curLine;
              this.state.lineStart = this.state.pos;
              return out;
            }

            jsxReadString(quote) {
              let out = "";
              let chunkStart = ++this.state.pos;

              for (;;) {
                if (this.state.pos >= this.length) {
                  throw this.raise(
                    this.state.start,
                    ErrorMessages.UnterminatedString
                  );
                }

                const ch = this.input.charCodeAt(this.state.pos);
                if (ch === quote) break;

                if (ch === 38) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadEntity();
                  chunkStart = this.state.pos;
                } else if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadNewLine(false);
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
              }

              out += this.input.slice(chunkStart, this.state.pos++);
              return this.finishToken(types$1.string, out);
            }

            jsxReadEntity() {
              let str = "";
              let count = 0;
              let entity;
              let ch = this.input[this.state.pos];
              const startPos = ++this.state.pos;

              while (this.state.pos < this.length && count++ < 10) {
                ch = this.input[this.state.pos++];

                if (ch === ";") {
                  if (str[0] === "#") {
                    if (str[1] === "x") {
                      str = str.substr(2);

                      if (HEX_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 16));
                      }
                    } else {
                      str = str.substr(1);

                      if (DECIMAL_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 10));
                      }
                    }
                  } else {
                    entity = entities[str];
                  }

                  break;
                }

                str += ch;
              }

              if (!entity) {
                this.state.pos = startPos;
                return "&";
              }

              return entity;
            }

            jsxReadWord() {
              let ch;
              const start = this.state.pos;

              do {
                ch = this.input.charCodeAt(++this.state.pos);
              } while (isIdentifierChar(ch) || ch === 45);

              return this.finishToken(
                types$1.jsxName,
                this.input.slice(start, this.state.pos)
              );
            }

            jsxParseIdentifier() {
              const node = this.startNode();

              if (this.match(types$1.jsxName)) {
                node.name = this.state.value;
              } else if (this.state.type.keyword) {
                node.name = this.state.type.keyword;
              } else {
                this.unexpected();
              }

              this.next();
              return this.finishNode(node, "JSXIdentifier");
            }

            jsxParseNamespacedName() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const name = this.jsxParseIdentifier();
              if (!this.eat(types$1.colon)) return name;
              const node = this.startNodeAt(startPos, startLoc);
              node.namespace = name;
              node.name = this.jsxParseIdentifier();
              return this.finishNode(node, "JSXNamespacedName");
            }

            jsxParseElementName() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let node = this.jsxParseNamespacedName();

              if (node.type === "JSXNamespacedName") {
                return node;
              }

              while (this.eat(types$1.dot)) {
                const newNode = this.startNodeAt(startPos, startLoc);
                newNode.object = node;
                newNode.property = this.jsxParseIdentifier();
                node = this.finishNode(newNode, "JSXMemberExpression");
              }

              return node;
            }

            jsxParseAttributeValue() {
              let node;

              switch (this.state.type) {
                case types$1.braceL:
                  node = this.startNode();
                  this.next();
                  node = this.jsxParseExpressionContainer(node);

                  if (node.expression.type === "JSXEmptyExpression") {
                    this.raise(node.start, JsxErrors.AttributeIsEmpty);
                  }

                  return node;

                case types$1.jsxTagStart:
                case types$1.string:
                  return this.parseExprAtom();

                default:
                  throw this.raise(
                    this.state.start,
                    JsxErrors.UnsupportedJsxValue
                  );
              }
            }

            jsxParseEmptyExpression() {
              const node = this.startNodeAt(
                this.state.lastTokEnd,
                this.state.lastTokEndLoc
              );
              return this.finishNodeAt(
                node,
                "JSXEmptyExpression",
                this.state.start,
                this.state.startLoc
              );
            }

            jsxParseSpreadChild(node) {
              this.next();
              node.expression = this.parseExpression();
              this.expect(types$1.braceR);
              return this.finishNode(node, "JSXSpreadChild");
            }

            jsxParseExpressionContainer(node) {
              if (this.match(types$1.braceR)) {
                node.expression = this.jsxParseEmptyExpression();
              } else {
                const expression = this.parseExpression();
                node.expression = expression;
              }

              this.expect(types$1.braceR);
              return this.finishNode(node, "JSXExpressionContainer");
            }

            jsxParseAttribute() {
              const node = this.startNode();

              if (this.eat(types$1.braceL)) {
                this.expect(types$1.ellipsis);
                node.argument = this.parseMaybeAssignAllowIn();
                this.expect(types$1.braceR);
                return this.finishNode(node, "JSXSpreadAttribute");
              }

              node.name = this.jsxParseNamespacedName();
              node.value = this.eat(types$1.eq)
                ? this.jsxParseAttributeValue()
                : null;
              return this.finishNode(node, "JSXAttribute");
            }

            jsxParseOpeningElementAt(startPos, startLoc) {
              const node = this.startNodeAt(startPos, startLoc);

              if (this.match(types$1.jsxTagEnd)) {
                this.expect(types$1.jsxTagEnd);
                return this.finishNode(node, "JSXOpeningFragment");
              }

              node.name = this.jsxParseElementName();
              return this.jsxParseOpeningElementAfterName(node);
            }

            jsxParseOpeningElementAfterName(node) {
              const attributes = [];

              while (
                !this.match(types$1.slash) &&
                !this.match(types$1.jsxTagEnd)
              ) {
                attributes.push(this.jsxParseAttribute());
              }

              node.attributes = attributes;
              node.selfClosing = this.eat(types$1.slash);
              this.expect(types$1.jsxTagEnd);
              return this.finishNode(node, "JSXOpeningElement");
            }

            jsxParseClosingElementAt(startPos, startLoc) {
              const node = this.startNodeAt(startPos, startLoc);

              if (this.match(types$1.jsxTagEnd)) {
                this.expect(types$1.jsxTagEnd);
                return this.finishNode(node, "JSXClosingFragment");
              }

              node.name = this.jsxParseElementName();
              this.expect(types$1.jsxTagEnd);
              return this.finishNode(node, "JSXClosingElement");
            }

            jsxParseElementAt(startPos, startLoc) {
              const node = this.startNodeAt(startPos, startLoc);
              const children = [];
              const openingElement = this.jsxParseOpeningElementAt(
                startPos,
                startLoc
              );
              let closingElement = null;

              if (!openingElement.selfClosing) {
                contents: for (;;) {
                  switch (this.state.type) {
                    case types$1.jsxTagStart:
                      startPos = this.state.start;
                      startLoc = this.state.startLoc;
                      this.next();

                      if (this.eat(types$1.slash)) {
                        closingElement = this.jsxParseClosingElementAt(
                          startPos,
                          startLoc
                        );
                        break contents;
                      }

                      children.push(this.jsxParseElementAt(startPos, startLoc));
                      break;

                    case types$1.jsxText:
                      children.push(this.parseExprAtom());
                      break;

                    case types$1.braceL: {
                      const node = this.startNode();
                      this.next();

                      if (this.match(types$1.ellipsis)) {
                        children.push(this.jsxParseSpreadChild(node));
                      } else {
                        children.push(this.jsxParseExpressionContainer(node));
                      }

                      break;
                    }

                    default:
                      throw this.unexpected();
                  }
                }

                if (isFragment(openingElement) && !isFragment(closingElement)) {
                  this.raise(
                    closingElement.start,
                    JsxErrors.MissingClosingTagFragment
                  );
                } else if (
                  !isFragment(openingElement) &&
                  isFragment(closingElement)
                ) {
                  this.raise(
                    closingElement.start,
                    JsxErrors.MissingClosingTagElement,
                    getQualifiedJSXName(openingElement.name)
                  );
                } else if (
                  !isFragment(openingElement) &&
                  !isFragment(closingElement)
                ) {
                  if (
                    getQualifiedJSXName(closingElement.name) !==
                    getQualifiedJSXName(openingElement.name)
                  ) {
                    this.raise(
                      closingElement.start,
                      JsxErrors.MissingClosingTagElement,
                      getQualifiedJSXName(openingElement.name)
                    );
                  }
                }
              }

              if (isFragment(openingElement)) {
                node.openingFragment = openingElement;
                node.closingFragment = closingElement;
              } else {
                node.openingElement = openingElement;
                node.closingElement = closingElement;
              }

              node.children = children;

              if (this.isRelational("<")) {
                throw this.raise(
                  this.state.start,
                  JsxErrors.UnwrappedAdjacentJSXElements
                );
              }

              return isFragment(openingElement)
                ? this.finishNode(node, "JSXFragment")
                : this.finishNode(node, "JSXElement");
            }

            jsxParseElement() {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              this.next();
              return this.jsxParseElementAt(startPos, startLoc);
            }

            parseExprAtom(refExpressionErrors) {
              if (this.match(types$1.jsxText)) {
                return this.parseLiteral(this.state.value, "JSXText");
              } else if (this.match(types$1.jsxTagStart)) {
                return this.jsxParseElement();
              } else if (
                this.isRelational("<") &&
                this.input.charCodeAt(this.state.pos) !== 33
              ) {
                this.finishToken(types$1.jsxTagStart);
                return this.jsxParseElement();
              } else {
                return super.parseExprAtom(refExpressionErrors);
              }
            }

            createLookaheadState(state) {
              const lookaheadState = super.createLookaheadState(state);
              lookaheadState.inPropertyName = state.inPropertyName;
              return lookaheadState;
            }

            getTokenFromCode(code) {
              if (this.state.inPropertyName)
                return super.getTokenFromCode(code);
              const context = this.curContext();

              if (context === types.j_expr) {
                return this.jsxReadToken();
              }

              if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code)) {
                  return this.jsxReadWord();
                }

                if (code === 62) {
                  ++this.state.pos;
                  return this.finishToken(types$1.jsxTagEnd);
                }

                if ((code === 34 || code === 39) && context === types.j_oTag) {
                  return this.jsxReadString(code);
                }
              }

              if (
                code === 60 &&
                this.state.exprAllowed &&
                this.input.charCodeAt(this.state.pos + 1) !== 33
              ) {
                ++this.state.pos;
                return this.finishToken(types$1.jsxTagStart);
              }

              return super.getTokenFromCode(code);
            }

            updateContext(prevType) {
              super.updateContext(prevType);
              const { context, type } = this.state;

              if (type === types$1.slash && prevType === types$1.jsxTagStart) {
                context.splice(-2, 2, types.j_cTag);
                this.state.exprAllowed = false;
              } else if (type === types$1.jsxTagEnd) {
                const out = context.pop();

                if (
                  (out === types.j_oTag && prevType === types$1.slash) ||
                  out === types.j_cTag
                ) {
                  context.pop();
                  this.state.exprAllowed =
                    context[context.length - 1] === types.j_expr;
                } else {
                  this.state.exprAllowed = true;
                }
              } else if (
                type.keyword &&
                (prevType === types$1.dot || prevType === types$1.questionDot)
              ) {
                this.state.exprAllowed = false;
              } else {
                this.state.exprAllowed = type.beforeExpr;
              }
            }
          };

        class TypeScriptScope extends Scope {
          constructor(...args) {
            super(...args);
            this.types = new Set();
            this.enums = new Set();
            this.constEnums = new Set();
            this.classes = new Set();
            this.exportOnlyBindings = new Set();
          }
        }

        class TypeScriptScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new TypeScriptScope(flags);
          }

          declareName(name, bindingType, pos) {
            const scope = this.currentScope();

            if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
              this.maybeExportDefined(scope, name);
              scope.exportOnlyBindings.add(name);
              return;
            }

            super.declareName(...arguments);

            if (bindingType & BIND_KIND_TYPE) {
              if (!(bindingType & BIND_KIND_VALUE)) {
                this.checkRedeclarationInScope(scope, name, bindingType, pos);
                this.maybeExportDefined(scope, name);
              }

              scope.types.add(name);
            }

            if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);
            if (bindingType & BIND_FLAGS_TS_CONST_ENUM)
              scope.constEnums.add(name);
            if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);
          }

          isRedeclaredInScope(scope, name, bindingType) {
            if (scope.enums.has(name)) {
              if (bindingType & BIND_FLAGS_TS_ENUM) {
                const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
                const wasConst = scope.constEnums.has(name);
                return isConst !== wasConst;
              }

              return true;
            }

            if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
              if (scope.lexical.has(name)) {
                return !!(bindingType & BIND_KIND_VALUE);
              } else {
                return false;
              }
            }

            if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
              return true;
            }

            return super.isRedeclaredInScope(...arguments);
          }

          checkLocalExport(id) {
            const topLevelScope = this.scopeStack[0];
            const { name } = id;

            if (
              !topLevelScope.types.has(name) &&
              !topLevelScope.exportOnlyBindings.has(name)
            ) {
              super.checkLocalExport(id);
            }
          }
        }

        function nonNull(x) {
          if (x == null) {
            throw new Error(`Unexpected ${x} value.`);
          }

          return x;
        }

        function assert(x) {
          if (!x) {
            throw new Error("Assert fail");
          }
        }

        const TSErrors = makeErrorTemplates(
          {
            AbstractMethodHasImplementation:
              "Method '%0' cannot have an implementation because it is marked abstract.",
            AbstractPropertyHasInitializer:
              "Property '%0' cannot have an initializer because it is marked abstract.",
            AccesorCannotDeclareThisParameter:
              "'get' and 'set' accessors cannot declare 'this' parameters.",
            AccesorCannotHaveTypeParameters:
              "An accessor cannot have type parameters.",
            ClassMethodHasDeclare:
              "Class methods cannot have the 'declare' modifier.",
            ClassMethodHasReadonly:
              "Class methods cannot have the 'readonly' modifier.",
            ConstructorHasTypeParameters:
              "Type parameters cannot appear on a constructor declaration.",
            DeclareAccessor: "'declare' is not allowed in %0ters.",
            DeclareClassFieldHasInitializer:
              "Initializers are not allowed in ambient contexts.",
            DeclareFunctionHasImplementation:
              "An implementation cannot be declared in ambient contexts.",
            DuplicateAccessibilityModifier:
              "Accessibility modifier already seen.",
            DuplicateModifier: "Duplicate modifier: '%0'.",
            EmptyHeritageClauseType: "'%0' list cannot be empty.",
            EmptyTypeArguments: "Type argument list cannot be empty.",
            EmptyTypeParameters: "Type parameter list cannot be empty.",
            ExpectedAmbientAfterExportDeclare:
              "'export declare' must be followed by an ambient declaration.",
            ImportAliasHasImportType:
              "An import alias can not use 'import type'.",
            IncompatibleModifiers:
              "'%0' modifier cannot be used with '%1' modifier.",
            IndexSignatureHasAbstract:
              "Index signatures cannot have the 'abstract' modifier.",
            IndexSignatureHasAccessibility:
              "Index signatures cannot have an accessibility modifier ('%0').",
            IndexSignatureHasDeclare:
              "Index signatures cannot have the 'declare' modifier.",
            IndexSignatureHasOverride:
              "'override' modifier cannot appear on an index signature.",
            IndexSignatureHasStatic:
              "Index signatures cannot have the 'static' modifier.",
            InvalidModifierOnTypeMember:
              "'%0' modifier cannot appear on a type member.",
            InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
            InvalidTupleMemberLabel:
              "Tuple members must be labeled with a simple identifier.",
            MissingInterfaceName:
              "'interface' declarations must be followed by an identifier.",
            MixedLabeledAndUnlabeledElements:
              "Tuple members must all have names or all not have names.",
            NonAbstractClassHasAbstractMethod:
              "Abstract methods can only appear within an abstract class.",
            NonClassMethodPropertyHasAbstractModifer:
              "'abstract' modifier can only appear on a class, method, or property declaration.",
            OptionalTypeBeforeRequired:
              "A required element cannot follow an optional element.",
            OverrideNotInSubClass:
              "This member cannot have an 'override' modifier because its containing class does not extend another class.",
            PatternIsOptional:
              "A binding pattern parameter cannot be optional in an implementation signature.",
            PrivateElementHasAbstract:
              "Private elements cannot have the 'abstract' modifier.",
            PrivateElementHasAccessibility:
              "Private elements cannot have an accessibility modifier ('%0').",
            ReadonlyForMethodSignature:
              "'readonly' modifier can only appear on a property declaration or index signature.",
            SetAccesorCannotHaveOptionalParameter:
              "A 'set' accessor cannot have an optional parameter.",
            SetAccesorCannotHaveRestParameter:
              "A 'set' accessor cannot have rest parameter.",
            SetAccesorCannotHaveReturnType:
              "A 'set' accessor cannot have a return type annotation.",
            StaticBlockCannotHaveModifier:
              "Static class blocks cannot have any modifier.",
            TypeAnnotationAfterAssign:
              "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
            TypeImportCannotSpecifyDefaultAndNamed:
              "A type-only import can specify a default import or named bindings, but not both.",
            UnexpectedParameterModifier:
              "A parameter property is only allowed in a constructor implementation.",
            UnexpectedReadonly:
              "'readonly' type modifier is only permitted on array and tuple literal types.",
            UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
            UnexpectedTypeCastInParameter:
              "Unexpected type cast in parameter position.",
            UnsupportedImportTypeArgument:
              "Argument in a type import must be a string literal.",
            UnsupportedParameterPropertyKind:
              "A parameter property may not be declared using a binding pattern.",
            UnsupportedSignatureParameterKind:
              "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.",
          },
          ErrorCodes.SyntaxError
        );

        function keywordTypeFromName(value) {
          switch (value) {
            case "any":
              return "TSAnyKeyword";

            case "boolean":
              return "TSBooleanKeyword";

            case "bigint":
              return "TSBigIntKeyword";

            case "never":
              return "TSNeverKeyword";

            case "number":
              return "TSNumberKeyword";

            case "object":
              return "TSObjectKeyword";

            case "string":
              return "TSStringKeyword";

            case "symbol":
              return "TSSymbolKeyword";

            case "undefined":
              return "TSUndefinedKeyword";

            case "unknown":
              return "TSUnknownKeyword";

            default:
              return undefined;
          }
        }

        function tsIsAccessModifier(modifier) {
          return (
            modifier === "private" ||
            modifier === "public" ||
            modifier === "protected"
          );
        }

        var typescript = (superClass) =>
          class extends superClass {
            getScopeHandler() {
              return TypeScriptScopeHandler;
            }

            tsIsIdentifier() {
              return this.match(types$1.name);
            }

            tsTokenCanFollowModifier() {
              return (
                (this.match(types$1.bracketL) ||
                  this.match(types$1.braceL) ||
                  this.match(types$1.star) ||
                  this.match(types$1.ellipsis) ||
                  this.match(types$1.privateName) ||
                  this.isLiteralPropertyName()) &&
                !this.hasPrecedingLineBreak()
              );
            }

            tsNextTokenCanFollowModifier() {
              this.next();
              return this.tsTokenCanFollowModifier();
            }

            tsParseModifier(allowedModifiers) {
              if (!this.match(types$1.name)) {
                return undefined;
              }

              const modifier = this.state.value;

              if (
                allowedModifiers.indexOf(modifier) !== -1 &&
                this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))
              ) {
                return modifier;
              }

              return undefined;
            }

            tsParseModifiers(
              modified,
              allowedModifiers,
              disallowedModifiers,
              errorTemplate
            ) {
              const enforceOrder = (pos, modifier, before, after) => {
                if (modifier === before && modified[after]) {
                  this.raise(
                    pos,
                    TSErrors.InvalidModifiersOrder,
                    before,
                    after
                  );
                }
              };

              const incompatible = (pos, modifier, mod1, mod2) => {
                if (
                  (modified[mod1] && modifier === mod2) ||
                  (modified[mod2] && modifier === mod1)
                ) {
                  this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);
                }
              };

              for (;;) {
                const startPos = this.state.start;
                const modifier = this.tsParseModifier(
                  allowedModifiers.concat(
                    disallowedModifiers != null ? disallowedModifiers : []
                  )
                );
                if (!modifier) break;

                if (tsIsAccessModifier(modifier)) {
                  if (modified.accessibility) {
                    this.raise(
                      startPos,
                      TSErrors.DuplicateAccessibilityModifier
                    );
                  } else {
                    enforceOrder(startPos, modifier, modifier, "override");
                    enforceOrder(startPos, modifier, modifier, "static");
                    enforceOrder(startPos, modifier, modifier, "readonly");
                    modified.accessibility = modifier;
                  }
                } else {
                  if (Object.hasOwnProperty.call(modified, modifier)) {
                    this.raise(startPos, TSErrors.DuplicateModifier, modifier);
                  } else {
                    enforceOrder(startPos, modifier, "static", "readonly");
                    enforceOrder(startPos, modifier, "static", "override");
                    enforceOrder(startPos, modifier, "override", "readonly");
                    enforceOrder(startPos, modifier, "abstract", "override");
                    incompatible(startPos, modifier, "declare", "override");
                    incompatible(startPos, modifier, "static", "abstract");
                  }

                  modified[modifier] = true;
                }

                if (
                  disallowedModifiers != null &&
                  disallowedModifiers.includes(modifier)
                ) {
                  this.raise(startPos, errorTemplate, modifier);
                }
              }
            }

            tsIsListTerminator(kind) {
              switch (kind) {
                case "EnumMembers":
                case "TypeMembers":
                  return this.match(types$1.braceR);

                case "HeritageClauseElement":
                  return this.match(types$1.braceL);

                case "TupleElementTypes":
                  return this.match(types$1.bracketR);

                case "TypeParametersOrArguments":
                  return this.isRelational(">");
              }

              throw new Error("Unreachable");
            }

            tsParseList(kind, parseElement) {
              const result = [];

              while (!this.tsIsListTerminator(kind)) {
                result.push(parseElement());
              }

              return result;
            }

            tsParseDelimitedList(kind, parseElement) {
              return nonNull(
                this.tsParseDelimitedListWorker(kind, parseElement, true)
              );
            }

            tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {
              const result = [];

              for (;;) {
                if (this.tsIsListTerminator(kind)) {
                  break;
                }

                const element = parseElement();

                if (element == null) {
                  return undefined;
                }

                result.push(element);

                if (this.eat(types$1.comma)) {
                  continue;
                }

                if (this.tsIsListTerminator(kind)) {
                  break;
                }

                if (expectSuccess) {
                  this.expect(types$1.comma);
                }

                return undefined;
              }

              return result;
            }

            tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {
              if (!skipFirstToken) {
                if (bracket) {
                  this.expect(types$1.bracketL);
                } else {
                  this.expectRelational("<");
                }
              }

              const result = this.tsParseDelimitedList(kind, parseElement);

              if (bracket) {
                this.expect(types$1.bracketR);
              } else {
                this.expectRelational(">");
              }

              return result;
            }

            tsParseImportType() {
              const node = this.startNode();
              this.expect(types$1._import);
              this.expect(types$1.parenL);

              if (!this.match(types$1.string)) {
                this.raise(
                  this.state.start,
                  TSErrors.UnsupportedImportTypeArgument
                );
              }

              node.argument = this.parseExprAtom();
              this.expect(types$1.parenR);

              if (this.eat(types$1.dot)) {
                node.qualifier = this.tsParseEntityName(true);
              }

              if (this.isRelational("<")) {
                node.typeParameters = this.tsParseTypeArguments();
              }

              return this.finishNode(node, "TSImportType");
            }

            tsParseEntityName(allowReservedWords) {
              let entity = this.parseIdentifier();

              while (this.eat(types$1.dot)) {
                const node = this.startNodeAtNode(entity);
                node.left = entity;
                node.right = this.parseIdentifier(allowReservedWords);
                entity = this.finishNode(node, "TSQualifiedName");
              }

              return entity;
            }

            tsParseTypeReference() {
              const node = this.startNode();
              node.typeName = this.tsParseEntityName(false);

              if (!this.hasPrecedingLineBreak() && this.isRelational("<")) {
                node.typeParameters = this.tsParseTypeArguments();
              }

              return this.finishNode(node, "TSTypeReference");
            }

            tsParseThisTypePredicate(lhs) {
              this.next();
              const node = this.startNodeAtNode(lhs);
              node.parameterName = lhs;
              node.typeAnnotation = this.tsParseTypeAnnotation(false);
              node.asserts = false;
              return this.finishNode(node, "TSTypePredicate");
            }

            tsParseThisTypeNode() {
              const node = this.startNode();
              this.next();
              return this.finishNode(node, "TSThisType");
            }

            tsParseTypeQuery() {
              const node = this.startNode();
              this.expect(types$1._typeof);

              if (this.match(types$1._import)) {
                node.exprName = this.tsParseImportType();
              } else {
                node.exprName = this.tsParseEntityName(true);
              }

              return this.finishNode(node, "TSTypeQuery");
            }

            tsParseTypeParameter() {
              const node = this.startNode();
              node.name = this.tsParseTypeParameterName();
              node.constraint = this.tsEatThenParseType(types$1._extends);
              node.default = this.tsEatThenParseType(types$1.eq);
              return this.finishNode(node, "TSTypeParameter");
            }

            tsTryParseTypeParameters() {
              if (this.isRelational("<")) {
                return this.tsParseTypeParameters();
              }
            }

            tsParseTypeParameters() {
              const node = this.startNode();

              if (this.isRelational("<") || this.match(types$1.jsxTagStart)) {
                this.next();
              } else {
                this.unexpected();
              }

              node.params = this.tsParseBracketedList(
                "TypeParametersOrArguments",
                this.tsParseTypeParameter.bind(this),
                false,
                true
              );

              if (node.params.length === 0) {
                this.raise(node.start, TSErrors.EmptyTypeParameters);
              }

              return this.finishNode(node, "TSTypeParameterDeclaration");
            }

            tsTryNextParseConstantContext() {
              if (this.lookahead().type === types$1._const) {
                this.next();
                return this.tsParseTypeReference();
              }

              return null;
            }

            tsFillSignature(returnToken, signature) {
              const returnTokenRequired = returnToken === types$1.arrow;
              signature.typeParameters = this.tsTryParseTypeParameters();
              this.expect(types$1.parenL);
              signature.parameters = this.tsParseBindingListForSignature();

              if (returnTokenRequired) {
                signature.typeAnnotation =
                  this.tsParseTypeOrTypePredicateAnnotation(returnToken);
              } else if (this.match(returnToken)) {
                signature.typeAnnotation =
                  this.tsParseTypeOrTypePredicateAnnotation(returnToken);
              }
            }

            tsParseBindingListForSignature() {
              return this.parseBindingList(types$1.parenR, 41).map(
                (pattern) => {
                  if (
                    pattern.type !== "Identifier" &&
                    pattern.type !== "RestElement" &&
                    pattern.type !== "ObjectPattern" &&
                    pattern.type !== "ArrayPattern"
                  ) {
                    this.raise(
                      pattern.start,
                      TSErrors.UnsupportedSignatureParameterKind,
                      pattern.type
                    );
                  }

                  return pattern;
                }
              );
            }

            tsParseTypeMemberSemicolon() {
              if (!this.eat(types$1.comma) && !this.isLineTerminator()) {
                this.expect(types$1.semi);
              }
            }

            tsParseSignatureMember(kind, node) {
              this.tsFillSignature(types$1.colon, node);
              this.tsParseTypeMemberSemicolon();
              return this.finishNode(node, kind);
            }

            tsIsUnambiguouslyIndexSignature() {
              this.next();
              return this.eat(types$1.name) && this.match(types$1.colon);
            }

            tsTryParseIndexSignature(node) {
              if (
                !(
                  this.match(types$1.bracketL) &&
                  this.tsLookAhead(
                    this.tsIsUnambiguouslyIndexSignature.bind(this)
                  )
                )
              ) {
                return undefined;
              }

              this.expect(types$1.bracketL);
              const id = this.parseIdentifier();
              id.typeAnnotation = this.tsParseTypeAnnotation();
              this.resetEndLocation(id);
              this.expect(types$1.bracketR);
              node.parameters = [id];
              const type = this.tsTryParseTypeAnnotation();
              if (type) node.typeAnnotation = type;
              this.tsParseTypeMemberSemicolon();
              return this.finishNode(node, "TSIndexSignature");
            }

            tsParsePropertyOrMethodSignature(node, readonly) {
              if (this.eat(types$1.question)) node.optional = true;
              const nodeAny = node;

              if (this.match(types$1.parenL) || this.isRelational("<")) {
                if (readonly) {
                  this.raise(node.start, TSErrors.ReadonlyForMethodSignature);
                }

                const method = nodeAny;

                if (method.kind && this.isRelational("<")) {
                  this.raise(
                    this.state.pos,
                    TSErrors.AccesorCannotHaveTypeParameters
                  );
                }

                this.tsFillSignature(types$1.colon, method);
                this.tsParseTypeMemberSemicolon();

                if (method.kind === "get") {
                  if (method.parameters.length > 0) {
                    this.raise(this.state.pos, ErrorMessages.BadGetterArity);

                    if (this.isThisParam(method.parameters[0])) {
                      this.raise(
                        this.state.pos,
                        TSErrors.AccesorCannotDeclareThisParameter
                      );
                    }
                  }
                } else if (method.kind === "set") {
                  if (method.parameters.length !== 1) {
                    this.raise(this.state.pos, ErrorMessages.BadSetterArity);
                  } else {
                    const firstParameter = method.parameters[0];

                    if (this.isThisParam(firstParameter)) {
                      this.raise(
                        this.state.pos,
                        TSErrors.AccesorCannotDeclareThisParameter
                      );
                    }

                    if (
                      firstParameter.type === "Identifier" &&
                      firstParameter.optional
                    ) {
                      this.raise(
                        this.state.pos,
                        TSErrors.SetAccesorCannotHaveOptionalParameter
                      );
                    }

                    if (firstParameter.type === "RestElement") {
                      this.raise(
                        this.state.pos,
                        TSErrors.SetAccesorCannotHaveRestParameter
                      );
                    }
                  }

                  if (method.typeAnnotation) {
                    this.raise(
                      method.typeAnnotation.start,
                      TSErrors.SetAccesorCannotHaveReturnType
                    );
                  }
                } else {
                  method.kind = "method";
                }

                return this.finishNode(method, "TSMethodSignature");
              } else {
                const property = nodeAny;
                if (readonly) property.readonly = true;
                const type = this.tsTryParseTypeAnnotation();
                if (type) property.typeAnnotation = type;
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(property, "TSPropertySignature");
              }
            }

            tsParseTypeMember() {
              const node = this.startNode();

              if (this.match(types$1.parenL) || this.isRelational("<")) {
                return this.tsParseSignatureMember(
                  "TSCallSignatureDeclaration",
                  node
                );
              }

              if (this.match(types$1._new)) {
                const id = this.startNode();
                this.next();

                if (this.match(types$1.parenL) || this.isRelational("<")) {
                  return this.tsParseSignatureMember(
                    "TSConstructSignatureDeclaration",
                    node
                  );
                } else {
                  node.key = this.createIdentifier(id, "new");
                  return this.tsParsePropertyOrMethodSignature(node, false);
                }
              }

              this.tsParseModifiers(
                node,
                ["readonly"],
                [
                  "declare",
                  "abstract",
                  "private",
                  "protected",
                  "public",
                  "static",
                  "override",
                ],
                TSErrors.InvalidModifierOnTypeMember
              );
              const idx = this.tsTryParseIndexSignature(node);

              if (idx) {
                return idx;
              }

              this.parsePropertyName(node, false);

              if (
                !node.computed &&
                node.key.type === "Identifier" &&
                (node.key.name === "get" || node.key.name === "set") &&
                this.tsTokenCanFollowModifier()
              ) {
                node.kind = node.key.name;
                this.parsePropertyName(node, false);
              }

              return this.tsParsePropertyOrMethodSignature(
                node,
                !!node.readonly
              );
            }

            tsParseTypeLiteral() {
              const node = this.startNode();
              node.members = this.tsParseObjectTypeMembers();
              return this.finishNode(node, "TSTypeLiteral");
            }

            tsParseObjectTypeMembers() {
              this.expect(types$1.braceL);
              const members = this.tsParseList(
                "TypeMembers",
                this.tsParseTypeMember.bind(this)
              );
              this.expect(types$1.braceR);
              return members;
            }

            tsIsStartOfMappedType() {
              this.next();

              if (this.eat(types$1.plusMin)) {
                return this.isContextual("readonly");
              }

              if (this.isContextual("readonly")) {
                this.next();
              }

              if (!this.match(types$1.bracketL)) {
                return false;
              }

              this.next();

              if (!this.tsIsIdentifier()) {
                return false;
              }

              this.next();
              return this.match(types$1._in);
            }

            tsParseMappedTypeParameter() {
              const node = this.startNode();
              node.name = this.tsParseTypeParameterName();
              node.constraint = this.tsExpectThenParseType(types$1._in);
              return this.finishNode(node, "TSTypeParameter");
            }

            tsParseMappedType() {
              const node = this.startNode();
              this.expect(types$1.braceL);

              if (this.match(types$1.plusMin)) {
                node.readonly = this.state.value;
                this.next();
                this.expectContextual("readonly");
              } else if (this.eatContextual("readonly")) {
                node.readonly = true;
              }

              this.expect(types$1.bracketL);
              node.typeParameter = this.tsParseMappedTypeParameter();
              node.nameType = this.eatContextual("as")
                ? this.tsParseType()
                : null;
              this.expect(types$1.bracketR);

              if (this.match(types$1.plusMin)) {
                node.optional = this.state.value;
                this.next();
                this.expect(types$1.question);
              } else if (this.eat(types$1.question)) {
                node.optional = true;
              }

              node.typeAnnotation = this.tsTryParseType();
              this.semicolon();
              this.expect(types$1.braceR);
              return this.finishNode(node, "TSMappedType");
            }

            tsParseTupleType() {
              const node = this.startNode();
              node.elementTypes = this.tsParseBracketedList(
                "TupleElementTypes",
                this.tsParseTupleElementType.bind(this),
                true,
                false
              );
              let seenOptionalElement = false;
              let labeledElements = null;
              node.elementTypes.forEach((elementNode) => {
                var _labeledElements;

                let { type } = elementNode;

                if (
                  seenOptionalElement &&
                  type !== "TSRestType" &&
                  type !== "TSOptionalType" &&
                  !(type === "TSNamedTupleMember" && elementNode.optional)
                ) {
                  this.raise(
                    elementNode.start,
                    TSErrors.OptionalTypeBeforeRequired
                  );
                }

                seenOptionalElement =
                  seenOptionalElement ||
                  (type === "TSNamedTupleMember" && elementNode.optional) ||
                  type === "TSOptionalType";

                if (type === "TSRestType") {
                  elementNode = elementNode.typeAnnotation;
                  type = elementNode.type;
                }

                const isLabeled = type === "TSNamedTupleMember";
                labeledElements =
                  (_labeledElements = labeledElements) != null
                    ? _labeledElements
                    : isLabeled;

                if (labeledElements !== isLabeled) {
                  this.raise(
                    elementNode.start,
                    TSErrors.MixedLabeledAndUnlabeledElements
                  );
                }
              });
              return this.finishNode(node, "TSTupleType");
            }

            tsParseTupleElementType() {
              const { start: startPos, startLoc } = this.state;
              const rest = this.eat(types$1.ellipsis);
              let type = this.tsParseType();
              const optional = this.eat(types$1.question);
              const labeled = this.eat(types$1.colon);

              if (labeled) {
                const labeledNode = this.startNodeAtNode(type);
                labeledNode.optional = optional;

                if (
                  type.type === "TSTypeReference" &&
                  !type.typeParameters &&
                  type.typeName.type === "Identifier"
                ) {
                  labeledNode.label = type.typeName;
                } else {
                  this.raise(type.start, TSErrors.InvalidTupleMemberLabel);
                  labeledNode.label = type;
                }

                labeledNode.elementType = this.tsParseType();
                type = this.finishNode(labeledNode, "TSNamedTupleMember");
              } else if (optional) {
                const optionalTypeNode = this.startNodeAtNode(type);
                optionalTypeNode.typeAnnotation = type;
                type = this.finishNode(optionalTypeNode, "TSOptionalType");
              }

              if (rest) {
                const restNode = this.startNodeAt(startPos, startLoc);
                restNode.typeAnnotation = type;
                type = this.finishNode(restNode, "TSRestType");
              }

              return type;
            }

            tsParseParenthesizedType() {
              const node = this.startNode();
              this.expect(types$1.parenL);
              node.typeAnnotation = this.tsParseType();
              this.expect(types$1.parenR);
              return this.finishNode(node, "TSParenthesizedType");
            }

            tsParseFunctionOrConstructorType(type, abstract) {
              const node = this.startNode();

              if (type === "TSConstructorType") {
                node.abstract = !!abstract;
                if (abstract) this.next();
                this.next();
              }

              this.tsFillSignature(types$1.arrow, node);
              return this.finishNode(node, type);
            }

            tsParseLiteralTypeNode() {
              const node = this.startNode();

              node.literal = (() => {
                switch (this.state.type) {
                  case types$1.num:
                  case types$1.bigint:
                  case types$1.string:
                  case types$1._true:
                  case types$1._false:
                    return this.parseExprAtom();

                  default:
                    throw this.unexpected();
                }
              })();

              return this.finishNode(node, "TSLiteralType");
            }

            tsParseTemplateLiteralType() {
              const node = this.startNode();
              node.literal = this.parseTemplate(false);
              return this.finishNode(node, "TSLiteralType");
            }

            parseTemplateSubstitution() {
              if (this.state.inType) return this.tsParseType();
              return super.parseTemplateSubstitution();
            }

            tsParseThisTypeOrThisTypePredicate() {
              const thisKeyword = this.tsParseThisTypeNode();

              if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
                return this.tsParseThisTypePredicate(thisKeyword);
              } else {
                return thisKeyword;
              }
            }

            tsParseNonArrayType() {
              switch (this.state.type) {
                case types$1.name:
                case types$1._void:
                case types$1._null: {
                  const type = this.match(types$1._void)
                    ? "TSVoidKeyword"
                    : this.match(types$1._null)
                    ? "TSNullKeyword"
                    : keywordTypeFromName(this.state.value);

                  if (type !== undefined && this.lookaheadCharCode() !== 46) {
                    const node = this.startNode();
                    this.next();
                    return this.finishNode(node, type);
                  }

                  return this.tsParseTypeReference();
                }

                case types$1.string:
                case types$1.num:
                case types$1.bigint:
                case types$1._true:
                case types$1._false:
                  return this.tsParseLiteralTypeNode();

                case types$1.plusMin:
                  if (this.state.value === "-") {
                    const node = this.startNode();
                    const nextToken = this.lookahead();

                    if (
                      nextToken.type !== types$1.num &&
                      nextToken.type !== types$1.bigint
                    ) {
                      throw this.unexpected();
                    }

                    node.literal = this.parseMaybeUnary();
                    return this.finishNode(node, "TSLiteralType");
                  }

                  break;

                case types$1._this:
                  return this.tsParseThisTypeOrThisTypePredicate();

                case types$1._typeof:
                  return this.tsParseTypeQuery();

                case types$1._import:
                  return this.tsParseImportType();

                case types$1.braceL:
                  return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))
                    ? this.tsParseMappedType()
                    : this.tsParseTypeLiteral();

                case types$1.bracketL:
                  return this.tsParseTupleType();

                case types$1.parenL:
                  return this.tsParseParenthesizedType();

                case types$1.backQuote:
                  return this.tsParseTemplateLiteralType();
              }

              throw this.unexpected();
            }

            tsParseArrayTypeOrHigher() {
              let type = this.tsParseNonArrayType();

              while (
                !this.hasPrecedingLineBreak() &&
                this.eat(types$1.bracketL)
              ) {
                if (this.match(types$1.bracketR)) {
                  const node = this.startNodeAtNode(type);
                  node.elementType = type;
                  this.expect(types$1.bracketR);
                  type = this.finishNode(node, "TSArrayType");
                } else {
                  const node = this.startNodeAtNode(type);
                  node.objectType = type;
                  node.indexType = this.tsParseType();
                  this.expect(types$1.bracketR);
                  type = this.finishNode(node, "TSIndexedAccessType");
                }
              }

              return type;
            }

            tsParseTypeOperator(operator) {
              const node = this.startNode();
              this.expectContextual(operator);
              node.operator = operator;
              node.typeAnnotation = this.tsParseTypeOperatorOrHigher();

              if (operator === "readonly") {
                this.tsCheckTypeAnnotationForReadOnly(node);
              }

              return this.finishNode(node, "TSTypeOperator");
            }

            tsCheckTypeAnnotationForReadOnly(node) {
              switch (node.typeAnnotation.type) {
                case "TSTupleType":
                case "TSArrayType":
                  return;

                default:
                  this.raise(node.start, TSErrors.UnexpectedReadonly);
              }
            }

            tsParseInferType() {
              const node = this.startNode();
              this.expectContextual("infer");
              const typeParameter = this.startNode();
              typeParameter.name = this.tsParseTypeParameterName();
              node.typeParameter = this.finishNode(
                typeParameter,
                "TSTypeParameter"
              );
              return this.finishNode(node, "TSInferType");
            }

            tsParseTypeOperatorOrHigher() {
              const operator = ["keyof", "unique", "readonly"].find((kw) =>
                this.isContextual(kw)
              );
              return operator
                ? this.tsParseTypeOperator(operator)
                : this.isContextual("infer")
                ? this.tsParseInferType()
                : this.tsParseArrayTypeOrHigher();
            }

            tsParseUnionOrIntersectionType(
              kind,
              parseConstituentType,
              operator
            ) {
              const node = this.startNode();
              const hasLeadingOperator = this.eat(operator);
              const types = [];

              do {
                types.push(parseConstituentType());
              } while (this.eat(operator));

              if (types.length === 1 && !hasLeadingOperator) {
                return types[0];
              }

              node.types = types;
              return this.finishNode(node, kind);
            }

            tsParseIntersectionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType(
                "TSIntersectionType",
                this.tsParseTypeOperatorOrHigher.bind(this),
                types$1.bitwiseAND
              );
            }

            tsParseUnionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType(
                "TSUnionType",
                this.tsParseIntersectionTypeOrHigher.bind(this),
                types$1.bitwiseOR
              );
            }

            tsIsStartOfFunctionType() {
              if (this.isRelational("<")) {
                return true;
              }

              return (
                this.match(types$1.parenL) &&
                this.tsLookAhead(
                  this.tsIsUnambiguouslyStartOfFunctionType.bind(this)
                )
              );
            }

            tsSkipParameterStart() {
              if (this.match(types$1.name) || this.match(types$1._this)) {
                this.next();
                return true;
              }

              if (this.match(types$1.braceL)) {
                let braceStackCounter = 1;
                this.next();

                while (braceStackCounter > 0) {
                  if (this.match(types$1.braceL)) {
                    ++braceStackCounter;
                  } else if (this.match(types$1.braceR)) {
                    --braceStackCounter;
                  }

                  this.next();
                }

                return true;
              }

              if (this.match(types$1.bracketL)) {
                let braceStackCounter = 1;
                this.next();

                while (braceStackCounter > 0) {
                  if (this.match(types$1.bracketL)) {
                    ++braceStackCounter;
                  } else if (this.match(types$1.bracketR)) {
                    --braceStackCounter;
                  }

                  this.next();
                }

                return true;
              }

              return false;
            }

            tsIsUnambiguouslyStartOfFunctionType() {
              this.next();

              if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {
                return true;
              }

              if (this.tsSkipParameterStart()) {
                if (
                  this.match(types$1.colon) ||
                  this.match(types$1.comma) ||
                  this.match(types$1.question) ||
                  this.match(types$1.eq)
                ) {
                  return true;
                }

                if (this.match(types$1.parenR)) {
                  this.next();

                  if (this.match(types$1.arrow)) {
                    return true;
                  }
                }
              }

              return false;
            }

            tsParseTypeOrTypePredicateAnnotation(returnToken) {
              return this.tsInType(() => {
                const t = this.startNode();
                this.expect(returnToken);
                const node = this.startNode();
                const asserts = !!this.tsTryParse(
                  this.tsParseTypePredicateAsserts.bind(this)
                );

                if (asserts && this.match(types$1._this)) {
                  let thisTypePredicate =
                    this.tsParseThisTypeOrThisTypePredicate();

                  if (thisTypePredicate.type === "TSThisType") {
                    node.parameterName = thisTypePredicate;
                    node.asserts = true;
                    node.typeAnnotation = null;
                    thisTypePredicate = this.finishNode(
                      node,
                      "TSTypePredicate"
                    );
                  } else {
                    this.resetStartLocationFromNode(thisTypePredicate, node);
                    thisTypePredicate.asserts = true;
                  }

                  t.typeAnnotation = thisTypePredicate;
                  return this.finishNode(t, "TSTypeAnnotation");
                }

                const typePredicateVariable =
                  this.tsIsIdentifier() &&
                  this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

                if (!typePredicateVariable) {
                  if (!asserts) {
                    return this.tsParseTypeAnnotation(false, t);
                  }

                  node.parameterName = this.parseIdentifier();
                  node.asserts = asserts;
                  node.typeAnnotation = null;
                  t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                  return this.finishNode(t, "TSTypeAnnotation");
                }

                const type = this.tsParseTypeAnnotation(false);
                node.parameterName = typePredicateVariable;
                node.typeAnnotation = type;
                node.asserts = asserts;
                t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                return this.finishNode(t, "TSTypeAnnotation");
              });
            }

            tsTryParseTypeOrTypePredicateAnnotation() {
              return this.match(types$1.colon)
                ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon)
                : undefined;
            }

            tsTryParseTypeAnnotation() {
              return this.match(types$1.colon)
                ? this.tsParseTypeAnnotation()
                : undefined;
            }

            tsTryParseType() {
              return this.tsEatThenParseType(types$1.colon);
            }

            tsParseTypePredicatePrefix() {
              const id = this.parseIdentifier();

              if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
                this.next();
                return id;
              }
            }

            tsParseTypePredicateAsserts() {
              if (
                !this.match(types$1.name) ||
                this.state.value !== "asserts" ||
                this.hasPrecedingLineBreak()
              ) {
                return false;
              }

              const containsEsc = this.state.containsEsc;
              this.next();

              if (!this.match(types$1.name) && !this.match(types$1._this)) {
                return false;
              }

              if (containsEsc) {
                this.raise(
                  this.state.lastTokStart,
                  ErrorMessages.InvalidEscapedReservedWord,
                  "asserts"
                );
              }

              return true;
            }

            tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
              this.tsInType(() => {
                if (eatColon) this.expect(types$1.colon);
                t.typeAnnotation = this.tsParseType();
              });
              return this.finishNode(t, "TSTypeAnnotation");
            }

            tsParseType() {
              assert(this.state.inType);
              const type = this.tsParseNonConditionalType();

              if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {
                return type;
              }

              const node = this.startNodeAtNode(type);
              node.checkType = type;
              node.extendsType = this.tsParseNonConditionalType();
              this.expect(types$1.question);
              node.trueType = this.tsParseType();
              this.expect(types$1.colon);
              node.falseType = this.tsParseType();
              return this.finishNode(node, "TSConditionalType");
            }

            isAbstractConstructorSignature() {
              return (
                this.isContextual("abstract") &&
                this.lookahead().type === types$1._new
              );
            }

            tsParseNonConditionalType() {
              if (this.tsIsStartOfFunctionType()) {
                return this.tsParseFunctionOrConstructorType("TSFunctionType");
              }

              if (this.match(types$1._new)) {
                return this.tsParseFunctionOrConstructorType(
                  "TSConstructorType"
                );
              } else if (this.isAbstractConstructorSignature()) {
                return this.tsParseFunctionOrConstructorType(
                  "TSConstructorType",
                  true
                );
              }

              return this.tsParseUnionTypeOrHigher();
            }

            tsParseTypeAssertion() {
              const node = this.startNode();

              const _const = this.tsTryNextParseConstantContext();

              node.typeAnnotation = _const || this.tsNextThenParseType();
              this.expectRelational(">");
              node.expression = this.parseMaybeUnary();
              return this.finishNode(node, "TSTypeAssertion");
            }

            tsParseHeritageClause(descriptor) {
              const originalStart = this.state.start;
              const delimitedList = this.tsParseDelimitedList(
                "HeritageClauseElement",
                this.tsParseExpressionWithTypeArguments.bind(this)
              );

              if (!delimitedList.length) {
                this.raise(
                  originalStart,
                  TSErrors.EmptyHeritageClauseType,
                  descriptor
                );
              }

              return delimitedList;
            }

            tsParseExpressionWithTypeArguments() {
              const node = this.startNode();
              node.expression = this.tsParseEntityName(false);

              if (this.isRelational("<")) {
                node.typeParameters = this.tsParseTypeArguments();
              }

              return this.finishNode(node, "TSExpressionWithTypeArguments");
            }

            tsParseInterfaceDeclaration(node) {
              if (this.match(types$1.name)) {
                node.id = this.parseIdentifier();
                this.checkLVal(
                  node.id,
                  "typescript interface declaration",
                  BIND_TS_INTERFACE
                );
              } else {
                node.id = null;
                this.raise(this.state.start, TSErrors.MissingInterfaceName);
              }

              node.typeParameters = this.tsTryParseTypeParameters();

              if (this.eat(types$1._extends)) {
                node.extends = this.tsParseHeritageClause("extends");
              }

              const body = this.startNode();
              body.body = this.tsInType(
                this.tsParseObjectTypeMembers.bind(this)
              );
              node.body = this.finishNode(body, "TSInterfaceBody");
              return this.finishNode(node, "TSInterfaceDeclaration");
            }

            tsParseTypeAliasDeclaration(node) {
              node.id = this.parseIdentifier();
              this.checkLVal(node.id, "typescript type alias", BIND_TS_TYPE);
              node.typeParameters = this.tsTryParseTypeParameters();
              node.typeAnnotation = this.tsInType(() => {
                this.expect(types$1.eq);

                if (
                  this.isContextual("intrinsic") &&
                  this.lookahead().type !== types$1.dot
                ) {
                  const node = this.startNode();
                  this.next();
                  return this.finishNode(node, "TSIntrinsicKeyword");
                }

                return this.tsParseType();
              });
              this.semicolon();
              return this.finishNode(node, "TSTypeAliasDeclaration");
            }

            tsInNoContext(cb) {
              const oldContext = this.state.context;
              this.state.context = [oldContext[0]];

              try {
                return cb();
              } finally {
                this.state.context = oldContext;
              }
            }

            tsInType(cb) {
              const oldInType = this.state.inType;
              this.state.inType = true;

              try {
                return cb();
              } finally {
                this.state.inType = oldInType;
              }
            }

            tsEatThenParseType(token) {
              return !this.match(token)
                ? undefined
                : this.tsNextThenParseType();
            }

            tsExpectThenParseType(token) {
              return this.tsDoThenParseType(() => this.expect(token));
            }

            tsNextThenParseType() {
              return this.tsDoThenParseType(() => this.next());
            }

            tsDoThenParseType(cb) {
              return this.tsInType(() => {
                cb();
                return this.tsParseType();
              });
            }

            tsParseEnumMember() {
              const node = this.startNode();
              node.id = this.match(types$1.string)
                ? this.parseExprAtom()
                : this.parseIdentifier(true);

              if (this.eat(types$1.eq)) {
                node.initializer = this.parseMaybeAssignAllowIn();
              }

              return this.finishNode(node, "TSEnumMember");
            }

            tsParseEnumDeclaration(node, isConst) {
              if (isConst) node.const = true;
              node.id = this.parseIdentifier();
              this.checkLVal(
                node.id,
                "typescript enum declaration",
                isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM
              );
              this.expect(types$1.braceL);
              node.members = this.tsParseDelimitedList(
                "EnumMembers",
                this.tsParseEnumMember.bind(this)
              );
              this.expect(types$1.braceR);
              return this.finishNode(node, "TSEnumDeclaration");
            }

            tsParseModuleBlock() {
              const node = this.startNode();
              this.scope.enter(SCOPE_OTHER);
              this.expect(types$1.braceL);
              this.parseBlockOrModuleBlockBody(
                (node.body = []),
                undefined,
                true,
                types$1.braceR
              );
              this.scope.exit();
              return this.finishNode(node, "TSModuleBlock");
            }

            tsParseModuleOrNamespaceDeclaration(node, nested = false) {
              node.id = this.parseIdentifier();

              if (!nested) {
                this.checkLVal(
                  node.id,
                  "module or namespace declaration",
                  BIND_TS_NAMESPACE
                );
              }

              if (this.eat(types$1.dot)) {
                const inner = this.startNode();
                this.tsParseModuleOrNamespaceDeclaration(inner, true);
                node.body = inner;
              } else {
                this.scope.enter(SCOPE_TS_MODULE);
                this.prodParam.enter(PARAM);
                node.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
              }

              return this.finishNode(node, "TSModuleDeclaration");
            }

            tsParseAmbientExternalModuleDeclaration(node) {
              if (this.isContextual("global")) {
                node.global = true;
                node.id = this.parseIdentifier();
              } else if (this.match(types$1.string)) {
                node.id = this.parseExprAtom();
              } else {
                this.unexpected();
              }

              if (this.match(types$1.braceL)) {
                this.scope.enter(SCOPE_TS_MODULE);
                this.prodParam.enter(PARAM);
                node.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
              } else {
                this.semicolon();
              }

              return this.finishNode(node, "TSModuleDeclaration");
            }

            tsParseImportEqualsDeclaration(node, isExport) {
              node.isExport = isExport || false;
              node.id = this.parseIdentifier();
              this.checkLVal(
                node.id,
                "import equals declaration",
                BIND_LEXICAL
              );
              this.expect(types$1.eq);
              const moduleReference = this.tsParseModuleReference();

              if (
                node.importKind === "type" &&
                moduleReference.type !== "TSExternalModuleReference"
              ) {
                this.raise(
                  moduleReference.start,
                  TSErrors.ImportAliasHasImportType
                );
              }

              node.moduleReference = moduleReference;
              this.semicolon();
              return this.finishNode(node, "TSImportEqualsDeclaration");
            }

            tsIsExternalModuleReference() {
              return (
                this.isContextual("require") && this.lookaheadCharCode() === 40
              );
            }

            tsParseModuleReference() {
              return this.tsIsExternalModuleReference()
                ? this.tsParseExternalModuleReference()
                : this.tsParseEntityName(false);
            }

            tsParseExternalModuleReference() {
              const node = this.startNode();
              this.expectContextual("require");
              this.expect(types$1.parenL);

              if (!this.match(types$1.string)) {
                throw this.unexpected();
              }

              node.expression = this.parseExprAtom();
              this.expect(types$1.parenR);
              return this.finishNode(node, "TSExternalModuleReference");
            }

            tsLookAhead(f) {
              const state = this.state.clone();
              const res = f();
              this.state = state;
              return res;
            }

            tsTryParseAndCatch(f) {
              const result = this.tryParse((abort) => f() || abort());
              if (result.aborted || !result.node) return undefined;
              if (result.error) this.state = result.failState;
              return result.node;
            }

            tsTryParse(f) {
              const state = this.state.clone();
              const result = f();

              if (result !== undefined && result !== false) {
                return result;
              } else {
                this.state = state;
                return undefined;
              }
            }

            tsTryParseDeclare(nany) {
              if (this.isLineTerminator()) {
                return;
              }

              let starttype = this.state.type;
              let kind;

              if (this.isContextual("let")) {
                starttype = types$1._var;
                kind = "let";
              }

              return this.tsInAmbientContext(() => {
                switch (starttype) {
                  case types$1._function:
                    nany.declare = true;
                    return this.parseFunctionStatement(nany, false, true);

                  case types$1._class:
                    nany.declare = true;
                    return this.parseClass(nany, true, false);

                  case types$1._const:
                    if (
                      this.match(types$1._const) &&
                      this.isLookaheadContextual("enum")
                    ) {
                      this.expect(types$1._const);
                      this.expectContextual("enum");
                      return this.tsParseEnumDeclaration(nany, true);
                    }

                  case types$1._var:
                    kind = kind || this.state.value;
                    return this.parseVarStatement(nany, kind);

                  case types$1.name: {
                    const value = this.state.value;

                    if (value === "global") {
                      return this.tsParseAmbientExternalModuleDeclaration(nany);
                    } else {
                      return this.tsParseDeclaration(nany, value, true);
                    }
                  }
                }
              });
            }

            tsTryParseExportDeclaration() {
              return this.tsParseDeclaration(
                this.startNode(),
                this.state.value,
                true
              );
            }

            tsParseExpressionStatement(node, expr) {
              switch (expr.name) {
                case "declare": {
                  const declaration = this.tsTryParseDeclare(node);

                  if (declaration) {
                    declaration.declare = true;
                    return declaration;
                  }

                  break;
                }

                case "global":
                  if (this.match(types$1.braceL)) {
                    this.scope.enter(SCOPE_TS_MODULE);
                    this.prodParam.enter(PARAM);
                    const mod = node;
                    mod.global = true;
                    mod.id = expr;
                    mod.body = this.tsParseModuleBlock();
                    this.scope.exit();
                    this.prodParam.exit();
                    return this.finishNode(mod, "TSModuleDeclaration");
                  }

                  break;

                default:
                  return this.tsParseDeclaration(node, expr.name, false);
              }
            }

            tsParseDeclaration(node, value, next) {
              switch (value) {
                case "abstract":
                  if (
                    this.tsCheckLineTerminator(next) &&
                    (this.match(types$1._class) || this.match(types$1.name))
                  ) {
                    return this.tsParseAbstractDeclaration(node);
                  }

                  break;

                case "enum":
                  if (next || this.match(types$1.name)) {
                    if (next) this.next();
                    return this.tsParseEnumDeclaration(node, false);
                  }

                  break;

                case "interface":
                  if (
                    this.tsCheckLineTerminator(next) &&
                    this.match(types$1.name)
                  ) {
                    return this.tsParseInterfaceDeclaration(node);
                  }

                  break;

                case "module":
                  if (this.tsCheckLineTerminator(next)) {
                    if (this.match(types$1.string)) {
                      return this.tsParseAmbientExternalModuleDeclaration(node);
                    } else if (this.match(types$1.name)) {
                      return this.tsParseModuleOrNamespaceDeclaration(node);
                    }
                  }

                  break;

                case "namespace":
                  if (
                    this.tsCheckLineTerminator(next) &&
                    this.match(types$1.name)
                  ) {
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                  }

                  break;

                case "type":
                  if (
                    this.tsCheckLineTerminator(next) &&
                    this.match(types$1.name)
                  ) {
                    return this.tsParseTypeAliasDeclaration(node);
                  }

                  break;
              }
            }

            tsCheckLineTerminator(next) {
              if (next) {
                if (this.hasFollowingLineBreak()) return false;
                this.next();
                return true;
              }

              return !this.isLineTerminator();
            }

            tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
              if (!this.isRelational("<")) {
                return undefined;
              }

              const oldMaybeInArrowParameters =
                this.state.maybeInArrowParameters;
              this.state.maybeInArrowParameters = true;
              const res = this.tsTryParseAndCatch(() => {
                const node = this.startNodeAt(startPos, startLoc);
                node.typeParameters = this.tsParseTypeParameters();
                super.parseFunctionParams(node);
                node.returnType =
                  this.tsTryParseTypeOrTypePredicateAnnotation();
                this.expect(types$1.arrow);
                return node;
              });
              this.state.maybeInArrowParameters = oldMaybeInArrowParameters;

              if (!res) {
                return undefined;
              }

              return this.parseArrowExpression(res, null, true);
            }

            tsParseTypeArguments() {
              const node = this.startNode();
              node.params = this.tsInType(() =>
                this.tsInNoContext(() => {
                  this.expectRelational("<");
                  return this.tsParseDelimitedList(
                    "TypeParametersOrArguments",
                    this.tsParseType.bind(this)
                  );
                })
              );

              if (node.params.length === 0) {
                this.raise(node.start, TSErrors.EmptyTypeArguments);
              }

              this.expectRelational(">");
              return this.finishNode(node, "TSTypeParameterInstantiation");
            }

            tsIsDeclarationStart() {
              if (this.match(types$1.name)) {
                switch (this.state.value) {
                  case "abstract":
                  case "declare":
                  case "enum":
                  case "interface":
                  case "module":
                  case "namespace":
                  case "type":
                    return true;
                }
              }

              return false;
            }

            isExportDefaultSpecifier() {
              if (this.tsIsDeclarationStart()) return false;
              return super.isExportDefaultSpecifier();
            }

            parseAssignableListItem(allowModifiers, decorators) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let accessibility;
              let readonly = false;
              let override = false;

              if (allowModifiers !== undefined) {
                const modified = {};
                this.tsParseModifiers(modified, [
                  "public",
                  "private",
                  "protected",
                  "override",
                  "readonly",
                ]);
                accessibility = modified.accessibility;
                override = modified.override;
                readonly = modified.readonly;

                if (
                  allowModifiers === false &&
                  (accessibility || readonly || override)
                ) {
                  this.raise(startPos, TSErrors.UnexpectedParameterModifier);
                }
              }

              const left = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(left);
              const elt = this.parseMaybeDefault(
                left.start,
                left.loc.start,
                left
              );

              if (accessibility || readonly || override) {
                const pp = this.startNodeAt(startPos, startLoc);

                if (decorators.length) {
                  pp.decorators = decorators;
                }

                if (accessibility) pp.accessibility = accessibility;
                if (readonly) pp.readonly = readonly;
                if (override) pp.override = override;

                if (
                  elt.type !== "Identifier" &&
                  elt.type !== "AssignmentPattern"
                ) {
                  this.raise(
                    pp.start,
                    TSErrors.UnsupportedParameterPropertyKind
                  );
                }

                pp.parameter = elt;
                return this.finishNode(pp, "TSParameterProperty");
              }

              if (decorators.length) {
                left.decorators = decorators;
              }

              return elt;
            }

            parseFunctionBodyAndFinish(node, type, isMethod = false) {
              if (this.match(types$1.colon)) {
                node.returnType = this.tsParseTypeOrTypePredicateAnnotation(
                  types$1.colon
                );
              }

              const bodilessType =
                type === "FunctionDeclaration"
                  ? "TSDeclareFunction"
                  : type === "ClassMethod"
                  ? "TSDeclareMethod"
                  : undefined;

              if (
                bodilessType &&
                !this.match(types$1.braceL) &&
                this.isLineTerminator()
              ) {
                this.finishNode(node, bodilessType);
                return;
              }

              if (
                bodilessType === "TSDeclareFunction" &&
                this.state.isAmbientContext
              ) {
                this.raise(
                  node.start,
                  TSErrors.DeclareFunctionHasImplementation
                );

                if (node.declare) {
                  super.parseFunctionBodyAndFinish(
                    node,
                    bodilessType,
                    isMethod
                  );
                  return;
                }
              }

              super.parseFunctionBodyAndFinish(node, type, isMethod);
            }

            registerFunctionStatementId(node) {
              if (!node.body && node.id) {
                this.checkLVal(node.id, "function name", BIND_TS_AMBIENT);
              } else {
                super.registerFunctionStatementId(...arguments);
              }
            }

            tsCheckForInvalidTypeCasts(items) {
              items.forEach((node) => {
                if (
                  (node == null ? void 0 : node.type) === "TSTypeCastExpression"
                ) {
                  this.raise(
                    node.typeAnnotation.start,
                    TSErrors.UnexpectedTypeAnnotation
                  );
                }
              });
            }

            toReferencedList(exprList, isInParens) {
              this.tsCheckForInvalidTypeCasts(exprList);
              return exprList;
            }

            parseArrayLike(...args) {
              const node = super.parseArrayLike(...args);

              if (node.type === "ArrayExpression") {
                this.tsCheckForInvalidTypeCasts(node.elements);
              }

              return node;
            }

            parseSubscript(base, startPos, startLoc, noCalls, state) {
              if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {
                this.state.exprAllowed = false;
                this.next();
                const nonNullExpression = this.startNodeAt(startPos, startLoc);
                nonNullExpression.expression = base;
                return this.finishNode(
                  nonNullExpression,
                  "TSNonNullExpression"
                );
              }

              let isOptionalCall = false;

              if (
                this.match(types$1.questionDot) &&
                this.lookaheadCharCode() === 60
              ) {
                if (noCalls) {
                  state.stop = true;
                  return base;
                }

                state.optionalChainMember = isOptionalCall = true;
                this.next();
              }

              if (this.isRelational("<")) {
                let missingParenErrorPos;
                const result = this.tsTryParseAndCatch(() => {
                  if (!noCalls && this.atPossibleAsyncArrow(base)) {
                    const asyncArrowFn =
                      this.tsTryParseGenericAsyncArrowFunction(
                        startPos,
                        startLoc
                      );

                    if (asyncArrowFn) {
                      return asyncArrowFn;
                    }
                  }

                  const node = this.startNodeAt(startPos, startLoc);
                  node.callee = base;
                  const typeArguments = this.tsParseTypeArguments();

                  if (typeArguments) {
                    if (isOptionalCall && !this.match(types$1.parenL)) {
                      missingParenErrorPos = this.state.pos;
                      this.unexpected();
                    }

                    if (!noCalls && this.eat(types$1.parenL)) {
                      node.arguments = this.parseCallExpressionArguments(
                        types$1.parenR,
                        false
                      );
                      this.tsCheckForInvalidTypeCasts(node.arguments);
                      node.typeParameters = typeArguments;

                      if (state.optionalChainMember) {
                        node.optional = isOptionalCall;
                      }

                      return this.finishCallExpression(
                        node,
                        state.optionalChainMember
                      );
                    } else if (this.match(types$1.backQuote)) {
                      const result = this.parseTaggedTemplateExpression(
                        base,
                        startPos,
                        startLoc,
                        state
                      );
                      result.typeParameters = typeArguments;
                      return result;
                    }
                  }

                  this.unexpected();
                });

                if (missingParenErrorPos) {
                  this.unexpected(missingParenErrorPos, types$1.parenL);
                }

                if (result) return result;
              }

              return super.parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                state
              );
            }

            parseNewArguments(node) {
              if (this.isRelational("<")) {
                const typeParameters = this.tsTryParseAndCatch(() => {
                  const args = this.tsParseTypeArguments();
                  if (!this.match(types$1.parenL)) this.unexpected();
                  return args;
                });

                if (typeParameters) {
                  node.typeParameters = typeParameters;
                }
              }

              super.parseNewArguments(node);
            }

            parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
              if (
                nonNull(types$1._in.binop) > minPrec &&
                !this.hasPrecedingLineBreak() &&
                this.isContextual("as")
              ) {
                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.expression = left;

                const _const = this.tsTryNextParseConstantContext();

                if (_const) {
                  node.typeAnnotation = _const;
                } else {
                  node.typeAnnotation = this.tsNextThenParseType();
                }

                this.finishNode(node, "TSAsExpression");
                this.reScan_lt_gt();
                return this.parseExprOp(
                  node,
                  leftStartPos,
                  leftStartLoc,
                  minPrec
                );
              }

              return super.parseExprOp(
                left,
                leftStartPos,
                leftStartLoc,
                minPrec
              );
            }

            checkReservedWord(word, startLoc, checkKeywords, isBinding) {}

            checkDuplicateExports() {}

            parseImport(node) {
              node.importKind = "value";

              if (
                this.match(types$1.name) ||
                this.match(types$1.star) ||
                this.match(types$1.braceL)
              ) {
                let ahead = this.lookahead();

                if (
                  this.isContextual("type") &&
                  ahead.type !== types$1.comma &&
                  !(ahead.type === types$1.name && ahead.value === "from") &&
                  ahead.type !== types$1.eq
                ) {
                  node.importKind = "type";
                  this.next();
                  ahead = this.lookahead();
                }

                if (this.match(types$1.name) && ahead.type === types$1.eq) {
                  return this.tsParseImportEqualsDeclaration(node);
                }
              }

              const importNode = super.parseImport(node);

              if (
                importNode.importKind === "type" &&
                importNode.specifiers.length > 1 &&
                importNode.specifiers[0].type === "ImportDefaultSpecifier"
              ) {
                this.raise(
                  importNode.start,
                  TSErrors.TypeImportCannotSpecifyDefaultAndNamed
                );
              }

              return importNode;
            }

            parseExport(node) {
              if (this.match(types$1._import)) {
                this.next();

                if (
                  this.isContextual("type") &&
                  this.lookaheadCharCode() !== 61
                ) {
                  node.importKind = "type";
                  this.next();
                } else {
                  node.importKind = "value";
                }

                return this.tsParseImportEqualsDeclaration(node, true);
              } else if (this.eat(types$1.eq)) {
                const assign = node;
                assign.expression = this.parseExpression();
                this.semicolon();
                return this.finishNode(assign, "TSExportAssignment");
              } else if (this.eatContextual("as")) {
                const decl = node;
                this.expectContextual("namespace");
                decl.id = this.parseIdentifier();
                this.semicolon();
                return this.finishNode(decl, "TSNamespaceExportDeclaration");
              } else {
                if (
                  this.isContextual("type") &&
                  this.lookahead().type === types$1.braceL
                ) {
                  this.next();
                  node.exportKind = "type";
                } else {
                  node.exportKind = "value";
                }

                return super.parseExport(node);
              }
            }

            isAbstractClass() {
              return (
                this.isContextual("abstract") &&
                this.lookahead().type === types$1._class
              );
            }

            parseExportDefaultExpression() {
              if (this.isAbstractClass()) {
                const cls = this.startNode();
                this.next();
                cls.abstract = true;
                this.parseClass(cls, true, true);
                return cls;
              }

              if (this.state.value === "interface") {
                const interfaceNode = this.startNode();
                this.next();
                const result = this.tsParseInterfaceDeclaration(interfaceNode);
                if (result) return result;
              }

              return super.parseExportDefaultExpression();
            }

            parseStatementContent(context, topLevel) {
              if (this.state.type === types$1._const) {
                const ahead = this.lookahead();

                if (ahead.type === types$1.name && ahead.value === "enum") {
                  const node = this.startNode();
                  this.expect(types$1._const);
                  this.expectContextual("enum");
                  return this.tsParseEnumDeclaration(node, true);
                }
              }

              return super.parseStatementContent(context, topLevel);
            }

            parseAccessModifier() {
              return this.tsParseModifier(["public", "protected", "private"]);
            }

            tsHasSomeModifiers(member, modifiers) {
              return modifiers.some((modifier) => {
                if (tsIsAccessModifier(modifier)) {
                  return member.accessibility === modifier;
                }

                return !!member[modifier];
              });
            }

            parseClassMember(classBody, member, state) {
              const invalidModifersForStaticBlocks = [
                "declare",
                "private",
                "public",
                "protected",
                "override",
                "abstract",
                "readonly",
              ];
              this.tsParseModifiers(
                member,
                invalidModifersForStaticBlocks.concat(["static"])
              );

              const callParseClassMemberWithIsStatic = () => {
                const isStatic = !!member.static;

                if (isStatic && this.eat(types$1.braceL)) {
                  if (
                    this.tsHasSomeModifiers(
                      member,
                      invalidModifersForStaticBlocks
                    )
                  ) {
                    this.raise(
                      this.state.pos,
                      TSErrors.StaticBlockCannotHaveModifier
                    );
                  }

                  this.parseClassStaticBlock(classBody, member);
                } else {
                  this.parseClassMemberWithIsStatic(
                    classBody,
                    member,
                    state,
                    isStatic
                  );
                }
              };

              if (member.declare) {
                this.tsInAmbientContext(callParseClassMemberWithIsStatic);
              } else {
                callParseClassMemberWithIsStatic();
              }
            }

            parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
              const idx = this.tsTryParseIndexSignature(member);

              if (idx) {
                classBody.body.push(idx);

                if (member.abstract) {
                  this.raise(member.start, TSErrors.IndexSignatureHasAbstract);
                }

                if (member.accessibility) {
                  this.raise(
                    member.start,
                    TSErrors.IndexSignatureHasAccessibility,
                    member.accessibility
                  );
                }

                if (member.declare) {
                  this.raise(member.start, TSErrors.IndexSignatureHasDeclare);
                }

                if (member.override) {
                  this.raise(member.start, TSErrors.IndexSignatureHasOverride);
                }

                return;
              }

              if (!this.state.inAbstractClass && member.abstract) {
                this.raise(
                  member.start,
                  TSErrors.NonAbstractClassHasAbstractMethod
                );
              }

              if (member.override) {
                if (!state.hadSuperClass) {
                  this.raise(member.start, TSErrors.OverrideNotInSubClass);
                }
              }

              super.parseClassMemberWithIsStatic(
                classBody,
                member,
                state,
                isStatic
              );
            }

            parsePostMemberNameModifiers(methodOrProp) {
              const optional = this.eat(types$1.question);
              if (optional) methodOrProp.optional = true;

              if (methodOrProp.readonly && this.match(types$1.parenL)) {
                this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);
              }

              if (methodOrProp.declare && this.match(types$1.parenL)) {
                this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);
              }
            }

            parseExpressionStatement(node, expr) {
              const decl =
                expr.type === "Identifier"
                  ? this.tsParseExpressionStatement(node, expr)
                  : undefined;
              return decl || super.parseExpressionStatement(node, expr);
            }

            shouldParseExportDeclaration() {
              if (this.tsIsDeclarationStart()) return true;
              return super.shouldParseExportDeclaration();
            }

            parseConditional(expr, startPos, startLoc, refExpressionErrors) {
              if (
                !this.state.maybeInArrowParameters ||
                !this.match(types$1.question)
              ) {
                return super.parseConditional(
                  expr,
                  startPos,
                  startLoc,
                  refExpressionErrors
                );
              }

              const result = this.tryParse(() =>
                super.parseConditional(expr, startPos, startLoc)
              );

              if (!result.node) {
                if (result.error) {
                  super.setOptionalParametersError(
                    refExpressionErrors,
                    result.error
                  );
                }

                return expr;
              }

              if (result.error) this.state = result.failState;
              return result.node;
            }

            parseParenItem(node, startPos, startLoc) {
              node = super.parseParenItem(node, startPos, startLoc);

              if (this.eat(types$1.question)) {
                node.optional = true;
                this.resetEndLocation(node);
              }

              if (this.match(types$1.colon)) {
                const typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TSTypeCastExpression");
              }

              return node;
            }

            parseExportDeclaration(node) {
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              const isDeclare = this.eatContextual("declare");

              if (
                isDeclare &&
                (this.isContextual("declare") ||
                  !this.shouldParseExportDeclaration())
              ) {
                throw this.raise(
                  this.state.start,
                  TSErrors.ExpectedAmbientAfterExportDeclare
                );
              }

              let declaration;

              if (this.match(types$1.name)) {
                declaration = this.tsTryParseExportDeclaration();
              }

              if (!declaration) {
                declaration = super.parseExportDeclaration(node);
              }

              if (
                declaration &&
                (declaration.type === "TSInterfaceDeclaration" ||
                  declaration.type === "TSTypeAliasDeclaration" ||
                  isDeclare)
              ) {
                node.exportKind = "type";
              }

              if (declaration && isDeclare) {
                this.resetStartLocation(declaration, startPos, startLoc);
                declaration.declare = true;
              }

              return declaration;
            }

            parseClassId(node, isStatement, optionalId) {
              if (
                (!isStatement || optionalId) &&
                this.isContextual("implements")
              ) {
                return;
              }

              super.parseClassId(
                node,
                isStatement,
                optionalId,
                node.declare ? BIND_TS_AMBIENT : BIND_CLASS
              );
              const typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) node.typeParameters = typeParameters;
            }

            parseClassPropertyAnnotation(node) {
              if (!node.optional && this.eat(types$1.bang)) {
                node.definite = true;
              }

              const type = this.tsTryParseTypeAnnotation();
              if (type) node.typeAnnotation = type;
            }

            parseClassProperty(node) {
              this.parseClassPropertyAnnotation(node);

              if (this.state.isAmbientContext && this.match(types$1.eq)) {
                this.raise(
                  this.state.start,
                  TSErrors.DeclareClassFieldHasInitializer
                );
              }

              if (node.abstract && this.match(types$1.eq)) {
                const { key } = node;
                this.raise(
                  this.state.start,
                  TSErrors.AbstractPropertyHasInitializer,
                  key.type === "Identifier" && !node.computed
                    ? key.name
                    : `[${this.input.slice(key.start, key.end)}]`
                );
              }

              return super.parseClassProperty(node);
            }

            parseClassPrivateProperty(node) {
              if (node.abstract) {
                this.raise(node.start, TSErrors.PrivateElementHasAbstract);
              }

              if (node.accessibility) {
                this.raise(
                  node.start,
                  TSErrors.PrivateElementHasAccessibility,
                  node.accessibility
                );
              }

              this.parseClassPropertyAnnotation(node);
              return super.parseClassPrivateProperty(node);
            }

            pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor,
              allowsDirectSuper
            ) {
              const typeParameters = this.tsTryParseTypeParameters();

              if (typeParameters && isConstructor) {
                this.raise(
                  typeParameters.start,
                  TSErrors.ConstructorHasTypeParameters
                );
              }

              if (
                method.declare &&
                (method.kind === "get" || method.kind === "set")
              ) {
                this.raise(method.start, TSErrors.DeclareAccessor, method.kind);
              }

              if (typeParameters) method.typeParameters = typeParameters;
              super.pushClassMethod(
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor,
                allowsDirectSuper
              );
            }

            pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
              const typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) method.typeParameters = typeParameters;
              super.pushClassPrivateMethod(
                classBody,
                method,
                isGenerator,
                isAsync
              );
            }

            parseClassSuper(node) {
              super.parseClassSuper(node);

              if (node.superClass && this.isRelational("<")) {
                node.superTypeParameters = this.tsParseTypeArguments();
              }

              if (this.eatContextual("implements")) {
                node.implements = this.tsParseHeritageClause("implements");
              }
            }

            parseObjPropValue(prop, ...args) {
              const typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) prop.typeParameters = typeParameters;
              super.parseObjPropValue(prop, ...args);
            }

            parseFunctionParams(node, allowModifiers) {
              const typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) node.typeParameters = typeParameters;
              super.parseFunctionParams(node, allowModifiers);
            }

            parseVarId(decl, kind) {
              super.parseVarId(decl, kind);

              if (decl.id.type === "Identifier" && this.eat(types$1.bang)) {
                decl.definite = true;
              }

              const type = this.tsTryParseTypeAnnotation();

              if (type) {
                decl.id.typeAnnotation = type;
                this.resetEndLocation(decl.id);
              }
            }

            parseAsyncArrowFromCallExpression(node, call) {
              if (this.match(types$1.colon)) {
                node.returnType = this.tsParseTypeAnnotation();
              }

              return super.parseAsyncArrowFromCallExpression(node, call);
            }

            parseMaybeAssign(...args) {
              var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;

              let state;
              let jsx;
              let typeCast;

              if (
                this.hasPlugin("jsx") &&
                (this.match(types$1.jsxTagStart) || this.isRelational("<"))
              ) {
                state = this.state.clone();
                jsx = this.tryParse(
                  () => super.parseMaybeAssign(...args),
                  state
                );
                if (!jsx.error) return jsx.node;
                const { context } = this.state;

                if (context[context.length - 1] === types.j_oTag) {
                  context.length -= 2;
                } else if (context[context.length - 1] === types.j_expr) {
                  context.length -= 1;
                }
              }

              if (
                !((_jsx = jsx) != null && _jsx.error) &&
                !this.isRelational("<")
              ) {
                return super.parseMaybeAssign(...args);
              }

              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _expr$extra, _typeParameters;

                typeParameters = this.tsParseTypeParameters();
                const expr = super.parseMaybeAssign(...args);

                if (
                  expr.type !== "ArrowFunctionExpression" ||
                  ((_expr$extra = expr.extra) != null &&
                    _expr$extra.parenthesized)
                ) {
                  abort();
                }

                if (
                  ((_typeParameters = typeParameters) == null
                    ? void 0
                    : _typeParameters.params.length) !== 0
                ) {
                  this.resetStartLocationFromNode(expr, typeParameters);
                }

                expr.typeParameters = typeParameters;
                return expr;
              }, state);
              if (!arrow.error && !arrow.aborted) return arrow.node;

              if (!jsx) {
                assert(!this.hasPlugin("jsx"));
                typeCast = this.tryParse(
                  () => super.parseMaybeAssign(...args),
                  state
                );
                if (!typeCast.error) return typeCast.node;
              }

              if ((_jsx2 = jsx) != null && _jsx2.node) {
                this.state = jsx.failState;
                return jsx.node;
              }

              if (arrow.node) {
                this.state = arrow.failState;
                return arrow.node;
              }

              if ((_typeCast = typeCast) != null && _typeCast.node) {
                this.state = typeCast.failState;
                return typeCast.node;
              }

              if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
              if (arrow.thrown) throw arrow.error;
              if ((_typeCast2 = typeCast) != null && _typeCast2.thrown)
                throw typeCast.error;
              throw (
                ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) ||
                arrow.error ||
                ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error)
              );
            }

            parseMaybeUnary(refExpressionErrors) {
              if (!this.hasPlugin("jsx") && this.isRelational("<")) {
                return this.tsParseTypeAssertion();
              } else {
                return super.parseMaybeUnary(refExpressionErrors);
              }
            }

            parseArrow(node) {
              if (this.match(types$1.colon)) {
                const result = this.tryParse((abort) => {
                  const returnType = this.tsParseTypeOrTypePredicateAnnotation(
                    types$1.colon
                  );
                  if (this.canInsertSemicolon() || !this.match(types$1.arrow))
                    abort();
                  return returnType;
                });
                if (result.aborted) return;

                if (!result.thrown) {
                  if (result.error) this.state = result.failState;
                  node.returnType = result.node;
                }
              }

              return super.parseArrow(node);
            }

            parseAssignableListItemTypes(param) {
              if (this.eat(types$1.question)) {
                if (
                  param.type !== "Identifier" &&
                  !this.state.isAmbientContext &&
                  !this.state.inType
                ) {
                  this.raise(param.start, TSErrors.PatternIsOptional);
                }

                param.optional = true;
              }

              const type = this.tsTryParseTypeAnnotation();
              if (type) param.typeAnnotation = type;
              this.resetEndLocation(param);
              return param;
            }

            isAssignable(node, isBinding) {
              switch (node.type) {
                case "TSTypeCastExpression":
                  return this.isAssignable(node.expression, isBinding);

                case "TSParameterProperty":
                  return true;

                default:
                  return super.isAssignable(node, isBinding);
              }
            }

            toAssignable(node, isLHS = false) {
              switch (node.type) {
                case "TSTypeCastExpression":
                  return super.toAssignable(
                    this.typeCastToParameter(node),
                    isLHS
                  );

                case "TSParameterProperty":
                  return super.toAssignable(node, isLHS);

                case "ParenthesizedExpression":
                  return this.toAssignableParenthesizedExpression(node, isLHS);

                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                  node.expression = this.toAssignable(node.expression, isLHS);
                  return node;

                default:
                  return super.toAssignable(node, isLHS);
              }
            }

            toAssignableParenthesizedExpression(node, isLHS) {
              switch (node.expression.type) {
                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                case "ParenthesizedExpression":
                  node.expression = this.toAssignable(node.expression, isLHS);
                  return node;

                default:
                  return super.toAssignable(node, isLHS);
              }
            }

            checkLVal(expr, contextDescription, ...args) {
              var _expr$extra2;

              switch (expr.type) {
                case "TSTypeCastExpression":
                  return;

                case "TSParameterProperty":
                  this.checkLVal(expr.parameter, "parameter property", ...args);
                  return;

                case "TSAsExpression":
                case "TSTypeAssertion":
                  if (
                    !args[0] &&
                    contextDescription !== "parenthesized expression" &&
                    !(
                      (_expr$extra2 = expr.extra) != null &&
                      _expr$extra2.parenthesized
                    )
                  ) {
                    this.raise(
                      expr.start,
                      ErrorMessages.InvalidLhs,
                      contextDescription
                    );
                    break;
                  }

                  this.checkLVal(
                    expr.expression,
                    "parenthesized expression",
                    ...args
                  );
                  return;

                case "TSNonNullExpression":
                  this.checkLVal(expr.expression, contextDescription, ...args);
                  return;

                default:
                  super.checkLVal(expr, contextDescription, ...args);
                  return;
              }
            }

            parseBindingAtom() {
              switch (this.state.type) {
                case types$1._this:
                  return this.parseIdentifier(true);

                default:
                  return super.parseBindingAtom();
              }
            }

            parseMaybeDecoratorArguments(expr) {
              if (this.isRelational("<")) {
                const typeArguments = this.tsParseTypeArguments();

                if (this.match(types$1.parenL)) {
                  const call = super.parseMaybeDecoratorArguments(expr);
                  call.typeParameters = typeArguments;
                  return call;
                }

                this.unexpected(this.state.start, types$1.parenL);
              }

              return super.parseMaybeDecoratorArguments(expr);
            }

            checkCommaAfterRest(close) {
              if (
                this.state.isAmbientContext &&
                this.match(types$1.comma) &&
                this.lookaheadCharCode() === close
              ) {
                this.next();
              } else {
                super.checkCommaAfterRest(close);
              }
            }

            isClassMethod() {
              return this.isRelational("<") || super.isClassMethod();
            }

            isClassProperty() {
              return (
                this.match(types$1.bang) ||
                this.match(types$1.colon) ||
                super.isClassProperty()
              );
            }

            parseMaybeDefault(...args) {
              const node = super.parseMaybeDefault(...args);

              if (
                node.type === "AssignmentPattern" &&
                node.typeAnnotation &&
                node.right.start < node.typeAnnotation.start
              ) {
                this.raise(
                  node.typeAnnotation.start,
                  TSErrors.TypeAnnotationAfterAssign
                );
              }

              return node;
            }

            getTokenFromCode(code) {
              if (this.state.inType && (code === 62 || code === 60)) {
                return this.finishOp(types$1.relational, 1);
              } else {
                return super.getTokenFromCode(code);
              }
            }

            reScan_lt_gt() {
              if (this.match(types$1.relational)) {
                const code = this.input.charCodeAt(this.state.start);

                if (code === 60 || code === 62) {
                  this.state.pos -= 1;
                  this.readToken_lt_gt(code);
                }
              }
            }

            toAssignableList(exprList) {
              for (let i = 0; i < exprList.length; i++) {
                const expr = exprList[i];
                if (!expr) continue;

                switch (expr.type) {
                  case "TSTypeCastExpression":
                    exprList[i] = this.typeCastToParameter(expr);
                    break;

                  case "TSAsExpression":
                  case "TSTypeAssertion":
                    if (!this.state.maybeInArrowParameters) {
                      exprList[i] = this.typeCastToParameter(expr);
                    } else {
                      this.raise(
                        expr.start,
                        TSErrors.UnexpectedTypeCastInParameter
                      );
                    }

                    break;
                }
              }

              return super.toAssignableList(...arguments);
            }

            typeCastToParameter(node) {
              node.expression.typeAnnotation = node.typeAnnotation;
              this.resetEndLocation(
                node.expression,
                node.typeAnnotation.end,
                node.typeAnnotation.loc.end
              );
              return node.expression;
            }

            shouldParseArrow(params) {
              if (this.match(types$1.colon)) {
                return params.every((expr) => this.isAssignable(expr, true));
              }

              return super.shouldParseArrow(params);
            }

            shouldParseAsyncArrow() {
              return this.match(types$1.colon) || super.shouldParseAsyncArrow();
            }

            canHaveLeadingDecorator() {
              return super.canHaveLeadingDecorator() || this.isAbstractClass();
            }

            jsxParseOpeningElementAfterName(node) {
              if (this.isRelational("<")) {
                const typeArguments = this.tsTryParseAndCatch(() =>
                  this.tsParseTypeArguments()
                );
                if (typeArguments) node.typeParameters = typeArguments;
              }

              return super.jsxParseOpeningElementAfterName(node);
            }

            getGetterSetterExpectedParamCount(method) {
              const baseCount = super.getGetterSetterExpectedParamCount(method);
              const params = this.getObjectOrClassMethodParams(method);
              const firstParam = params[0];
              const hasContextParam =
                firstParam && this.isThisParam(firstParam);
              return hasContextParam ? baseCount + 1 : baseCount;
            }

            parseCatchClauseParam() {
              const param = super.parseCatchClauseParam();
              const type = this.tsTryParseTypeAnnotation();

              if (type) {
                param.typeAnnotation = type;
                this.resetEndLocation(param);
              }

              return param;
            }

            tsInAmbientContext(cb) {
              const oldIsAmbientContext = this.state.isAmbientContext;
              this.state.isAmbientContext = true;

              try {
                return cb();
              } finally {
                this.state.isAmbientContext = oldIsAmbientContext;
              }
            }

            parseClass(node, ...args) {
              const oldInAbstractClass = this.state.inAbstractClass;
              this.state.inAbstractClass = !!node.abstract;

              try {
                return super.parseClass(node, ...args);
              } finally {
                this.state.inAbstractClass = oldInAbstractClass;
              }
            }

            tsParseAbstractDeclaration(node) {
              if (this.match(types$1._class)) {
                node.abstract = true;
                return this.parseClass(node, true, false);
              } else if (this.isContextual("interface")) {
                if (!this.hasFollowingLineBreak()) {
                  node.abstract = true;
                  this.raise(
                    node.start,
                    TSErrors.NonClassMethodPropertyHasAbstractModifer
                  );
                  this.next();
                  return this.tsParseInterfaceDeclaration(node);
                }
              } else {
                this.unexpected(null, types$1._class);
              }
            }

            parseMethod(...args) {
              const method = super.parseMethod(...args);

              if (method.abstract) {
                const hasBody = this.hasPlugin("estree")
                  ? !!method.value.body
                  : !!method.body;

                if (hasBody) {
                  const { key } = method;
                  this.raise(
                    method.start,
                    TSErrors.AbstractMethodHasImplementation,
                    key.type === "Identifier" && !method.computed
                      ? key.name
                      : `[${this.input.slice(key.start, key.end)}]`
                  );
                }
              }

              return method;
            }

            tsParseTypeParameterName() {
              const typeName = this.parseIdentifier();
              return typeName.name;
            }

            shouldParseAsAmbientContext() {
              return !!this.getPluginOption("typescript", "dts");
            }

            parse() {
              if (this.shouldParseAsAmbientContext()) {
                this.state.isAmbientContext = true;
              }

              return super.parse();
            }

            getExpression() {
              if (this.shouldParseAsAmbientContext()) {
                this.state.isAmbientContext = true;
              }

              return super.getExpression();
            }
          };

        types$1.placeholder = new TokenType("%%", {
          startsExpr: true,
        });
        const PlaceHolderErrors = makeErrorTemplates(
          {
            ClassNameIsRequired: "A class name is required.",
          },
          ErrorCodes.SyntaxError
        );
        var placeholders = (superClass) =>
          class extends superClass {
            parsePlaceholder(expectedNode) {
              if (this.match(types$1.placeholder)) {
                const node = this.startNode();
                this.next();
                this.assertNoSpace("Unexpected space in placeholder.");
                node.name = super.parseIdentifier(true);
                this.assertNoSpace("Unexpected space in placeholder.");
                this.expect(types$1.placeholder);
                return this.finishPlaceholder(node, expectedNode);
              }
            }

            finishPlaceholder(node, expectedNode) {
              const isFinished = !!(
                node.expectedNode && node.type === "Placeholder"
              );
              node.expectedNode = expectedNode;
              return isFinished ? node : this.finishNode(node, "Placeholder");
            }

            getTokenFromCode(code) {
              if (
                code === 37 &&
                this.input.charCodeAt(this.state.pos + 1) === 37
              ) {
                return this.finishOp(types$1.placeholder, 2);
              }

              return super.getTokenFromCode(...arguments);
            }

            parseExprAtom() {
              return (
                this.parsePlaceholder("Expression") ||
                super.parseExprAtom(...arguments)
              );
            }

            parseIdentifier() {
              return (
                this.parsePlaceholder("Identifier") ||
                super.parseIdentifier(...arguments)
              );
            }

            checkReservedWord(word) {
              if (word !== undefined) super.checkReservedWord(...arguments);
            }

            parseBindingAtom() {
              return (
                this.parsePlaceholder("Pattern") ||
                super.parseBindingAtom(...arguments)
              );
            }

            checkLVal(expr) {
              if (expr.type !== "Placeholder") super.checkLVal(...arguments);
            }

            toAssignable(node) {
              if (
                node &&
                node.type === "Placeholder" &&
                node.expectedNode === "Expression"
              ) {
                node.expectedNode = "Pattern";
                return node;
              }

              return super.toAssignable(...arguments);
            }

            isLet(context) {
              if (super.isLet(context)) {
                return true;
              }

              if (!this.isContextual("let")) {
                return false;
              }

              if (context) return false;
              const nextToken = this.lookahead();

              if (nextToken.type === types$1.placeholder) {
                return true;
              }

              return false;
            }

            verifyBreakContinue(node) {
              if (node.label && node.label.type === "Placeholder") return;
              super.verifyBreakContinue(...arguments);
            }

            parseExpressionStatement(node, expr) {
              if (
                expr.type !== "Placeholder" ||
                (expr.extra && expr.extra.parenthesized)
              ) {
                return super.parseExpressionStatement(...arguments);
              }

              if (this.match(types$1.colon)) {
                const stmt = node;
                stmt.label = this.finishPlaceholder(expr, "Identifier");
                this.next();
                stmt.body = this.parseStatement("label");
                return this.finishNode(stmt, "LabeledStatement");
              }

              this.semicolon();
              node.name = expr.name;
              return this.finishPlaceholder(node, "Statement");
            }

            parseBlock() {
              return (
                this.parsePlaceholder("BlockStatement") ||
                super.parseBlock(...arguments)
              );
            }

            parseFunctionId() {
              return (
                this.parsePlaceholder("Identifier") ||
                super.parseFunctionId(...arguments)
              );
            }

            parseClass(node, isStatement, optionalId) {
              const type = isStatement ? "ClassDeclaration" : "ClassExpression";
              this.next();
              this.takeDecorators(node);
              const oldStrict = this.state.strict;
              const placeholder = this.parsePlaceholder("Identifier");

              if (placeholder) {
                if (
                  this.match(types$1._extends) ||
                  this.match(types$1.placeholder) ||
                  this.match(types$1.braceL)
                ) {
                  node.id = placeholder;
                } else if (optionalId || !isStatement) {
                  node.id = null;
                  node.body = this.finishPlaceholder(placeholder, "ClassBody");
                  return this.finishNode(node, type);
                } else {
                  this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);
                }
              } else {
                this.parseClassId(node, isStatement, optionalId);
              }

              this.parseClassSuper(node);
              node.body =
                this.parsePlaceholder("ClassBody") ||
                this.parseClassBody(!!node.superClass, oldStrict);
              return this.finishNode(node, type);
            }

            parseExport(node) {
              const placeholder = this.parsePlaceholder("Identifier");
              if (!placeholder) return super.parseExport(...arguments);

              if (!this.isContextual("from") && !this.match(types$1.comma)) {
                node.specifiers = [];
                node.source = null;
                node.declaration = this.finishPlaceholder(
                  placeholder,
                  "Declaration"
                );
                return this.finishNode(node, "ExportNamedDeclaration");
              }

              this.expectPlugin("exportDefaultFrom");
              const specifier = this.startNode();
              specifier.exported = placeholder;
              node.specifiers = [
                this.finishNode(specifier, "ExportDefaultSpecifier"),
              ];
              return super.parseExport(node);
            }

            isExportDefaultSpecifier() {
              if (this.match(types$1._default)) {
                const next = this.nextTokenStart();

                if (this.isUnparsedContextual(next, "from")) {
                  if (
                    this.input.startsWith(
                      types$1.placeholder.label,
                      this.nextTokenStartSince(next + 4)
                    )
                  ) {
                    return true;
                  }
                }
              }

              return super.isExportDefaultSpecifier();
            }

            maybeParseExportDefaultSpecifier(node) {
              if (node.specifiers && node.specifiers.length > 0) {
                return true;
              }

              return super.maybeParseExportDefaultSpecifier(...arguments);
            }

            checkExport(node) {
              const { specifiers } = node;

              if (specifiers != null && specifiers.length) {
                node.specifiers = specifiers.filter(
                  (node) => node.exported.type === "Placeholder"
                );
              }

              super.checkExport(node);
              node.specifiers = specifiers;
            }

            parseImport(node) {
              const placeholder = this.parsePlaceholder("Identifier");
              if (!placeholder) return super.parseImport(...arguments);
              node.specifiers = [];

              if (!this.isContextual("from") && !this.match(types$1.comma)) {
                node.source = this.finishPlaceholder(
                  placeholder,
                  "StringLiteral"
                );
                this.semicolon();
                return this.finishNode(node, "ImportDeclaration");
              }

              const specifier = this.startNodeAtNode(placeholder);
              specifier.local = placeholder;
              this.finishNode(specifier, "ImportDefaultSpecifier");
              node.specifiers.push(specifier);

              if (this.eat(types$1.comma)) {
                const hasStarImport = this.maybeParseStarImportSpecifier(node);
                if (!hasStarImport) this.parseNamedImportSpecifiers(node);
              }

              this.expectContextual("from");
              node.source = this.parseImportSource();
              this.semicolon();
              return this.finishNode(node, "ImportDeclaration");
            }

            parseImportSource() {
              return (
                this.parsePlaceholder("StringLiteral") ||
                super.parseImportSource(...arguments)
              );
            }
          };

        var v8intrinsic = (superClass) =>
          class extends superClass {
            parseV8Intrinsic() {
              if (this.match(types$1.modulo)) {
                const v8IntrinsicStart = this.state.start;
                const node = this.startNode();
                this.eat(types$1.modulo);

                if (this.match(types$1.name)) {
                  const name = this.parseIdentifierName(this.state.start);
                  const identifier = this.createIdentifier(node, name);
                  identifier.type = "V8IntrinsicIdentifier";

                  if (this.match(types$1.parenL)) {
                    return identifier;
                  }
                }

                this.unexpected(v8IntrinsicStart);
              }
            }

            parseExprAtom() {
              return (
                this.parseV8Intrinsic() || super.parseExprAtom(...arguments)
              );
            }
          };

        function hasPlugin(plugins, name) {
          return plugins.some((plugin) => {
            if (Array.isArray(plugin)) {
              return plugin[0] === name;
            } else {
              return plugin === name;
            }
          });
        }
        function getPluginOption(plugins, name, option) {
          const plugin = plugins.find((plugin) => {
            if (Array.isArray(plugin)) {
              return plugin[0] === name;
            } else {
              return plugin === name;
            }
          });

          if (plugin && Array.isArray(plugin)) {
            return plugin[1][option];
          }

          return null;
        }
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
        const TOPIC_TOKENS = ["%", "#"];
        const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
        function validatePlugins(plugins) {
          if (hasPlugin(plugins, "decorators")) {
            if (hasPlugin(plugins, "decorators-legacy")) {
              throw new Error(
                "Cannot use the decorators and decorators-legacy plugin together"
              );
            }

            const decoratorsBeforeExport = getPluginOption(
              plugins,
              "decorators",
              "decoratorsBeforeExport"
            );

            if (decoratorsBeforeExport == null) {
              throw new Error(
                "The 'decorators' plugin requires a 'decoratorsBeforeExport' option," +
                  " whose value must be a boolean. If you are migrating from" +
                  " Babylon/Babel 6 or want to use the old decorators proposal, you" +
                  " should use the 'decorators-legacy' plugin instead of 'decorators'."
              );
            } else if (typeof decoratorsBeforeExport !== "boolean") {
              throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }

          if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
            throw new Error("Cannot combine flow and typescript plugins.");
          }

          if (
            hasPlugin(plugins, "placeholders") &&
            hasPlugin(plugins, "v8intrinsic")
          ) {
            throw new Error(
              "Cannot combine placeholders and v8intrinsic plugins."
            );
          }

          if (hasPlugin(plugins, "pipelineOperator")) {
            const proposal = getPluginOption(
              plugins,
              "pipelineOperator",
              "proposal"
            );

            if (!PIPELINE_PROPOSALS.includes(proposal)) {
              const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(
                ", "
              );
              throw new Error(
                `"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`
              );
            }

            const tupleSyntaxIsHash =
              hasPlugin(plugins, "recordAndTuple") &&
              getPluginOption(plugins, "recordAndTuple", "syntaxType") ===
                "hash";

            if (proposal === "hack") {
              if (hasPlugin(plugins, "placeholders")) {
                throw new Error(
                  "Cannot combine placeholders plugin and Hack-style pipes."
                );
              }

              if (hasPlugin(plugins, "v8intrinsic")) {
                throw new Error(
                  "Cannot combine v8intrinsic plugin and Hack-style pipes."
                );
              }

              const topicToken = getPluginOption(
                plugins,
                "pipelineOperator",
                "topicToken"
              );

              if (!TOPIC_TOKENS.includes(topicToken)) {
                const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                throw new Error(
                  `"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`
                );
              }

              if (topicToken === "#" && tupleSyntaxIsHash) {
                throw new Error(
                  'Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.'
                );
              }
            } else if (proposal === "smart" && tupleSyntaxIsHash) {
              throw new Error(
                'Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.'
              );
            }
          }

          if (hasPlugin(plugins, "moduleAttributes")) {
            {
              if (hasPlugin(plugins, "importAssertions")) {
                throw new Error(
                  "Cannot combine importAssertions and moduleAttributes plugins."
                );
              }

              const moduleAttributesVerionPluginOption = getPluginOption(
                plugins,
                "moduleAttributes",
                "version"
              );

              if (moduleAttributesVerionPluginOption !== "may-2020") {
                throw new Error(
                  "The 'moduleAttributes' plugin requires a 'version' option," +
                    " representing the last proposal update. Currently, the" +
                    " only supported value is 'may-2020'."
                );
              }
            }
          }

          if (
            hasPlugin(plugins, "recordAndTuple") &&
            !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(
              getPluginOption(plugins, "recordAndTuple", "syntaxType")
            )
          ) {
            throw new Error(
              "'recordAndTuple' requires 'syntaxType' option whose value should be one of: " +
                RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", ")
            );
          }

          if (
            hasPlugin(plugins, "asyncDoExpressions") &&
            !hasPlugin(plugins, "doExpressions")
          ) {
            const error = new Error(
              "'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins."
            );
            error.missingPlugins = "doExpressions";
            throw error;
          }
        }
        const mixinPlugins = {
          estree,
          jsx,
          flow,
          typescript,
          v8intrinsic,
          placeholders,
        };
        const mixinPluginNames = Object.keys(mixinPlugins);

        const defaultOptions = {
          sourceType: "script",
          sourceFilename: undefined,
          startLine: 1,
          allowAwaitOutsideFunction: false,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowSuperOutsideMethod: false,
          allowUndeclaredExports: false,
          plugins: [],
          strictMode: null,
          ranges: false,
          tokens: false,
          createParenthesizedExpressions: false,
          errorRecovery: false,
          attachComment: true,
        };
        function getOptions(opts) {
          const options = {};

          for (const key of Object.keys(defaultOptions)) {
            options[key] =
              opts && opts[key] != null ? opts[key] : defaultOptions[key];
          }

          return options;
        }

        const unwrapParenthesizedExpression = (node) => {
          return node.type === "ParenthesizedExpression"
            ? unwrapParenthesizedExpression(node.expression)
            : node;
        };

        class LValParser extends NodeUtils {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;

            let parenthesized = undefined;

            if (
              node.type === "ParenthesizedExpression" ||
              ((_node$extra = node.extra) != null && _node$extra.parenthesized)
            ) {
              parenthesized = unwrapParenthesizedExpression(node);

              if (isLHS) {
                if (parenthesized.type === "Identifier") {
                  this.expressionScope.recordParenthesizedIdentifierError(
                    node.start,
                    ErrorMessages.InvalidParenthesizedAssignment
                  );
                } else if (parenthesized.type !== "MemberExpression") {
                  this.raise(
                    node.start,
                    ErrorMessages.InvalidParenthesizedAssignment
                  );
                }
              } else {
                this.raise(
                  node.start,
                  ErrorMessages.InvalidParenthesizedAssignment
                );
              }
            }

            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;

              case "ObjectExpression":
                node.type = "ObjectPattern";

                for (
                  let i = 0, length = node.properties.length, last = length - 1;
                  i < length;
                  i++
                ) {
                  var _node$extra2;

                  const prop = node.properties[i];
                  const isLast = i === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS);

                  if (
                    isLast &&
                    prop.type === "RestElement" &&
                    (_node$extra2 = node.extra) != null &&
                    _node$extra2.trailingComma
                  ) {
                    this.raiseRestNotLast(node.extra.trailingComma);
                  }
                }

                break;

              case "ObjectProperty":
                this.toAssignable(node.value, isLHS);
                break;

              case "SpreadElement": {
                this.checkToRestConversion(node);
                node.type = "RestElement";
                const arg = node.argument;
                this.toAssignable(arg, isLHS);
                break;
              }

              case "ArrayExpression":
                node.type = "ArrayPattern";
                this.toAssignableList(
                  node.elements,
                  (_node$extra3 = node.extra) == null
                    ? void 0
                    : _node$extra3.trailingComma,
                  isLHS
                );
                break;

              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(
                    node.left.end,
                    ErrorMessages.MissingEqInAssignment
                  );
                }

                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isLHS);
                break;

              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
                break;
            }

            return node;
          }

          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if (prop.type === "ObjectMethod") {
              const error =
                prop.kind === "get" || prop.kind === "set"
                  ? ErrorMessages.PatternHasAccessor
                  : ErrorMessages.PatternHasMethod;
              this.raise(prop.key.start, error);
            } else if (prop.type === "SpreadElement" && !isLast) {
              this.raiseRestNotLast(prop.start);
            } else {
              this.toAssignable(prop, isLHS);
            }
          }

          toAssignableList(exprList, trailingCommaPos, isLHS) {
            let end = exprList.length;

            if (end) {
              const last = exprList[end - 1];

              if ((last == null ? void 0 : last.type) === "RestElement") {
                --end;
              } else if (
                (last == null ? void 0 : last.type) === "SpreadElement"
              ) {
                last.type = "RestElement";
                let arg = last.argument;
                this.toAssignable(arg, isLHS);
                arg = unwrapParenthesizedExpression(arg);

                if (
                  arg.type !== "Identifier" &&
                  arg.type !== "MemberExpression" &&
                  arg.type !== "ArrayPattern" &&
                  arg.type !== "ObjectPattern"
                ) {
                  this.unexpected(arg.start);
                }

                if (trailingCommaPos) {
                  this.raiseTrailingCommaAfterRest(trailingCommaPos);
                }

                --end;
              }
            }

            for (let i = 0; i < end; i++) {
              const elt = exprList[i];

              if (elt) {
                this.toAssignable(elt, isLHS);

                if (elt.type === "RestElement") {
                  this.raiseRestNotLast(elt.start);
                }
              }
            }

            return exprList;
          }

          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;

              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i) => {
                  return (
                    prop.type !== "ObjectMethod" &&
                    (i === last || prop.type !== "SpreadElement") &&
                    this.isAssignable(prop)
                  );
                });
              }

              case "ObjectProperty":
                return this.isAssignable(node.value);

              case "SpreadElement":
                return this.isAssignable(node.argument);

              case "ArrayExpression":
                return node.elements.every(
                  (element) => element === null || this.isAssignable(element)
                );

              case "AssignmentExpression":
                return node.operator === "=";

              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);

              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;

              default:
                return false;
            }
          }

          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }

          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);

            for (const expr of exprList) {
              if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
                this.toReferencedListDeep(expr.elements);
              }
            }
          }

          parseSpread(refExpressionErrors, refNeedsArrowPos) {
            const node = this.startNode();
            this.next();
            node.argument = this.parseMaybeAssignAllowIn(
              refExpressionErrors,
              undefined,
              refNeedsArrowPos
            );
            return this.finishNode(node, "SpreadElement");
          }

          parseRestBinding() {
            const node = this.startNode();
            this.next();
            node.argument = this.parseBindingAtom();
            return this.finishNode(node, "RestElement");
          }

          parseBindingAtom() {
            switch (this.state.type) {
              case types$1.bracketL: {
                const node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(
                  types$1.bracketR,
                  93,
                  true
                );
                return this.finishNode(node, "ArrayPattern");
              }

              case types$1.braceL:
                return this.parseObjectLike(types$1.braceR, true);
            }

            return this.parseIdentifier();
          }

          parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
            const elts = [];
            let first = true;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types$1.comma);
              }

              if (allowEmpty && this.match(types$1.comma)) {
                elts.push(null);
              } else if (this.eat(close)) {
                break;
              } else if (this.match(types$1.ellipsis)) {
                elts.push(
                  this.parseAssignableListItemTypes(this.parseRestBinding())
                );
                this.checkCommaAfterRest(closeCharCode);
                this.expect(close);
                break;
              } else {
                const decorators = [];

                if (this.match(types$1.at) && this.hasPlugin("decorators")) {
                  this.raise(
                    this.state.start,
                    ErrorMessages.UnsupportedParameterDecorator
                  );
                }

                while (this.match(types$1.at)) {
                  decorators.push(this.parseDecorator());
                }

                elts.push(
                  this.parseAssignableListItem(allowModifiers, decorators)
                );
              }
            }

            return elts;
          }

          parseAssignableListItem(allowModifiers, decorators) {
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(
              left.start,
              left.loc.start,
              left
            );

            if (decorators.length) {
              left.decorators = decorators;
            }

            return elt;
          }

          parseAssignableListItemTypes(param) {
            return param;
          }

          parseMaybeDefault(startPos, startLoc, left) {
            var _startLoc, _startPos, _left;

            startLoc =
              (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
            startPos =
              (_startPos = startPos) != null ? _startPos : this.state.start;
            left = (_left = left) != null ? _left : this.parseBindingAtom();
            if (!this.eat(types$1.eq)) return left;
            const node = this.startNodeAt(startPos, startLoc);
            node.left = left;
            node.right = this.parseMaybeAssignAllowIn();
            return this.finishNode(node, "AssignmentPattern");
          }

          checkLVal(
            expr,
            contextDescription,
            bindingType = BIND_NONE,
            checkClashes,
            disallowLetBinding,
            strictModeChanged = false
          ) {
            switch (expr.type) {
              case "Identifier": {
                const { name } = expr;

                if (
                  this.state.strict &&
                  (strictModeChanged
                    ? isStrictBindReservedWord(name, this.inModule)
                    : isStrictBindOnlyReservedWord(name))
                ) {
                  this.raise(
                    expr.start,
                    bindingType === BIND_NONE
                      ? ErrorMessages.StrictEvalArguments
                      : ErrorMessages.StrictEvalArgumentsBinding,
                    name
                  );
                }

                if (checkClashes) {
                  if (checkClashes.has(name)) {
                    this.raise(expr.start, ErrorMessages.ParamDupe);
                  } else {
                    checkClashes.add(name);
                  }
                }

                if (disallowLetBinding && name === "let") {
                  this.raise(expr.start, ErrorMessages.LetInLexicalBinding);
                }

                if (!(bindingType & BIND_NONE)) {
                  this.scope.declareName(name, bindingType, expr.start);
                }

                break;
              }

              case "MemberExpression":
                if (bindingType !== BIND_NONE) {
                  this.raise(
                    expr.start,
                    ErrorMessages.InvalidPropertyBindingPattern
                  );
                }

                break;

              case "ObjectPattern":
                for (let prop of expr.properties) {
                  if (this.isObjectProperty(prop)) prop = prop.value;
                  else if (this.isObjectMethod(prop)) continue;
                  this.checkLVal(
                    prop,
                    "object destructuring pattern",
                    bindingType,
                    checkClashes,
                    disallowLetBinding
                  );
                }

                break;

              case "ArrayPattern":
                for (const elem of expr.elements) {
                  if (elem) {
                    this.checkLVal(
                      elem,
                      "array destructuring pattern",
                      bindingType,
                      checkClashes,
                      disallowLetBinding
                    );
                  }
                }

                break;

              case "AssignmentPattern":
                this.checkLVal(
                  expr.left,
                  "assignment pattern",
                  bindingType,
                  checkClashes
                );
                break;

              case "RestElement":
                this.checkLVal(
                  expr.argument,
                  "rest element",
                  bindingType,
                  checkClashes
                );
                break;

              case "ParenthesizedExpression":
                this.checkLVal(
                  expr.expression,
                  "parenthesized expression",
                  bindingType,
                  checkClashes
                );
                break;

              default: {
                this.raise(
                  expr.start,
                  bindingType === BIND_NONE
                    ? ErrorMessages.InvalidLhs
                    : ErrorMessages.InvalidLhsBinding,
                  contextDescription
                );
              }
            }
          }

          checkToRestConversion(node) {
            if (
              node.argument.type !== "Identifier" &&
              node.argument.type !== "MemberExpression"
            ) {
              this.raise(
                node.argument.start,
                ErrorMessages.InvalidRestAssignmentPattern
              );
            }
          }

          checkCommaAfterRest(close) {
            if (this.match(types$1.comma)) {
              if (this.lookaheadCharCode() === close) {
                this.raiseTrailingCommaAfterRest(this.state.start);
              } else {
                this.raiseRestNotLast(this.state.start);
              }
            }
          }

          raiseRestNotLast(pos) {
            throw this.raise(pos, ErrorMessages.ElementAfterRest);
          }

          raiseTrailingCommaAfterRest(pos) {
            this.raise(pos, ErrorMessages.RestTrailingComma);
          }
        }

        class ExpressionParser extends LValParser {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if (
              prop.type === "SpreadElement" ||
              this.isObjectMethod(prop) ||
              prop.computed ||
              prop.shorthand
            ) {
              return;
            }

            const key = prop.key;
            const name = key.type === "Identifier" ? key.name : key.value;

            if (name === "__proto__") {
              if (isRecord) {
                this.raise(key.start, ErrorMessages.RecordNoProto);
                return;
              }

              if (protoRef.used) {
                if (refExpressionErrors) {
                  if (refExpressionErrors.doubleProto === -1) {
                    refExpressionErrors.doubleProto = key.start;
                  }
                } else {
                  this.raise(key.start, ErrorMessages.DuplicateProto);
                }
              }

              protoRef.used = true;
            }
          }

          shouldExitDescending(expr, potentialArrowAt) {
            return (
              expr.type === "ArrowFunctionExpression" &&
              expr.start === potentialArrowAt
            );
          }

          getExpression() {
            this.enterInitialScopes();
            this.nextToken();
            const expr = this.parseExpression();

            if (!this.match(types$1.eof)) {
              this.unexpected();
            }

            this.finalizeRemainingComments();
            expr.comments = this.state.comments;
            expr.errors = this.state.errors;

            if (this.options.tokens) {
              expr.tokens = this.tokens;
            }

            return expr;
          }

          parseExpression(disallowIn, refExpressionErrors) {
            if (disallowIn) {
              return this.disallowInAnd(() =>
                this.parseExpressionBase(refExpressionErrors)
              );
            }

            return this.allowInAnd(() =>
              this.parseExpressionBase(refExpressionErrors)
            );
          }

          parseExpressionBase(refExpressionErrors) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const expr = this.parseMaybeAssign(refExpressionErrors);

            if (this.match(types$1.comma)) {
              const node = this.startNodeAt(startPos, startLoc);
              node.expressions = [expr];

              while (this.eat(types$1.comma)) {
                node.expressions.push(
                  this.parseMaybeAssign(refExpressionErrors)
                );
              }

              this.toReferencedList(node.expressions);
              return this.finishNode(node, "SequenceExpression");
            }

            return expr;
          }

          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() =>
              this.parseMaybeAssign(refExpressionErrors, afterLeftParse)
            );
          }

          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() =>
              this.parseMaybeAssign(refExpressionErrors, afterLeftParse)
            );
          }

          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$pos;

            refExpressionErrors.optionalParameters =
              (_resultError$pos =
                resultError == null ? void 0 : resultError.pos) != null
                ? _resultError$pos
                : this.state.start;
          }

          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;

            if (this.isContextual("yield")) {
              if (this.prodParam.hasYield) {
                let left = this.parseYield();

                if (afterLeftParse) {
                  left = afterLeftParse.call(this, left, startPos, startLoc);
                }

                return left;
              }
            }

            let ownExpressionErrors;

            if (refExpressionErrors) {
              ownExpressionErrors = false;
            } else {
              refExpressionErrors = new ExpressionErrors();
              ownExpressionErrors = true;
            }

            if (this.match(types$1.parenL) || this.match(types$1.name)) {
              this.state.potentialArrowAt = this.state.start;
            }

            let left = this.parseMaybeConditional(refExpressionErrors);

            if (afterLeftParse) {
              left = afterLeftParse.call(this, left, startPos, startLoc);
            }

            if (this.state.type.isAssign) {
              const node = this.startNodeAt(startPos, startLoc);
              const operator = this.state.value;
              node.operator = operator;
              const leftIsHackPipeExpression =
                left.type === "BinaryExpression" &&
                left.operator === "|>" &&
                this.getPluginOption("pipelineOperator", "proposal") === "hack";

              if (leftIsHackPipeExpression) {
                throw this.raise(
                  this.state.start,
                  ErrorMessages.PipeBodyIsTighter,
                  operator
                );
              }

              if (this.match(types$1.eq)) {
                node.left = this.toAssignable(left, true);
                refExpressionErrors.doubleProto = -1;
              } else {
                node.left = left;
              }

              if (refExpressionErrors.shorthandAssign >= node.left.start) {
                refExpressionErrors.shorthandAssign = -1;
              }

              this.checkLVal(left, "assignment expression");
              this.next();
              node.right = this.parseMaybeAssign();
              return this.finishNode(node, "AssignmentExpression");
            } else if (ownExpressionErrors) {
              this.checkExpressionErrors(refExpressionErrors, true);
            }

            return left;
          }

          parseMaybeConditional(refExpressionErrors) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const potentialArrowAt = this.state.potentialArrowAt;
            const expr = this.parseExprOps(refExpressionErrors);

            if (this.shouldExitDescending(expr, potentialArrowAt)) {
              return expr;
            }

            return this.parseConditional(
              expr,
              startPos,
              startLoc,
              refExpressionErrors
            );
          }

          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (this.eat(types$1.question)) {
              const node = this.startNodeAt(startPos, startLoc);
              node.test = expr;
              node.consequent = this.parseMaybeAssignAllowIn();
              this.expect(types$1.colon);
              node.alternate = this.parseMaybeAssign();
              return this.finishNode(node, "ConditionalExpression");
            }

            return expr;
          }

          parseExprOps(refExpressionErrors) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const potentialArrowAt = this.state.potentialArrowAt;
            const expr = this.parseMaybeUnary(refExpressionErrors);

            if (this.shouldExitDescending(expr, potentialArrowAt)) {
              return expr;
            }

            return this.parseExprOp(expr, startPos, startLoc, -1);
          }

          parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            let prec = this.state.type.binop;

            if (
              prec != null &&
              (this.prodParam.hasIn || !this.match(types$1._in))
            ) {
              if (prec > minPrec) {
                const op = this.state.type;

                if (op === types$1.pipeline) {
                  this.expectPlugin("pipelineOperator");

                  if (this.state.inFSharpPipelineDirectBody) {
                    return left;
                  }

                  this.checkPipelineAtInfixOperator(left, leftStartPos);
                }

                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.left = left;
                node.operator = this.state.value;
                const logical =
                  op === types$1.logicalOR || op === types$1.logicalAND;
                const coalesce = op === types$1.nullishCoalescing;

                if (coalesce) {
                  prec = types$1.logicalAND.binop;
                }

                this.next();

                if (
                  op === types$1.pipeline &&
                  this.getPluginOption("pipelineOperator", "proposal") ===
                    "minimal"
                ) {
                  if (
                    this.match(types$1.name) &&
                    this.state.value === "await" &&
                    this.prodParam.hasAwait
                  ) {
                    throw this.raise(
                      this.state.start,
                      ErrorMessages.UnexpectedAwaitAfterPipelineBody
                    );
                  }
                }

                node.right = this.parseExprOpRightExpr(op, prec);
                this.finishNode(
                  node,
                  logical || coalesce ? "LogicalExpression" : "BinaryExpression"
                );
                const nextOp = this.state.type;

                if (
                  (coalesce &&
                    (nextOp === types$1.logicalOR ||
                      nextOp === types$1.logicalAND)) ||
                  (logical && nextOp === types$1.nullishCoalescing)
                ) {
                  throw this.raise(
                    this.state.start,
                    ErrorMessages.MixingCoalesceWithLogical
                  );
                }

                return this.parseExprOp(
                  node,
                  leftStartPos,
                  leftStartLoc,
                  minPrec
                );
              }
            }

            return left;
          }

          parseExprOpRightExpr(op, prec) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;

            switch (op) {
              case types$1.pipeline:
                switch (this.getPluginOption("pipelineOperator", "proposal")) {
                  case "hack":
                    return this.withTopicBindingContext(() => {
                      const bodyExpr = this.parseHackPipeBody(op, prec);
                      this.checkHackPipeBodyEarlyErrors(startPos);
                      return bodyExpr;
                    });

                  case "smart":
                    return this.withTopicBindingContext(() => {
                      const childExpr = this.parseHackPipeBody(op, prec);
                      return this.parseSmartPipelineBodyInStyle(
                        childExpr,
                        startPos,
                        startLoc
                      );
                    });

                  case "fsharp":
                    return this.withSoloAwaitPermittingContext(() => {
                      return this.parseFSharpPipelineBody(prec);
                    });
                }

              default:
                return this.parseExprOpBaseRightExpr(op, prec);
            }
          }

          parseExprOpBaseRightExpr(op, prec) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            return this.parseExprOp(
              this.parseMaybeUnary(),
              startPos,
              startLoc,
              op.rightAssociative ? prec - 1 : prec
            );
          }

          parseHackPipeBody(op, prec) {
            const bodyIsInGeneratorContext = this.prodParam.hasYield;
            const bodyIsYieldExpression =
              bodyIsInGeneratorContext && this.isContextual("yield");

            if (bodyIsYieldExpression) {
              throw this.raise(
                this.state.start,
                ErrorMessages.PipeBodyIsTighter,
                this.state.value
              );
            } else {
              return this.parseExprOpBaseRightExpr(op, prec);
            }
          }

          checkExponentialAfterUnary(node) {
            if (this.match(types$1.exponent)) {
              this.raise(
                node.argument.start,
                ErrorMessages.UnexpectedTokenUnaryExponentiation
              );
            }
          }

          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const isAwait = this.isContextual("await");

            if (isAwait && this.isAwaitAllowed()) {
              this.next();
              const expr = this.parseAwait(startPos, startLoc);
              if (!sawUnary) this.checkExponentialAfterUnary(expr);
              return expr;
            }

            const update = this.match(types$1.incDec);
            const node = this.startNode();

            if (this.state.type.prefix) {
              node.operator = this.state.value;
              node.prefix = true;

              if (this.match(types$1._throw)) {
                this.expectPlugin("throwExpressions");
              }

              const isDelete = this.match(types$1._delete);
              this.next();
              node.argument = this.parseMaybeUnary(null, true);
              this.checkExpressionErrors(refExpressionErrors, true);

              if (this.state.strict && isDelete) {
                const arg = node.argument;

                if (arg.type === "Identifier") {
                  this.raise(node.start, ErrorMessages.StrictDelete);
                } else if (this.hasPropertyAsPrivateName(arg)) {
                  this.raise(node.start, ErrorMessages.DeletePrivateField);
                }
              }

              if (!update) {
                if (!sawUnary) this.checkExponentialAfterUnary(node);
                return this.finishNode(node, "UnaryExpression");
              }
            }

            const expr = this.parseUpdate(node, update, refExpressionErrors);

            if (isAwait) {
              const startsExpr = this.hasPlugin("v8intrinsic")
                ? this.state.type.startsExpr
                : this.state.type.startsExpr && !this.match(types$1.modulo);

              if (startsExpr && !this.isAmbiguousAwait()) {
                this.raiseOverwrite(
                  startPos,
                  ErrorMessages.AwaitNotInAsyncContext
                );
                return this.parseAwait(startPos, startLoc);
              }
            }

            return expr;
          }

          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              this.checkLVal(node.argument, "prefix operation");
              return this.finishNode(node, "UpdateExpression");
            }

            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false))
              return expr;

            while (this.state.type.postfix && !this.canInsertSemicolon()) {
              const node = this.startNodeAt(startPos, startLoc);
              node.operator = this.state.value;
              node.prefix = false;
              node.argument = expr;
              this.checkLVal(expr, "postfix operation");
              this.next();
              expr = this.finishNode(node, "UpdateExpression");
            }

            return expr;
          }

          parseExprSubscripts(refExpressionErrors) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            const potentialArrowAt = this.state.potentialArrowAt;
            const expr = this.parseExprAtom(refExpressionErrors);

            if (this.shouldExitDescending(expr, potentialArrowAt)) {
              return expr;
            }

            return this.parseSubscripts(expr, startPos, startLoc);
          }

          parseSubscripts(base, startPos, startLoc, noCalls) {
            const state = {
              optionalChainMember: false,
              maybeAsyncArrow: this.atPossibleAsyncArrow(base),
              stop: false,
            };

            do {
              base = this.parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                state
              );
              state.maybeAsyncArrow = false;
            } while (!state.stop);

            return base;
          }

          parseSubscript(base, startPos, startLoc, noCalls, state) {
            if (!noCalls && this.eat(types$1.doubleColon)) {
              return this.parseBind(base, startPos, startLoc, noCalls, state);
            } else if (this.match(types$1.backQuote)) {
              return this.parseTaggedTemplateExpression(
                base,
                startPos,
                startLoc,
                state
              );
            }

            let optional = false;

            if (this.match(types$1.questionDot)) {
              if (noCalls && this.lookaheadCharCode() === 40) {
                state.stop = true;
                return base;
              }

              state.optionalChainMember = optional = true;
              this.next();
            }

            if (!noCalls && this.match(types$1.parenL)) {
              return this.parseCoverCallAndAsyncArrowHead(
                base,
                startPos,
                startLoc,
                state,
                optional
              );
            } else if (
              optional ||
              this.match(types$1.bracketL) ||
              this.eat(types$1.dot)
            ) {
              return this.parseMember(
                base,
                startPos,
                startLoc,
                state,
                optional
              );
            } else {
              state.stop = true;
              return base;
            }
          }

          parseMember(base, startPos, startLoc, state, optional) {
            const node = this.startNodeAt(startPos, startLoc);
            const computed = this.eat(types$1.bracketL);
            node.object = base;
            node.computed = computed;
            const privateName =
              !computed && this.match(types$1.privateName) && this.state.value;
            const property = computed
              ? this.parseExpression()
              : privateName
              ? this.parsePrivateName()
              : this.parseIdentifier(true);

            if (privateName !== false) {
              if (node.object.type === "Super") {
                this.raise(startPos, ErrorMessages.SuperPrivateField);
              }

              this.classScope.usePrivateName(privateName, property.start);
            }

            node.property = property;

            if (computed) {
              this.expect(types$1.bracketR);
            }

            if (state.optionalChainMember) {
              node.optional = optional;
              return this.finishNode(node, "OptionalMemberExpression");
            } else {
              return this.finishNode(node, "MemberExpression");
            }
          }

          parseBind(base, startPos, startLoc, noCalls, state) {
            const node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            node.callee = this.parseNoCallExpr();
            state.stop = true;
            return this.parseSubscripts(
              this.finishNode(node, "BindExpression"),
              startPos,
              startLoc,
              noCalls
            );
          }

          parseCoverCallAndAsyncArrowHead(
            base,
            startPos,
            startLoc,
            state,
            optional
          ) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true;
            this.next();
            let node = this.startNodeAt(startPos, startLoc);
            node.callee = base;

            if (state.maybeAsyncArrow) {
              this.expressionScope.enter(newAsyncArrowScope());
              refExpressionErrors = new ExpressionErrors();
            }

            if (state.optionalChainMember) {
              node.optional = optional;
            }

            if (optional) {
              node.arguments = this.parseCallExpressionArguments(
                types$1.parenR
              );
            } else {
              node.arguments = this.parseCallExpressionArguments(
                types$1.parenR,
                base.type === "Import",
                base.type !== "Super",
                node,
                refExpressionErrors
              );
            }

            this.finishCallExpression(node, state.optionalChainMember);

            if (
              state.maybeAsyncArrow &&
              this.shouldParseAsyncArrow() &&
              !optional
            ) {
              state.stop = true;
              this.expressionScope.validateAsPattern();
              this.expressionScope.exit();
              node = this.parseAsyncArrowFromCallExpression(
                this.startNodeAt(startPos, startLoc),
                node
              );
            } else {
              if (state.maybeAsyncArrow) {
                this.checkExpressionErrors(refExpressionErrors, true);
                this.expressionScope.exit();
              }

              this.toReferencedArguments(node);
            }

            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            return node;
          }

          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }

          parseTaggedTemplateExpression(base, startPos, startLoc, state) {
            const node = this.startNodeAt(startPos, startLoc);
            node.tag = base;
            node.quasi = this.parseTemplate(true);

            if (state.optionalChainMember) {
              this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);
            }

            return this.finishNode(node, "TaggedTemplateExpression");
          }

          atPossibleAsyncArrow(base) {
            return (
              base.type === "Identifier" &&
              base.name === "async" &&
              this.state.lastTokEnd === base.end &&
              !this.canInsertSemicolon() &&
              base.end - base.start === 5 &&
              base.start === this.state.potentialArrowAt
            );
          }

          finishCallExpression(node, optional) {
            if (node.callee.type === "Import") {
              if (node.arguments.length === 2) {
                {
                  if (!this.hasPlugin("moduleAttributes")) {
                    this.expectPlugin("importAssertions");
                  }
                }
              }

              if (node.arguments.length === 0 || node.arguments.length > 2) {
                this.raise(
                  node.start,
                  ErrorMessages.ImportCallArity,
                  this.hasPlugin("importAssertions") ||
                    this.hasPlugin("moduleAttributes")
                    ? "one or two arguments"
                    : "one argument"
                );
              } else {
                for (const arg of node.arguments) {
                  if (arg.type === "SpreadElement") {
                    this.raise(
                      arg.start,
                      ErrorMessages.ImportCallSpreadArgument
                    );
                  }
                }
              }
            }

            return this.finishNode(
              node,
              optional ? "OptionalCallExpression" : "CallExpression"
            );
          }

          parseCallExpressionArguments(
            close,
            dynamicImport,
            allowPlaceholder,
            nodeForExtra,
            refExpressionErrors
          ) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody =
              this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types$1.comma);

                if (this.match(close)) {
                  if (
                    dynamicImport &&
                    !this.hasPlugin("importAssertions") &&
                    !this.hasPlugin("moduleAttributes")
                  ) {
                    this.raise(
                      this.state.lastTokStart,
                      ErrorMessages.ImportCallArgumentTrailingComma
                    );
                  }

                  if (nodeForExtra) {
                    this.addExtra(
                      nodeForExtra,
                      "trailingComma",
                      this.state.lastTokStart
                    );
                  }

                  this.next();
                  break;
                }
              }

              elts.push(
                this.parseExprListItem(
                  false,
                  refExpressionErrors,
                  allowPlaceholder
                )
              );
            }

            this.state.inFSharpPipelineDirectBody =
              oldInFSharpPipelineDirectBody;
            return elts;
          }

          shouldParseAsyncArrow() {
            return this.match(types$1.arrow) && !this.canInsertSemicolon();
          }

          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;

            this.resetPreviousNodeTrailingComments(call);
            this.expect(types$1.arrow);
            this.parseArrowExpression(
              node,
              call.arguments,
              true,
              (_call$extra = call.extra) == null
                ? void 0
                : _call$extra.trailingComma
            );
            setInnerComments(node, call.innerComments);
            setInnerComments(node, call.callee.trailingComments);
            return node;
          }

          parseNoCallExpr() {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            return this.parseSubscripts(
              this.parseExprAtom(),
              startPos,
              startLoc,
              true
            );
          }

          parseExprAtom(refExpressionErrors) {
            let node;

            switch (this.state.type) {
              case types$1._super:
                return this.parseSuper();

              case types$1._import:
                node = this.startNode();
                this.next();

                if (this.match(types$1.dot)) {
                  return this.parseImportMetaProperty(node);
                }

                if (!this.match(types$1.parenL)) {
                  this.raise(
                    this.state.lastTokStart,
                    ErrorMessages.UnsupportedImport
                  );
                }

                return this.finishNode(node, "Import");

              case types$1._this:
                node = this.startNode();
                this.next();
                return this.finishNode(node, "ThisExpression");

              case types$1.name: {
                if (
                  this.isContextual("module") &&
                  this.lookaheadCharCode() === 123 &&
                  !this.hasFollowingLineBreak()
                ) {
                  return this.parseModuleExpression();
                }

                const canBeArrow =
                  this.state.potentialArrowAt === this.state.start;
                const containsEsc = this.state.containsEsc;
                const id = this.parseIdentifier();

                if (
                  !containsEsc &&
                  id.name === "async" &&
                  !this.canInsertSemicolon()
                ) {
                  if (this.match(types$1._function)) {
                    this.resetPreviousNodeTrailingComments(id);
                    this.next();
                    return this.parseFunction(
                      this.startNodeAtNode(id),
                      undefined,
                      true
                    );
                  } else if (this.match(types$1.name)) {
                    if (this.lookaheadCharCode() === 61) {
                      return this.parseAsyncArrowUnaryFunction(
                        this.startNodeAtNode(id)
                      );
                    } else {
                      return id;
                    }
                  } else if (this.match(types$1._do)) {
                    this.resetPreviousNodeTrailingComments(id);
                    return this.parseDo(this.startNodeAtNode(id), true);
                  }
                }

                if (
                  canBeArrow &&
                  this.match(types$1.arrow) &&
                  !this.canInsertSemicolon()
                ) {
                  this.next();
                  return this.parseArrowExpression(
                    this.startNodeAtNode(id),
                    [id],
                    false
                  );
                }

                return id;
              }

              case types$1._do: {
                return this.parseDo(this.startNode(), false);
              }

              case types$1.slash:
              case types$1.slashAssign: {
                this.readRegexp();
                return this.parseRegExpLiteral(this.state.value);
              }

              case types$1.num:
                return this.parseNumericLiteral(this.state.value);

              case types$1.bigint:
                return this.parseBigIntLiteral(this.state.value);

              case types$1.decimal:
                return this.parseDecimalLiteral(this.state.value);

              case types$1.string:
                return this.parseStringLiteral(this.state.value);

              case types$1._null:
                return this.parseNullLiteral();

              case types$1._true:
                return this.parseBooleanLiteral(true);

              case types$1._false:
                return this.parseBooleanLiteral(false);

              case types$1.parenL: {
                const canBeArrow =
                  this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }

              case types$1.bracketBarL:
              case types$1.bracketHashL: {
                return this.parseArrayLike(
                  this.state.type === types$1.bracketBarL
                    ? types$1.bracketBarR
                    : types$1.bracketR,
                  false,
                  true,
                  refExpressionErrors
                );
              }

              case types$1.bracketL: {
                return this.parseArrayLike(
                  types$1.bracketR,
                  true,
                  false,
                  refExpressionErrors
                );
              }

              case types$1.braceBarL:
              case types$1.braceHashL: {
                return this.parseObjectLike(
                  this.state.type === types$1.braceBarL
                    ? types$1.braceBarR
                    : types$1.braceR,
                  false,
                  true,
                  refExpressionErrors
                );
              }

              case types$1.braceL: {
                return this.parseObjectLike(
                  types$1.braceR,
                  false,
                  false,
                  refExpressionErrors
                );
              }

              case types$1._function:
                return this.parseFunctionOrFunctionSent();

              case types$1.at:
                this.parseDecorators();

              case types$1._class:
                node = this.startNode();
                this.takeDecorators(node);
                return this.parseClass(node, false);

              case types$1._new:
                return this.parseNewOrNewTarget();

              case types$1.backQuote:
                return this.parseTemplate(false);

              case types$1.doubleColon: {
                node = this.startNode();
                this.next();
                node.object = null;
                const callee = (node.callee = this.parseNoCallExpr());

                if (callee.type === "MemberExpression") {
                  return this.finishNode(node, "BindExpression");
                } else {
                  throw this.raise(callee.start, ErrorMessages.UnsupportedBind);
                }
              }

              case types$1.privateName: {
                const { value, start } = this.state;
                node = this.parsePrivateName();

                if (this.match(types$1._in)) {
                  this.classScope.usePrivateName(value, start);
                } else {
                  this.raise(start, ErrorMessages.PrivateInExpectedIn, value);
                }

                return node;
              }

              case types$1.moduloAssign:
                if (
                  this.getPluginOption("pipelineOperator", "proposal") ===
                    "hack" &&
                  this.getPluginOption("pipelineOperator", "topicToken") === "%"
                ) {
                  this.state.value = "%";
                  this.state.type = types$1.modulo;
                  this.state.pos--;
                  this.state.end--;
                  this.state.endLoc.column--;
                } else {
                  throw this.unexpected();
                }

              case types$1.modulo:
              case types$1.hash: {
                const pipeProposal = this.getPluginOption(
                  "pipelineOperator",
                  "proposal"
                );

                if (pipeProposal) {
                  node = this.startNode();
                  const start = this.state.start;
                  const tokenType = this.state.type;
                  this.next();
                  return this.finishTopicReference(
                    node,
                    start,
                    pipeProposal,
                    tokenType
                  );
                }
              }

              case types$1.relational: {
                if (this.state.value === "<") {
                  const lookaheadCh = this.input.codePointAt(
                    this.nextTokenStart()
                  );

                  if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
                    this.expectOnePlugin(["jsx", "flow", "typescript"]);
                  }
                }
              }

              default:
                throw this.unexpected();
            }
          }

          finishTopicReference(node, start, pipeProposal, tokenType) {
            if (
              this.testTopicReferenceConfiguration(
                pipeProposal,
                start,
                tokenType
              )
            ) {
              let nodeType;

              if (pipeProposal === "smart") {
                nodeType = "PipelinePrimaryTopicReference";
              } else {
                nodeType = "TopicReference";
              }

              if (!this.topicReferenceIsAllowedInCurrentContext()) {
                if (pipeProposal === "smart") {
                  this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);
                } else {
                  this.raise(start, ErrorMessages.PipeTopicUnbound);
                }
              }

              this.registerTopicReference();
              return this.finishNode(node, nodeType);
            } else {
              throw this.raise(
                start,
                ErrorMessages.PipeTopicUnconfiguredToken,
                tokenType.label
              );
            }
          }

          testTopicReferenceConfiguration(pipeProposal, start, tokenType) {
            switch (pipeProposal) {
              case "hack": {
                const pluginTopicToken = this.getPluginOption(
                  "pipelineOperator",
                  "topicToken"
                );
                return tokenType.label === pluginTopicToken;
              }

              case "smart":
                return tokenType === types$1.hash;

              default:
                throw this.raise(
                  start,
                  ErrorMessages.PipeTopicRequiresHackPipes
                );
            }
          }

          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            this.prodParam.exit();

            if (this.hasPrecedingLineBreak()) {
              this.raise(
                this.state.pos,
                ErrorMessages.LineTerminatorBeforeArrow
              );
            }

            this.expect(types$1.arrow);
            this.parseArrowExpression(node, params, true);
            return node;
          }

          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions");

            if (isAsync) {
              this.expectPlugin("asyncDoExpressions");
            }

            node.async = isAsync;
            this.next();
            const oldLabels = this.state.labels;
            this.state.labels = [];

            if (isAsync) {
              this.prodParam.enter(PARAM_AWAIT);
              node.body = this.parseBlock();
              this.prodParam.exit();
            } else {
              node.body = this.parseBlock();
            }

            this.state.labels = oldLabels;
            return this.finishNode(node, "DoExpression");
          }

          parseSuper() {
            const node = this.startNode();
            this.next();

            if (
              this.match(types$1.parenL) &&
              !this.scope.allowDirectSuper &&
              !this.options.allowSuperOutsideMethod
            ) {
              this.raise(node.start, ErrorMessages.SuperNotAllowed);
            } else if (
              !this.scope.allowSuper &&
              !this.options.allowSuperOutsideMethod
            ) {
              this.raise(node.start, ErrorMessages.UnexpectedSuper);
            }

            if (
              !this.match(types$1.parenL) &&
              !this.match(types$1.bracketL) &&
              !this.match(types$1.dot)
            ) {
              this.raise(node.start, ErrorMessages.UnsupportedSuper);
            }

            return this.finishNode(node, "Super");
          }

          parseMaybePrivateName(isPrivateNameAllowed) {
            const isPrivate = this.match(types$1.privateName);

            if (isPrivate) {
              if (!isPrivateNameAllowed) {
                this.raise(
                  this.state.start + 1,
                  ErrorMessages.UnexpectedPrivateField
                );
              }

              return this.parsePrivateName();
            } else {
              return this.parseIdentifier(true);
            }
          }

          parsePrivateName() {
            const node = this.startNode();
            const id = this.startNodeAt(
              this.state.start + 1,
              new Position(
                this.state.curLine,
                this.state.start + 1 - this.state.lineStart
              )
            );
            const name = this.state.value;
            this.next();
            node.id = this.createIdentifier(id, name);
            return this.finishNode(node, "PrivateName");
          }

          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            this.next();

            if (this.prodParam.hasYield && this.match(types$1.dot)) {
              const meta = this.createIdentifier(
                this.startNodeAtNode(node),
                "function"
              );
              this.next();
              return this.parseMetaProperty(node, meta, "sent");
            }

            return this.parseFunction(node);
          }

          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;

            if (meta.name === "function" && propertyName === "sent") {
              if (this.isContextual(propertyName)) {
                this.expectPlugin("functionSent");
              } else if (!this.hasPlugin("functionSent")) {
                this.unexpected();
              }
            }

            const containsEsc = this.state.containsEsc;
            node.property = this.parseIdentifier(true);

            if (node.property.name !== propertyName || containsEsc) {
              this.raise(
                node.property.start,
                ErrorMessages.UnsupportedMetaProperty,
                meta.name,
                propertyName
              );
            }

            return this.finishNode(node, "MetaProperty");
          }

          parseImportMetaProperty(node) {
            const id = this.createIdentifier(
              this.startNodeAtNode(node),
              "import"
            );
            this.next();

            if (this.isContextual("meta")) {
              if (!this.inModule) {
                this.raise(
                  id.start,
                  SourceTypeModuleErrorMessages.ImportMetaOutsideModule
                );
              }

              this.sawUnambiguousESM = true;
            }

            return this.parseMetaProperty(node, id, "meta");
          }

          parseLiteralAtNode(value, type, node) {
            this.addExtra(node, "rawValue", value);
            this.addExtra(
              node,
              "raw",
              this.input.slice(node.start, this.state.end)
            );
            node.value = value;
            this.next();
            return this.finishNode(node, type);
          }

          parseLiteral(value, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value, type, node);
          }

          parseStringLiteral(value) {
            return this.parseLiteral(value, "StringLiteral");
          }

          parseNumericLiteral(value) {
            return this.parseLiteral(value, "NumericLiteral");
          }

          parseBigIntLiteral(value) {
            return this.parseLiteral(value, "BigIntLiteral");
          }

          parseDecimalLiteral(value) {
            return this.parseLiteral(value, "DecimalLiteral");
          }

          parseRegExpLiteral(value) {
            const node = this.parseLiteral(value.value, "RegExpLiteral");
            node.pattern = value.pattern;
            node.flags = value.flags;
            return node;
          }

          parseBooleanLiteral(value) {
            const node = this.startNode();
            node.value = value;
            this.next();
            return this.finishNode(node, "BooleanLiteral");
          }

          parseNullLiteral() {
            const node = this.startNode();
            this.next();
            return this.finishNode(node, "NullLiteral");
          }

          parseParenAndDistinguishExpression(canBeArrow) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            let val;
            this.next();
            this.expressionScope.enter(newArrowHeadScope());
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            const oldInFSharpPipelineDirectBody =
              this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true;
            this.state.inFSharpPipelineDirectBody = false;
            const innerStartPos = this.state.start;
            const innerStartLoc = this.state.startLoc;
            const exprList = [];
            const refExpressionErrors = new ExpressionErrors();
            let first = true;
            let spreadStart;
            let optionalCommaStart;

            while (!this.match(types$1.parenR)) {
              if (first) {
                first = false;
              } else {
                this.expect(
                  types$1.comma,
                  refExpressionErrors.optionalParameters === -1
                    ? null
                    : refExpressionErrors.optionalParameters
                );

                if (this.match(types$1.parenR)) {
                  optionalCommaStart = this.state.start;
                  break;
                }
              }

              if (this.match(types$1.ellipsis)) {
                const spreadNodeStartPos = this.state.start;
                const spreadNodeStartLoc = this.state.startLoc;
                spreadStart = this.state.start;
                exprList.push(
                  this.parseParenItem(
                    this.parseRestBinding(),
                    spreadNodeStartPos,
                    spreadNodeStartLoc
                  )
                );
                this.checkCommaAfterRest(41);
                break;
              } else {
                exprList.push(
                  this.parseMaybeAssignAllowIn(
                    refExpressionErrors,
                    this.parseParenItem
                  )
                );
              }
            }

            const innerEndPos = this.state.lastTokEnd;
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(types$1.parenR);
            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            this.state.inFSharpPipelineDirectBody =
              oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startPos, startLoc);

            if (
              canBeArrow &&
              this.shouldParseArrow(exprList) &&
              (arrowNode = this.parseArrow(arrowNode))
            ) {
              this.expressionScope.validateAsPattern();
              this.expressionScope.exit();
              this.parseArrowExpression(arrowNode, exprList, false);
              return arrowNode;
            }

            this.expressionScope.exit();

            if (!exprList.length) {
              this.unexpected(this.state.lastTokStart);
            }

            if (optionalCommaStart) this.unexpected(optionalCommaStart);
            if (spreadStart) this.unexpected(spreadStart);
            this.checkExpressionErrors(refExpressionErrors, true);
            this.toReferencedListDeep(exprList, true);

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNode(val, "SequenceExpression");
              val.end = innerEndPos;
              val.loc.end = innerEndLoc;
            } else {
              val = exprList[0];
            }

            if (!this.options.createParenthesizedExpressions) {
              this.addExtra(val, "parenthesized", true);
              this.addExtra(val, "parenStart", startPos);
              return val;
            }

            const parenExpression = this.startNodeAt(startPos, startLoc);
            parenExpression.expression = val;
            this.finishNode(parenExpression, "ParenthesizedExpression");
            return parenExpression;
          }

          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }

          parseArrow(node) {
            if (this.eat(types$1.arrow)) {
              return node;
            }
          }

          parseParenItem(node, startPos, startLoc) {
            return node;
          }

          parseNewOrNewTarget() {
            const node = this.startNode();
            this.next();

            if (this.match(types$1.dot)) {
              const meta = this.createIdentifier(
                this.startNodeAtNode(node),
                "new"
              );
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");

              if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
                this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);
              }

              return metaProp;
            }

            return this.parseNew(node);
          }

          parseNew(node) {
            node.callee = this.parseNoCallExpr();

            if (node.callee.type === "Import") {
              this.raise(
                node.callee.start,
                ErrorMessages.ImportCallNotNewExpression
              );
            } else if (this.isOptionalChain(node.callee)) {
              this.raise(
                this.state.lastTokEnd,
                ErrorMessages.OptionalChainingNoNew
              );
            } else if (this.eat(types$1.questionDot)) {
              this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);
            }

            this.parseNewArguments(node);
            return this.finishNode(node, "NewExpression");
          }

          parseNewArguments(node) {
            if (this.eat(types$1.parenL)) {
              const args = this.parseExprList(types$1.parenR);
              this.toReferencedList(args);
              node.arguments = args;
            } else {
              node.arguments = [];
            }
          }

          parseTemplateElement(isTagged) {
            const elem = this.startNode();

            if (this.state.value === null) {
              if (!isTagged) {
                this.raise(
                  this.state.start + 1,
                  ErrorMessages.InvalidEscapeSequenceTemplate
                );
              }
            }

            elem.value = {
              raw: this.input
                .slice(this.state.start, this.state.end)
                .replace(/\r\n?/g, "\n"),
              cooked: this.state.value,
            };
            this.next();
            elem.tail = this.match(types$1.backQuote);
            return this.finishNode(elem, "TemplateElement");
          }

          parseTemplate(isTagged) {
            const node = this.startNode();
            this.next();
            node.expressions = [];
            let curElt = this.parseTemplateElement(isTagged);
            node.quasis = [curElt];

            while (!curElt.tail) {
              this.expect(types$1.dollarBraceL);
              node.expressions.push(this.parseTemplateSubstitution());
              this.expect(types$1.braceR);
              node.quasis.push((curElt = this.parseTemplateElement(isTagged)));
            }

            this.next();
            return this.finishNode(node, "TemplateLiteral");
          }

          parseTemplateSubstitution() {
            return this.parseExpression();
          }

          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            if (isRecord) {
              this.expectPlugin("recordAndTuple");
            }

            const oldInFSharpPipelineDirectBody =
              this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = Object.create(null);
            let first = true;
            const node = this.startNode();
            node.properties = [];
            this.next();

            while (!this.match(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types$1.comma);

                if (this.match(close)) {
                  this.addExtra(node, "trailingComma", this.state.lastTokStart);
                  break;
                }
              }

              const prop = this.parsePropertyDefinition(
                isPattern,
                refExpressionErrors
              );

              if (!isPattern) {
                this.checkProto(prop, isRecord, propHash, refExpressionErrors);
              }

              if (
                isRecord &&
                !this.isObjectProperty(prop) &&
                prop.type !== "SpreadElement"
              ) {
                this.raise(prop.start, ErrorMessages.InvalidRecordProperty);
              }

              if (prop.shorthand) {
                this.addExtra(prop, "shorthand", true);
              }

              node.properties.push(prop);
            }

            this.next();
            this.state.inFSharpPipelineDirectBody =
              oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";

            if (isPattern) {
              type = "ObjectPattern";
            } else if (isRecord) {
              type = "RecordExpression";
            }

            return this.finishNode(node, type);
          }

          maybeAsyncOrAccessorProp(prop) {
            return (
              !prop.computed &&
              prop.key.type === "Identifier" &&
              (this.isLiteralPropertyName() ||
                this.match(types$1.bracketL) ||
                this.match(types$1.star))
            );
          }

          parsePropertyDefinition(isPattern, refExpressionErrors) {
            let decorators = [];

            if (this.match(types$1.at)) {
              if (this.hasPlugin("decorators")) {
                this.raise(
                  this.state.start,
                  ErrorMessages.UnsupportedPropertyDecorator
                );
              }

              while (this.match(types$1.at)) {
                decorators.push(this.parseDecorator());
              }
            }

            const prop = this.startNode();
            let isGenerator = false;
            let isAsync = false;
            let isAccessor = false;
            let startPos;
            let startLoc;

            if (this.match(types$1.ellipsis)) {
              if (decorators.length) this.unexpected();

              if (isPattern) {
                this.next();
                prop.argument = this.parseIdentifier();
                this.checkCommaAfterRest(125);
                return this.finishNode(prop, "RestElement");
              }

              return this.parseSpread();
            }

            if (decorators.length) {
              prop.decorators = decorators;
              decorators = [];
            }

            prop.method = false;

            if (isPattern || refExpressionErrors) {
              startPos = this.state.start;
              startLoc = this.state.startLoc;
            }

            if (!isPattern) {
              isGenerator = this.eat(types$1.star);
            }

            const containsEsc = this.state.containsEsc;
            const key = this.parsePropertyName(prop, false);

            if (
              !isPattern &&
              !isGenerator &&
              !containsEsc &&
              this.maybeAsyncOrAccessorProp(prop)
            ) {
              const keyName = key.name;

              if (keyName === "async" && !this.hasPrecedingLineBreak()) {
                isAsync = true;
                this.resetPreviousNodeTrailingComments(key);
                isGenerator = this.eat(types$1.star);
                this.parsePropertyName(prop, false);
              }

              if (keyName === "get" || keyName === "set") {
                isAccessor = true;
                this.resetPreviousNodeTrailingComments(key);
                prop.kind = keyName;

                if (this.match(types$1.star)) {
                  isGenerator = true;
                  this.raise(
                    this.state.pos,
                    ErrorMessages.AccessorIsGenerator,
                    keyName
                  );
                  this.next();
                }

                this.parsePropertyName(prop, false);
              }
            }

            this.parseObjPropValue(
              prop,
              startPos,
              startLoc,
              isGenerator,
              isAsync,
              isPattern,
              isAccessor,
              refExpressionErrors
            );
            return prop;
          }

          getGetterSetterExpectedParamCount(method) {
            return method.kind === "get" ? 0 : 1;
          }

          getObjectOrClassMethodParams(method) {
            return method.params;
          }

          checkGetterSetterParams(method) {
            var _params;

            const paramCount = this.getGetterSetterExpectedParamCount(method);
            const params = this.getObjectOrClassMethodParams(method);
            const start = method.start;

            if (params.length !== paramCount) {
              if (method.kind === "get") {
                this.raise(start, ErrorMessages.BadGetterArity);
              } else {
                this.raise(start, ErrorMessages.BadSetterArity);
              }
            }

            if (
              method.kind === "set" &&
              ((_params = params[params.length - 1]) == null
                ? void 0
                : _params.type) === "RestElement"
            ) {
              this.raise(start, ErrorMessages.BadSetterRestParameter);
            }
          }

          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              this.parseMethod(
                prop,
                isGenerator,
                false,
                false,
                false,
                "ObjectMethod"
              );
              this.checkGetterSetterParams(prop);
              return prop;
            }

            if (isAsync || isGenerator || this.match(types$1.parenL)) {
              if (isPattern) this.unexpected();
              prop.kind = "method";
              prop.method = true;
              return this.parseMethod(
                prop,
                isGenerator,
                isAsync,
                false,
                false,
                "ObjectMethod"
              );
            }
          }

          parseObjectProperty(
            prop,
            startPos,
            startLoc,
            isPattern,
            refExpressionErrors
          ) {
            prop.shorthand = false;

            if (this.eat(types$1.colon)) {
              prop.value = isPattern
                ? this.parseMaybeDefault(this.state.start, this.state.startLoc)
                : this.parseMaybeAssignAllowIn(refExpressionErrors);
              return this.finishNode(prop, "ObjectProperty");
            }

            if (!prop.computed && prop.key.type === "Identifier") {
              this.checkReservedWord(
                prop.key.name,
                prop.key.start,
                true,
                false
              );

              if (isPattern) {
                prop.value = this.parseMaybeDefault(
                  startPos,
                  startLoc,
                  cloneIdentifier(prop.key)
                );
              } else if (this.match(types$1.eq) && refExpressionErrors) {
                if (refExpressionErrors.shorthandAssign === -1) {
                  refExpressionErrors.shorthandAssign = this.state.start;
                }

                prop.value = this.parseMaybeDefault(
                  startPos,
                  startLoc,
                  cloneIdentifier(prop.key)
                );
              } else {
                prop.value = cloneIdentifier(prop.key);
              }

              prop.shorthand = true;
              return this.finishNode(prop, "ObjectProperty");
            }
          }

          parseObjPropValue(
            prop,
            startPos,
            startLoc,
            isGenerator,
            isAsync,
            isPattern,
            isAccessor,
            refExpressionErrors
          ) {
            const node =
              this.parseObjectMethod(
                prop,
                isGenerator,
                isAsync,
                isPattern,
                isAccessor
              ) ||
              this.parseObjectProperty(
                prop,
                startPos,
                startLoc,
                isPattern,
                refExpressionErrors
              );
            if (!node) this.unexpected();
            return node;
          }

          parsePropertyName(prop, isPrivateNameAllowed) {
            if (this.eat(types$1.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssignAllowIn();
              this.expect(types$1.bracketR);
            } else {
              const oldInPropertyName = this.state.inPropertyName;
              this.state.inPropertyName = true;
              const type = this.state.type;
              prop.key =
                type === types$1.num ||
                type === types$1.string ||
                type === types$1.bigint ||
                type === types$1.decimal
                  ? this.parseExprAtom()
                  : this.parseMaybePrivateName(isPrivateNameAllowed);

              if (type !== types$1.privateName) {
                prop.computed = false;
              }

              this.state.inPropertyName = oldInPropertyName;
            }

            return prop.key;
          }

          initFunction(node, isAsync) {
            node.id = null;
            node.generator = false;
            node.async = !!isAsync;
          }

          parseMethod(
            node,
            isGenerator,
            isAsync,
            isConstructor,
            allowDirectSuper,
            type,
            inClassScope = false
          ) {
            this.initFunction(node, isAsync);
            node.generator = !!isGenerator;
            const allowModifiers = isConstructor;
            this.scope.enter(
              SCOPE_FUNCTION |
                SCOPE_SUPER |
                (inClassScope ? SCOPE_CLASS : 0) |
                (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0)
            );
            this.prodParam.enter(functionFlags(isAsync, node.generator));
            this.parseFunctionParams(node, allowModifiers);
            this.parseFunctionBodyAndFinish(node, type, true);
            this.prodParam.exit();
            this.scope.exit();
            return node;
          }

          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            if (isTuple) {
              this.expectPlugin("recordAndTuple");
            }

            const oldInFSharpPipelineDirectBody =
              this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            this.next();
            node.elements = this.parseExprList(
              close,
              !isTuple,
              refExpressionErrors,
              node
            );
            this.state.inFSharpPipelineDirectBody =
              oldInFSharpPipelineDirectBody;
            return this.finishNode(
              node,
              isTuple ? "TupleExpression" : "ArrayExpression"
            );
          }

          parseArrowExpression(node, params, isAsync, trailingCommaPos) {
            this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
            let flags = functionFlags(isAsync, false);

            if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {
              flags |= PARAM_IN;
            }

            this.prodParam.enter(flags);
            this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;

            if (params) {
              this.state.maybeInArrowParameters = true;
              this.setArrowFunctionParameters(node, params, trailingCommaPos);
            }

            this.state.maybeInArrowParameters = false;
            this.parseFunctionBody(node, true);
            this.prodParam.exit();
            this.scope.exit();
            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            return this.finishNode(node, "ArrowFunctionExpression");
          }

          setArrowFunctionParameters(node, params, trailingCommaPos) {
            node.params = this.toAssignableList(
              params,
              trailingCommaPos,
              false
            );
          }

          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.parseFunctionBody(node, false, isMethod);
            this.finishNode(node, type);
          }

          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(types$1.braceL);
            this.expressionScope.enter(newExpressionScope());

            if (isExpression) {
              node.body = this.parseMaybeAssign();
              this.checkParams(node, false, allowExpression, false);
            } else {
              const oldStrict = this.state.strict;
              const oldLabels = this.state.labels;
              this.state.labels = [];
              this.prodParam.enter(
                this.prodParam.currentFlags() | PARAM_RETURN
              );
              node.body = this.parseBlock(
                true,
                false,
                (hasStrictModeDirective) => {
                  const nonSimple = !this.isSimpleParamList(node.params);

                  if (hasStrictModeDirective && nonSimple) {
                    const errorPos =
                      (node.kind === "method" || node.kind === "constructor") &&
                      !!node.key
                        ? node.key.end
                        : node.start;
                    this.raise(
                      errorPos,
                      ErrorMessages.IllegalLanguageModeDirective
                    );
                  }

                  const strictModeChanged = !oldStrict && this.state.strict;
                  this.checkParams(
                    node,
                    !this.state.strict &&
                      !allowExpression &&
                      !isMethod &&
                      !nonSimple,
                    allowExpression,
                    strictModeChanged
                  );

                  if (this.state.strict && node.id) {
                    this.checkLVal(
                      node.id,
                      "function name",
                      BIND_OUTSIDE,
                      undefined,
                      undefined,
                      strictModeChanged
                    );
                  }
                }
              );
              this.prodParam.exit();
              this.expressionScope.exit();
              this.state.labels = oldLabels;
            }
          }

          isSimpleParamList(params) {
            for (let i = 0, len = params.length; i < len; i++) {
              if (params[i].type !== "Identifier") return false;
            }

            return true;
          }

          checkParams(
            node,
            allowDuplicates,
            isArrowFunction,
            strictModeChanged = true
          ) {
            const checkClashes = new Set();

            for (const param of node.params) {
              this.checkLVal(
                param,
                "function parameter list",
                BIND_VAR,
                allowDuplicates ? null : checkClashes,
                undefined,
                strictModeChanged
              );
            }
          }

          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types$1.comma);

                if (this.match(close)) {
                  if (nodeForExtra) {
                    this.addExtra(
                      nodeForExtra,
                      "trailingComma",
                      this.state.lastTokStart
                    );
                  }

                  this.next();
                  break;
                }
              }

              elts.push(
                this.parseExprListItem(allowEmpty, refExpressionErrors)
              );
            }

            return elts;
          }

          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;

            if (this.match(types$1.comma)) {
              if (!allowEmpty) {
                this.raise(this.state.pos, ErrorMessages.UnexpectedToken, ",");
              }

              elt = null;
            } else if (this.match(types$1.ellipsis)) {
              const spreadNodeStartPos = this.state.start;
              const spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(
                this.parseSpread(refExpressionErrors),
                spreadNodeStartPos,
                spreadNodeStartLoc
              );
            } else if (this.match(types$1.question)) {
              this.expectPlugin("partialApplication");

              if (!allowPlaceholder) {
                this.raise(
                  this.state.start,
                  ErrorMessages.UnexpectedArgumentPlaceholder
                );
              }

              const node = this.startNode();
              this.next();
              elt = this.finishNode(node, "ArgumentPlaceholder");
            } else {
              elt = this.parseMaybeAssignAllowIn(
                refExpressionErrors,
                this.parseParenItem
              );
            }

            return elt;
          }

          parseIdentifier(liberal) {
            const node = this.startNode();
            const name = this.parseIdentifierName(node.start, liberal);
            return this.createIdentifier(node, name);
          }

          createIdentifier(node, name) {
            node.name = name;
            node.loc.identifierName = name;
            return this.finishNode(node, "Identifier");
          }

          parseIdentifierName(pos, liberal) {
            let name;
            const { start, type } = this.state;

            if (type === types$1.name) {
              name = this.state.value;
            } else if (type.keyword) {
              name = type.keyword;
            } else {
              throw this.unexpected();
            }

            if (liberal) {
              this.state.type = types$1.name;
            } else {
              this.checkReservedWord(name, start, !!type.keyword, false);
            }

            this.next();
            return name;
          }

          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10) {
              return;
            }

            if (!canBeReservedWord(word)) {
              return;
            }

            if (word === "yield") {
              if (this.prodParam.hasYield) {
                this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);
                return;
              }
            } else if (word === "await") {
              if (this.prodParam.hasAwait) {
                this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);
                return;
              } else if (this.scope.inStaticBlock) {
                this.raise(
                  startLoc,
                  ErrorMessages.AwaitBindingIdentifierInStaticBlock
                );
                return;
              } else {
                this.expressionScope.recordAsyncArrowParametersError(
                  startLoc,
                  ErrorMessages.AwaitBindingIdentifier
                );
              }
            } else if (word === "arguments") {
              if (this.scope.inClassAndNotInNonArrowFunction) {
                this.raise(startLoc, ErrorMessages.ArgumentsInClass);
                return;
              }
            }

            if (checkKeywords && isKeyword(word)) {
              this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);
              return;
            }

            const reservedTest = !this.state.strict
              ? isReservedWord
              : isBinding
              ? isStrictBindReservedWord
              : isStrictReservedWord;

            if (reservedTest(word, this.inModule)) {
              this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);
            }
          }

          isAwaitAllowed() {
            if (this.prodParam.hasAwait) return true;

            if (
              this.options.allowAwaitOutsideFunction &&
              !this.scope.inFunction
            ) {
              return true;
            }

            return false;
          }

          parseAwait(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            this.expressionScope.recordParameterInitializerError(
              node.start,
              ErrorMessages.AwaitExpressionFormalParameter
            );

            if (this.eat(types$1.star)) {
              this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);
            }

            if (
              !this.scope.inFunction &&
              !this.options.allowAwaitOutsideFunction
            ) {
              if (this.isAmbiguousAwait()) {
                this.ambiguousScriptDifferentAst = true;
              } else {
                this.sawUnambiguousESM = true;
              }
            }

            if (!this.state.soloAwait) {
              node.argument = this.parseMaybeUnary(null, true);
            }

            return this.finishNode(node, "AwaitExpression");
          }

          isAmbiguousAwait() {
            return (
              this.hasPrecedingLineBreak() ||
              this.match(types$1.plusMin) ||
              this.match(types$1.parenL) ||
              this.match(types$1.bracketL) ||
              this.match(types$1.backQuote) ||
              this.match(types$1.regexp) ||
              this.match(types$1.slash) ||
              (this.hasPlugin("v8intrinsic") && this.match(types$1.modulo))
            );
          }

          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(
              node.start,
              ErrorMessages.YieldInParameter
            );
            this.next();
            let delegating = false;
            let argument = null;

            if (!this.hasPrecedingLineBreak()) {
              delegating = this.eat(types$1.star);

              switch (this.state.type) {
                case types$1.semi:
                case types$1.eof:
                case types$1.braceR:
                case types$1.parenR:
                case types$1.bracketR:
                case types$1.braceBarR:
                case types$1.colon:
                case types$1.comma:
                  if (!delegating) break;

                default:
                  argument = this.parseMaybeAssign();
              }
            }

            node.delegate = delegating;
            node.argument = argument;
            return this.finishNode(node, "YieldExpression");
          }

          checkPipelineAtInfixOperator(left, leftStartPos) {
            if (
              this.getPluginOption("pipelineOperator", "proposal") === "smart"
            ) {
              if (left.type === "SequenceExpression") {
                this.raise(
                  leftStartPos,
                  ErrorMessages.PipelineHeadSequenceExpression
                );
              }
            }
          }

          checkHackPipeBodyEarlyErrors(startPos) {
            if (this.match(types$1.arrow)) {
              throw this.raise(
                this.state.start,
                ErrorMessages.PipeBodyIsTighter,
                types$1.arrow.label
              );
            } else if (!this.topicReferenceWasUsedInCurrentContext()) {
              this.raise(startPos, ErrorMessages.PipeTopicUnused);
            }
          }

          parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
            const bodyNode = this.startNodeAt(startPos, startLoc);

            if (this.isSimpleReference(childExpr)) {
              bodyNode.callee = childExpr;
              return this.finishNode(bodyNode, "PipelineBareFunction");
            } else {
              this.checkSmartPipeTopicBodyEarlyErrors(startPos);
              bodyNode.expression = childExpr;
              return this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }

          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return (
                  !expression.computed &&
                  this.isSimpleReference(expression.object)
                );

              case "Identifier":
                return true;

              default:
                return false;
            }
          }

          checkSmartPipeTopicBodyEarlyErrors(startPos) {
            if (this.match(types$1.arrow)) {
              throw this.raise(
                this.state.start,
                ErrorMessages.PipelineBodyNoArrow
              );
            } else if (!this.topicReferenceWasUsedInCurrentContext()) {
              this.raise(startPos, ErrorMessages.PipelineTopicUnused);
            }
          }

          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = {
              maxNumOfResolvableTopics: 1,
              maxTopicIndex: null,
            };

            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }

          withSmartMixTopicForbiddingContext(callback) {
            const proposal = this.getPluginOption(
              "pipelineOperator",
              "proposal"
            );

            if (proposal === "smart") {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = {
                maxNumOfResolvableTopics: 0,
                maxTopicIndex: null,
              };

              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            } else {
              return callback();
            }
          }

          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;

            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }

          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            const prodParamToSet = PARAM_IN & ~flags;

            if (prodParamToSet) {
              this.prodParam.enter(flags | PARAM_IN);

              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }

            return callback();
          }

          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            const prodParamToClear = PARAM_IN & flags;

            if (prodParamToClear) {
              this.prodParam.enter(flags & ~PARAM_IN);

              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }

            return callback();
          }

          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }

          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }

          topicReferenceWasUsedInCurrentContext() {
            return (
              this.state.topicContext.maxTopicIndex != null &&
              this.state.topicContext.maxTopicIndex >= 0
            );
          }

          parseFSharpPipelineBody(prec) {
            const startPos = this.state.start;
            const startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody =
              this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(
              this.parseMaybeUnary(),
              startPos,
              startLoc,
              prec
            );
            this.state.inFSharpPipelineDirectBody =
              oldInFSharpPipelineDirectBody;
            return ret;
          }

          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next();
            this.eat(types$1.braceL);
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            const program = this.startNode();

            try {
              node.body = this.parseProgram(program, types$1.braceR, "module");
            } finally {
              revertScopes();
            }

            this.eat(types$1.braceR);
            return this.finishNode(node, "ModuleExpression");
          }
        }

        const loopLabel = {
            kind: "loop",
          },
          switchLabel = {
            kind: "switch",
          };
        const FUNC_NO_FLAGS = 0b000,
          FUNC_STATEMENT = 0b001,
          FUNC_HANGING_STATEMENT = 0b010,
          FUNC_NULLABLE_ID = 0b100;
        const loneSurrogate = /[\uD800-\uDFFF]/u;
        const keywordRelationalOperator = /in(?:stanceof)?/y;

        function babel7CompatTokens(tokens) {
          {
            for (let i = 0; i < tokens.length; i++) {
              const token = tokens[i];

              if (token.type === types$1.privateName) {
                const { loc, start, value, end } = token;
                const hashEndPos = start + 1;
                const hashEndLoc = new Position(
                  loc.start.line,
                  loc.start.column + 1
                );
                tokens.splice(
                  i,
                  1,
                  new Token({
                    type: types$1.hash,
                    value: "#",
                    start: start,
                    end: hashEndPos,
                    startLoc: loc.start,
                    endLoc: hashEndLoc,
                  }),
                  new Token({
                    type: types$1.name,
                    value: value,
                    start: hashEndPos,
                    end: end,
                    startLoc: hashEndLoc,
                    endLoc: loc.end,
                  })
                );
              }
            }
          }
          return tokens;
        }

        class StatementParser extends ExpressionParser {
          parseTopLevel(file, program) {
            file.program = this.parseProgram(program);
            file.comments = this.state.comments;
            if (this.options.tokens)
              file.tokens = babel7CompatTokens(this.tokens);
            return this.finishNode(file, "File");
          }

          parseProgram(
            program,
            end = types$1.eof,
            sourceType = this.options.sourceType
          ) {
            program.sourceType = sourceType;
            program.interpreter = this.parseInterpreterDirective();
            this.parseBlockBody(program, true, true, end);

            if (
              this.inModule &&
              !this.options.allowUndeclaredExports &&
              this.scope.undefinedExports.size > 0
            ) {
              for (const [name] of Array.from(this.scope.undefinedExports)) {
                const pos = this.scope.undefinedExports.get(name);
                this.raise(pos, ErrorMessages.ModuleExportUndefined, name);
              }
            }

            return this.finishNode(program, "Program");
          }

          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive";
            directive.value = directive.expression;
            delete directive.expression;
            const directiveLiteral = directive.value;
            const raw = this.input.slice(
              directiveLiteral.start,
              directiveLiteral.end
            );
            const val = (directiveLiteral.value = raw.slice(1, -1));
            this.addExtra(directiveLiteral, "raw", raw);
            this.addExtra(directiveLiteral, "rawValue", val);
            directiveLiteral.type = "DirectiveLiteral";
            return directive;
          }

          parseInterpreterDirective() {
            if (!this.match(types$1.interpreterDirective)) {
              return null;
            }

            const node = this.startNode();
            node.value = this.state.value;
            this.next();
            return this.finishNode(node, "InterpreterDirective");
          }

          isLet(context) {
            if (!this.isContextual("let")) {
              return false;
            }

            return this.isLetKeyword(context);
          }

          isLetKeyword(context) {
            const next = this.nextTokenStart();
            const nextCh = this.codePointAtPos(next);

            if (nextCh === 92 || nextCh === 91) {
              return true;
            }

            if (context) return false;
            if (nextCh === 123) return true;

            if (isIdentifierStart(nextCh)) {
              keywordRelationalOperator.lastIndex = next;

              if (keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(
                  keywordRelationalOperator.lastIndex
                );

                if (!isIdentifierChar(endCh) && endCh !== 92) {
                  return false;
                }
              }

              return true;
            }

            return false;
          }

          parseStatement(context, topLevel) {
            if (this.match(types$1.at)) {
              this.parseDecorators(true);
            }

            return this.parseStatementContent(context, topLevel);
          }

          parseStatementContent(context, topLevel) {
            let starttype = this.state.type;
            const node = this.startNode();
            let kind;

            if (this.isLet(context)) {
              starttype = types$1._var;
              kind = "let";
            }

            switch (starttype) {
              case types$1._break:
              case types$1._continue:
                return this.parseBreakContinueStatement(
                  node,
                  starttype.keyword
                );

              case types$1._debugger:
                return this.parseDebuggerStatement(node);

              case types$1._do:
                return this.parseDoStatement(node);

              case types$1._for:
                return this.parseForStatement(node);

              case types$1._function:
                if (this.lookaheadCharCode() === 46) break;

                if (context) {
                  if (this.state.strict) {
                    this.raise(this.state.start, ErrorMessages.StrictFunction);
                  } else if (context !== "if" && context !== "label") {
                    this.raise(this.state.start, ErrorMessages.SloppyFunction);
                  }
                }

                return this.parseFunctionStatement(node, false, !context);

              case types$1._class:
                if (context) this.unexpected();
                return this.parseClass(node, true);

              case types$1._if:
                return this.parseIfStatement(node);

              case types$1._return:
                return this.parseReturnStatement(node);

              case types$1._switch:
                return this.parseSwitchStatement(node);

              case types$1._throw:
                return this.parseThrowStatement(node);

              case types$1._try:
                return this.parseTryStatement(node);

              case types$1._const:
              case types$1._var:
                kind = kind || this.state.value;

                if (context && kind !== "var") {
                  this.raise(
                    this.state.start,
                    ErrorMessages.UnexpectedLexicalDeclaration
                  );
                }

                return this.parseVarStatement(node, kind);

              case types$1._while:
                return this.parseWhileStatement(node);

              case types$1._with:
                return this.parseWithStatement(node);

              case types$1.braceL:
                return this.parseBlock();

              case types$1.semi:
                return this.parseEmptyStatement(node);

              case types$1._import: {
                const nextTokenCharCode = this.lookaheadCharCode();

                if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
                  break;
                }
              }

              case types$1._export: {
                if (!this.options.allowImportExportEverywhere && !topLevel) {
                  this.raise(
                    this.state.start,
                    ErrorMessages.UnexpectedImportExport
                  );
                }

                this.next();
                let result;

                if (starttype === types$1._import) {
                  result = this.parseImport(node);

                  if (
                    result.type === "ImportDeclaration" &&
                    (!result.importKind || result.importKind === "value")
                  ) {
                    this.sawUnambiguousESM = true;
                  }
                } else {
                  result = this.parseExport(node);

                  if (
                    (result.type === "ExportNamedDeclaration" &&
                      (!result.exportKind || result.exportKind === "value")) ||
                    (result.type === "ExportAllDeclaration" &&
                      (!result.exportKind || result.exportKind === "value")) ||
                    result.type === "ExportDefaultDeclaration"
                  ) {
                    this.sawUnambiguousESM = true;
                  }
                }

                this.assertModuleNodeAllowed(node);
                return result;
              }

              default: {
                if (this.isAsyncFunction()) {
                  if (context) {
                    this.raise(
                      this.state.start,
                      ErrorMessages.AsyncFunctionInSingleStatementContext
                    );
                  }

                  this.next();
                  return this.parseFunctionStatement(node, true, !context);
                }
              }
            }

            const maybeName = this.state.value;
            const expr = this.parseExpression();

            if (
              starttype === types$1.name &&
              expr.type === "Identifier" &&
              this.eat(types$1.colon)
            ) {
              return this.parseLabeledStatement(node, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node, expr);
            }
          }

          assertModuleNodeAllowed(node) {
            if (!this.options.allowImportExportEverywhere && !this.inModule) {
              this.raise(
                node.start,
                SourceTypeModuleErrorMessages.ImportOutsideModule
              );
            }
          }

          takeDecorators(node) {
            const decorators =
              this.state.decoratorStack[this.state.decoratorStack.length - 1];

            if (decorators.length) {
              node.decorators = decorators;
              this.resetStartLocationFromNode(node, decorators[0]);
              this.state.decoratorStack[this.state.decoratorStack.length - 1] =
                [];
            }
          }

          canHaveLeadingDecorator() {
            return this.match(types$1._class);
          }

          parseDecorators(allowExport) {
            const currentContextDecorators =
              this.state.decoratorStack[this.state.decoratorStack.length - 1];

            while (this.match(types$1.at)) {
              const decorator = this.parseDecorator();
              currentContextDecorators.push(decorator);
            }

            if (this.match(types$1._export)) {
              if (!allowExport) {
                this.unexpected();
              }

              if (
                this.hasPlugin("decorators") &&
                !this.getPluginOption("decorators", "decoratorsBeforeExport")
              ) {
                this.raise(
                  this.state.start,
                  ErrorMessages.DecoratorExportClass
                );
              }
            } else if (!this.canHaveLeadingDecorator()) {
              throw this.raise(
                this.state.start,
                ErrorMessages.UnexpectedLeadingDecorator
              );
            }
          }

          parseDecorator() {
            this.expectOnePlugin(["decorators-legacy", "decorators"]);
            const node = this.startNode();
            this.next();

            if (this.hasPlugin("decorators")) {
              this.state.decoratorStack.push([]);
              const startPos = this.state.start;
              const startLoc = this.state.startLoc;
              let expr;

              if (this.eat(types$1.parenL)) {
                expr = this.parseExpression();
                this.expect(types$1.parenR);
              } else {
                expr = this.parseIdentifier(false);

                while (this.eat(types$1.dot)) {
                  const node = this.startNodeAt(startPos, startLoc);
                  node.object = expr;
                  node.property = this.parseIdentifier(true);
                  node.computed = false;
                  expr = this.finishNode(node, "MemberExpression");
                }
              }

              node.expression = this.parseMaybeDecoratorArguments(expr);
              this.state.decoratorStack.pop();
            } else {
              node.expression = this.parseExprSubscripts();
            }

            return this.finishNode(node, "Decorator");
          }

          parseMaybeDecoratorArguments(expr) {
            if (this.eat(types$1.parenL)) {
              const node = this.startNodeAtNode(expr);
              node.callee = expr;
              node.arguments = this.parseCallExpressionArguments(
                types$1.parenR,
                false
              );
              this.toReferencedList(node.arguments);
              return this.finishNode(node, "CallExpression");
            }

            return expr;
          }

          parseBreakContinueStatement(node, keyword) {
            const isBreak = keyword === "break";
            this.next();

            if (this.isLineTerminator()) {
              node.label = null;
            } else {
              node.label = this.parseIdentifier();
              this.semicolon();
            }

            this.verifyBreakContinue(node, keyword);
            return this.finishNode(
              node,
              isBreak ? "BreakStatement" : "ContinueStatement"
            );
          }

          verifyBreakContinue(node, keyword) {
            const isBreak = keyword === "break";
            let i;

            for (i = 0; i < this.state.labels.length; ++i) {
              const lab = this.state.labels[i];

              if (node.label == null || lab.name === node.label.name) {
                if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                if (node.label && isBreak) break;
              }
            }

            if (i === this.state.labels.length) {
              this.raise(
                node.start,
                ErrorMessages.IllegalBreakContinue,
                keyword
              );
            }
          }

          parseDebuggerStatement(node) {
            this.next();
            this.semicolon();
            return this.finishNode(node, "DebuggerStatement");
          }

          parseHeaderExpression() {
            this.expect(types$1.parenL);
            const val = this.parseExpression();
            this.expect(types$1.parenR);
            return val;
          }

          parseDoStatement(node) {
            this.next();
            this.state.labels.push(loopLabel);
            node.body = this.withSmartMixTopicForbiddingContext(() =>
              this.parseStatement("do")
            );
            this.state.labels.pop();
            this.expect(types$1._while);
            node.test = this.parseHeaderExpression();
            this.eat(types$1.semi);
            return this.finishNode(node, "DoWhileStatement");
          }

          parseForStatement(node) {
            this.next();
            this.state.labels.push(loopLabel);
            let awaitAt = -1;

            if (this.isAwaitAllowed() && this.eatContextual("await")) {
              awaitAt = this.state.lastTokStart;
            }

            this.scope.enter(SCOPE_OTHER);
            this.expect(types$1.parenL);

            if (this.match(types$1.semi)) {
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }

              return this.parseFor(node, null);
            }

            const startsWithLet = this.isContextual("let");
            const isLet = startsWithLet && this.isLetKeyword();

            if (
              this.match(types$1._var) ||
              this.match(types$1._const) ||
              isLet
            ) {
              const init = this.startNode();
              const kind = isLet ? "let" : this.state.value;
              this.next();
              this.parseVar(init, true, kind);
              this.finishNode(init, "VariableDeclaration");

              if (
                (this.match(types$1._in) || this.isContextual("of")) &&
                init.declarations.length === 1
              ) {
                return this.parseForIn(node, init, awaitAt);
              }

              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }

              return this.parseFor(node, init);
            }

            const startsWithUnescapedName =
              this.match(types$1.name) && !this.state.containsEsc;
            const refExpressionErrors = new ExpressionErrors();
            const init = this.parseExpression(true, refExpressionErrors);
            const isForOf = this.isContextual("of");

            if (isForOf) {
              if (startsWithLet) {
                this.raise(init.start, ErrorMessages.ForOfLet);
              } else if (
                awaitAt === -1 &&
                startsWithUnescapedName &&
                init.type === "Identifier" &&
                init.name === "async"
              ) {
                this.raise(init.start, ErrorMessages.ForOfAsync);
              }
            }

            if (isForOf || this.match(types$1._in)) {
              this.toAssignable(init, true);
              const description = isForOf
                ? "for-of statement"
                : "for-in statement";
              this.checkLVal(init, description);
              return this.parseForIn(node, init, awaitAt);
            } else {
              this.checkExpressionErrors(refExpressionErrors, true);
            }

            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, init);
          }

          parseFunctionStatement(node, isAsync, declarationPosition) {
            this.next();
            return this.parseFunction(
              node,
              FUNC_STATEMENT |
                (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),
              isAsync
            );
          }

          parseIfStatement(node) {
            this.next();
            node.test = this.parseHeaderExpression();
            node.consequent = this.parseStatement("if");
            node.alternate = this.eat(types$1._else)
              ? this.parseStatement("if")
              : null;
            return this.finishNode(node, "IfStatement");
          }

          parseReturnStatement(node) {
            if (
              !this.prodParam.hasReturn &&
              !this.options.allowReturnOutsideFunction
            ) {
              this.raise(this.state.start, ErrorMessages.IllegalReturn);
            }

            this.next();

            if (this.isLineTerminator()) {
              node.argument = null;
            } else {
              node.argument = this.parseExpression();
              this.semicolon();
            }

            return this.finishNode(node, "ReturnStatement");
          }

          parseSwitchStatement(node) {
            this.next();
            node.discriminant = this.parseHeaderExpression();
            const cases = (node.cases = []);
            this.expect(types$1.braceL);
            this.state.labels.push(switchLabel);
            this.scope.enter(SCOPE_OTHER);
            let cur;

            for (let sawDefault; !this.match(types$1.braceR); ) {
              if (this.match(types$1._case) || this.match(types$1._default)) {
                const isCase = this.match(types$1._case);
                if (cur) this.finishNode(cur, "SwitchCase");
                cases.push((cur = this.startNode()));
                cur.consequent = [];
                this.next();

                if (isCase) {
                  cur.test = this.parseExpression();
                } else {
                  if (sawDefault) {
                    this.raise(
                      this.state.lastTokStart,
                      ErrorMessages.MultipleDefaultsInSwitch
                    );
                  }

                  sawDefault = true;
                  cur.test = null;
                }

                this.expect(types$1.colon);
              } else {
                if (cur) {
                  cur.consequent.push(this.parseStatement(null));
                } else {
                  this.unexpected();
                }
              }
            }

            this.scope.exit();
            if (cur) this.finishNode(cur, "SwitchCase");
            this.next();
            this.state.labels.pop();
            return this.finishNode(node, "SwitchStatement");
          }

          parseThrowStatement(node) {
            this.next();

            if (this.hasPrecedingLineBreak()) {
              this.raise(
                this.state.lastTokEnd,
                ErrorMessages.NewlineAfterThrow
              );
            }

            node.argument = this.parseExpression();
            this.semicolon();
            return this.finishNode(node, "ThrowStatement");
          }

          parseCatchClauseParam() {
            const param = this.parseBindingAtom();
            const simple = param.type === "Identifier";
            this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
            this.checkLVal(param, "catch clause", BIND_LEXICAL);
            return param;
          }

          parseTryStatement(node) {
            this.next();
            node.block = this.parseBlock();
            node.handler = null;

            if (this.match(types$1._catch)) {
              const clause = this.startNode();
              this.next();

              if (this.match(types$1.parenL)) {
                this.expect(types$1.parenL);
                clause.param = this.parseCatchClauseParam();
                this.expect(types$1.parenR);
              } else {
                clause.param = null;
                this.scope.enter(SCOPE_OTHER);
              }

              clause.body = this.withSmartMixTopicForbiddingContext(() =>
                this.parseBlock(false, false)
              );
              this.scope.exit();
              node.handler = this.finishNode(clause, "CatchClause");
            }

            node.finalizer = this.eat(types$1._finally)
              ? this.parseBlock()
              : null;

            if (!node.handler && !node.finalizer) {
              this.raise(node.start, ErrorMessages.NoCatchOrFinally);
            }

            return this.finishNode(node, "TryStatement");
          }

          parseVarStatement(node, kind) {
            this.next();
            this.parseVar(node, false, kind);
            this.semicolon();
            return this.finishNode(node, "VariableDeclaration");
          }

          parseWhileStatement(node) {
            this.next();
            node.test = this.parseHeaderExpression();
            this.state.labels.push(loopLabel);
            node.body = this.withSmartMixTopicForbiddingContext(() =>
              this.parseStatement("while")
            );
            this.state.labels.pop();
            return this.finishNode(node, "WhileStatement");
          }

          parseWithStatement(node) {
            if (this.state.strict) {
              this.raise(this.state.start, ErrorMessages.StrictWith);
            }

            this.next();
            node.object = this.parseHeaderExpression();
            node.body = this.withSmartMixTopicForbiddingContext(() =>
              this.parseStatement("with")
            );
            return this.finishNode(node, "WithStatement");
          }

          parseEmptyStatement(node) {
            this.next();
            return this.finishNode(node, "EmptyStatement");
          }

          parseLabeledStatement(node, maybeName, expr, context) {
            for (const label of this.state.labels) {
              if (label.name === maybeName) {
                this.raise(
                  expr.start,
                  ErrorMessages.LabelRedeclaration,
                  maybeName
                );
              }
            }

            const kind = this.state.type.isLoop
              ? "loop"
              : this.match(types$1._switch)
              ? "switch"
              : null;

            for (let i = this.state.labels.length - 1; i >= 0; i--) {
              const label = this.state.labels[i];

              if (label.statementStart === node.start) {
                label.statementStart = this.state.start;
                label.kind = kind;
              } else {
                break;
              }
            }

            this.state.labels.push({
              name: maybeName,
              kind: kind,
              statementStart: this.state.start,
            });
            node.body = this.parseStatement(
              context
                ? context.indexOf("label") === -1
                  ? context + "label"
                  : context
                : "label"
            );
            this.state.labels.pop();
            node.label = expr;
            return this.finishNode(node, "LabeledStatement");
          }

          parseExpressionStatement(node, expr) {
            node.expression = expr;
            this.semicolon();
            return this.finishNode(node, "ExpressionStatement");
          }

          parseBlock(
            allowDirectives = false,
            createNewLexicalScope = true,
            afterBlockParse
          ) {
            const node = this.startNode();

            if (allowDirectives) {
              this.state.strictErrors.clear();
            }

            this.expect(types$1.braceL);

            if (createNewLexicalScope) {
              this.scope.enter(SCOPE_OTHER);
            }

            this.parseBlockBody(
              node,
              allowDirectives,
              false,
              types$1.braceR,
              afterBlockParse
            );

            if (createNewLexicalScope) {
              this.scope.exit();
            }

            return this.finishNode(node, "BlockStatement");
          }

          isValidDirective(stmt) {
            return (
              stmt.type === "ExpressionStatement" &&
              stmt.expression.type === "StringLiteral" &&
              !stmt.expression.extra.parenthesized
            );
          }

          parseBlockBody(
            node,
            allowDirectives,
            topLevel,
            end,
            afterBlockParse
          ) {
            const body = (node.body = []);
            const directives = (node.directives = []);
            this.parseBlockOrModuleBlockBody(
              body,
              allowDirectives ? directives : undefined,
              topLevel,
              end,
              afterBlockParse
            );
          }

          parseBlockOrModuleBlockBody(
            body,
            directives,
            topLevel,
            end,
            afterBlockParse
          ) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false;
            let parsedNonDirective = false;

            while (!this.match(end)) {
              const stmt = this.parseStatement(null, topLevel);

              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive);

                  if (
                    !hasStrictModeDirective &&
                    directive.value.value === "use strict"
                  ) {
                    hasStrictModeDirective = true;
                    this.setStrict(true);
                  }

                  continue;
                }

                parsedNonDirective = true;
                this.state.strictErrors.clear();
              }

              body.push(stmt);
            }

            if (afterBlockParse) {
              afterBlockParse.call(this, hasStrictModeDirective);
            }

            if (!oldStrict) {
              this.setStrict(false);
            }

            this.next();
          }

          parseFor(node, init) {
            node.init = init;
            this.semicolon(false);
            node.test = this.match(types$1.semi)
              ? null
              : this.parseExpression();
            this.semicolon(false);
            node.update = this.match(types$1.parenR)
              ? null
              : this.parseExpression();
            this.expect(types$1.parenR);
            node.body = this.withSmartMixTopicForbiddingContext(() =>
              this.parseStatement("for")
            );
            this.scope.exit();
            this.state.labels.pop();
            return this.finishNode(node, "ForStatement");
          }

          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(types$1._in);
            this.next();

            if (isForIn) {
              if (awaitAt > -1) this.unexpected(awaitAt);
            } else {
              node.await = awaitAt > -1;
            }

            if (
              init.type === "VariableDeclaration" &&
              init.declarations[0].init != null &&
              (!isForIn ||
                this.state.strict ||
                init.kind !== "var" ||
                init.declarations[0].id.type !== "Identifier")
            ) {
              this.raise(
                init.start,
                ErrorMessages.ForInOfLoopInitializer,
                isForIn ? "for-in" : "for-of"
              );
            } else if (init.type === "AssignmentPattern") {
              this.raise(init.start, ErrorMessages.InvalidLhs, "for-loop");
            }

            node.left = init;
            node.right = isForIn
              ? this.parseExpression()
              : this.parseMaybeAssignAllowIn();
            this.expect(types$1.parenR);
            node.body = this.withSmartMixTopicForbiddingContext(() =>
              this.parseStatement("for")
            );
            this.scope.exit();
            this.state.labels.pop();
            return this.finishNode(
              node,
              isForIn ? "ForInStatement" : "ForOfStatement"
            );
          }

          parseVar(node, isFor, kind) {
            const declarations = (node.declarations = []);
            const isTypescript = this.hasPlugin("typescript");
            node.kind = kind;

            for (;;) {
              const decl = this.startNode();
              this.parseVarId(decl, kind);

              if (this.eat(types$1.eq)) {
                decl.init = isFor
                  ? this.parseMaybeAssignDisallowIn()
                  : this.parseMaybeAssignAllowIn();
              } else {
                if (
                  kind === "const" &&
                  !(this.match(types$1._in) || this.isContextual("of"))
                ) {
                  if (!isTypescript) {
                    this.raise(
                      this.state.lastTokEnd,
                      ErrorMessages.DeclarationMissingInitializer,
                      "Const declarations"
                    );
                  }
                } else if (
                  decl.id.type !== "Identifier" &&
                  !(
                    isFor &&
                    (this.match(types$1._in) || this.isContextual("of"))
                  )
                ) {
                  this.raise(
                    this.state.lastTokEnd,
                    ErrorMessages.DeclarationMissingInitializer,
                    "Complex binding patterns"
                  );
                }

                decl.init = null;
              }

              declarations.push(this.finishNode(decl, "VariableDeclarator"));
              if (!this.eat(types$1.comma)) break;
            }

            return node;
          }

          parseVarId(decl, kind) {
            decl.id = this.parseBindingAtom();
            this.checkLVal(
              decl.id,
              "variable declaration",
              kind === "var" ? BIND_VAR : BIND_LEXICAL,
              undefined,
              kind !== "var"
            );
          }

          parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
            const isStatement = statement & FUNC_STATEMENT;
            const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
            const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
            this.initFunction(node, isAsync);

            if (this.match(types$1.star) && isHangingStatement) {
              this.raise(
                this.state.start,
                ErrorMessages.GeneratorInSingleStatementContext
              );
            }

            node.generator = this.eat(types$1.star);

            if (isStatement) {
              node.id = this.parseFunctionId(requireId);
            }

            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = false;
            this.scope.enter(SCOPE_FUNCTION);
            this.prodParam.enter(functionFlags(isAsync, node.generator));

            if (!isStatement) {
              node.id = this.parseFunctionId();
            }

            this.parseFunctionParams(node, false);
            this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(
                node,
                isStatement ? "FunctionDeclaration" : "FunctionExpression"
              );
            });
            this.prodParam.exit();
            this.scope.exit();

            if (isStatement && !isHangingStatement) {
              this.registerFunctionStatementId(node);
            }

            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            return node;
          }

          parseFunctionId(requireId) {
            return requireId || this.match(types$1.name)
              ? this.parseIdentifier()
              : null;
          }

          parseFunctionParams(node, allowModifiers) {
            this.expect(types$1.parenL);
            this.expressionScope.enter(newParameterDeclarationScope());
            node.params = this.parseBindingList(
              types$1.parenR,
              41,
              false,
              allowModifiers
            );
            this.expressionScope.exit();
          }

          registerFunctionStatementId(node) {
            if (!node.id) return;
            this.scope.declareName(
              node.id.name,
              this.state.strict || node.generator || node.async
                ? this.scope.treatFunctionsAsVar
                  ? BIND_VAR
                  : BIND_LEXICAL
                : BIND_FUNCTION,
              node.id.start
            );
          }

          parseClass(node, isStatement, optionalId) {
            this.next();
            this.takeDecorators(node);
            const oldStrict = this.state.strict;
            this.state.strict = true;
            this.parseClassId(node, isStatement, optionalId);
            this.parseClassSuper(node);
            node.body = this.parseClassBody(!!node.superClass, oldStrict);
            return this.finishNode(
              node,
              isStatement ? "ClassDeclaration" : "ClassExpression"
            );
          }

          isClassProperty() {
            return (
              this.match(types$1.eq) ||
              this.match(types$1.semi) ||
              this.match(types$1.braceR)
            );
          }

          isClassMethod() {
            return this.match(types$1.parenL);
          }

          isNonstaticConstructor(method) {
            return (
              !method.computed &&
              !method.static &&
              (method.key.name === "constructor" ||
                method.key.value === "constructor")
            );
          }

          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = {
              hadConstructor: false,
              hadSuperClass,
            };
            let decorators = [];
            const classBody = this.startNode();
            classBody.body = [];
            this.expect(types$1.braceL);
            this.withSmartMixTopicForbiddingContext(() => {
              while (!this.match(types$1.braceR)) {
                if (this.eat(types$1.semi)) {
                  if (decorators.length > 0) {
                    throw this.raise(
                      this.state.lastTokEnd,
                      ErrorMessages.DecoratorSemicolon
                    );
                  }

                  continue;
                }

                if (this.match(types$1.at)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }

                const member = this.startNode();

                if (decorators.length) {
                  member.decorators = decorators;
                  this.resetStartLocationFromNode(member, decorators[0]);
                  decorators = [];
                }

                this.parseClassMember(classBody, member, state);

                if (
                  member.kind === "constructor" &&
                  member.decorators &&
                  member.decorators.length > 0
                ) {
                  this.raise(member.start, ErrorMessages.DecoratorConstructor);
                }
              }
            });
            this.state.strict = oldStrict;
            this.next();

            if (decorators.length) {
              throw this.raise(
                this.state.start,
                ErrorMessages.TrailingDecorator
              );
            }

            this.classScope.exit();
            return this.finishNode(classBody, "ClassBody");
          }

          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);

            if (this.isClassMethod()) {
              const method = member;
              method.kind = "method";
              method.computed = false;
              method.key = key;
              method.static = false;
              this.pushClassMethod(
                classBody,
                method,
                false,
                false,
                false,
                false
              );
              return true;
            } else if (this.isClassProperty()) {
              const prop = member;
              prop.computed = false;
              prop.key = key;
              prop.static = false;
              classBody.body.push(this.parseClassProperty(prop));
              return true;
            }

            this.resetPreviousNodeTrailingComments(key);
            return false;
          }

          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual("static");

            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member)) {
                return;
              }

              if (this.eat(types$1.braceL)) {
                this.parseClassStaticBlock(classBody, member);
                return;
              }
            }

            this.parseClassMemberWithIsStatic(
              classBody,
              member,
              state,
              isStatic
            );
          }

          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member;
            const privateMethod = member;
            const publicProp = member;
            const privateProp = member;
            const method = publicMethod;
            const publicMember = publicMethod;
            member.static = isStatic;

            if (this.eat(types$1.star)) {
              method.kind = "method";
              const isPrivateName = this.match(types$1.privateName);
              this.parseClassElementName(method);

              if (isPrivateName) {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  true,
                  false
                );
                return;
              }

              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(
                  publicMethod.key.start,
                  ErrorMessages.ConstructorIsGenerator
                );
              }

              this.pushClassMethod(
                classBody,
                publicMethod,
                true,
                false,
                false,
                false
              );
              return;
            }

            const isContextual =
              this.match(types$1.name) && !this.state.containsEsc;
            const isPrivate = this.match(types$1.privateName);
            const key = this.parseClassElementName(member);
            const maybeQuestionTokenStart = this.state.start;
            this.parsePostMemberNameModifiers(publicMember);

            if (this.isClassMethod()) {
              method.kind = "method";

              if (isPrivate) {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  false,
                  false
                );
                return;
              }

              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;

              if (isConstructor) {
                publicMethod.kind = "constructor";

                if (state.hadConstructor && !this.hasPlugin("typescript")) {
                  this.raise(key.start, ErrorMessages.DuplicateConstructor);
                }

                if (
                  isConstructor &&
                  this.hasPlugin("typescript") &&
                  member.override
                ) {
                  this.raise(key.start, ErrorMessages.OverrideOnConstructor);
                }

                state.hadConstructor = true;
                allowsDirectSuper = state.hadSuperClass;
              }

              this.pushClassMethod(
                classBody,
                publicMethod,
                false,
                false,
                isConstructor,
                allowsDirectSuper
              );
            } else if (this.isClassProperty()) {
              if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
              } else {
                this.pushClassProperty(classBody, publicProp);
              }
            } else if (
              isContextual &&
              key.name === "async" &&
              !this.isLineTerminator()
            ) {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(types$1.star);

              if (publicMember.optional) {
                this.unexpected(maybeQuestionTokenStart);
              }

              method.kind = "method";
              const isPrivate = this.match(types$1.privateName);
              this.parseClassElementName(method);
              this.parsePostMemberNameModifiers(publicMember);

              if (isPrivate) {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  isGenerator,
                  true
                );
              } else {
                if (this.isNonstaticConstructor(publicMethod)) {
                  this.raise(
                    publicMethod.key.start,
                    ErrorMessages.ConstructorIsAsync
                  );
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  isGenerator,
                  true,
                  false,
                  false
                );
              }
            } else if (
              isContextual &&
              (key.name === "get" || key.name === "set") &&
              !(this.match(types$1.star) && this.isLineTerminator())
            ) {
              this.resetPreviousNodeTrailingComments(key);
              method.kind = key.name;
              const isPrivate = this.match(types$1.privateName);
              this.parseClassElementName(publicMethod);

              if (isPrivate) {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  false,
                  false
                );
              } else {
                if (this.isNonstaticConstructor(publicMethod)) {
                  this.raise(
                    publicMethod.key.start,
                    ErrorMessages.ConstructorIsAccessor
                  );
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  false,
                  false,
                  false,
                  false
                );
              }

              this.checkGetterSetterParams(publicMethod);
            } else if (this.isLineTerminator()) {
              if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
              } else {
                this.pushClassProperty(classBody, publicProp);
              }
            } else {
              this.unexpected();
            }
          }

          parseClassElementName(member) {
            const { type, value, start } = this.state;

            if (
              (type === types$1.name || type === types$1.string) &&
              member.static &&
              value === "prototype"
            ) {
              this.raise(start, ErrorMessages.StaticPrototype);
            }

            if (type === types$1.privateName && value === "constructor") {
              this.raise(start, ErrorMessages.ConstructorClassPrivateField);
            }

            return this.parsePropertyName(member, true);
          }

          parseClassStaticBlock(classBody, member) {
            var _member$decorators;

            this.expectPlugin("classStaticBlock", member.start);
            this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
            const oldLabels = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(PARAM);
            const body = (member.body = []);
            this.parseBlockOrModuleBlockBody(
              body,
              undefined,
              false,
              types$1.braceR
            );
            this.prodParam.exit();
            this.scope.exit();
            this.state.labels = oldLabels;
            classBody.body.push(this.finishNode(member, "StaticBlock"));

            if (
              (_member$decorators = member.decorators) != null &&
              _member$decorators.length
            ) {
              this.raise(member.start, ErrorMessages.DecoratorStaticBlock);
            }
          }

          pushClassProperty(classBody, prop) {
            if (
              !prop.computed &&
              (prop.key.name === "constructor" ||
                prop.key.value === "constructor")
            ) {
              this.raise(prop.key.start, ErrorMessages.ConstructorClassField);
            }

            classBody.body.push(this.parseClassProperty(prop));
          }

          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node);
            this.classScope.declarePrivateName(
              this.getPrivateNameSV(node.key),
              CLASS_ELEMENT_OTHER,
              node.key.start
            );
          }

          pushClassMethod(
            classBody,
            method,
            isGenerator,
            isAsync,
            isConstructor,
            allowsDirectSuper
          ) {
            classBody.body.push(
              this.parseMethod(
                method,
                isGenerator,
                isAsync,
                isConstructor,
                allowsDirectSuper,
                "ClassMethod",
                true
              )
            );
          }

          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(
              method,
              isGenerator,
              isAsync,
              false,
              false,
              "ClassPrivateMethod",
              true
            );
            classBody.body.push(node);
            const kind =
              node.kind === "get"
                ? node.static
                  ? CLASS_ELEMENT_STATIC_GETTER
                  : CLASS_ELEMENT_INSTANCE_GETTER
                : node.kind === "set"
                ? node.static
                  ? CLASS_ELEMENT_STATIC_SETTER
                  : CLASS_ELEMENT_INSTANCE_SETTER
                : CLASS_ELEMENT_OTHER;
            this.classScope.declarePrivateName(
              this.getPrivateNameSV(node.key),
              kind,
              node.key.start
            );
          }

          parsePostMemberNameModifiers(methodOrProp) {}

          parseClassPrivateProperty(node) {
            this.parseInitializer(node);
            this.semicolon();
            return this.finishNode(node, "ClassPrivateProperty");
          }

          parseClassProperty(node) {
            this.parseInitializer(node);
            this.semicolon();
            return this.finishNode(node, "ClassProperty");
          }

          parseInitializer(node) {
            this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
            this.expressionScope.enter(newExpressionScope());
            this.prodParam.enter(PARAM);
            node.value = this.eat(types$1.eq)
              ? this.parseMaybeAssignAllowIn()
              : null;
            this.expressionScope.exit();
            this.prodParam.exit();
            this.scope.exit();
          }

          parseClassId(
            node,
            isStatement,
            optionalId,
            bindingType = BIND_CLASS
          ) {
            if (this.match(types$1.name)) {
              node.id = this.parseIdentifier();

              if (isStatement) {
                this.checkLVal(node.id, "class name", bindingType);
              }
            } else {
              if (optionalId || !isStatement) {
                node.id = null;
              } else {
                this.unexpected(null, ErrorMessages.MissingClassName);
              }
            }
          }

          parseClassSuper(node) {
            node.superClass = this.eat(types$1._extends)
              ? this.parseExprSubscripts()
              : null;
          }

          parseExport(node) {
            const hasDefault = this.maybeParseExportDefaultSpecifier(node);
            const parseAfterDefault = !hasDefault || this.eat(types$1.comma);
            const hasStar = parseAfterDefault && this.eatExportStar(node);
            const hasNamespace =
              hasStar && this.maybeParseExportNamespaceSpecifier(node);
            const parseAfterNamespace =
              parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));
            const isFromRequired = hasDefault || hasStar;

            if (hasStar && !hasNamespace) {
              if (hasDefault) this.unexpected();
              this.parseExportFrom(node, true);
              return this.finishNode(node, "ExportAllDeclaration");
            }

            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);

            if (
              (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||
              (hasNamespace && parseAfterNamespace && !hasSpecifiers)
            ) {
              throw this.unexpected(null, types$1.braceL);
            }

            let hasDeclaration;

            if (isFromRequired || hasSpecifiers) {
              hasDeclaration = false;
              this.parseExportFrom(node, isFromRequired);
            } else {
              hasDeclaration = this.maybeParseExportDeclaration(node);
            }

            if (isFromRequired || hasSpecifiers || hasDeclaration) {
              this.checkExport(node, true, false, !!node.source);
              return this.finishNode(node, "ExportNamedDeclaration");
            }

            if (this.eat(types$1._default)) {
              node.declaration = this.parseExportDefaultExpression();
              this.checkExport(node, true, true);
              return this.finishNode(node, "ExportDefaultDeclaration");
            }

            throw this.unexpected(null, types$1.braceL);
          }

          eatExportStar(node) {
            return this.eat(types$1.star);
          }

          maybeParseExportDefaultSpecifier(node) {
            if (this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom");
              const specifier = this.startNode();
              specifier.exported = this.parseIdentifier(true);
              node.specifiers = [
                this.finishNode(specifier, "ExportDefaultSpecifier"),
              ];
              return true;
            }

            return false;
          }

          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual("as")) {
              if (!node.specifiers) node.specifiers = [];
              const specifier = this.startNodeAt(
                this.state.lastTokStart,
                this.state.lastTokStartLoc
              );
              this.next();
              specifier.exported = this.parseModuleExportName();
              node.specifiers.push(
                this.finishNode(specifier, "ExportNamespaceSpecifier")
              );
              return true;
            }

            return false;
          }

          maybeParseExportNamedSpecifiers(node) {
            if (this.match(types$1.braceL)) {
              if (!node.specifiers) node.specifiers = [];
              node.specifiers.push(...this.parseExportSpecifiers());
              node.source = null;
              node.declaration = null;
              return true;
            }

            return false;
          }

          maybeParseExportDeclaration(node) {
            if (this.shouldParseExportDeclaration()) {
              node.specifiers = [];
              node.source = null;
              node.declaration = this.parseExportDeclaration(node);
              return true;
            }

            return false;
          }

          isAsyncFunction() {
            if (!this.isContextual("async")) return false;
            const next = this.nextTokenStart();
            return (
              !lineBreak.test(this.input.slice(this.state.pos, next)) &&
              this.isUnparsedContextual(next, "function")
            );
          }

          parseExportDefaultExpression() {
            const expr = this.startNode();
            const isAsync = this.isAsyncFunction();

            if (this.match(types$1._function) || isAsync) {
              this.next();

              if (isAsync) {
                this.next();
              }

              return this.parseFunction(
                expr,
                FUNC_STATEMENT | FUNC_NULLABLE_ID,
                isAsync
              );
            } else if (this.match(types$1._class)) {
              return this.parseClass(expr, true, true);
            } else if (this.match(types$1.at)) {
              if (
                this.hasPlugin("decorators") &&
                this.getPluginOption("decorators", "decoratorsBeforeExport")
              ) {
                this.raise(
                  this.state.start,
                  ErrorMessages.DecoratorBeforeExport
                );
              }

              this.parseDecorators(false);
              return this.parseClass(expr, true, true);
            } else if (
              this.match(types$1._const) ||
              this.match(types$1._var) ||
              this.isLet()
            ) {
              throw this.raise(
                this.state.start,
                ErrorMessages.UnsupportedDefaultExport
              );
            } else {
              const res = this.parseMaybeAssignAllowIn();
              this.semicolon();
              return res;
            }
          }

          parseExportDeclaration(node) {
            return this.parseStatement(null);
          }

          isExportDefaultSpecifier() {
            if (this.match(types$1.name)) {
              const value = this.state.value;

              if (
                (value === "async" && !this.state.containsEsc) ||
                value === "let"
              ) {
                return false;
              }

              if (
                (value === "type" || value === "interface") &&
                !this.state.containsEsc
              ) {
                const l = this.lookahead();

                if (
                  (l.type === types$1.name && l.value !== "from") ||
                  l.type === types$1.braceL
                ) {
                  this.expectOnePlugin(["flow", "typescript"]);
                  return false;
                }
              }
            } else if (!this.match(types$1._default)) {
              return false;
            }

            const next = this.nextTokenStart();
            const hasFrom = this.isUnparsedContextual(next, "from");

            if (
              this.input.charCodeAt(next) === 44 ||
              (this.match(types$1.name) && hasFrom)
            ) {
              return true;
            }

            if (this.match(types$1._default) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(
                this.nextTokenStartSince(next + 4)
              );
              return nextAfterFrom === 34 || nextAfterFrom === 39;
            }

            return false;
          }

          parseExportFrom(node, expect) {
            if (this.eatContextual("from")) {
              node.source = this.parseImportSource();
              this.checkExport(node);
              const assertions = this.maybeParseImportAssertions();

              if (assertions) {
                node.assertions = assertions;
              }
            } else {
              if (expect) {
                this.unexpected();
              } else {
                node.source = null;
              }
            }

            this.semicolon();
          }

          shouldParseExportDeclaration() {
            if (this.match(types$1.at)) {
              this.expectOnePlugin(["decorators", "decorators-legacy"]);

              if (this.hasPlugin("decorators")) {
                if (
                  this.getPluginOption("decorators", "decoratorsBeforeExport")
                ) {
                  this.unexpected(
                    this.state.start,
                    ErrorMessages.DecoratorBeforeExport
                  );
                } else {
                  return true;
                }
              }
            }

            return (
              this.state.type.keyword === "var" ||
              this.state.type.keyword === "const" ||
              this.state.type.keyword === "function" ||
              this.state.type.keyword === "class" ||
              this.isLet() ||
              this.isAsyncFunction()
            );
          }

          checkExport(node, checkNames, isDefault, isFrom) {
            if (checkNames) {
              if (isDefault) {
                this.checkDuplicateExports(node, "default");

                if (this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;

                  const declaration = node.declaration;

                  if (
                    declaration.type === "Identifier" &&
                    declaration.name === "from" &&
                    declaration.end - declaration.start === 4 &&
                    !(
                      (_declaration$extra = declaration.extra) != null &&
                      _declaration$extra.parenthesized
                    )
                  ) {
                    this.raise(
                      declaration.start,
                      ErrorMessages.ExportDefaultFromAsIdentifier
                    );
                  }
                }
              } else if (node.specifiers && node.specifiers.length) {
                for (const specifier of node.specifiers) {
                  const { exported } = specifier;
                  const exportedName =
                    exported.type === "Identifier"
                      ? exported.name
                      : exported.value;
                  this.checkDuplicateExports(specifier, exportedName);

                  if (!isFrom && specifier.local) {
                    const { local } = specifier;

                    if (local.type !== "Identifier") {
                      this.raise(
                        specifier.start,
                        ErrorMessages.ExportBindingIsString,
                        local.value,
                        exportedName
                      );
                    } else {
                      this.checkReservedWord(
                        local.name,
                        local.start,
                        true,
                        false
                      );
                      this.scope.checkLocalExport(local);
                    }
                  }
                }
              } else if (node.declaration) {
                if (
                  node.declaration.type === "FunctionDeclaration" ||
                  node.declaration.type === "ClassDeclaration"
                ) {
                  const id = node.declaration.id;
                  if (!id) throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if (node.declaration.type === "VariableDeclaration") {
                  for (const declaration of node.declaration.declarations) {
                    this.checkDeclaration(declaration.id);
                  }
                }
              }
            }

            const currentContextDecorators =
              this.state.decoratorStack[this.state.decoratorStack.length - 1];

            if (currentContextDecorators.length) {
              throw this.raise(
                node.start,
                ErrorMessages.UnsupportedDecoratorExport
              );
            }
          }

          checkDeclaration(node) {
            if (node.type === "Identifier") {
              this.checkDuplicateExports(node, node.name);
            } else if (node.type === "ObjectPattern") {
              for (const prop of node.properties) {
                this.checkDeclaration(prop);
              }
            } else if (node.type === "ArrayPattern") {
              for (const elem of node.elements) {
                if (elem) {
                  this.checkDeclaration(elem);
                }
              }
            } else if (node.type === "ObjectProperty") {
              this.checkDeclaration(node.value);
            } else if (node.type === "RestElement") {
              this.checkDeclaration(node.argument);
            } else if (node.type === "AssignmentPattern") {
              this.checkDeclaration(node.left);
            }
          }

          checkDuplicateExports(node, name) {
            if (this.exportedIdentifiers.has(name)) {
              this.raise(
                node.start,
                name === "default"
                  ? ErrorMessages.DuplicateDefaultExport
                  : ErrorMessages.DuplicateExport,
                name
              );
            }

            this.exportedIdentifiers.add(name);
          }

          parseExportSpecifiers() {
            const nodes = [];
            let first = true;
            this.expect(types$1.braceL);

            while (!this.eat(types$1.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(types$1.comma);
                if (this.eat(types$1.braceR)) break;
              }

              const node = this.startNode();
              const isString = this.match(types$1.string);
              const local = this.parseModuleExportName();
              node.local = local;

              if (this.eatContextual("as")) {
                node.exported = this.parseModuleExportName();
              } else if (isString) {
                node.exported = cloneStringLiteral(local);
              } else {
                node.exported = cloneIdentifier(local);
              }

              nodes.push(this.finishNode(node, "ExportSpecifier"));
            }

            return nodes;
          }

          parseModuleExportName() {
            if (this.match(types$1.string)) {
              const result = this.parseStringLiteral(this.state.value);
              const surrogate = result.value.match(loneSurrogate);

              if (surrogate) {
                this.raise(
                  result.start,
                  ErrorMessages.ModuleExportNameHasLoneSurrogate,
                  surrogate[0].charCodeAt(0).toString(16)
                );
              }

              return result;
            }

            return this.parseIdentifier(true);
          }

          parseImport(node) {
            node.specifiers = [];

            if (!this.match(types$1.string)) {
              const hasDefault = this.maybeParseDefaultImportSpecifier(node);
              const parseNext = !hasDefault || this.eat(types$1.comma);
              const hasStar =
                parseNext && this.maybeParseStarImportSpecifier(node);
              if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
              this.expectContextual("from");
            }

            node.source = this.parseImportSource();
            const assertions = this.maybeParseImportAssertions();

            if (assertions) {
              node.assertions = assertions;
            } else {
              const attributes = this.maybeParseModuleAttributes();

              if (attributes) {
                node.attributes = attributes;
              }
            }

            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
          }

          parseImportSource() {
            if (!this.match(types$1.string)) this.unexpected();
            return this.parseExprAtom();
          }

          shouldParseDefaultImport(node) {
            return this.match(types$1.name);
          }

          parseImportSpecifierLocal(node, specifier, type, contextDescription) {
            specifier.local = this.parseIdentifier();
            this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
            node.specifiers.push(this.finishNode(specifier, type));
          }

          parseAssertEntries() {
            const attrs = [];
            const attrNames = new Set();

            do {
              if (this.match(types$1.braceR)) {
                break;
              }

              const node = this.startNode();
              const keyName = this.state.value;

              if (attrNames.has(keyName)) {
                this.raise(
                  this.state.start,
                  ErrorMessages.ModuleAttributesWithDuplicateKeys,
                  keyName
                );
              }

              attrNames.add(keyName);

              if (this.match(types$1.string)) {
                node.key = this.parseStringLiteral(keyName);
              } else {
                node.key = this.parseIdentifier(true);
              }

              this.expect(types$1.colon);

              if (!this.match(types$1.string)) {
                throw this.unexpected(
                  this.state.start,
                  ErrorMessages.ModuleAttributeInvalidValue
                );
              }

              node.value = this.parseStringLiteral(this.state.value);
              this.finishNode(node, "ImportAttribute");
              attrs.push(node);
            } while (this.eat(types$1.comma));

            return attrs;
          }

          maybeParseModuleAttributes() {
            if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {
              this.expectPlugin("moduleAttributes");
              this.next();
            } else {
              if (this.hasPlugin("moduleAttributes")) return [];
              return null;
            }

            const attrs = [];
            const attributes = new Set();

            do {
              const node = this.startNode();
              node.key = this.parseIdentifier(true);

              if (node.key.name !== "type") {
                this.raise(
                  node.key.start,
                  ErrorMessages.ModuleAttributeDifferentFromType,
                  node.key.name
                );
              }

              if (attributes.has(node.key.name)) {
                this.raise(
                  node.key.start,
                  ErrorMessages.ModuleAttributesWithDuplicateKeys,
                  node.key.name
                );
              }

              attributes.add(node.key.name);
              this.expect(types$1.colon);

              if (!this.match(types$1.string)) {
                throw this.unexpected(
                  this.state.start,
                  ErrorMessages.ModuleAttributeInvalidValue
                );
              }

              node.value = this.parseStringLiteral(this.state.value);
              this.finishNode(node, "ImportAttribute");
              attrs.push(node);
            } while (this.eat(types$1.comma));

            return attrs;
          }

          maybeParseImportAssertions() {
            if (this.isContextual("assert") && !this.hasPrecedingLineBreak()) {
              this.expectPlugin("importAssertions");
              this.next();
            } else {
              if (this.hasPlugin("importAssertions")) return [];
              return null;
            }

            this.eat(types$1.braceL);
            const attrs = this.parseAssertEntries();
            this.eat(types$1.braceR);
            return attrs;
          }

          maybeParseDefaultImportSpecifier(node) {
            if (this.shouldParseDefaultImport(node)) {
              this.parseImportSpecifierLocal(
                node,
                this.startNode(),
                "ImportDefaultSpecifier",
                "default import specifier"
              );
              return true;
            }

            return false;
          }

          maybeParseStarImportSpecifier(node) {
            if (this.match(types$1.star)) {
              const specifier = this.startNode();
              this.next();
              this.expectContextual("as");
              this.parseImportSpecifierLocal(
                node,
                specifier,
                "ImportNamespaceSpecifier",
                "import namespace specifier"
              );
              return true;
            }

            return false;
          }

          parseNamedImportSpecifiers(node) {
            let first = true;
            this.expect(types$1.braceL);

            while (!this.eat(types$1.braceR)) {
              if (first) {
                first = false;
              } else {
                if (this.eat(types$1.colon)) {
                  throw this.raise(
                    this.state.start,
                    ErrorMessages.DestructureNamedImport
                  );
                }

                this.expect(types$1.comma);
                if (this.eat(types$1.braceR)) break;
              }

              this.parseImportSpecifier(node);
            }
          }

          parseImportSpecifier(node) {
            const specifier = this.startNode();
            const importedIsString = this.match(types$1.string);
            specifier.imported = this.parseModuleExportName();

            if (this.eatContextual("as")) {
              specifier.local = this.parseIdentifier();
            } else {
              const { imported } = specifier;

              if (importedIsString) {
                throw this.raise(
                  specifier.start,
                  ErrorMessages.ImportBindingIsString,
                  imported.value
                );
              }

              this.checkReservedWord(
                imported.name,
                specifier.start,
                true,
                true
              );
              specifier.local = cloneIdentifier(imported);
            }

            this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
            node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
          }

          isThisParam(param) {
            return param.type === "Identifier" && param.name === "this";
          }
        }

        class Parser extends StatementParser {
          constructor(options, input) {
            options = getOptions(options);
            super(options, input);
            this.options = options;
            this.initializeScopes();
            this.plugins = pluginsMap(this.options.plugins);
            this.filename = options.sourceFilename;
          }

          getScopeHandler() {
            return ScopeHandler;
          }

          parse() {
            this.enterInitialScopes();
            const file = this.startNode();
            const program = this.startNode();
            this.nextToken();
            file.errors = null;
            this.parseTopLevel(file, program);
            file.errors = this.state.errors;
            return file;
          }
        }

        function pluginsMap(plugins) {
          const pluginMap = new Map();

          for (const plugin of plugins) {
            const [name, options] = Array.isArray(plugin)
              ? plugin
              : [plugin, {}];
            if (!pluginMap.has(name)) pluginMap.set(name, options || {});
          }

          return pluginMap;
        }

        function parse(input, options) {
          var _options;

          if (
            ((_options = options) == null ? void 0 : _options.sourceType) ===
            "unambiguous"
          ) {
            options = Object.assign({}, options);

            try {
              options.sourceType = "module";
              const parser = getParser(options, input);
              const ast = parser.parse();

              if (parser.sawUnambiguousESM) {
                return ast;
              }

              if (parser.ambiguousScriptDifferentAst) {
                try {
                  options.sourceType = "script";
                  return getParser(options, input).parse();
                } catch (_unused) {}
              } else {
                ast.program.sourceType = "script";
              }

              return ast;
            } catch (moduleError) {
              try {
                options.sourceType = "script";
                return getParser(options, input).parse();
              } catch (_unused2) {}

              throw moduleError;
            }
          } else {
            return getParser(options, input).parse();
          }
        }
        function parseExpression(input, options) {
          const parser = getParser(options, input);

          if (parser.options.strictMode) {
            parser.state.strict = true;
          }

          return parser.getExpression();
        }

        function getParser(options, input) {
          let cls = Parser;

          if (options != null && options.plugins) {
            validatePlugins(options.plugins);
            cls = getParserClass(options.plugins);
          }

          return new cls(options, input);
        }

        const parserClassCache = {};

        function getParserClass(pluginsFromOptions) {
          const pluginList = mixinPluginNames.filter((name) =>
            hasPlugin(pluginsFromOptions, name)
          );
          const key = pluginList.join("/");
          let cls = parserClassCache[key];

          if (!cls) {
            cls = Parser;

            for (const plugin of pluginList) {
              cls = mixinPlugins[plugin](cls);
            }

            parserClassCache[key] = cls;
          }

          return cls;
        }

        exports.parse = parse;
        exports.parseExpression = parseExpression;
        exports.tokTypes = types$1;
      },
      {},
    ],
    86: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = register;
        exports.revert = revert;

        function register() {}

        function revert() {}
      },
      {},
    ],
    87: [
      function (require, module, exports) {
        exports = module.exports = function (...args) {
          return register(...args);
        };

        exports.__esModule = true;

        const node = require("./nodeWrapper");

        const register = node.default;
        Object.assign(exports, node);
      },
      { "./nodeWrapper": 86 },
    ],
    88: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = createTemplateBuilder;

        var _options = require("./options");

        var _string = require("./string");

        var _literal = require("./literal");

        const NO_PLACEHOLDER = (0, _options.validate)({
          placeholderPattern: false,
        });

        function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = new WeakMap();
          const templateAstCache = new WeakMap();
          const cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign(
            (tpl, ...args) => {
              if (typeof tpl === "string") {
                if (args.length > 1)
                  throw new Error("Unexpected extra params.");
                return extendedTrace(
                  (0, _string.default)(
                    formatter,
                    tpl,
                    (0, _options.merge)(
                      cachedOpts,
                      (0, _options.validate)(args[0])
                    )
                  )
                );
              } else if (Array.isArray(tpl)) {
                let builder = templateFnCache.get(tpl);

                if (!builder) {
                  builder = (0, _literal.default)(formatter, tpl, cachedOpts);
                  templateFnCache.set(tpl, builder);
                }

                return extendedTrace(builder(args));
              } else if (typeof tpl === "object" && tpl) {
                if (args.length > 0)
                  throw new Error("Unexpected extra params.");
                return createTemplateBuilder(
                  formatter,
                  (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl))
                );
              }

              throw new Error(`Unexpected template param ${typeof tpl}`);
            },
            {
              ast: (tpl, ...args) => {
                if (typeof tpl === "string") {
                  if (args.length > 1)
                    throw new Error("Unexpected extra params.");
                  return (0, _string.default)(
                    formatter,
                    tpl,
                    (0, _options.merge)(
                      (0, _options.merge)(
                        cachedOpts,
                        (0, _options.validate)(args[0])
                      ),
                      NO_PLACEHOLDER
                    )
                  )();
                } else if (Array.isArray(tpl)) {
                  let builder = templateAstCache.get(tpl);

                  if (!builder) {
                    builder = (0, _literal.default)(
                      formatter,
                      tpl,
                      (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)
                    );
                    templateAstCache.set(tpl, builder);
                  }

                  return builder(args)();
                }

                throw new Error(`Unexpected template param ${typeof tpl}`);
              },
            }
          );
        }

        function extendedTrace(fn) {
          let rootStack = "";

          try {
            throw new Error();
          } catch (error) {
            if (error.stack) {
              rootStack = error.stack.split("\n").slice(3).join("\n");
            }
          }

          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              err.stack += `\n    =============\n${rootStack}`;
              throw err;
            }
          };
        }
      },
      { "./literal": 91, "./options": 92, "./string": 95 },
    ],
    89: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.program =
          exports.expression =
          exports.statement =
          exports.statements =
          exports.smart =
            void 0;

        var t = require("@babel/types");

        function makeStatementFormatter(fn) {
          return {
            code: (str) => `/* @babel/template */;\n${str}`,
            validate: () => {},
            unwrap: (ast) => {
              return fn(ast.program.body.slice(1));
            },
          };
        }

        const smart = makeStatementFormatter((body) => {
          if (body.length > 1) {
            return body;
          } else {
            return body[0];
          }
        });
        exports.smart = smart;
        const statements = makeStatementFormatter((body) => body);
        exports.statements = statements;
        const statement = makeStatementFormatter((body) => {
          if (body.length === 0) {
            throw new Error("Found nothing to return.");
          }

          if (body.length > 1) {
            throw new Error("Found multiple statements but wanted one");
          }

          return body[0];
        });
        exports.statement = statement;
        const expression = {
          code: (str) => `(\n${str}\n)`,
          validate: (ast) => {
            if (ast.program.body.length > 1) {
              throw new Error("Found multiple statements but wanted one");
            }

            if (expression.unwrap(ast).start === 0) {
              throw new Error("Parse result included parens.");
            }
          },
          unwrap: ({ program }) => {
            const [stmt] = program.body;
            t.assertExpressionStatement(stmt);
            return stmt.expression;
          },
        };
        exports.expression = expression;
        const program = {
          code: (str) => str,
          validate: () => {},
          unwrap: (ast) => ast.program,
        };
        exports.program = program;
      },
      { "@babel/types": 168 },
    ],
    90: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default =
          exports.program =
          exports.expression =
          exports.statements =
          exports.statement =
          exports.smart =
            void 0;

        var formatters = require("./formatters");

        var _builder = require("./builder");

        const smart = (0, _builder.default)(formatters.smart);
        exports.smart = smart;
        const statement = (0, _builder.default)(formatters.statement);
        exports.statement = statement;
        const statements = (0, _builder.default)(formatters.statements);
        exports.statements = statements;
        const expression = (0, _builder.default)(formatters.expression);
        exports.expression = expression;
        const program = (0, _builder.default)(formatters.program);
        exports.program = program;

        var _default = Object.assign(smart.bind(undefined), {
          smart,
          statement,
          statements,
          expression,
          program,
          ast: smart.ast,
        });

        exports.default = _default;
      },
      { "./builder": 88, "./formatters": 89 },
    ],
    91: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = literalTemplate;

        var _options = require("./options");

        var _parse = require("./parse");

        var _populate = require("./populate");

        function literalTemplate(formatter, tpl, opts) {
          const { metadata, names } = buildLiteralData(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            arg.forEach((replacement, i) => {
              defaultReplacements[names[i]] = replacement;
            });
            return (arg) => {
              const replacements = (0, _options.normalizeReplacements)(arg);

              if (replacements) {
                Object.keys(replacements).forEach((key) => {
                  if (
                    Object.prototype.hasOwnProperty.call(
                      defaultReplacements,
                      key
                    )
                  ) {
                    throw new Error("Unexpected replacement overlap.");
                  }
                });
              }

              return formatter.unwrap(
                (0, _populate.default)(
                  metadata,
                  replacements
                    ? Object.assign(replacements, defaultReplacements)
                    : defaultReplacements
                )
              );
            };
          };
        }

        function buildLiteralData(formatter, tpl, opts) {
          let names;
          let nameSet;
          let metadata;
          let prefix = "";

          do {
            prefix += "$";
            const result = buildTemplateCode(tpl, prefix);
            names = result.names;
            nameSet = new Set(names);
            metadata = (0, _parse.default)(
              formatter,
              formatter.code(result.code),
              {
                parser: opts.parser,
                placeholderWhitelist: new Set(
                  result.names.concat(
                    opts.placeholderWhitelist
                      ? Array.from(opts.placeholderWhitelist)
                      : []
                  )
                ),
                placeholderPattern: opts.placeholderPattern,
                preserveComments: opts.preserveComments,
                syntacticPlaceholders: opts.syntacticPlaceholders,
              }
            );
          } while (
            metadata.placeholders.some(
              (placeholder) =>
                placeholder.isDuplicate && nameSet.has(placeholder.name)
            )
          );

          return {
            metadata,
            names,
          };
        }

        function buildTemplateCode(tpl, prefix) {
          const names = [];
          let code = tpl[0];

          for (let i = 1; i < tpl.length; i++) {
            const value = `${prefix}${i - 1}`;
            names.push(value);
            code += value + tpl[i];
          }

          return {
            names,
            code,
          };
        }
      },
      { "./options": 92, "./parse": 93, "./populate": 94 },
    ],
    92: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.merge = merge;
        exports.validate = validate;
        exports.normalizeReplacements = normalizeReplacements;

        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }

        function merge(a, b) {
          const {
            placeholderWhitelist = a.placeholderWhitelist,
            placeholderPattern = a.placeholderPattern,
            preserveComments = a.preserveComments,
            syntacticPlaceholders = a.syntacticPlaceholders,
          } = b;
          return {
            parser: Object.assign({}, a.parser, b.parser),
            placeholderWhitelist,
            placeholderPattern,
            preserveComments,
            syntacticPlaceholders,
          };
        }

        function validate(opts) {
          if (opts != null && typeof opts !== "object") {
            throw new Error("Unknown template options.");
          }

          const _ref = opts || {},
            {
              placeholderWhitelist,
              placeholderPattern,
              preserveComments,
              syntacticPlaceholders,
            } = _ref,
            parser = _objectWithoutPropertiesLoose(_ref, [
              "placeholderWhitelist",
              "placeholderPattern",
              "preserveComments",
              "syntacticPlaceholders",
            ]);

          if (
            placeholderWhitelist != null &&
            !(placeholderWhitelist instanceof Set)
          ) {
            throw new Error(
              "'.placeholderWhitelist' must be a Set, null, or undefined"
            );
          }

          if (
            placeholderPattern != null &&
            !(placeholderPattern instanceof RegExp) &&
            placeholderPattern !== false
          ) {
            throw new Error(
              "'.placeholderPattern' must be a RegExp, false, null, or undefined"
            );
          }

          if (
            preserveComments != null &&
            typeof preserveComments !== "boolean"
          ) {
            throw new Error(
              "'.preserveComments' must be a boolean, null, or undefined"
            );
          }

          if (
            syntacticPlaceholders != null &&
            typeof syntacticPlaceholders !== "boolean"
          ) {
            throw new Error(
              "'.syntacticPlaceholders' must be a boolean, null, or undefined"
            );
          }

          if (
            syntacticPlaceholders === true &&
            (placeholderWhitelist != null || placeholderPattern != null)
          ) {
            throw new Error(
              "'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" +
                " with '.syntacticPlaceholders: true'"
            );
          }

          return {
            parser,
            placeholderWhitelist: placeholderWhitelist || undefined,
            placeholderPattern:
              placeholderPattern == null ? undefined : placeholderPattern,
            preserveComments:
              preserveComments == null ? undefined : preserveComments,
            syntacticPlaceholders:
              syntacticPlaceholders == null ? undefined : syntacticPlaceholders,
          };
        }

        function normalizeReplacements(replacements) {
          if (Array.isArray(replacements)) {
            return replacements.reduce((acc, replacement, i) => {
              acc["$" + i] = replacement;
              return acc;
            }, {});
          } else if (typeof replacements === "object" || replacements == null) {
            return replacements || undefined;
          }

          throw new Error(
            "Template replacements must be an array, object, null, or undefined"
          );
        }
      },
      {},
    ],
    93: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = parseAndBuildMetadata;

        var t = require("@babel/types");

        var _parser = require("@babel/parser");

        var _codeFrame = require("@babel/code-frame");

        const PATTERN = /^[_$A-Z0-9]+$/;

        function parseAndBuildMetadata(formatter, code, opts) {
          const {
            placeholderWhitelist,
            placeholderPattern,
            preserveComments,
            syntacticPlaceholders,
          } = opts;
          const ast = parseWithCodeFrame(
            code,
            opts.parser,
            syntacticPlaceholders
          );
          t.removePropertiesDeep(ast, {
            preserveComments,
          });
          formatter.validate(ast);
          const syntactic = {
            placeholders: [],
            placeholderNames: new Set(),
          };
          const legacy = {
            placeholders: [],
            placeholderNames: new Set(),
          };
          const isLegacyRef = {
            value: undefined,
          };
          t.traverse(ast, placeholderVisitorHandler, {
            syntactic,
            legacy,
            isLegacyRef,
            placeholderWhitelist,
            placeholderPattern,
            syntacticPlaceholders,
          });
          return Object.assign(
            {
              ast,
            },
            isLegacyRef.value ? legacy : syntactic
          );
        }

        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;

          let name;

          if (t.isPlaceholder(node)) {
            if (state.syntacticPlaceholders === false) {
              throw new Error(
                "%%foo%%-style placeholders can't be used when " +
                  "'.syntacticPlaceholders' is false."
              );
            } else {
              name = node.name.name;
              state.isLegacyRef.value = false;
            }
          } else if (
            state.isLegacyRef.value === false ||
            state.syntacticPlaceholders
          ) {
            return;
          } else if (t.isIdentifier(node) || t.isJSXIdentifier(node)) {
            name = node.name;
            state.isLegacyRef.value = true;
          } else if (t.isStringLiteral(node)) {
            name = node.value;
            state.isLegacyRef.value = true;
          } else {
            return;
          }

          if (
            !state.isLegacyRef.value &&
            (state.placeholderPattern != null ||
              state.placeholderWhitelist != null)
          ) {
            throw new Error(
              "'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" +
                " with '.syntacticPlaceholders: true'"
            );
          }

          if (
            state.isLegacyRef.value &&
            (state.placeholderPattern === false ||
              !(state.placeholderPattern || PATTERN).test(name)) &&
            !(
              (_state$placeholderWhi = state.placeholderWhitelist) != null &&
              _state$placeholderWhi.has(name)
            )
          ) {
            return;
          }

          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;

          if (
            t.isStringLiteral(node) ||
            t.isPlaceholder(node, {
              expectedNode: "StringLiteral",
            })
          ) {
            type = "string";
          } else if (
            (t.isNewExpression(parent) && key === "arguments") ||
            (t.isCallExpression(parent) && key === "arguments") ||
            (t.isFunction(parent) && key === "params")
          ) {
            type = "param";
          } else if (
            t.isExpressionStatement(parent) &&
            !t.isPlaceholder(node)
          ) {
            type = "statement";
            ancestors = ancestors.slice(0, -1);
          } else if (t.isStatement(node) && t.isPlaceholder(node)) {
            type = "statement";
          } else {
            type = "other";
          }

          const { placeholders, placeholderNames } = state.isLegacyRef.value
            ? state.legacy
            : state.syntactic;
          placeholders.push({
            name,
            type,
            resolve: (ast) => resolveAncestors(ast, ancestors),
            isDuplicate: placeholderNames.has(name),
          });
          placeholderNames.add(name);
        }

        function resolveAncestors(ast, ancestors) {
          let parent = ast;

          for (let i = 0; i < ancestors.length - 1; i++) {
            const { key, index } = ancestors[i];

            if (index === undefined) {
              parent = parent[key];
            } else {
              parent = parent[key][index];
            }
          }

          const { key, index } = ancestors[ancestors.length - 1];
          return {
            parent,
            key,
            index,
          };
        }

        function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
          const plugins = (parserOpts.plugins || []).slice();

          if (syntacticPlaceholders !== false) {
            plugins.push("placeholders");
          }

          parserOpts = Object.assign(
            {
              allowReturnOutsideFunction: true,
              allowSuperOutsideMethod: true,
              sourceType: "module",
            },
            parserOpts,
            {
              plugins,
            }
          );

          try {
            return (0, _parser.parse)(code, parserOpts);
          } catch (err) {
            const loc = err.loc;

            if (loc) {
              err.message +=
                "\n" +
                (0, _codeFrame.codeFrameColumns)(code, {
                  start: loc,
                });
              err.code = "BABEL_TEMPLATE_PARSE_ERROR";
            }

            throw err;
          }
        }
      },
      { "@babel/code-frame": 1, "@babel/parser": 85, "@babel/types": 168 },
    ],
    94: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = populatePlaceholders;

        var t = require("@babel/types");

        function populatePlaceholders(metadata, replacements) {
          const ast = t.cloneNode(metadata.ast);

          if (replacements) {
            metadata.placeholders.forEach((placeholder) => {
              if (
                !Object.prototype.hasOwnProperty.call(
                  replacements,
                  placeholder.name
                )
              ) {
                const placeholderName = placeholder.name;
                throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
              placeholder you may want to consider passing one of the following options to @babel/template:
              - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
              - { placeholderPattern: /^${placeholderName}$/ }`);
              }
            });
            Object.keys(replacements).forEach((key) => {
              if (!metadata.placeholderNames.has(key)) {
                throw new Error(`Unknown substitution "${key}" given`);
              }
            });
          }

          metadata.placeholders
            .slice()
            .reverse()
            .forEach((placeholder) => {
              try {
                applyReplacement(
                  placeholder,
                  ast,
                  (replacements && replacements[placeholder.name]) || null
                );
              } catch (e) {
                e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;
                throw e;
              }
            });
          return ast;
        }

        function applyReplacement(placeholder, ast, replacement) {
          if (placeholder.isDuplicate) {
            if (Array.isArray(replacement)) {
              replacement = replacement.map((node) => t.cloneNode(node));
            } else if (typeof replacement === "object") {
              replacement = t.cloneNode(replacement);
            }
          }

          const { parent, key, index } = placeholder.resolve(ast);

          if (placeholder.type === "string") {
            if (typeof replacement === "string") {
              replacement = t.stringLiteral(replacement);
            }

            if (!replacement || !t.isStringLiteral(replacement)) {
              throw new Error("Expected string substitution");
            }
          } else if (placeholder.type === "statement") {
            if (index === undefined) {
              if (!replacement) {
                replacement = t.emptyStatement();
              } else if (Array.isArray(replacement)) {
                replacement = t.blockStatement(replacement);
              } else if (typeof replacement === "string") {
                replacement = t.expressionStatement(t.identifier(replacement));
              } else if (!t.isStatement(replacement)) {
                replacement = t.expressionStatement(replacement);
              }
            } else {
              if (replacement && !Array.isArray(replacement)) {
                if (typeof replacement === "string") {
                  replacement = t.identifier(replacement);
                }

                if (!t.isStatement(replacement)) {
                  replacement = t.expressionStatement(replacement);
                }
              }
            }
          } else if (placeholder.type === "param") {
            if (typeof replacement === "string") {
              replacement = t.identifier(replacement);
            }

            if (index === undefined) throw new Error("Assertion failure.");
          } else {
            if (typeof replacement === "string") {
              replacement = t.identifier(replacement);
            }

            if (Array.isArray(replacement)) {
              throw new Error(
                "Cannot replace single expression with an array."
              );
            }
          }

          if (index === undefined) {
            t.validate(parent, key, replacement);
            parent[key] = replacement;
          } else {
            const items = parent[key].slice();

            if (
              placeholder.type === "statement" ||
              placeholder.type === "param"
            ) {
              if (replacement == null) {
                items.splice(index, 1);
              } else if (Array.isArray(replacement)) {
                items.splice(index, 1, ...replacement);
              } else {
                items[index] = replacement;
              }
            } else {
              items[index] = replacement;
            }

            t.validate(parent, key, items);
            parent[key] = items;
          }
        }
      },
      { "@babel/types": 168 },
    ],
    95: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = stringTemplate;

        var _options = require("./options");

        var _parse = require("./parse");

        var _populate = require("./populate");

        function stringTemplate(formatter, code, opts) {
          code = formatter.code(code);
          let metadata;
          return (arg) => {
            const replacements = (0, _options.normalizeReplacements)(arg);
            if (!metadata)
              metadata = (0, _parse.default)(formatter, code, opts);
            return formatter.unwrap(
              (0, _populate.default)(metadata, replacements)
            );
          };
        }
      },
      { "./options": 92, "./parse": 93, "./populate": 94 },
    ],
    96: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.clear = clear;
        exports.clearPath = clearPath;
        exports.clearScope = clearScope;
        exports.scope = exports.path = void 0;
        let path = new WeakMap();
        exports.path = path;
        let scope = new WeakMap();
        exports.scope = scope;

        function clear() {
          clearPath();
          clearScope();
        }

        function clearPath() {
          exports.path = path = new WeakMap();
        }

        function clearScope() {
          exports.scope = scope = new WeakMap();
        }
      },
      {},
    ],
    97: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _path = require("./path");

        var t = require("@babel/types");

        class TraversalContext {
          constructor(scope, opts, state, parentPath) {
            this.queue = null;
            this.priorityQueue = null;
            this.parentPath = parentPath;
            this.scope = scope;
            this.state = state;
            this.opts = opts;
          }

          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit) return true;
            if (opts[node.type]) return true;
            const keys = t.VISITOR_KEYS[node.type];
            if (!(keys != null && keys.length)) return false;

            for (const key of keys) {
              if (node[key]) return true;
            }

            return false;
          }

          create(node, obj, key, listKey) {
            return _path.default.get({
              parentPath: this.parentPath,
              parent: node,
              container: obj,
              key: key,
              listKey,
            });
          }

          maybeQueue(path, notPriority) {
            if (this.queue) {
              if (notPriority) {
                this.queue.push(path);
              } else {
                this.priorityQueue.push(path);
              }
            }
          }

          visitMultiple(container, parent, listKey) {
            if (container.length === 0) return false;
            const queue = [];

            for (let key = 0; key < container.length; key++) {
              const node = container[key];

              if (node && this.shouldVisit(node)) {
                queue.push(this.create(parent, container, key, listKey));
              }
            }

            return this.visitQueue(queue);
          }

          visitSingle(node, key) {
            if (this.shouldVisit(node[key])) {
              return this.visitQueue([this.create(node, node, key)]);
            } else {
              return false;
            }
          }

          visitQueue(queue) {
            this.queue = queue;
            this.priorityQueue = [];
            const visited = new WeakSet();
            let stop = false;

            for (const path of queue) {
              path.resync();

              if (
                path.contexts.length === 0 ||
                path.contexts[path.contexts.length - 1] !== this
              ) {
                path.pushContext(this);
              }

              if (path.key === null) continue;
              const { node } = path;
              if (visited.has(node)) continue;
              if (node) visited.add(node);

              if (path.visit()) {
                stop = true;
                break;
              }

              if (this.priorityQueue.length) {
                stop = this.visitQueue(this.priorityQueue);
                this.priorityQueue = [];
                this.queue = queue;
                if (stop) break;
              }
            }

            for (const path of queue) {
              path.popContext();
            }

            this.queue = null;
            return stop;
          }

          visit(node, key) {
            const nodes = node[key];
            if (!nodes) return false;

            if (Array.isArray(nodes)) {
              return this.visitMultiple(nodes, node, key);
            } else {
              return this.visitSingle(node, key);
            }
          }
        }

        exports.default = TraversalContext;
      },
      { "./path": 106, "@babel/types": 168 },
    ],
    98: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        class Hub {
          getCode() {}

          getScope() {}

          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }

          buildError(node, msg, Error = TypeError) {
            return new Error(msg);
          }
        }

        exports.default = Hub;
      },
      {},
    ],
    99: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "NodePath", {
          enumerable: true,
          get: function () {
            return _path.default;
          },
        });
        Object.defineProperty(exports, "Scope", {
          enumerable: true,
          get: function () {
            return _scope.default;
          },
        });
        Object.defineProperty(exports, "Hub", {
          enumerable: true,
          get: function () {
            return _hub.default;
          },
        });
        exports.visitors = exports.default = void 0;

        var _context = require("./context");

        var visitors = require("./visitors");

        exports.visitors = visitors;

        var t = require("@babel/types");

        var cache = require("./cache");

        var _path = require("./path");

        var _scope = require("./scope");

        var _hub = require("./hub");

        function traverse(parent, opts = {}, scope, state, parentPath) {
          if (!parent) return;

          if (!opts.noScope && !scope) {
            if (parent.type !== "Program" && parent.type !== "File") {
              throw new Error(
                "You must pass a scope and parentPath unless traversing a Program/File. " +
                  `Instead of that you tried to traverse a ${parent.type} node without ` +
                  "passing scope and parentPath."
              );
            }
          }

          if (!t.VISITOR_KEYS[parent.type]) {
            return;
          }

          visitors.explode(opts);
          traverse.node(parent, opts, scope, state, parentPath);
        }

        var _default = traverse;
        exports.default = _default;
        traverse.visitors = visitors;
        traverse.verify = visitors.verify;
        traverse.explode = visitors.explode;

        traverse.cheap = function (node, enter) {
          return t.traverseFast(node, enter);
        };

        traverse.node = function (
          node,
          opts,
          scope,
          state,
          parentPath,
          skipKeys
        ) {
          const keys = t.VISITOR_KEYS[node.type];
          if (!keys) return;
          const context = new _context.default(scope, opts, state, parentPath);

          for (const key of keys) {
            if (skipKeys && skipKeys[key]) continue;
            if (context.visit(node, key)) return;
          }
        };

        traverse.clearNode = function (node, opts) {
          t.removeProperties(node, opts);
          cache.path.delete(node);
        };

        traverse.removeProperties = function (tree, opts) {
          t.traverseFast(tree, traverse.clearNode, opts);
          return tree;
        };

        function hasDenylistedType(path, state) {
          if (path.node.type === state.type) {
            state.has = true;
            path.stop();
          }
        }

        traverse.hasType = function (tree, type, denylistTypes) {
          if (denylistTypes != null && denylistTypes.includes(tree.type))
            return false;
          if (tree.type === type) return true;
          const state = {
            has: false,
            type: type,
          };
          traverse(
            tree,
            {
              noScope: true,
              denylist: denylistTypes,
              enter: hasDenylistedType,
            },
            null,
            state
          );
          return state.has;
        };

        traverse.cache = cache;
      },
      {
        "./cache": 96,
        "./context": 97,
        "./hub": 98,
        "./path": 106,
        "./scope": 118,
        "./visitors": 120,
        "@babel/types": 168,
      },
    ],
    100: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.findParent = findParent;
        exports.find = find;
        exports.getFunctionParent = getFunctionParent;
        exports.getStatementParent = getStatementParent;
        exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
        exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
        exports.getAncestry = getAncestry;
        exports.isAncestor = isAncestor;
        exports.isDescendant = isDescendant;
        exports.inType = inType;

        var t = require("@babel/types");

        var _index = require("./index");

        function findParent(callback) {
          let path = this;

          while ((path = path.parentPath)) {
            if (callback(path)) return path;
          }

          return null;
        }

        function find(callback) {
          let path = this;

          do {
            if (callback(path)) return path;
          } while ((path = path.parentPath));

          return null;
        }

        function getFunctionParent() {
          return this.findParent((p) => p.isFunction());
        }

        function getStatementParent() {
          let path = this;

          do {
            if (
              !path.parentPath ||
              (Array.isArray(path.container) && path.isStatement())
            ) {
              break;
            } else {
              path = path.parentPath;
            }
          } while (path);

          if (path && (path.isProgram() || path.isFile())) {
            throw new Error(
              "File/Program node, we can't possibly find a statement parent to this"
            );
          }

          return path;
        }

        function getEarliestCommonAncestorFrom(paths) {
          return this.getDeepestCommonAncestorFrom(
            paths,
            function (deepest, i, ancestries) {
              let earliest;
              const keys = t.VISITOR_KEYS[deepest.type];

              for (const ancestry of ancestries) {
                const path = ancestry[i + 1];

                if (!earliest) {
                  earliest = path;
                  continue;
                }

                if (path.listKey && earliest.listKey === path.listKey) {
                  if (path.key < earliest.key) {
                    earliest = path;
                    continue;
                  }
                }

                const earliestKeyIndex = keys.indexOf(earliest.parentKey);
                const currentKeyIndex = keys.indexOf(path.parentKey);

                if (earliestKeyIndex > currentKeyIndex) {
                  earliest = path;
                }
              }

              return earliest;
            }
          );
        }

        function getDeepestCommonAncestorFrom(paths, filter) {
          if (!paths.length) {
            return this;
          }

          if (paths.length === 1) {
            return paths[0];
          }

          let minDepth = Infinity;
          let lastCommonIndex, lastCommon;
          const ancestries = paths.map((path) => {
            const ancestry = [];

            do {
              ancestry.unshift(path);
            } while ((path = path.parentPath) && path !== this);

            if (ancestry.length < minDepth) {
              minDepth = ancestry.length;
            }

            return ancestry;
          });
          const first = ancestries[0];

          depthLoop: for (let i = 0; i < minDepth; i++) {
            const shouldMatch = first[i];

            for (const ancestry of ancestries) {
              if (ancestry[i] !== shouldMatch) {
                break depthLoop;
              }
            }

            lastCommonIndex = i;
            lastCommon = shouldMatch;
          }

          if (lastCommon) {
            if (filter) {
              return filter(lastCommon, lastCommonIndex, ancestries);
            } else {
              return lastCommon;
            }
          } else {
            throw new Error("Couldn't find intersection");
          }
        }

        function getAncestry() {
          let path = this;
          const paths = [];

          do {
            paths.push(path);
          } while ((path = path.parentPath));

          return paths;
        }

        function isAncestor(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }

        function isDescendant(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        }

        function inType(...candidateTypes) {
          let path = this;

          while (path) {
            for (const type of candidateTypes) {
              if (path.node.type === type) return true;
            }

            path = path.parentPath;
          }

          return false;
        }
      },
      { "./index": 106, "@babel/types": 168 },
    ],
    101: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
        exports.addComment = addComment;
        exports.addComments = addComments;

        var t = require("@babel/types");

        function shareCommentsWithSiblings() {
          if (typeof this.key === "string") return;
          const node = this.node;
          if (!node) return;
          const trailing = node.trailingComments;
          const leading = node.leadingComments;
          if (!trailing && !leading) return;
          const prev = this.getSibling(this.key - 1);
          const next = this.getSibling(this.key + 1);
          const hasPrev = Boolean(prev.node);
          const hasNext = Boolean(next.node);

          if (hasPrev && !hasNext) {
            prev.addComments("trailing", trailing);
          } else if (hasNext && !hasPrev) {
            next.addComments("leading", leading);
          }
        }

        function addComment(type, content, line) {
          t.addComment(this.node, type, content, line);
        }

        function addComments(type, comments) {
          t.addComments(this.node, type, comments);
        }
      },
      { "@babel/types": 168 },
    ],
    102: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.call = call;
        exports._call = _call;
        exports.isBlacklisted = exports.isDenylisted = isDenylisted;
        exports.visit = visit;
        exports.skip = skip;
        exports.skipKey = skipKey;
        exports.stop = stop;
        exports.setScope = setScope;
        exports.setContext = setContext;
        exports.resync = resync;
        exports._resyncParent = _resyncParent;
        exports._resyncKey = _resyncKey;
        exports._resyncList = _resyncList;
        exports._resyncRemoved = _resyncRemoved;
        exports.popContext = popContext;
        exports.pushContext = pushContext;
        exports.setup = setup;
        exports.setKey = setKey;
        exports.requeue = requeue;
        exports._getQueueContexts = _getQueueContexts;

        var _index = require("../index");

        var _index2 = require("./index");

        function call(key) {
          const opts = this.opts;
          this.debug(key);

          if (this.node) {
            if (this._call(opts[key])) return true;
          }

          if (this.node) {
            return this._call(
              opts[this.node.type] && opts[this.node.type][key]
            );
          }

          return false;
        }

        function _call(fns) {
          if (!fns) return false;

          for (const fn of fns) {
            if (!fn) continue;
            const node = this.node;
            if (!node) return true;
            const ret = fn.call(this.state, this, this.state);

            if (
              ret &&
              typeof ret === "object" &&
              typeof ret.then === "function"
            ) {
              throw new Error(
                `You appear to be using a plugin with an async traversal visitor, ` +
                  `which your current version of Babel does not support. ` +
                  `If you're using a published plugin, you may need to upgrade ` +
                  `your @babel/core version.`
              );
            }

            if (ret) {
              throw new Error(
                `Unexpected return value from visitor method ${fn}`
              );
            }

            if (this.node !== node) return true;
            if (this._traverseFlags > 0) return true;
          }

          return false;
        }

        function isDenylisted() {
          var _this$opts$denylist;

          const denylist =
            (_this$opts$denylist = this.opts.denylist) != null
              ? _this$opts$denylist
              : this.opts.blacklist;
          return denylist && denylist.indexOf(this.node.type) > -1;
        }

        function visit() {
          if (!this.node) {
            return false;
          }

          if (this.isDenylisted()) {
            return false;
          }

          if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
            return false;
          }

          if (this.shouldSkip || this.call("enter") || this.shouldSkip) {
            this.debug("Skip...");
            return this.shouldStop;
          }

          this.debug("Recursing into...");

          _index.default.node(
            this.node,
            this.opts,
            this.scope,
            this.state,
            this,
            this.skipKeys
          );

          this.call("exit");
          return this.shouldStop;
        }

        function skip() {
          this.shouldSkip = true;
        }

        function skipKey(key) {
          if (this.skipKeys == null) {
            this.skipKeys = {};
          }

          this.skipKeys[key] = true;
        }

        function stop() {
          this._traverseFlags |= _index2.SHOULD_SKIP | _index2.SHOULD_STOP;
        }

        function setScope() {
          if (this.opts && this.opts.noScope) return;
          let path = this.parentPath;
          if (this.key === "key" && path.isMethod()) path = path.parentPath;
          let target;

          while (path && !target) {
            if (path.opts && path.opts.noScope) return;
            target = path.scope;
            path = path.parentPath;
          }

          this.scope = this.getScope(target);
          if (this.scope) this.scope.init();
        }

        function setContext(context) {
          if (this.skipKeys != null) {
            this.skipKeys = {};
          }

          this._traverseFlags = 0;

          if (context) {
            this.context = context;
            this.state = context.state;
            this.opts = context.opts;
          }

          this.setScope();
          return this;
        }

        function resync() {
          if (this.removed) return;

          this._resyncParent();

          this._resyncList();

          this._resyncKey();
        }

        function _resyncParent() {
          if (this.parentPath) {
            this.parent = this.parentPath.node;
          }
        }

        function _resyncKey() {
          if (!this.container) return;
          if (this.node === this.container[this.key]) return;

          if (Array.isArray(this.container)) {
            for (let i = 0; i < this.container.length; i++) {
              if (this.container[i] === this.node) {
                return this.setKey(i);
              }
            }
          } else {
            for (const key of Object.keys(this.container)) {
              if (this.container[key] === this.node) {
                return this.setKey(key);
              }
            }
          }

          this.key = null;
        }

        function _resyncList() {
          if (!this.parent || !this.inList) return;
          const newContainer = this.parent[this.listKey];
          if (this.container === newContainer) return;
          this.container = newContainer || null;
        }

        function _resyncRemoved() {
          if (
            this.key == null ||
            !this.container ||
            this.container[this.key] !== this.node
          ) {
            this._markRemoved();
          }
        }

        function popContext() {
          this.contexts.pop();

          if (this.contexts.length > 0) {
            this.setContext(this.contexts[this.contexts.length - 1]);
          } else {
            this.setContext(undefined);
          }
        }

        function pushContext(context) {
          this.contexts.push(context);
          this.setContext(context);
        }

        function setup(parentPath, container, listKey, key) {
          this.listKey = listKey;
          this.container = container;
          this.parentPath = parentPath || this.parentPath;
          this.setKey(key);
        }

        function setKey(key) {
          var _this$node;

          this.key = key;
          this.node = this.container[this.key];
          this.type =
            (_this$node = this.node) == null ? void 0 : _this$node.type;
        }

        function requeue(pathToQueue = this) {
          if (pathToQueue.removed) return;
          const contexts = this.contexts;

          for (const context of contexts) {
            context.maybeQueue(pathToQueue);
          }
        }

        function _getQueueContexts() {
          let path = this;
          let contexts = this.contexts;

          while (!contexts.length) {
            path = path.parentPath;
            if (!path) break;
            contexts = path.contexts;
          }

          return contexts;
        }
      },
      { "../index": 99, "./index": 106 },
    ],
    103: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.toComputedKey = toComputedKey;
        exports.ensureBlock = ensureBlock;
        exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
        exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
        exports.arrowFunctionToExpression = arrowFunctionToExpression;

        var t = require("@babel/types");

        var _helperFunctionName = require("@babel/helper-function-name");

        function toComputedKey() {
          let key;

          if (this.isMemberExpression()) {
            key = this.node.property;
          } else if (this.isProperty() || this.isMethod()) {
            key = this.node.key;
          } else {
            throw new ReferenceError("todo");
          }

          if (!this.node.computed) {
            if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
          }

          return key;
        }

        function ensureBlock() {
          const body = this.get("body");
          const bodyNode = body.node;

          if (Array.isArray(body)) {
            throw new Error("Can't convert array path to a block statement");
          }

          if (!bodyNode) {
            throw new Error("Can't convert node without a body");
          }

          if (body.isBlockStatement()) {
            return bodyNode;
          }

          const statements = [];
          let stringPath = "body";
          let key;
          let listKey;

          if (body.isStatement()) {
            listKey = "body";
            key = 0;
            statements.push(body.node);
          } else {
            stringPath += ".body.0";

            if (this.isFunction()) {
              key = "argument";
              statements.push(t.returnStatement(body.node));
            } else {
              key = "expression";
              statements.push(t.expressionStatement(body.node));
            }
          }

          this.node.body = t.blockStatement(statements);
          const parentPath = this.get(stringPath);
          body.setup(
            parentPath,
            listKey ? parentPath.node[listKey] : parentPath.node,
            listKey,
            key
          );
          return this.node;
        }

        function arrowFunctionToShadowed() {
          if (!this.isArrowFunctionExpression()) return;
          this.arrowFunctionToExpression();
        }

        function unwrapFunctionEnvironment() {
          if (
            !this.isArrowFunctionExpression() &&
            !this.isFunctionExpression() &&
            !this.isFunctionDeclaration()
          ) {
            throw this.buildCodeFrameError(
              "Can only unwrap the environment of a function."
            );
          }

          hoistFunctionEnvironment(this);
        }

        function arrowFunctionToExpression({
          allowInsertArrow = true,
          specCompliant = false,
          noNewArrows = !specCompliant,
        } = {}) {
          if (!this.isArrowFunctionExpression()) {
            throw this.buildCodeFrameError(
              "Cannot convert non-arrow function to a function expression."
            );
          }

          const thisBinding = hoistFunctionEnvironment(
            this,
            noNewArrows,
            allowInsertArrow
          );
          this.ensureBlock();
          this.node.type = "FunctionExpression";

          if (!noNewArrows) {
            const checkBinding = thisBinding
              ? null
              : this.parentPath.scope.generateUidIdentifier("arrowCheckId");

            if (checkBinding) {
              this.parentPath.scope.push({
                id: checkBinding,
                init: t.objectExpression([]),
              });
            }

            this.get("body").unshiftContainer(
              "body",
              t.expressionStatement(
                t.callExpression(this.hub.addHelper("newArrowCheck"), [
                  t.thisExpression(),
                  checkBinding
                    ? t.identifier(checkBinding.name)
                    : t.identifier(thisBinding),
                ])
              )
            );
            this.replaceWith(
              t.callExpression(
                t.memberExpression(
                  (0, _helperFunctionName.default)(this, true) || this.node,
                  t.identifier("bind")
                ),
                [
                  checkBinding
                    ? t.identifier(checkBinding.name)
                    : t.thisExpression(),
                ]
              )
            );
          }
        }

        function hoistFunctionEnvironment(
          fnPath,
          noNewArrows = true,
          allowInsertArrow = true
        ) {
          const thisEnvFn = fnPath.findParent((p) => {
            return (
              (p.isFunction() && !p.isArrowFunctionExpression()) ||
              p.isProgram() ||
              p.isClassProperty({
                static: false,
              })
            );
          });
          const inConstructor =
            (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) ===
            "constructor";

          if (thisEnvFn.isClassProperty()) {
            throw fnPath.buildCodeFrameError(
              "Unable to transform arrow inside class property"
            );
          }

          const {
            thisPaths,
            argumentsPaths,
            newTargetPaths,
            superProps,
            superCalls,
          } = getScopeInformation(fnPath);

          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow) {
              throw superCalls[0].buildCodeFrameError(
                "Unable to handle nested super() usage in arrow"
              );
            }

            const allSuperCalls = [];
            thisEnvFn.traverse({
              Function(child) {
                if (child.isArrowFunctionExpression()) return;
                child.skip();
              },

              ClassProperty(child) {
                child.skip();
              },

              CallExpression(child) {
                if (!child.get("callee").isSuper()) return;
                allSuperCalls.push(child);
              },
            });
            const superBinding = getSuperBinding(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = t.identifier(superBinding);
              callee.loc = superCall.node.callee.loc;
              superCall.get("callee").replaceWith(callee);
            });
          }

          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => t.identifier("arguments");

              if (thisEnvFn.scope.path.isProgram()) {
                return t.conditionalExpression(
                  t.binaryExpression(
                    "===",
                    t.unaryExpression("typeof", args()),
                    t.stringLiteral("undefined")
                  ),
                  thisEnvFn.scope.buildUndefinedNode(),
                  args()
                );
              } else {
                return args();
              }
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = t.identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc;
              argumentsChild.replaceWith(argsRef);
            });
          }

          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () =>
              t.metaProperty(t.identifier("new"), t.identifier("target"))
            );
            newTargetPaths.forEach((targetChild) => {
              const targetRef = t.identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc;
              targetChild.replaceWith(targetRef);
            });
          }

          if (superProps.length > 0) {
            if (!allowInsertArrow) {
              throw superProps[0].buildCodeFrameError(
                "Unable to handle nested super.prop usage"
              );
            }

            const flatSuperProps = superProps.reduce(
              (acc, superProp) =>
                acc.concat(standardizeSuperProperty(superProp)),
              []
            );
            flatSuperProps.forEach((superProp) => {
              const key = superProp.node.computed
                ? ""
                : superProp.get("property").node.name;
              const isAssignment = superProp.parentPath.isAssignmentExpression({
                left: superProp.node,
              });
              const isCall = superProp.parentPath.isCallExpression({
                callee: superProp.node,
              });
              const superBinding = getSuperPropBinding(
                thisEnvFn,
                isAssignment,
                key
              );
              const args = [];

              if (superProp.node.computed) {
                args.push(superProp.get("property").node);
              }

              if (isAssignment) {
                const value = superProp.parentPath.node.right;
                args.push(value);
              }

              const call = t.callExpression(t.identifier(superBinding), args);

              if (isCall) {
                superProp.parentPath.unshiftContainer(
                  "arguments",
                  t.thisExpression()
                );
                superProp.replaceWith(
                  t.memberExpression(call, t.identifier("call"))
                );
                thisPaths.push(superProp.parentPath.get("arguments.0"));
              } else if (isAssignment) {
                superProp.parentPath.replaceWith(call);
              } else {
                superProp.replaceWith(call);
              }
            });
          }

          let thisBinding;

          if (thisPaths.length > 0 || !noNewArrows) {
            thisBinding = getThisBinding(thisEnvFn, inConstructor);

            if (noNewArrows || (inConstructor && hasSuperClass(thisEnvFn))) {
              thisPaths.forEach((thisChild) => {
                const thisRef = thisChild.isJSX()
                  ? t.jsxIdentifier(thisBinding)
                  : t.identifier(thisBinding);
                thisRef.loc = thisChild.node.loc;
                thisChild.replaceWith(thisRef);
              });
              if (!noNewArrows) thisBinding = null;
            }
          }

          return thisBinding;
        }

        function standardizeSuperProperty(superProp) {
          if (
            superProp.parentPath.isAssignmentExpression() &&
            superProp.parentPath.node.operator !== "="
          ) {
            const assignmentPath = superProp.parentPath;
            const op = assignmentPath.node.operator.slice(0, -1);
            const value = assignmentPath.node.right;
            assignmentPath.node.operator = "=";

            if (superProp.node.computed) {
              const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
              assignmentPath
                .get("left")
                .replaceWith(
                  t.memberExpression(
                    superProp.node.object,
                    t.assignmentExpression("=", tmp, superProp.node.property),
                    true
                  )
                );
              assignmentPath
                .get("right")
                .replaceWith(
                  t.binaryExpression(
                    op,
                    t.memberExpression(
                      superProp.node.object,
                      t.identifier(tmp.name),
                      true
                    ),
                    value
                  )
                );
            } else {
              assignmentPath
                .get("left")
                .replaceWith(
                  t.memberExpression(
                    superProp.node.object,
                    superProp.node.property
                  )
                );
              assignmentPath
                .get("right")
                .replaceWith(
                  t.binaryExpression(
                    op,
                    t.memberExpression(
                      superProp.node.object,
                      t.identifier(superProp.node.property.name)
                    ),
                    value
                  )
                );
            }

            return [
              assignmentPath.get("left"),
              assignmentPath.get("right").get("left"),
            ];
          } else if (superProp.parentPath.isUpdateExpression()) {
            const updateExpr = superProp.parentPath;
            const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
            const computedKey = superProp.node.computed
              ? superProp.scope.generateDeclaredUidIdentifier("prop")
              : null;
            const parts = [
              t.assignmentExpression(
                "=",
                tmp,
                t.memberExpression(
                  superProp.node.object,
                  computedKey
                    ? t.assignmentExpression(
                        "=",
                        computedKey,
                        superProp.node.property
                      )
                    : superProp.node.property,
                  superProp.node.computed
                )
              ),
              t.assignmentExpression(
                "=",
                t.memberExpression(
                  superProp.node.object,
                  computedKey
                    ? t.identifier(computedKey.name)
                    : superProp.node.property,
                  superProp.node.computed
                ),
                t.binaryExpression(
                  "+",
                  t.identifier(tmp.name),
                  t.numericLiteral(1)
                )
              ),
            ];

            if (!superProp.parentPath.node.prefix) {
              parts.push(t.identifier(tmp.name));
            }

            updateExpr.replaceWith(t.sequenceExpression(parts));
            const left = updateExpr.get("expressions.0.right");
            const right = updateExpr.get("expressions.1.left");
            return [left, right];
          }

          return [superProp];
        }

        function hasSuperClass(thisEnvFn) {
          return (
            thisEnvFn.isClassMethod() &&
            !!thisEnvFn.parentPath.parentPath.node.superClass
          );
        }

        function getThisBinding(thisEnvFn, inConstructor) {
          return getBinding(thisEnvFn, "this", (thisBinding) => {
            if (!inConstructor || !hasSuperClass(thisEnvFn))
              return t.thisExpression();
            const supers = new WeakSet();
            thisEnvFn.traverse({
              Function(child) {
                if (child.isArrowFunctionExpression()) return;
                child.skip();
              },

              ClassProperty(child) {
                child.skip();
              },

              CallExpression(child) {
                if (!child.get("callee").isSuper()) return;
                if (supers.has(child.node)) return;
                supers.add(child.node);
                child.replaceWithMultiple([
                  child.node,
                  t.assignmentExpression(
                    "=",
                    t.identifier(thisBinding),
                    t.identifier("this")
                  ),
                ]);
              },
            });
          });
        }

        function getSuperBinding(thisEnvFn) {
          return getBinding(thisEnvFn, "supercall", () => {
            const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
            return t.arrowFunctionExpression(
              [t.restElement(argsBinding)],
              t.callExpression(t.super(), [
                t.spreadElement(t.identifier(argsBinding.name)),
              ])
            );
          });
        }

        function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
          const op = isAssignment ? "set" : "get";
          return getBinding(
            thisEnvFn,
            `superprop_${op}:${propName || ""}`,
            () => {
              const argsList = [];
              let fnBody;

              if (propName) {
                fnBody = t.memberExpression(t.super(), t.identifier(propName));
              } else {
                const method = thisEnvFn.scope.generateUidIdentifier("prop");
                argsList.unshift(method);
                fnBody = t.memberExpression(
                  t.super(),
                  t.identifier(method.name),
                  true
                );
              }

              if (isAssignment) {
                const valueIdent =
                  thisEnvFn.scope.generateUidIdentifier("value");
                argsList.push(valueIdent);
                fnBody = t.assignmentExpression(
                  "=",
                  fnBody,
                  t.identifier(valueIdent.name)
                );
              }

              return t.arrowFunctionExpression(argsList, fnBody);
            }
          );
        }

        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data = thisEnvFn.getData(cacheKey);

          if (!data) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name;
            thisEnvFn.setData(cacheKey, data);
            thisEnvFn.scope.push({
              id: id,
              init: init(data),
            });
          }

          return data;
        }

        function getScopeInformation(fnPath) {
          const thisPaths = [];
          const argumentsPaths = [];
          const newTargetPaths = [];
          const superProps = [];
          const superCalls = [];
          fnPath.traverse({
            ClassProperty(child) {
              child.skip();
            },

            Function(child) {
              if (child.isArrowFunctionExpression()) return;
              child.skip();
            },

            ThisExpression(child) {
              thisPaths.push(child);
            },

            JSXIdentifier(child) {
              if (child.node.name !== "this") return;

              if (
                !child.parentPath.isJSXMemberExpression({
                  object: child.node,
                }) &&
                !child.parentPath.isJSXOpeningElement({
                  name: child.node,
                })
              ) {
                return;
              }

              thisPaths.push(child);
            },

            CallExpression(child) {
              if (child.get("callee").isSuper()) superCalls.push(child);
            },

            MemberExpression(child) {
              if (child.get("object").isSuper()) superProps.push(child);
            },

            ReferencedIdentifier(child) {
              if (child.node.name !== "arguments") return;
              let curr = child.scope;

              do {
                if (curr.hasOwnBinding("arguments")) {
                  curr.rename("arguments");
                  return;
                }

                if (
                  curr.path.isFunction() &&
                  !curr.path.isArrowFunctionExpression()
                ) {
                  break;
                }
              } while ((curr = curr.parent));

              argumentsPaths.push(child);
            },

            MetaProperty(child) {
              if (
                !child.get("meta").isIdentifier({
                  name: "new",
                })
              )
                return;
              if (
                !child.get("property").isIdentifier({
                  name: "target",
                })
              )
                return;
              newTargetPaths.push(child);
            },
          });
          return {
            thisPaths,
            argumentsPaths,
            newTargetPaths,
            superProps,
            superCalls,
          };
        }
      },
      { "@babel/helper-function-name": 61, "@babel/types": 168 },
    ],
    104: [
      function (require, module, exports) {
        (function (global) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.evaluateTruthy = evaluateTruthy;
            exports.evaluate = evaluate;
            const VALID_CALLEES = ["String", "Number", "Math"];
            const INVALID_METHODS = ["random"];

            function evaluateTruthy() {
              const res = this.evaluate();
              if (res.confident) return !!res.value;
            }

            function deopt(path, state) {
              if (!state.confident) return;
              state.deoptPath = path;
              state.confident = false;
            }

            function evaluateCached(path, state) {
              const { node } = path;
              const { seen } = state;

              if (seen.has(node)) {
                const existing = seen.get(node);

                if (existing.resolved) {
                  return existing.value;
                } else {
                  deopt(path, state);
                  return;
                }
              } else {
                const item = {
                  resolved: false,
                };
                seen.set(node, item);

                const val = _evaluate(path, state);

                if (state.confident) {
                  item.resolved = true;
                  item.value = val;
                }

                return val;
              }
            }

            function _evaluate(path, state) {
              if (!state.confident) return;

              if (path.isSequenceExpression()) {
                const exprs = path.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state);
              }

              if (
                path.isStringLiteral() ||
                path.isNumericLiteral() ||
                path.isBooleanLiteral()
              ) {
                return path.node.value;
              }

              if (path.isNullLiteral()) {
                return null;
              }

              if (path.isTemplateLiteral()) {
                return evaluateQuasis(path, path.node.quasis, state);
              }

              if (
                path.isTaggedTemplateExpression() &&
                path.get("tag").isMemberExpression()
              ) {
                const object = path.get("tag.object");
                const {
                  node: { name },
                } = object;
                const property = path.get("tag.property");

                if (
                  object.isIdentifier() &&
                  name === "String" &&
                  !path.scope.getBinding(name) &&
                  property.isIdentifier() &&
                  property.node.name === "raw"
                ) {
                  return evaluateQuasis(
                    path,
                    path.node.quasi.quasis,
                    state,
                    true
                  );
                }
              }

              if (path.isConditionalExpression()) {
                const testResult = evaluateCached(path.get("test"), state);
                if (!state.confident) return;

                if (testResult) {
                  return evaluateCached(path.get("consequent"), state);
                } else {
                  return evaluateCached(path.get("alternate"), state);
                }
              }

              if (path.isExpressionWrapper()) {
                return evaluateCached(path.get("expression"), state);
              }

              if (
                path.isMemberExpression() &&
                !path.parentPath.isCallExpression({
                  callee: path.node,
                })
              ) {
                const property = path.get("property");
                const object = path.get("object");

                if (object.isLiteral() && property.isIdentifier()) {
                  const value = object.node.value;
                  const type = typeof value;

                  if (type === "number" || type === "string") {
                    return value[property.node.name];
                  }
                }
              }

              if (path.isReferencedIdentifier()) {
                const binding = path.scope.getBinding(path.node.name);

                if (binding && binding.constantViolations.length > 0) {
                  return deopt(binding.path, state);
                }

                if (binding && path.node.start < binding.path.node.end) {
                  return deopt(binding.path, state);
                }

                if (binding != null && binding.hasValue) {
                  return binding.value;
                } else {
                  if (path.node.name === "undefined") {
                    return binding ? deopt(binding.path, state) : undefined;
                  } else if (path.node.name === "Infinity") {
                    return binding ? deopt(binding.path, state) : Infinity;
                  } else if (path.node.name === "NaN") {
                    return binding ? deopt(binding.path, state) : NaN;
                  }

                  const resolved = path.resolve();

                  if (resolved === path) {
                    return deopt(path, state);
                  } else {
                    return evaluateCached(resolved, state);
                  }
                }
              }

              if (
                path.isUnaryExpression({
                  prefix: true,
                })
              ) {
                if (path.node.operator === "void") {
                  return undefined;
                }

                const argument = path.get("argument");

                if (
                  path.node.operator === "typeof" &&
                  (argument.isFunction() || argument.isClass())
                ) {
                  return "function";
                }

                const arg = evaluateCached(argument, state);
                if (!state.confident) return;

                switch (path.node.operator) {
                  case "!":
                    return !arg;

                  case "+":
                    return +arg;

                  case "-":
                    return -arg;

                  case "~":
                    return ~arg;

                  case "typeof":
                    return typeof arg;
                }
              }

              if (path.isArrayExpression()) {
                const arr = [];
                const elems = path.get("elements");

                for (const elem of elems) {
                  const elemValue = elem.evaluate();

                  if (elemValue.confident) {
                    arr.push(elemValue.value);
                  } else {
                    return deopt(elemValue.deopt, state);
                  }
                }

                return arr;
              }

              if (path.isObjectExpression()) {
                const obj = {};
                const props = path.get("properties");

                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement()) {
                    return deopt(prop, state);
                  }

                  const keyPath = prop.get("key");
                  let key = keyPath;

                  if (prop.node.computed) {
                    key = key.evaluate();

                    if (!key.confident) {
                      return deopt(key.deopt, state);
                    }

                    key = key.value;
                  } else if (key.isIdentifier()) {
                    key = key.node.name;
                  } else {
                    key = key.node.value;
                  }

                  const valuePath = prop.get("value");
                  let value = valuePath.evaluate();

                  if (!value.confident) {
                    return deopt(value.deopt, state);
                  }

                  value = value.value;
                  obj[key] = value;
                }

                return obj;
              }

              if (path.isLogicalExpression()) {
                const wasConfident = state.confident;
                const left = evaluateCached(path.get("left"), state);
                const leftConfident = state.confident;
                state.confident = wasConfident;
                const right = evaluateCached(path.get("right"), state);
                const rightConfident = state.confident;

                switch (path.node.operator) {
                  case "||":
                    state.confident =
                      leftConfident && (!!left || rightConfident);
                    if (!state.confident) return;
                    return left || right;

                  case "&&":
                    state.confident =
                      leftConfident && (!left || rightConfident);
                    if (!state.confident) return;
                    return left && right;
                }
              }

              if (path.isBinaryExpression()) {
                const left = evaluateCached(path.get("left"), state);
                if (!state.confident) return;
                const right = evaluateCached(path.get("right"), state);
                if (!state.confident) return;

                switch (path.node.operator) {
                  case "-":
                    return left - right;

                  case "+":
                    return left + right;

                  case "/":
                    return left / right;

                  case "*":
                    return left * right;

                  case "%":
                    return left % right;

                  case "**":
                    return Math.pow(left, right);

                  case "<":
                    return left < right;

                  case ">":
                    return left > right;

                  case "<=":
                    return left <= right;

                  case ">=":
                    return left >= right;

                  case "==":
                    return left == right;

                  case "!=":
                    return left != right;

                  case "===":
                    return left === right;

                  case "!==":
                    return left !== right;

                  case "|":
                    return left | right;

                  case "&":
                    return left & right;

                  case "^":
                    return left ^ right;

                  case "<<":
                    return left << right;

                  case ">>":
                    return left >> right;

                  case ">>>":
                    return left >>> right;
                }
              }

              if (path.isCallExpression()) {
                const callee = path.get("callee");
                let context;
                let func;

                if (
                  callee.isIdentifier() &&
                  !path.scope.getBinding(callee.node.name) &&
                  VALID_CALLEES.indexOf(callee.node.name) >= 0
                ) {
                  func = global[callee.node.name];
                }

                if (callee.isMemberExpression()) {
                  const object = callee.get("object");
                  const property = callee.get("property");

                  if (
                    object.isIdentifier() &&
                    property.isIdentifier() &&
                    VALID_CALLEES.indexOf(object.node.name) >= 0 &&
                    INVALID_METHODS.indexOf(property.node.name) < 0
                  ) {
                    context = global[object.node.name];
                    func = context[property.node.name];
                  }

                  if (object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;

                    if (type === "string" || type === "number") {
                      context = object.node.value;
                      func = context[property.node.name];
                    }
                  }
                }

                if (func) {
                  const args = path
                    .get("arguments")
                    .map((arg) => evaluateCached(arg, state));
                  if (!state.confident) return;
                  return func.apply(context, args);
                }
              }

              deopt(path, state);
            }

            function evaluateQuasis(path, quasis, state, raw = false) {
              let str = "";
              let i = 0;
              const exprs = path.get("expressions");

              for (const elem of quasis) {
                if (!state.confident) break;
                str += raw ? elem.value.raw : elem.value.cooked;
                const expr = exprs[i++];
                if (expr) str += String(evaluateCached(expr, state));
              }

              if (!state.confident) return;
              return str;
            }

            function evaluate() {
              const state = {
                confident: true,
                deoptPath: null,
                seen: new Map(),
              };
              let value = evaluateCached(this, state);
              if (!state.confident) value = undefined;
              return {
                confident: state.confident,
                deopt: state.deoptPath,
                value: value,
              };
            }
          }).call(this);
        }).call(
          this,
          typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
            ? window
            : {}
        );
      },
      {},
    ],
    105: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.getOpposite = getOpposite;
        exports.getCompletionRecords = getCompletionRecords;
        exports.getSibling = getSibling;
        exports.getPrevSibling = getPrevSibling;
        exports.getNextSibling = getNextSibling;
        exports.getAllNextSiblings = getAllNextSiblings;
        exports.getAllPrevSiblings = getAllPrevSiblings;
        exports.get = get;
        exports._getKey = _getKey;
        exports._getPattern = _getPattern;
        exports.getBindingIdentifiers = getBindingIdentifiers;
        exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
        exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
        exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;

        var _index = require("./index");

        var t = require("@babel/types");

        const NORMAL_COMPLETION = 0;
        const BREAK_COMPLETION = 1;

        function NormalCompletion(path) {
          return {
            type: NORMAL_COMPLETION,
            path,
          };
        }

        function BreakCompletion(path) {
          return {
            type: BREAK_COMPLETION,
            path,
          };
        }

        function getOpposite() {
          if (this.key === "left") {
            return this.getSibling("right");
          } else if (this.key === "right") {
            return this.getSibling("left");
          }

          return null;
        }

        function addCompletionRecords(path, records, context) {
          if (path) return records.concat(_getCompletionRecords(path, context));
          return records;
        }

        function completionRecordForSwitch(cases, records, context) {
          let lastNormalCompletions = [];

          for (let i = 0; i < cases.length; i++) {
            const casePath = cases[i];

            const caseCompletions = _getCompletionRecords(casePath, context);

            const normalCompletions = [];
            const breakCompletions = [];

            for (const c of caseCompletions) {
              if (c.type === NORMAL_COMPLETION) {
                normalCompletions.push(c);
              }

              if (c.type === BREAK_COMPLETION) {
                breakCompletions.push(c);
              }
            }

            if (normalCompletions.length) {
              lastNormalCompletions = normalCompletions;
            }

            records = records.concat(breakCompletions);
          }

          records = records.concat(lastNormalCompletions);
          return records;
        }

        function normalCompletionToBreak(completions) {
          completions.forEach((c) => {
            c.type = BREAK_COMPLETION;
          });
        }

        function replaceBreakStatementInBreakCompletion(
          completions,
          reachable
        ) {
          completions.forEach((c) => {
            if (
              c.path.isBreakStatement({
                label: null,
              })
            ) {
              if (reachable) {
                c.path.replaceWith(
                  t.unaryExpression("void", t.numericLiteral(0))
                );
              } else {
                c.path.remove();
              }
            }
          });
        }

        function getStatementListCompletion(paths, context) {
          let completions = [];

          if (context.canHaveBreak) {
            let lastNormalCompletions = [];

            for (let i = 0; i < paths.length; i++) {
              const path = paths[i];
              const newContext = Object.assign({}, context, {
                inCaseClause: false,
              });

              if (
                path.isBlockStatement() &&
                (context.inCaseClause || context.shouldPopulateBreak)
              ) {
                newContext.shouldPopulateBreak = true;
              } else {
                newContext.shouldPopulateBreak = false;
              }

              const statementCompletions = _getCompletionRecords(
                path,
                newContext
              );

              if (
                statementCompletions.length > 0 &&
                statementCompletions.every((c) => c.type === BREAK_COMPLETION)
              ) {
                if (
                  lastNormalCompletions.length > 0 &&
                  statementCompletions.every((c) =>
                    c.path.isBreakStatement({
                      label: null,
                    })
                  )
                ) {
                  normalCompletionToBreak(lastNormalCompletions);
                  completions = completions.concat(lastNormalCompletions);

                  if (
                    lastNormalCompletions.some((c) => c.path.isDeclaration())
                  ) {
                    completions = completions.concat(statementCompletions);
                    replaceBreakStatementInBreakCompletion(
                      statementCompletions,
                      true
                    );
                  }

                  replaceBreakStatementInBreakCompletion(
                    statementCompletions,
                    false
                  );
                } else {
                  completions = completions.concat(statementCompletions);

                  if (!context.shouldPopulateBreak) {
                    replaceBreakStatementInBreakCompletion(
                      statementCompletions,
                      true
                    );
                  }
                }

                break;
              }

              if (i === paths.length - 1) {
                completions = completions.concat(statementCompletions);
              } else {
                completions = completions.concat(
                  statementCompletions.filter(
                    (c) => c.type === BREAK_COMPLETION
                  )
                );
                lastNormalCompletions = statementCompletions.filter(
                  (c) => c.type === NORMAL_COMPLETION
                );
              }
            }
          } else if (paths.length) {
            for (let i = paths.length - 1; i >= 0; i--) {
              const pathCompletions = _getCompletionRecords(paths[i], context);

              if (
                pathCompletions.length > 1 ||
                (pathCompletions.length === 1 &&
                  !pathCompletions[0].path.isVariableDeclaration())
              ) {
                completions = completions.concat(pathCompletions);
                break;
              }
            }
          }

          return completions;
        }

        function _getCompletionRecords(path, context) {
          let records = [];

          if (path.isIfStatement()) {
            records = addCompletionRecords(
              path.get("consequent"),
              records,
              context
            );
            records = addCompletionRecords(
              path.get("alternate"),
              records,
              context
            );
          } else if (
            path.isDoExpression() ||
            path.isFor() ||
            path.isWhile() ||
            path.isLabeledStatement()
          ) {
            records = addCompletionRecords(path.get("body"), records, context);
          } else if (path.isProgram() || path.isBlockStatement()) {
            records = records.concat(
              getStatementListCompletion(path.get("body"), context)
            );
          } else if (path.isFunction()) {
            return _getCompletionRecords(path.get("body"), context);
          } else if (path.isTryStatement()) {
            records = addCompletionRecords(path.get("block"), records, context);
            records = addCompletionRecords(
              path.get("handler"),
              records,
              context
            );
          } else if (path.isCatchClause()) {
            records = addCompletionRecords(path.get("body"), records, context);
          } else if (path.isSwitchStatement()) {
            records = completionRecordForSwitch(
              path.get("cases"),
              records,
              context
            );
          } else if (path.isSwitchCase()) {
            records = records.concat(
              getStatementListCompletion(path.get("consequent"), {
                canHaveBreak: true,
                shouldPopulateBreak: false,
                inCaseClause: true,
              })
            );
          } else if (path.isBreakStatement()) {
            records.push(BreakCompletion(path));
          } else {
            records.push(NormalCompletion(path));
          }

          return records;
        }

        function getCompletionRecords() {
          const records = _getCompletionRecords(this, {
            canHaveBreak: false,
            shouldPopulateBreak: false,
            inCaseClause: false,
          });

          return records.map((r) => r.path);
        }

        function getSibling(key) {
          return _index.default
            .get({
              parentPath: this.parentPath,
              parent: this.parent,
              container: this.container,
              listKey: this.listKey,
              key: key,
            })
            .setContext(this.context);
        }

        function getPrevSibling() {
          return this.getSibling(this.key - 1);
        }

        function getNextSibling() {
          return this.getSibling(this.key + 1);
        }

        function getAllNextSiblings() {
          let _key = this.key;
          let sibling = this.getSibling(++_key);
          const siblings = [];

          while (sibling.node) {
            siblings.push(sibling);
            sibling = this.getSibling(++_key);
          }

          return siblings;
        }

        function getAllPrevSiblings() {
          let _key = this.key;
          let sibling = this.getSibling(--_key);
          const siblings = [];

          while (sibling.node) {
            siblings.push(sibling);
            sibling = this.getSibling(--_key);
          }

          return siblings;
        }

        function get(key, context = true) {
          if (context === true) context = this.context;
          const parts = key.split(".");

          if (parts.length === 1) {
            return this._getKey(key, context);
          } else {
            return this._getPattern(parts, context);
          }
        }

        function _getKey(key, context) {
          const node = this.node;
          const container = node[key];

          if (Array.isArray(container)) {
            return container.map((_, i) => {
              return _index.default
                .get({
                  listKey: key,
                  parentPath: this,
                  parent: node,
                  container: container,
                  key: i,
                })
                .setContext(context);
            });
          } else {
            return _index.default
              .get({
                parentPath: this,
                parent: node,
                container: node,
                key: key,
              })
              .setContext(context);
          }
        }

        function _getPattern(parts, context) {
          let path = this;

          for (const part of parts) {
            if (part === ".") {
              path = path.parentPath;
            } else {
              if (Array.isArray(path)) {
                path = path[part];
              } else {
                path = path.get(part, context);
              }
            }
          }

          return path;
        }

        function getBindingIdentifiers(duplicates) {
          return t.getBindingIdentifiers(this.node, duplicates);
        }

        function getOuterBindingIdentifiers(duplicates) {
          return t.getOuterBindingIdentifiers(this.node, duplicates);
        }

        function getBindingIdentifierPaths(
          duplicates = false,
          outerOnly = false
        ) {
          const path = this;
          let search = [].concat(path);
          const ids = Object.create(null);

          while (search.length) {
            const id = search.shift();
            if (!id) continue;
            if (!id.node) continue;
            const keys = t.getBindingIdentifiers.keys[id.node.type];

            if (id.isIdentifier()) {
              if (duplicates) {
                const _ids = (ids[id.node.name] = ids[id.node.name] || []);

                _ids.push(id);
              } else {
                ids[id.node.name] = id;
              }

              continue;
            }

            if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");

              if (declaration.isDeclaration()) {
                search.push(declaration);
              }

              continue;
            }

            if (outerOnly) {
              if (id.isFunctionDeclaration()) {
                search.push(id.get("id"));
                continue;
              }

              if (id.isFunctionExpression()) {
                continue;
              }
            }

            if (keys) {
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const child = id.get(key);

                if (Array.isArray(child) || child.node) {
                  search = search.concat(child);
                }
              }
            }
          }

          return ids;
        }

        function getOuterBindingIdentifierPaths(duplicates) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }
      },
      { "./index": 106, "@babel/types": 168 },
    ],
    106: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default =
          exports.SHOULD_SKIP =
          exports.SHOULD_STOP =
          exports.REMOVED =
            void 0;

        var virtualTypes = require("./lib/virtual-types");

        var _debug = require("debug");

        var _index = require("../index");

        var _scope = require("../scope");

        var t = require("@babel/types");

        var _cache = require("../cache");

        var _generator = require("@babel/generator");

        var NodePath_ancestry = require("./ancestry");

        var NodePath_inference = require("./inference");

        var NodePath_replacement = require("./replacement");

        var NodePath_evaluation = require("./evaluation");

        var NodePath_conversion = require("./conversion");

        var NodePath_introspection = require("./introspection");

        var NodePath_context = require("./context");

        var NodePath_removal = require("./removal");

        var NodePath_modification = require("./modification");

        var NodePath_family = require("./family");

        var NodePath_comments = require("./comments");

        const debug = _debug("babel");

        const REMOVED = 1 << 0;
        exports.REMOVED = REMOVED;
        const SHOULD_STOP = 1 << 1;
        exports.SHOULD_STOP = SHOULD_STOP;
        const SHOULD_SKIP = 1 << 2;
        exports.SHOULD_SKIP = SHOULD_SKIP;

        class NodePath {
          constructor(hub, parent) {
            this.contexts = [];
            this.state = null;
            this.opts = null;
            this._traverseFlags = 0;
            this.skipKeys = null;
            this.parentPath = null;
            this.container = null;
            this.listKey = null;
            this.key = null;
            this.node = null;
            this.type = null;
            this.parent = parent;
            this.hub = hub;
            this.data = null;
            this.context = null;
            this.scope = null;
          }

          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath) {
              hub = parentPath.hub;
            }

            if (!parent) {
              throw new Error("To get a node path the parent needs to exist");
            }

            const targetNode = container[key];

            let paths = _cache.path.get(parent);

            if (!paths) {
              paths = new Map();

              _cache.path.set(parent, paths);
            }

            let path = paths.get(targetNode);

            if (!path) {
              path = new NodePath(hub, parent);
              if (targetNode) paths.set(targetNode, path);
            }

            path.setup(parentPath, container, listKey, key);
            return path;
          }

          getScope(scope) {
            return this.isScope() ? new _scope.default(this) : scope;
          }

          setData(key, val) {
            if (this.data == null) {
              this.data = Object.create(null);
            }

            return (this.data[key] = val);
          }

          getData(key, def) {
            if (this.data == null) {
              this.data = Object.create(null);
            }

            let val = this.data[key];
            if (val === undefined && def !== undefined)
              val = this.data[key] = def;
            return val;
          }

          buildCodeFrameError(msg, Error = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error);
          }

          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }

          set(key, node) {
            t.validate(this.node, key, node);
            this.node[key] = node;
          }

          getPathLocation() {
            const parts = [];
            let path = this;

            do {
              let key = path.key;
              if (path.inList) key = `${path.listKey}[${key}]`;
              parts.unshift(key);
            } while ((path = path.parentPath));

            return parts.join(".");
          }

          debug(message) {
            if (!debug.enabled) return;
            debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }

          toString() {
            return (0, _generator.default)(this.node).code;
          }

          get inList() {
            return !!this.listKey;
          }

          set inList(inList) {
            if (!inList) {
              this.listKey = null;
            }
          }

          get parentKey() {
            return this.listKey || this.key;
          }

          get shouldSkip() {
            return !!(this._traverseFlags & SHOULD_SKIP);
          }

          set shouldSkip(v) {
            if (v) {
              this._traverseFlags |= SHOULD_SKIP;
            } else {
              this._traverseFlags &= ~SHOULD_SKIP;
            }
          }

          get shouldStop() {
            return !!(this._traverseFlags & SHOULD_STOP);
          }

          set shouldStop(v) {
            if (v) {
              this._traverseFlags |= SHOULD_STOP;
            } else {
              this._traverseFlags &= ~SHOULD_STOP;
            }
          }

          get removed() {
            return !!(this._traverseFlags & REMOVED);
          }

          set removed(v) {
            if (v) {
              this._traverseFlags |= REMOVED;
            } else {
              this._traverseFlags &= ~REMOVED;
            }
          }
        }

        Object.assign(
          NodePath.prototype,
          NodePath_ancestry,
          NodePath_inference,
          NodePath_replacement,
          NodePath_evaluation,
          NodePath_conversion,
          NodePath_introspection,
          NodePath_context,
          NodePath_removal,
          NodePath_modification,
          NodePath_family,
          NodePath_comments
        );

        for (const type of t.TYPES) {
          const typeKey = `is${type}`;
          const fn = t[typeKey];

          NodePath.prototype[typeKey] = function (opts) {
            return fn(this.node, opts);
          };

          NodePath.prototype[`assert${type}`] = function (opts) {
            if (!fn(this.node, opts)) {
              throw new TypeError(`Expected node path of type ${type}`);
            }
          };
        }

        for (const type of Object.keys(virtualTypes)) {
          if (type[0] === "_") continue;
          if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);
          const virtualType = virtualTypes[type];

          NodePath.prototype[`is${type}`] = function (opts) {
            return virtualType.checkPath(this, opts);
          };
        }

        var _default = NodePath;
        exports.default = _default;
      },
      {
        "../cache": 96,
        "../index": 99,
        "../scope": 118,
        "./ancestry": 100,
        "./comments": 101,
        "./context": 102,
        "./conversion": 103,
        "./evaluation": 104,
        "./family": 105,
        "./inference": 107,
        "./introspection": 110,
        "./lib/virtual-types": 113,
        "./modification": 114,
        "./removal": 115,
        "./replacement": 116,
        "@babel/generator": 55,
        "@babel/types": 168,
        debug: 121,
      },
    ],
    107: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.getTypeAnnotation = getTypeAnnotation;
        exports._getTypeAnnotation = _getTypeAnnotation;
        exports.isBaseType = isBaseType;
        exports.couldBeBaseType = couldBeBaseType;
        exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
        exports.isGenericType = isGenericType;

        var inferers = require("./inferers");

        var t = require("@babel/types");

        function getTypeAnnotation() {
          if (this.typeAnnotation) return this.typeAnnotation;
          let type = this._getTypeAnnotation() || t.anyTypeAnnotation();
          if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
          return (this.typeAnnotation = type);
        }

        const typeAnnotationInferringNodes = new WeakSet();

        function _getTypeAnnotation() {
          const node = this.node;

          if (!node) {
            if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
              const declar = this.parentPath.parentPath;
              const declarParent = declar.parentPath;

              if (declar.key === "left" && declarParent.isForInStatement()) {
                return t.stringTypeAnnotation();
              }

              if (declar.key === "left" && declarParent.isForOfStatement()) {
                return t.anyTypeAnnotation();
              }

              return t.voidTypeAnnotation();
            } else {
              return;
            }
          }

          if (node.typeAnnotation) {
            return node.typeAnnotation;
          }

          if (typeAnnotationInferringNodes.has(node)) {
            return;
          }

          typeAnnotationInferringNodes.add(node);

          try {
            var _inferer;

            let inferer = inferers[node.type];

            if (inferer) {
              return inferer.call(this, node);
            }

            inferer = inferers[this.parentPath.type];

            if ((_inferer = inferer) != null && _inferer.validParent) {
              return this.parentPath.getTypeAnnotation();
            }
          } finally {
            typeAnnotationInferringNodes.delete(node);
          }
        }

        function isBaseType(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }

        function _isBaseType(baseName, type, soft) {
          if (baseName === "string") {
            return t.isStringTypeAnnotation(type);
          } else if (baseName === "number") {
            return t.isNumberTypeAnnotation(type);
          } else if (baseName === "boolean") {
            return t.isBooleanTypeAnnotation(type);
          } else if (baseName === "any") {
            return t.isAnyTypeAnnotation(type);
          } else if (baseName === "mixed") {
            return t.isMixedTypeAnnotation(type);
          } else if (baseName === "empty") {
            return t.isEmptyTypeAnnotation(type);
          } else if (baseName === "void") {
            return t.isVoidTypeAnnotation(type);
          } else {
            if (soft) {
              return false;
            } else {
              throw new Error(`Unknown base type ${baseName}`);
            }
          }
        }

        function couldBeBaseType(name) {
          const type = this.getTypeAnnotation();
          if (t.isAnyTypeAnnotation(type)) return true;

          if (t.isUnionTypeAnnotation(type)) {
            for (const type2 of type.types) {
              if (
                t.isAnyTypeAnnotation(type2) ||
                _isBaseType(name, type2, true)
              ) {
                return true;
              }
            }

            return false;
          } else {
            return _isBaseType(name, type, true);
          }
        }

        function baseTypeStrictlyMatches(rightArg) {
          const left = this.getTypeAnnotation();
          const right = rightArg.getTypeAnnotation();

          if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
            return right.type === left.type;
          }

          return false;
        }

        function isGenericType(genericName) {
          const type = this.getTypeAnnotation();
          return (
            t.isGenericTypeAnnotation(type) &&
            t.isIdentifier(type.id, {
              name: genericName,
            })
          );
        }
      },
      { "./inferers": 109, "@babel/types": 168 },
    ],
    108: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = _default;

        var t = require("@babel/types");

        function _default(node) {
          if (!this.isReferenced()) return;
          const binding = this.scope.getBinding(node.name);

          if (binding) {
            if (binding.identifier.typeAnnotation) {
              return binding.identifier.typeAnnotation;
            } else {
              return getTypeAnnotationBindingConstantViolations(
                binding,
                this,
                node.name
              );
            }
          }

          if (node.name === "undefined") {
            return t.voidTypeAnnotation();
          } else if (node.name === "NaN" || node.name === "Infinity") {
            return t.numberTypeAnnotation();
          } else if (node.name === "arguments") {
          }
        }

        function getTypeAnnotationBindingConstantViolations(
          binding,
          path,
          name
        ) {
          const types = [];
          const functionConstantViolations = [];
          let constantViolations = getConstantViolationsBefore(
            binding,
            path,
            functionConstantViolations
          );
          const testType = getConditionalAnnotation(binding, path, name);

          if (testType) {
            const testConstantViolations = getConstantViolationsBefore(
              binding,
              testType.ifStatement
            );
            constantViolations = constantViolations.filter(
              (path) => testConstantViolations.indexOf(path) < 0
            );
            types.push(testType.typeAnnotation);
          }

          if (constantViolations.length) {
            constantViolations = constantViolations.concat(
              functionConstantViolations
            );

            for (const violation of constantViolations) {
              types.push(violation.getTypeAnnotation());
            }
          }

          if (!types.length) {
            return;
          }

          if (t.isTSTypeAnnotation(types[0]) && t.createTSUnionType) {
            return t.createTSUnionType(types);
          }

          if (t.createFlowUnionType) {
            return t.createFlowUnionType(types);
          }

          return t.createUnionTypeAnnotation(types);
        }

        function getConstantViolationsBefore(binding, path, functions) {
          const violations = binding.constantViolations.slice();
          violations.unshift(binding.path);
          return violations.filter((violation) => {
            violation = violation.resolve();

            const status = violation._guessExecutionStatusRelativeTo(path);

            if (functions && status === "unknown") functions.push(violation);
            return status === "before";
          });
        }

        function inferAnnotationFromBinaryExpression(name, path) {
          const operator = path.node.operator;
          const right = path.get("right").resolve();
          const left = path.get("left").resolve();
          let target;

          if (
            left.isIdentifier({
              name,
            })
          ) {
            target = right;
          } else if (
            right.isIdentifier({
              name,
            })
          ) {
            target = left;
          }

          if (target) {
            if (operator === "===") {
              return target.getTypeAnnotation();
            }

            if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t.numberTypeAnnotation();
            }

            return;
          }

          if (operator !== "===" && operator !== "==") return;
          let typeofPath;
          let typePath;

          if (
            left.isUnaryExpression({
              operator: "typeof",
            })
          ) {
            typeofPath = left;
            typePath = right;
          } else if (
            right.isUnaryExpression({
              operator: "typeof",
            })
          ) {
            typeofPath = right;
            typePath = left;
          }

          if (!typeofPath) return;
          if (
            !typeofPath.get("argument").isIdentifier({
              name,
            })
          )
            return;
          typePath = typePath.resolve();
          if (!typePath.isLiteral()) return;
          const typeValue = typePath.node.value;
          if (typeof typeValue !== "string") return;
          return t.createTypeAnnotationBasedOnTypeof(typeValue);
        }

        function getParentConditionalPath(binding, path, name) {
          let parentPath;

          while ((parentPath = path.parentPath)) {
            if (
              parentPath.isIfStatement() ||
              parentPath.isConditionalExpression()
            ) {
              if (path.key === "test") {
                return;
              }

              return parentPath;
            }

            if (parentPath.isFunction()) {
              if (parentPath.parentPath.scope.getBinding(name) !== binding)
                return;
            }

            path = parentPath;
          }
        }

        function getConditionalAnnotation(binding, path, name) {
          const ifStatement = getParentConditionalPath(binding, path, name);
          if (!ifStatement) return;
          const test = ifStatement.get("test");
          const paths = [test];
          const types = [];

          for (let i = 0; i < paths.length; i++) {
            const path = paths[i];

            if (path.isLogicalExpression()) {
              if (path.node.operator === "&&") {
                paths.push(path.get("left"));
                paths.push(path.get("right"));
              }
            } else if (path.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path);
              if (type) types.push(type);
            }
          }

          if (types.length) {
            if (t.isTSTypeAnnotation(types[0]) && t.createTSUnionType) {
              return {
                typeAnnotation: t.createTSUnionType(types),
                ifStatement,
              };
            }

            if (t.createFlowUnionType) {
              return {
                typeAnnotation: t.createFlowUnionType(types),
                ifStatement,
              };
            }

            return {
              typeAnnotation: t.createUnionTypeAnnotation(types),
              ifStatement,
            };
          }

          return getConditionalAnnotation(ifStatement, name);
        }
      },
      { "@babel/types": 168 },
    ],
    109: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.VariableDeclarator = VariableDeclarator;
        exports.TypeCastExpression = TypeCastExpression;
        exports.NewExpression = NewExpression;
        exports.TemplateLiteral = TemplateLiteral;
        exports.UnaryExpression = UnaryExpression;
        exports.BinaryExpression = BinaryExpression;
        exports.LogicalExpression = LogicalExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.ParenthesizedExpression = ParenthesizedExpression;
        exports.AssignmentExpression = AssignmentExpression;
        exports.UpdateExpression = UpdateExpression;
        exports.StringLiteral = StringLiteral;
        exports.NumericLiteral = NumericLiteral;
        exports.BooleanLiteral = BooleanLiteral;
        exports.NullLiteral = NullLiteral;
        exports.RegExpLiteral = RegExpLiteral;
        exports.ObjectExpression = ObjectExpression;
        exports.ArrayExpression = ArrayExpression;
        exports.RestElement = RestElement;
        exports.ClassDeclaration =
          exports.ClassExpression =
          exports.FunctionDeclaration =
          exports.ArrowFunctionExpression =
          exports.FunctionExpression =
            Func;
        exports.CallExpression = CallExpression;
        exports.TaggedTemplateExpression = TaggedTemplateExpression;
        Object.defineProperty(exports, "Identifier", {
          enumerable: true,
          get: function () {
            return _infererReference.default;
          },
        });

        var t = require("@babel/types");

        var _infererReference = require("./inferer-reference");

        function VariableDeclarator() {
          var _type;

          const id = this.get("id");
          if (!id.isIdentifier()) return;
          const init = this.get("init");
          let type = init.getTypeAnnotation();

          if (
            ((_type = type) == null ? void 0 : _type.type) ===
            "AnyTypeAnnotation"
          ) {
            if (
              init.isCallExpression() &&
              init.get("callee").isIdentifier({
                name: "Array",
              }) &&
              !init.scope.hasBinding("Array", true)
            ) {
              type = ArrayExpression();
            }
          }

          return type;
        }

        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }

        TypeCastExpression.validParent = true;

        function NewExpression(node) {
          if (this.get("callee").isIdentifier()) {
            return t.genericTypeAnnotation(node.callee);
          }
        }

        function TemplateLiteral() {
          return t.stringTypeAnnotation();
        }

        function UnaryExpression(node) {
          const operator = node.operator;

          if (operator === "void") {
            return t.voidTypeAnnotation();
          } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t.numberTypeAnnotation();
          } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t.stringTypeAnnotation();
          } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t.booleanTypeAnnotation();
          }
        }

        function BinaryExpression(node) {
          const operator = node.operator;

          if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
            return t.numberTypeAnnotation();
          } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
            return t.booleanTypeAnnotation();
          } else if (operator === "+") {
            const right = this.get("right");
            const left = this.get("left");

            if (left.isBaseType("number") && right.isBaseType("number")) {
              return t.numberTypeAnnotation();
            } else if (
              left.isBaseType("string") ||
              right.isBaseType("string")
            ) {
              return t.stringTypeAnnotation();
            }

            return t.unionTypeAnnotation([
              t.stringTypeAnnotation(),
              t.numberTypeAnnotation(),
            ]);
          }
        }

        function LogicalExpression() {
          const argumentTypes = [
            this.get("left").getTypeAnnotation(),
            this.get("right").getTypeAnnotation(),
          ];

          if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {
            return t.createTSUnionType(argumentTypes);
          }

          if (t.createFlowUnionType) {
            return t.createFlowUnionType(argumentTypes);
          }

          return t.createUnionTypeAnnotation(argumentTypes);
        }

        function ConditionalExpression() {
          const argumentTypes = [
            this.get("consequent").getTypeAnnotation(),
            this.get("alternate").getTypeAnnotation(),
          ];

          if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {
            return t.createTSUnionType(argumentTypes);
          }

          if (t.createFlowUnionType) {
            return t.createFlowUnionType(argumentTypes);
          }

          return t.createUnionTypeAnnotation(argumentTypes);
        }

        function SequenceExpression() {
          return this.get("expressions").pop().getTypeAnnotation();
        }

        function ParenthesizedExpression() {
          return this.get("expression").getTypeAnnotation();
        }

        function AssignmentExpression() {
          return this.get("right").getTypeAnnotation();
        }

        function UpdateExpression(node) {
          const operator = node.operator;

          if (operator === "++" || operator === "--") {
            return t.numberTypeAnnotation();
          }
        }

        function StringLiteral() {
          return t.stringTypeAnnotation();
        }

        function NumericLiteral() {
          return t.numberTypeAnnotation();
        }

        function BooleanLiteral() {
          return t.booleanTypeAnnotation();
        }

        function NullLiteral() {
          return t.nullLiteralTypeAnnotation();
        }

        function RegExpLiteral() {
          return t.genericTypeAnnotation(t.identifier("RegExp"));
        }

        function ObjectExpression() {
          return t.genericTypeAnnotation(t.identifier("Object"));
        }

        function ArrayExpression() {
          return t.genericTypeAnnotation(t.identifier("Array"));
        }

        function RestElement() {
          return ArrayExpression();
        }

        RestElement.validParent = true;

        function Func() {
          return t.genericTypeAnnotation(t.identifier("Function"));
        }

        const isArrayFrom = t.buildMatchMemberExpression("Array.from");
        const isObjectKeys = t.buildMatchMemberExpression("Object.keys");
        const isObjectValues = t.buildMatchMemberExpression("Object.values");
        const isObjectEntries = t.buildMatchMemberExpression("Object.entries");

        function CallExpression() {
          const { callee } = this.node;

          if (isObjectKeys(callee)) {
            return t.arrayTypeAnnotation(t.stringTypeAnnotation());
          } else if (isArrayFrom(callee) || isObjectValues(callee)) {
            return t.arrayTypeAnnotation(t.anyTypeAnnotation());
          } else if (isObjectEntries(callee)) {
            return t.arrayTypeAnnotation(
              t.tupleTypeAnnotation([
                t.stringTypeAnnotation(),
                t.anyTypeAnnotation(),
              ])
            );
          }

          return resolveCall(this.get("callee"));
        }

        function TaggedTemplateExpression() {
          return resolveCall(this.get("tag"));
        }

        function resolveCall(callee) {
          callee = callee.resolve();

          if (callee.isFunction()) {
            if (callee.is("async")) {
              if (callee.is("generator")) {
                return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
              } else {
                return t.genericTypeAnnotation(t.identifier("Promise"));
              }
            } else {
              if (callee.node.returnType) {
                return callee.node.returnType;
              } else {
              }
            }
          }
        }
      },
      { "./inferer-reference": 108, "@babel/types": 168 },
    ],
    110: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.matchesPattern = matchesPattern;
        exports.has = has;
        exports.isStatic = isStatic;
        exports.isnt = isnt;
        exports.equals = equals;
        exports.isNodeType = isNodeType;
        exports.canHaveVariableDeclarationOrExpression =
          canHaveVariableDeclarationOrExpression;
        exports.canSwapBetweenExpressionAndStatement =
          canSwapBetweenExpressionAndStatement;
        exports.isCompletionRecord = isCompletionRecord;
        exports.isStatementOrBlock = isStatementOrBlock;
        exports.referencesImport = referencesImport;
        exports.getSource = getSource;
        exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
        exports._guessExecutionStatusRelativeTo =
          _guessExecutionStatusRelativeTo;
        exports._guessExecutionStatusRelativeToDifferentFunctions =
          _guessExecutionStatusRelativeToDifferentFunctions;
        exports.resolve = resolve;
        exports._resolve = _resolve;
        exports.isConstantExpression = isConstantExpression;
        exports.isInStrictMode = isInStrictMode;
        exports.is = void 0;

        var t = require("@babel/types");

        function matchesPattern(pattern, allowPartial) {
          return t.matchesPattern(this.node, pattern, allowPartial);
        }

        function has(key) {
          const val = this.node && this.node[key];

          if (val && Array.isArray(val)) {
            return !!val.length;
          } else {
            return !!val;
          }
        }

        function isStatic() {
          return this.scope.isStatic(this.node);
        }

        const is = has;
        exports.is = is;

        function isnt(key) {
          return !this.has(key);
        }

        function equals(key, value) {
          return this.node[key] === value;
        }

        function isNodeType(type) {
          return t.isType(this.type, type);
        }

        function canHaveVariableDeclarationOrExpression() {
          return (
            (this.key === "init" || this.key === "left") &&
            this.parentPath.isFor()
          );
        }

        function canSwapBetweenExpressionAndStatement(replacement) {
          if (
            this.key !== "body" ||
            !this.parentPath.isArrowFunctionExpression()
          ) {
            return false;
          }

          if (this.isExpression()) {
            return t.isBlockStatement(replacement);
          } else if (this.isBlockStatement()) {
            return t.isExpression(replacement);
          }

          return false;
        }

        function isCompletionRecord(allowInsideFunction) {
          let path = this;
          let first = true;

          do {
            const container = path.container;

            if (path.isFunction() && !first) {
              return !!allowInsideFunction;
            }

            first = false;

            if (Array.isArray(container) && path.key !== container.length - 1) {
              return false;
            }
          } while ((path = path.parentPath) && !path.isProgram());

          return true;
        }

        function isStatementOrBlock() {
          if (
            this.parentPath.isLabeledStatement() ||
            t.isBlockStatement(this.container)
          ) {
            return false;
          } else {
            return t.STATEMENT_OR_BLOCK_KEYS.includes(this.key);
          }
        }

        function referencesImport(moduleSource, importName) {
          if (!this.isReferencedIdentifier()) {
            if (
              (this.isMemberExpression() ||
                this.isOptionalMemberExpression()) &&
              (this.node.computed
                ? t.isStringLiteral(this.node.property, {
                    value: importName,
                  })
                : this.node.property.name === importName)
            ) {
              const object = this.get("object");
              return (
                object.isReferencedIdentifier() &&
                object.referencesImport(moduleSource, "*")
              );
            }

            return false;
          }

          const binding = this.scope.getBinding(this.node.name);
          if (!binding || binding.kind !== "module") return false;
          const path = binding.path;
          const parent = path.parentPath;
          if (!parent.isImportDeclaration()) return false;

          if (parent.node.source.value === moduleSource) {
            if (!importName) return true;
          } else {
            return false;
          }

          if (path.isImportDefaultSpecifier() && importName === "default") {
            return true;
          }

          if (path.isImportNamespaceSpecifier() && importName === "*") {
            return true;
          }

          if (
            path.isImportSpecifier() &&
            t.isIdentifier(path.node.imported, {
              name: importName,
            })
          ) {
            return true;
          }

          return false;
        }

        function getSource() {
          const node = this.node;

          if (node.end) {
            const code = this.hub.getCode();
            if (code) return code.slice(node.start, node.end);
          }

          return "";
        }

        function willIMaybeExecuteBefore(target) {
          return this._guessExecutionStatusRelativeTo(target) !== "after";
        }

        function getOuterFunction(path) {
          return (
            path.scope.getFunctionParent() || path.scope.getProgramParent()
          ).path;
        }

        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
              return key === "right";

            case "ConditionalExpression":
            case "IfStatement":
              return key === "consequent" || key === "alternate";

            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return key === "body";

            case "ForStatement":
              return key === "body" || key === "update";

            case "SwitchStatement":
              return key === "cases";

            case "TryStatement":
              return key === "handler";

            case "AssignmentPattern":
              return key === "right";

            case "OptionalMemberExpression":
              return key === "property";

            case "OptionalCallExpression":
              return key === "arguments";

            default:
              return false;
          }
        }

        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i = 0; i < maxIndex; i++) {
            const path = paths[i];

            if (isExecutionUncertain(path.parent.type, path.parentKey)) {
              return true;
            }
          }

          return false;
        }

        function _guessExecutionStatusRelativeTo(target) {
          const funcParent = {
            this: getOuterFunction(this),
            target: getOuterFunction(target),
          };

          if (funcParent.target.node !== funcParent.this.node) {
            return this._guessExecutionStatusRelativeToDifferentFunctions(
              funcParent.target
            );
          }

          const paths = {
            target: target.getAncestry(),
            this: this.getAncestry(),
          };
          if (paths.target.indexOf(this) >= 0) return "after";
          if (paths.this.indexOf(target) >= 0) return "before";
          let commonPath;
          const commonIndex = {
            target: 0,
            this: 0,
          };

          while (!commonPath && commonIndex.this < paths.this.length) {
            const path = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path);

            if (commonIndex.target >= 0) {
              commonPath = path;
            } else {
              commonIndex.this++;
            }
          }

          if (!commonPath) {
            throw new Error(
              "Internal Babel error - The two compared nodes" +
                " don't appear to belong to the same program."
            );
          }

          if (
            isExecutionUncertainInList(paths.this, commonIndex.this - 1) ||
            isExecutionUncertainInList(paths.target, commonIndex.target - 1)
          ) {
            return "unknown";
          }

          const divergence = {
            this: paths.this[commonIndex.this - 1],
            target: paths.target[commonIndex.target - 1],
          };

          if (
            divergence.target.listKey &&
            divergence.this.listKey &&
            divergence.target.container === divergence.this.container
          ) {
            return divergence.target.key > divergence.this.key
              ? "before"
              : "after";
          }

          const keys = t.VISITOR_KEYS[commonPath.type];
          const keyPosition = {
            this: keys.indexOf(divergence.this.parentKey),
            target: keys.indexOf(divergence.target.parentKey),
          };
          return keyPosition.target > keyPosition.this ? "before" : "after";
        }

        const executionOrderCheckedNodes = new WeakSet();

        function _guessExecutionStatusRelativeToDifferentFunctions(target) {
          if (
            !target.isFunctionDeclaration() ||
            target.parentPath.isExportDeclaration()
          ) {
            return "unknown";
          }

          const binding = target.scope.getBinding(target.node.id.name);
          if (!binding.references) return "before";
          const referencePaths = binding.referencePaths;
          let allStatus;

          for (const path of referencePaths) {
            const childOfFunction = !!path.find(
              (path) => path.node === target.node
            );
            if (childOfFunction) continue;

            if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
              return "unknown";
            }

            if (executionOrderCheckedNodes.has(path.node)) continue;
            executionOrderCheckedNodes.add(path.node);

            const status = this._guessExecutionStatusRelativeTo(path);

            executionOrderCheckedNodes.delete(path.node);

            if (allStatus && allStatus !== status) {
              return "unknown";
            } else {
              allStatus = status;
            }
          }

          return allStatus;
        }

        function resolve(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }

        function _resolve(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0) return;
          resolved = resolved || [];
          resolved.push(this);

          if (this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier()) {
              return this.get("init").resolve(dangerous, resolved);
            } else {
            }
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding) return;
            if (!binding.constant) return;
            if (binding.kind === "module") return;

            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node)) return;
              return ret;
            }
          } else if (this.isTypeCastExpression()) {
            return this.get("expression").resolve(dangerous, resolved);
          } else if (dangerous && this.isMemberExpression()) {
            const targetKey = this.toComputedKey();
            if (!t.isLiteral(targetKey)) return;
            const targetName = targetKey.value;
            const target = this.get("object").resolve(dangerous, resolved);

            if (target.isObjectExpression()) {
              const props = target.get("properties");

              for (const prop of props) {
                if (!prop.isProperty()) continue;
                const key = prop.get("key");
                let match =
                  prop.isnt("computed") &&
                  key.isIdentifier({
                    name: targetName,
                  });
                match =
                  match ||
                  key.isLiteral({
                    value: targetName,
                  });
                if (match)
                  return prop.get("value").resolve(dangerous, resolved);
              }
            } else if (target.isArrayExpression() && !isNaN(+targetName)) {
              const elems = target.get("elements");
              const elem = elems[targetName];
              if (elem) return elem.resolve(dangerous, resolved);
            }
          }
        }

        function isConstantExpression() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding) return false;
            return binding.constant;
          }

          if (this.isLiteral()) {
            if (this.isRegExpLiteral()) {
              return false;
            }

            if (this.isTemplateLiteral()) {
              return this.get("expressions").every((expression) =>
                expression.isConstantExpression()
              );
            }

            return true;
          }

          if (this.isUnaryExpression()) {
            if (this.node.operator !== "void") {
              return false;
            }

            return this.get("argument").isConstantExpression();
          }

          if (this.isBinaryExpression()) {
            return (
              this.get("left").isConstantExpression() &&
              this.get("right").isConstantExpression()
            );
          }

          return false;
        }

        function isInStrictMode() {
          const start = this.isProgram() ? this : this.parentPath;
          const strictParent = start.find((path) => {
            if (
              path.isProgram({
                sourceType: "module",
              })
            )
              return true;
            if (path.isClass()) return true;
            if (!path.isProgram() && !path.isFunction()) return false;

            if (
              path.isArrowFunctionExpression() &&
              !path.get("body").isBlockStatement()
            ) {
              return false;
            }

            const body = path.isFunction() ? path.node.body : path.node;

            for (const directive of body.directives) {
              if (directive.value.value === "use strict") {
                return true;
              }
            }
          });
          return !!strictParent;
        }
      },
      { "@babel/types": 168 },
    ],
    111: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var t = require("@babel/types");

        const referenceVisitor = {
          ReferencedIdentifier(path, state) {
            if (
              path.isJSXIdentifier() &&
              t.react.isCompatTag(path.node.name) &&
              !path.parentPath.isJSXMemberExpression()
            ) {
              return;
            }

            if (path.node.name === "this") {
              let scope = path.scope;

              do {
                if (
                  scope.path.isFunction() &&
                  !scope.path.isArrowFunctionExpression()
                ) {
                  break;
                }
              } while ((scope = scope.parent));

              if (scope) state.breakOnScopePaths.push(scope.path);
            }

            const binding = path.scope.getBinding(path.node.name);
            if (!binding) return;

            for (const violation of binding.constantViolations) {
              if (violation.scope !== binding.path.scope) {
                state.mutableBinding = true;
                path.stop();
                return;
              }
            }

            if (binding !== state.scope.getBinding(path.node.name)) return;
            state.bindings[path.node.name] = binding;
          },
        };

        class PathHoister {
          constructor(path, scope) {
            this.breakOnScopePaths = void 0;
            this.bindings = void 0;
            this.mutableBinding = void 0;
            this.scopes = void 0;
            this.scope = void 0;
            this.path = void 0;
            this.attachAfter = void 0;
            this.breakOnScopePaths = [];
            this.bindings = {};
            this.mutableBinding = false;
            this.scopes = [];
            this.scope = scope;
            this.path = path;
            this.attachAfter = false;
          }

          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];

              if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
                return false;
              }
            }

            return true;
          }

          getCompatibleScopes() {
            let scope = this.path.scope;

            do {
              if (this.isCompatibleScope(scope)) {
                this.scopes.push(scope);
              } else {
                break;
              }

              if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
                break;
              }
            } while ((scope = scope.parent));
          }

          getAttachmentPath() {
            let path = this._getAttachmentPath();

            if (!path) return;
            let targetScope = path.scope;

            if (targetScope.path === path) {
              targetScope = path.scope.parent;
            }

            if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
              for (const name of Object.keys(this.bindings)) {
                if (!targetScope.hasOwnBinding(name)) continue;
                const binding = this.bindings[name];

                if (
                  binding.kind === "param" ||
                  binding.path.parentKey === "params"
                ) {
                  continue;
                }

                const bindingParentPath = this.getAttachmentParentForPath(
                  binding.path
                );

                if (bindingParentPath.key >= path.key) {
                  this.attachAfter = true;
                  path = binding.path;

                  for (const violationPath of binding.constantViolations) {
                    if (
                      this.getAttachmentParentForPath(violationPath).key >
                      path.key
                    ) {
                      path = violationPath;
                    }
                  }
                }
              }
            }

            return path;
          }

          _getAttachmentPath() {
            const scopes = this.scopes;
            const scope = scopes.pop();
            if (!scope) return;

            if (scope.path.isFunction()) {
              if (this.hasOwnParamBindings(scope)) {
                if (this.scope === scope) return;
                const bodies = scope.path.get("body").get("body");

                for (let i = 0; i < bodies.length; i++) {
                  if (bodies[i].node._blockHoist) continue;
                  return bodies[i];
                }
              } else {
                return this.getNextScopeAttachmentParent();
              }
            } else if (scope.path.isProgram()) {
              return this.getNextScopeAttachmentParent();
            }
          }

          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope) return this.getAttachmentParentForPath(scope.path);
          }

          getAttachmentParentForPath(path) {
            do {
              if (
                !path.parentPath ||
                (Array.isArray(path.container) && path.isStatement())
              ) {
                return path;
              }
            } while ((path = path.parentPath));
          }

          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if (binding.kind === "param" && binding.constant) return true;
            }

            return false;
          }

          run() {
            this.path.traverse(referenceVisitor, this);
            if (this.mutableBinding) return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo) return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent())
              return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = t.variableDeclarator(uid, this.path.node);
            const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
            const [attached] = attachTo[insertFn]([
              attachTo.isVariableDeclarator()
                ? declarator
                : t.variableDeclaration("var", [declarator]),
            ]);
            const parent = this.path.parentPath;

            if (
              parent.isJSXElement() &&
              this.path.container === parent.node.children
            ) {
              uid = t.jsxExpressionContainer(uid);
            }

            this.path.replaceWith(t.cloneNode(uid));
            return attachTo.isVariableDeclarator()
              ? attached.get("init")
              : attached.get("declarations.0.init");
          }
        }

        exports.default = PathHoister;
      },
      { "@babel/types": 168 },
    ],
    112: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.hooks = void 0;
        const hooks = [
          function (self, parent) {
            const removeParent =
              (self.key === "test" &&
                (parent.isWhile() || parent.isSwitchCase())) ||
              (self.key === "declaration" && parent.isExportDeclaration()) ||
              (self.key === "body" && parent.isLabeledStatement()) ||
              (self.listKey === "declarations" &&
                parent.isVariableDeclaration() &&
                parent.node.declarations.length === 1) ||
              (self.key === "expression" && parent.isExpressionStatement());

            if (removeParent) {
              parent.remove();
              return true;
            }
          },
          function (self, parent) {
            if (
              parent.isSequenceExpression() &&
              parent.node.expressions.length === 1
            ) {
              parent.replaceWith(parent.node.expressions[0]);
              return true;
            }
          },
          function (self, parent) {
            if (parent.isBinary()) {
              if (self.key === "left") {
                parent.replaceWith(parent.node.right);
              } else {
                parent.replaceWith(parent.node.left);
              }

              return true;
            }
          },
          function (self, parent) {
            if (
              (parent.isIfStatement() &&
                (self.key === "consequent" || self.key === "alternate")) ||
              (self.key === "body" &&
                (parent.isLoop() || parent.isArrowFunctionExpression()))
            ) {
              self.replaceWith({
                type: "BlockStatement",
                body: [],
              });
              return true;
            }
          },
        ];
        exports.hooks = hooks;
      },
      {},
    ],
    113: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ForAwaitStatement =
          exports.NumericLiteralTypeAnnotation =
          exports.ExistentialTypeParam =
          exports.SpreadProperty =
          exports.RestProperty =
          exports.Flow =
          exports.Pure =
          exports.Generated =
          exports.User =
          exports.Var =
          exports.BlockScoped =
          exports.Referenced =
          exports.Scope =
          exports.Expression =
          exports.Statement =
          exports.BindingIdentifier =
          exports.ReferencedMemberExpression =
          exports.ReferencedIdentifier =
            void 0;

        var t = require("@babel/types");

        const ReferencedIdentifier = {
          types: ["Identifier", "JSXIdentifier"],

          checkPath(path, opts) {
            const { node, parent } = path;

            if (
              !t.isIdentifier(node, opts) &&
              !t.isJSXMemberExpression(parent, opts)
            ) {
              if (t.isJSXIdentifier(node, opts)) {
                if (t.react.isCompatTag(node.name)) return false;
              } else {
                return false;
              }
            }

            return t.isReferenced(node, parent, path.parentPath.parent);
          },
        };
        exports.ReferencedIdentifier = ReferencedIdentifier;
        const ReferencedMemberExpression = {
          types: ["MemberExpression"],

          checkPath({ node, parent }) {
            return t.isMemberExpression(node) && t.isReferenced(node, parent);
          },
        };
        exports.ReferencedMemberExpression = ReferencedMemberExpression;
        const BindingIdentifier = {
          types: ["Identifier"],

          checkPath(path) {
            const { node, parent } = path;
            const grandparent = path.parentPath.parent;
            return (
              t.isIdentifier(node) && t.isBinding(node, parent, grandparent)
            );
          },
        };
        exports.BindingIdentifier = BindingIdentifier;
        const Statement = {
          types: ["Statement"],

          checkPath({ node, parent }) {
            if (t.isStatement(node)) {
              if (t.isVariableDeclaration(node)) {
                if (
                  t.isForXStatement(parent, {
                    left: node,
                  })
                )
                  return false;
                if (
                  t.isForStatement(parent, {
                    init: node,
                  })
                )
                  return false;
              }

              return true;
            } else {
              return false;
            }
          },
        };
        exports.Statement = Statement;
        const Expression = {
          types: ["Expression"],

          checkPath(path) {
            if (path.isIdentifier()) {
              return path.isReferencedIdentifier();
            } else {
              return t.isExpression(path.node);
            }
          },
        };
        exports.Expression = Expression;
        const Scope = {
          types: ["Scopable", "Pattern"],

          checkPath(path) {
            return t.isScope(path.node, path.parent);
          },
        };
        exports.Scope = Scope;
        const Referenced = {
          checkPath(path) {
            return t.isReferenced(path.node, path.parent);
          },
        };
        exports.Referenced = Referenced;
        const BlockScoped = {
          checkPath(path) {
            return t.isBlockScoped(path.node);
          },
        };
        exports.BlockScoped = BlockScoped;
        const Var = {
          types: ["VariableDeclaration"],

          checkPath(path) {
            return t.isVar(path.node);
          },
        };
        exports.Var = Var;
        const User = {
          checkPath(path) {
            return path.node && !!path.node.loc;
          },
        };
        exports.User = User;
        const Generated = {
          checkPath(path) {
            return !path.isUser();
          },
        };
        exports.Generated = Generated;
        const Pure = {
          checkPath(path, opts) {
            return path.scope.isPure(path.node, opts);
          },
        };
        exports.Pure = Pure;
        const Flow = {
          types: [
            "Flow",
            "ImportDeclaration",
            "ExportDeclaration",
            "ImportSpecifier",
          ],

          checkPath({ node }) {
            if (t.isFlow(node)) {
              return true;
            } else if (t.isImportDeclaration(node)) {
              return node.importKind === "type" || node.importKind === "typeof";
            } else if (t.isExportDeclaration(node)) {
              return node.exportKind === "type";
            } else if (t.isImportSpecifier(node)) {
              return node.importKind === "type" || node.importKind === "typeof";
            } else {
              return false;
            }
          },
        };
        exports.Flow = Flow;
        const RestProperty = {
          types: ["RestElement"],

          checkPath(path) {
            return path.parentPath && path.parentPath.isObjectPattern();
          },
        };
        exports.RestProperty = RestProperty;
        const SpreadProperty = {
          types: ["RestElement"],

          checkPath(path) {
            return path.parentPath && path.parentPath.isObjectExpression();
          },
        };
        exports.SpreadProperty = SpreadProperty;
        const ExistentialTypeParam = {
          types: ["ExistsTypeAnnotation"],
        };
        exports.ExistentialTypeParam = ExistentialTypeParam;
        const NumericLiteralTypeAnnotation = {
          types: ["NumberLiteralTypeAnnotation"],
        };
        exports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;
        const ForAwaitStatement = {
          types: ["ForOfStatement"],

          checkPath({ node }) {
            return node.await === true;
          },
        };
        exports.ForAwaitStatement = ForAwaitStatement;
      },
      { "@babel/types": 168 },
    ],
    114: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.insertBefore = insertBefore;
        exports._containerInsert = _containerInsert;
        exports._containerInsertBefore = _containerInsertBefore;
        exports._containerInsertAfter = _containerInsertAfter;
        exports.insertAfter = insertAfter;
        exports.updateSiblingKeys = updateSiblingKeys;
        exports._verifyNodeList = _verifyNodeList;
        exports.unshiftContainer = unshiftContainer;
        exports.pushContainer = pushContainer;
        exports.hoist = hoist;

        var _cache = require("../cache");

        var _hoister = require("./lib/hoister");

        var _index = require("./index");

        var t = require("@babel/types");

        function insertBefore(nodes_) {
          this._assertUnremoved();

          const nodes = this._verifyNodeList(nodes_);

          const { parentPath } = this;

          if (
            parentPath.isExpressionStatement() ||
            parentPath.isLabeledStatement() ||
            parentPath.isExportNamedDeclaration() ||
            (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          ) {
            return parentPath.insertBefore(nodes);
          } else if (
            (this.isNodeType("Expression") && !this.isJSXElement()) ||
            (parentPath.isForStatement() && this.key === "init")
          ) {
            if (this.node) nodes.push(this.node);
            return this.replaceExpressionWithStatements(nodes);
          } else if (Array.isArray(this.container)) {
            return this._containerInsertBefore(nodes);
          } else if (this.isStatementOrBlock()) {
            const node = this.node;
            const shouldInsertCurrentNode =
              node &&
              (!this.isExpressionStatement() || node.expression != null);
            this.replaceWith(
              t.blockStatement(shouldInsertCurrentNode ? [node] : [])
            );
            return this.unshiftContainer("body", nodes);
          } else {
            throw new Error(
              "We don't know what to do with this node type. " +
                "We were previously a Statement but we can't fit in here?"
            );
          }
        }

        function _containerInsert(from, nodes) {
          this.updateSiblingKeys(from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);

          for (let i = 0; i < nodes.length; i++) {
            const to = from + i;
            const path = this.getSibling(to);
            paths.push(path);

            if (this.context && this.context.queue) {
              path.pushContext(this.context);
            }
          }

          const contexts = this._getQueueContexts();

          for (const path of paths) {
            path.setScope();
            path.debug("Inserted.");

            for (const context of contexts) {
              context.maybeQueue(path, true);
            }
          }

          return paths;
        }

        function _containerInsertBefore(nodes) {
          return this._containerInsert(this.key, nodes);
        }

        function _containerInsertAfter(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }

        function insertAfter(nodes_) {
          this._assertUnremoved();

          const nodes = this._verifyNodeList(nodes_);

          const { parentPath } = this;

          if (
            parentPath.isExpressionStatement() ||
            parentPath.isLabeledStatement() ||
            parentPath.isExportNamedDeclaration() ||
            (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          ) {
            return parentPath.insertAfter(
              nodes.map((node) => {
                return t.isExpression(node)
                  ? t.expressionStatement(node)
                  : node;
              })
            );
          } else if (
            (this.isNodeType("Expression") &&
              !this.isJSXElement() &&
              !parentPath.isJSXElement()) ||
            (parentPath.isForStatement() && this.key === "init")
          ) {
            if (this.node) {
              const node = this.node;
              let { scope } = this;

              if (scope.path.isPattern()) {
                t.assertExpression(node);
                this.replaceWith(
                  t.callExpression(t.arrowFunctionExpression([], node), [])
                );
                this.get("callee.body").insertAfter(nodes);
                return [this];
              }

              if (
                parentPath.isMethod({
                  computed: true,
                  key: node,
                })
              ) {
                scope = scope.parent;
              }

              const temp = scope.generateDeclaredUidIdentifier();
              nodes.unshift(
                t.expressionStatement(
                  t.assignmentExpression("=", t.cloneNode(temp), node)
                )
              );
              nodes.push(t.expressionStatement(t.cloneNode(temp)));
            }

            return this.replaceExpressionWithStatements(nodes);
          } else if (Array.isArray(this.container)) {
            return this._containerInsertAfter(nodes);
          } else if (this.isStatementOrBlock()) {
            const node = this.node;
            const shouldInsertCurrentNode =
              node &&
              (!this.isExpressionStatement() || node.expression != null);
            this.replaceWith(
              t.blockStatement(shouldInsertCurrentNode ? [node] : [])
            );
            return this.pushContainer("body", nodes);
          } else {
            throw new Error(
              "We don't know what to do with this node type. " +
                "We were previously a Statement but we can't fit in here?"
            );
          }
        }

        function updateSiblingKeys(fromIndex, incrementBy) {
          if (!this.parent) return;

          const paths = _cache.path.get(this.parent);

          for (const [, path] of paths) {
            if (path.key >= fromIndex) {
              path.key += incrementBy;
            }
          }
        }

        function _verifyNodeList(nodes) {
          if (!nodes) {
            return [];
          }

          if (!Array.isArray(nodes)) {
            nodes = [nodes];
          }

          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            let msg;

            if (!node) {
              msg = "has falsy node";
            } else if (typeof node !== "object") {
              msg = "contains a non-object node";
            } else if (!node.type) {
              msg = "without a type";
            } else if (node instanceof _index.default) {
              msg = "has a NodePath when it expected a raw object";
            }

            if (msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(
                `Node list ${msg} with the index of ${i} and type of ${type}`
              );
            }
          }

          return nodes;
        }

        function unshiftContainer(listKey, nodes) {
          this._assertUnremoved();

          nodes = this._verifyNodeList(nodes);

          const path = _index.default
            .get({
              parentPath: this,
              parent: this.node,
              container: this.node[listKey],
              listKey,
              key: 0,
            })
            .setContext(this.context);

          return path._containerInsertBefore(nodes);
        }

        function pushContainer(listKey, nodes) {
          this._assertUnremoved();

          const verifiedNodes = this._verifyNodeList(nodes);

          const container = this.node[listKey];

          const path = _index.default
            .get({
              parentPath: this,
              parent: this.node,
              container: container,
              listKey,
              key: container.length,
            })
            .setContext(this.context);

          return path.replaceWithMultiple(verifiedNodes);
        }

        function hoist(scope = this.scope) {
          const hoister = new _hoister.default(this, scope);
          return hoister.run();
        }
      },
      {
        "../cache": 96,
        "./index": 106,
        "./lib/hoister": 111,
        "@babel/types": 168,
      },
    ],
    115: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.remove = remove;
        exports._removeFromScope = _removeFromScope;
        exports._callRemovalHooks = _callRemovalHooks;
        exports._remove = _remove;
        exports._markRemoved = _markRemoved;
        exports._assertUnremoved = _assertUnremoved;

        var _removalHooks = require("./lib/removal-hooks");

        var _cache = require("../cache");

        var _index = require("./index");

        function remove() {
          var _this$opts;

          this._assertUnremoved();

          this.resync();

          if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
            this._removeFromScope();
          }

          if (this._callRemovalHooks()) {
            this._markRemoved();

            return;
          }

          this.shareCommentsWithSiblings();

          this._remove();

          this._markRemoved();
        }

        function _removeFromScope() {
          const bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach((name) =>
            this.scope.removeBinding(name)
          );
        }

        function _callRemovalHooks() {
          for (const fn of _removalHooks.hooks) {
            if (fn(this, this.parentPath)) return true;
          }
        }

        function _remove() {
          if (Array.isArray(this.container)) {
            this.container.splice(this.key, 1);
            this.updateSiblingKeys(this.key, -1);
          } else {
            this._replaceWith(null);
          }
        }

        function _markRemoved() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
          if (this.parent) _cache.path.get(this.parent).delete(this.node);
          this.node = null;
        }

        function _assertUnremoved() {
          if (this.removed) {
            throw this.buildCodeFrameError(
              "NodePath has been removed so is read-only."
            );
          }
        }
      },
      { "../cache": 96, "./index": 106, "./lib/removal-hooks": 112 },
    ],
    116: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.replaceWithMultiple = replaceWithMultiple;
        exports.replaceWithSourceString = replaceWithSourceString;
        exports.replaceWith = replaceWith;
        exports._replaceWith = _replaceWith;
        exports.replaceExpressionWithStatements =
          replaceExpressionWithStatements;
        exports.replaceInline = replaceInline;

        var _codeFrame = require("@babel/code-frame");

        var _index = require("../index");

        var _index2 = require("./index");

        var _cache = require("../cache");

        var _parser = require("@babel/parser");

        var t = require("@babel/types");

        var _helperHoistVariables = require("@babel/helper-hoist-variables");

        function replaceWithMultiple(nodes) {
          var _pathCache$get;

          this.resync();
          nodes = this._verifyNodeList(nodes);
          t.inheritLeadingComments(nodes[0], this.node);
          t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
          (_pathCache$get = _cache.path.get(this.parent)) == null
            ? void 0
            : _pathCache$get.delete(this.node);
          this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);

          if (this.node) {
            this.requeue();
          } else {
            this.remove();
          }

          return paths;
        }

        function replaceWithSourceString(replacement) {
          this.resync();

          try {
            replacement = `(${replacement})`;
            replacement = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;

            if (loc) {
              err.message +=
                " - make sure this is an expression.\n" +
                (0, _codeFrame.codeFrameColumns)(replacement, {
                  start: {
                    line: loc.line,
                    column: loc.column + 1,
                  },
                });
              err.code = "BABEL_REPLACE_SOURCE_ERROR";
            }

            throw err;
          }

          replacement = replacement.program.body[0].expression;

          _index.default.removeProperties(replacement);

          return this.replaceWith(replacement);
        }

        function replaceWith(replacement) {
          this.resync();

          if (this.removed) {
            throw new Error(
              "You can't replace this node, we've already removed it"
            );
          }

          if (replacement instanceof _index2.default) {
            replacement = replacement.node;
          }

          if (!replacement) {
            throw new Error(
              "You passed `path.replaceWith()` a falsy node, use `path.remove()` instead"
            );
          }

          if (this.node === replacement) {
            return [this];
          }

          if (this.isProgram() && !t.isProgram(replacement)) {
            throw new Error(
              "You can only replace a Program root node with another Program node"
            );
          }

          if (Array.isArray(replacement)) {
            throw new Error(
              "Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`"
            );
          }

          if (typeof replacement === "string") {
            throw new Error(
              "Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`"
            );
          }

          let nodePath = "";

          if (this.isNodeType("Statement") && t.isExpression(replacement)) {
            if (
              !this.canHaveVariableDeclarationOrExpression() &&
              !this.canSwapBetweenExpressionAndStatement(replacement) &&
              !this.parentPath.isExportDefaultDeclaration()
            ) {
              replacement = t.expressionStatement(replacement);
              nodePath = "expression";
            }
          }

          if (this.isNodeType("Expression") && t.isStatement(replacement)) {
            if (
              !this.canHaveVariableDeclarationOrExpression() &&
              !this.canSwapBetweenExpressionAndStatement(replacement)
            ) {
              return this.replaceExpressionWithStatements([replacement]);
            }
          }

          const oldNode = this.node;

          if (oldNode) {
            t.inheritsComments(replacement, oldNode);
            t.removeComments(oldNode);
          }

          this._replaceWith(replacement);

          this.type = replacement.type;
          this.setScope();
          this.requeue();
          return [nodePath ? this.get(nodePath) : this];
        }

        function _replaceWith(node) {
          var _pathCache$get2;

          if (!this.container) {
            throw new ReferenceError("Container is falsy");
          }

          if (this.inList) {
            t.validate(this.parent, this.key, [node]);
          } else {
            t.validate(this.parent, this.key, node);
          }

          this.debug(`Replace with ${node == null ? void 0 : node.type}`);
          (_pathCache$get2 = _cache.path.get(this.parent)) == null
            ? void 0
            : _pathCache$get2.set(node, this).delete(this.node);
          this.node = this.container[this.key] = node;
        }

        function replaceExpressionWithStatements(nodes) {
          this.resync();
          const toSequenceExpression = t.toSequenceExpression(
            nodes,
            this.scope
          );

          if (toSequenceExpression) {
            return this.replaceWith(toSequenceExpression)[0].get("expressions");
          }

          const functionParent = this.getFunctionParent();
          const isParentAsync =
            functionParent == null ? void 0 : functionParent.is("async");
          const isParentGenerator =
            functionParent == null ? void 0 : functionParent.is("generator");
          const container = t.arrowFunctionExpression(
            [],
            t.blockStatement(nodes)
          );
          this.replaceWith(t.callExpression(container, []));
          const callee = this.get("callee");
          (0, _helperHoistVariables.default)(
            callee.get("body"),
            (id) => {
              this.scope.push({
                id,
              });
            },
            "var"
          );
          const completionRecords = this.get("callee").getCompletionRecords();

          for (const path of completionRecords) {
            if (!path.isExpressionStatement()) continue;
            const loop = path.findParent((path) => path.isLoop());

            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");

              if (!uid) {
                uid = callee.scope.generateDeclaredUidIdentifier("ret");
                callee
                  .get("body")
                  .pushContainer("body", t.returnStatement(t.cloneNode(uid)));
                loop.setData("expressionReplacementReturnUid", uid);
              } else {
                uid = t.identifier(uid.name);
              }

              path
                .get("expression")
                .replaceWith(
                  t.assignmentExpression(
                    "=",
                    t.cloneNode(uid),
                    path.node.expression
                  )
                );
            } else {
              path.replaceWith(t.returnStatement(path.node.expression));
            }
          }

          callee.arrowFunctionToExpression();
          const newCallee = callee;

          const needToAwaitFunction =
            isParentAsync &&
            _index.default.hasType(
              this.get("callee.body").node,
              "AwaitExpression",
              t.FUNCTION_TYPES
            );

          const needToYieldFunction =
            isParentGenerator &&
            _index.default.hasType(
              this.get("callee.body").node,
              "YieldExpression",
              t.FUNCTION_TYPES
            );

          if (needToAwaitFunction) {
            newCallee.set("async", true);

            if (!needToYieldFunction) {
              this.replaceWith(t.awaitExpression(this.node));
            }
          }

          if (needToYieldFunction) {
            newCallee.set("generator", true);
            this.replaceWith(t.yieldExpression(this.node, true));
          }

          return newCallee.get("body.body");
        }

        function replaceInline(nodes) {
          this.resync();

          if (Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);

              const paths = this._containerInsertAfter(nodes);

              this.remove();
              return paths;
            } else {
              return this.replaceWithMultiple(nodes);
            }
          } else {
            return this.replaceWith(nodes);
          }
        }
      },
      {
        "../cache": 96,
        "../index": 99,
        "./index": 106,
        "@babel/code-frame": 1,
        "@babel/helper-hoist-variables": 63,
        "@babel/parser": 85,
        "@babel/types": 168,
      },
    ],
    117: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        class Binding {
          constructor({ identifier, scope, path, kind }) {
            this.identifier = void 0;
            this.scope = void 0;
            this.path = void 0;
            this.kind = void 0;
            this.constantViolations = [];
            this.constant = true;
            this.referencePaths = [];
            this.referenced = false;
            this.references = 0;
            this.identifier = identifier;
            this.scope = scope;
            this.path = path;
            this.kind = kind;
            this.clearValue();
          }

          deoptValue() {
            this.clearValue();
            this.hasDeoptedValue = true;
          }

          setValue(value) {
            if (this.hasDeoptedValue) return;
            this.hasValue = true;
            this.value = value;
          }

          clearValue() {
            this.hasDeoptedValue = false;
            this.hasValue = false;
            this.value = null;
          }

          reassign(path) {
            this.constant = false;

            if (this.constantViolations.indexOf(path) !== -1) {
              return;
            }

            this.constantViolations.push(path);
          }

          reference(path) {
            if (this.referencePaths.indexOf(path) !== -1) {
              return;
            }

            this.referenced = true;
            this.references++;
            this.referencePaths.push(path);
          }

          dereference() {
            this.references--;
            this.referenced = !!this.references;
          }
        }

        exports.default = Binding;
      },
      {},
    ],
    118: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _renamer = require("./lib/renamer");

        var _index = require("../index");

        var _binding = require("./binding");

        var _globals = require("globals");

        var t = require("@babel/types");

        var _cache = require("../cache");

        function gatherNodeParts(node, parts) {
          switch (node == null ? void 0 : node.type) {
            default:
              if (t.isModuleDeclaration(node)) {
                if (
                  (t.isExportAllDeclaration(node) ||
                    t.isExportNamedDeclaration(node) ||
                    t.isImportDeclaration(node)) &&
                  node.source
                ) {
                  gatherNodeParts(node.source, parts);
                } else if (
                  (t.isExportNamedDeclaration(node) ||
                    t.isImportDeclaration(node)) &&
                  node.specifiers &&
                  node.specifiers.length
                ) {
                  for (const e of node.specifiers) gatherNodeParts(e, parts);
                } else if (
                  (t.isExportDefaultDeclaration(node) ||
                    t.isExportNamedDeclaration(node)) &&
                  node.declaration
                ) {
                  gatherNodeParts(node.declaration, parts);
                }
              } else if (t.isModuleSpecifier(node)) {
                gatherNodeParts(node.local, parts);
              } else if (t.isLiteral(node)) {
                parts.push(node.value);
              }

              break;

            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts);
              gatherNodeParts(node.property, parts);
              break;

            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;

            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;

            case "ObjectExpression":
            case "ObjectPattern":
              for (const e of node.properties) {
                gatherNodeParts(e, parts);
              }

              break;

            case "SpreadElement":
            case "RestElement":
              gatherNodeParts(node.argument, parts);
              break;

            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;

            case "ThisExpression":
              parts.push("this");
              break;

            case "Super":
              parts.push("super");
              break;

            case "Import":
              parts.push("import");
              break;

            case "DoExpression":
              parts.push("do");
              break;

            case "YieldExpression":
              parts.push("yield");
              gatherNodeParts(node.argument, parts);
              break;

            case "AwaitExpression":
              parts.push("await");
              gatherNodeParts(node.argument, parts);
              break;

            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;

            case "VariableDeclarator":
              gatherNodeParts(node.id, parts);
              break;

            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
              gatherNodeParts(node.id, parts);
              break;

            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;

            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;

            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;

            case "MetaProperty":
              gatherNodeParts(node.meta, parts);
              gatherNodeParts(node.property, parts);
              break;

            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;

            case "JSXOpeningElement":
              parts.push(node.name);
              break;

            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;

            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;

            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts);
              gatherNodeParts(node.name, parts);
              break;
          }
        }

        const collectorVisitor = {
          For(path) {
            for (const key of t.FOR_INIT_KEYS) {
              const declar = path.get(key);

              if (declar.isVar()) {
                const parentScope =
                  path.scope.getFunctionParent() ||
                  path.scope.getProgramParent();
                parentScope.registerBinding("var", declar);
              }
            }
          },

          Declaration(path) {
            if (path.isBlockScoped()) return;
            if (path.isImportDeclaration()) return;
            if (path.isExportDeclaration()) return;
            const parent =
              path.scope.getFunctionParent() || path.scope.getProgramParent();
            parent.registerDeclaration(path);
          },

          ImportDeclaration(path) {
            const parent = path.scope.getBlockParent();
            parent.registerDeclaration(path);
          },

          ReferencedIdentifier(path, state) {
            state.references.push(path);
          },

          ForXStatement(path, state) {
            const left = path.get("left");

            if (left.isPattern() || left.isIdentifier()) {
              state.constantViolations.push(path);
            }
          },

          ExportDeclaration: {
            exit(path) {
              const { node, scope } = path;
              if (t.isExportAllDeclaration(node)) return;
              const declar = node.declaration;

              if (
                t.isClassDeclaration(declar) ||
                t.isFunctionDeclaration(declar)
              ) {
                const id = declar.id;
                if (!id) return;
                const binding = scope.getBinding(id.name);
                if (binding) binding.reference(path);
              } else if (t.isVariableDeclaration(declar)) {
                for (const decl of declar.declarations) {
                  for (const name of Object.keys(
                    t.getBindingIdentifiers(decl)
                  )) {
                    const binding = scope.getBinding(name);
                    if (binding) binding.reference(path);
                  }
                }
              }
            },
          },

          LabeledStatement(path) {
            path.scope.getBlockParent().registerDeclaration(path);
          },

          AssignmentExpression(path, state) {
            state.assignments.push(path);
          },

          UpdateExpression(path, state) {
            state.constantViolations.push(path);
          },

          UnaryExpression(path, state) {
            if (path.node.operator === "delete") {
              state.constantViolations.push(path);
            }
          },

          BlockScoped(path) {
            let scope = path.scope;
            if (scope.path === path) scope = scope.parent;
            const parent = scope.getBlockParent();
            parent.registerDeclaration(path);

            if (path.isClassDeclaration() && path.node.id) {
              const id = path.node.id;
              const name = id.name;
              path.scope.bindings[name] = path.scope.parent.getBinding(name);
            }
          },

          CatchClause(path) {
            path.scope.registerBinding("let", path);
          },

          Function(path) {
            if (
              path.isFunctionExpression() &&
              path.has("id") &&
              !path.get("id").node[t.NOT_LOCAL_BINDING]
            ) {
              path.scope.registerBinding("local", path.get("id"), path);
            }

            const params = path.get("params");

            for (const param of params) {
              path.scope.registerBinding("param", param);
            }
          },

          ClassExpression(path) {
            if (path.has("id") && !path.get("id").node[t.NOT_LOCAL_BINDING]) {
              path.scope.registerBinding("local", path);
            }
          },
        };
        let uid = 0;

        class Scope {
          constructor(path) {
            this.uid = void 0;
            this.path = void 0;
            this.block = void 0;
            this.labels = void 0;
            this.inited = void 0;
            this.bindings = void 0;
            this.references = void 0;
            this.globals = void 0;
            this.uids = void 0;
            this.data = void 0;
            this.crawling = void 0;
            const { node } = path;

            const cached = _cache.scope.get(node);

            if ((cached == null ? void 0 : cached.path) === path) {
              return cached;
            }

            _cache.scope.set(node, this);

            this.uid = uid++;
            this.block = node;
            this.path = path;
            this.labels = new Map();
            this.inited = false;
          }

          get parent() {
            var _parent;

            let parent,
              path = this.path;

            do {
              const isKey = path.key === "key";
              path = path.parentPath;
              if (isKey && path.isMethod()) path = path.parentPath;
              if (path && path.isScope()) parent = path;
            } while (path && !parent);

            return (_parent = parent) == null ? void 0 : _parent.scope;
          }

          get parentBlock() {
            return this.path.parent;
          }

          get hub() {
            return this.path.hub;
          }

          traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          }

          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            this.push({
              id,
            });
            return t.cloneNode(id);
          }

          generateUidIdentifier(name) {
            return t.identifier(this.generateUid(name));
          }

          generateUid(name = "temp") {
            name = t
              .toIdentifier(name)
              .replace(/^_+/, "")
              .replace(/[0-9]+$/g, "");
            let uid;
            let i = 1;

            do {
              uid = this._generateUid(name, i);
              i++;
            } while (
              this.hasLabel(uid) ||
              this.hasBinding(uid) ||
              this.hasGlobal(uid) ||
              this.hasReference(uid)
            );

            const program = this.getProgramParent();
            program.references[uid] = true;
            program.uids[uid] = true;
            return uid;
          }

          _generateUid(name, i) {
            let id = name;
            if (i > 1) id += i;
            return `_${id}`;
          }

          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            id = id.replace(/^_/, "") || defaultName || "ref";
            return this.generateUid(id.slice(0, 20));
          }

          generateUidIdentifierBasedOnNode(node, defaultName) {
            return t.identifier(this.generateUidBasedOnNode(node, defaultName));
          }

          isStatic(node) {
            if (t.isThisExpression(node) || t.isSuper(node)) {
              return true;
            }

            if (t.isIdentifier(node)) {
              const binding = this.getBinding(node.name);

              if (binding) {
                return binding.constant;
              } else {
                return this.hasBinding(node.name);
              }
            }

            return false;
          }

          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node)) {
              return null;
            } else {
              const id = this.generateUidIdentifierBasedOnNode(node);

              if (!dontPush) {
                this.push({
                  id,
                });
                return t.cloneNode(id);
              }

              return id;
            }
          }

          checkBlockScopedCollisions(local, kind, name, id) {
            if (kind === "param") return;
            if (local.kind === "local") return;
            const duplicate =
              kind === "let" ||
              local.kind === "let" ||
              local.kind === "const" ||
              local.kind === "module" ||
              (local.kind === "param" && (kind === "let" || kind === "const"));

            if (duplicate) {
              throw this.hub.buildError(
                id,
                `Duplicate declaration "${name}"`,
                TypeError
              );
            }
          }

          rename(oldName, newName, block) {
            const binding = this.getBinding(oldName);

            if (binding) {
              newName = newName || this.generateUidIdentifier(oldName).name;
              return new _renamer.default(binding, oldName, newName).rename(
                block
              );
            }
          }

          _renameFromMap(map, oldName, newName, value) {
            if (map[oldName]) {
              map[newName] = value;
              map[oldName] = null;
            }
          }

          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;

            do {
              console.log("#", scope.block.type);

              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, {
                  constant: binding.constant,
                  references: binding.references,
                  violations: binding.constantViolations.length,
                  kind: binding.kind,
                });
              }
            } while ((scope = scope.parent));

            console.log(sep);
          }

          toArray(node, i, arrayLikeIsIterable) {
            if (t.isIdentifier(node)) {
              const binding = this.getBinding(node.name);

              if (
                binding != null &&
                binding.constant &&
                binding.path.isGenericType("Array")
              ) {
                return node;
              }
            }

            if (t.isArrayExpression(node)) {
              return node;
            }

            if (
              t.isIdentifier(node, {
                name: "arguments",
              })
            ) {
              return t.callExpression(
                t.memberExpression(
                  t.memberExpression(
                    t.memberExpression(
                      t.identifier("Array"),
                      t.identifier("prototype")
                    ),
                    t.identifier("slice")
                  ),
                  t.identifier("call")
                ),
                [node]
              );
            }

            let helperName;
            const args = [node];

            if (i === true) {
              helperName = "toConsumableArray";
            } else if (i) {
              args.push(t.numericLiteral(i));
              helperName = "slicedToArray";
            } else {
              helperName = "toArray";
            }

            if (arrayLikeIsIterable) {
              args.unshift(this.hub.addHelper(helperName));
              helperName = "maybeArrayLike";
            }

            return t.callExpression(this.hub.addHelper(helperName), args);
          }

          hasLabel(name) {
            return !!this.getLabel(name);
          }

          getLabel(name) {
            return this.labels.get(name);
          }

          registerLabel(path) {
            this.labels.set(path.node.label.name, path);
          }

          registerDeclaration(path) {
            if (path.isLabeledStatement()) {
              this.registerLabel(path);
            } else if (path.isFunctionDeclaration()) {
              this.registerBinding("hoisted", path.get("id"), path);
            } else if (path.isVariableDeclaration()) {
              const declarations = path.get("declarations");

              for (const declar of declarations) {
                this.registerBinding(path.node.kind, declar);
              }
            } else if (path.isClassDeclaration()) {
              this.registerBinding("let", path);
            } else if (path.isImportDeclaration()) {
              const specifiers = path.get("specifiers");

              for (const specifier of specifiers) {
                this.registerBinding("module", specifier);
              }
            } else if (path.isExportDeclaration()) {
              const declar = path.get("declaration");

              if (
                declar.isClassDeclaration() ||
                declar.isFunctionDeclaration() ||
                declar.isVariableDeclaration()
              ) {
                this.registerDeclaration(declar);
              }
            } else {
              this.registerBinding("unknown", path);
            }
          }

          buildUndefinedNode() {
            return t.unaryExpression("void", t.numericLiteral(0), true);
          }

          registerConstantViolation(path) {
            const ids = path.getBindingIdentifiers();

            for (const name of Object.keys(ids)) {
              const binding = this.getBinding(name);
              if (binding) binding.reassign(path);
            }
          }

          registerBinding(kind, path, bindingPath = path) {
            if (!kind) throw new ReferenceError("no `kind`");

            if (path.isVariableDeclaration()) {
              const declarators = path.get("declarations");

              for (const declar of declarators) {
                this.registerBinding(kind, declar);
              }

              return;
            }

            const parent = this.getProgramParent();
            const ids = path.getOuterBindingIdentifiers(true);

            for (const name of Object.keys(ids)) {
              parent.references[name] = true;

              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);

                if (local) {
                  if (local.identifier === id) continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }

                if (local) {
                  this.registerConstantViolation(bindingPath);
                } else {
                  this.bindings[name] = new _binding.default({
                    identifier: id,
                    scope: this,
                    path: bindingPath,
                    kind: kind,
                  });
                }
              }
            }
          }

          addGlobal(node) {
            this.globals[node.name] = node;
          }

          hasUid(name) {
            let scope = this;

            do {
              if (scope.uids[name]) return true;
            } while ((scope = scope.parent));

            return false;
          }

          hasGlobal(name) {
            let scope = this;

            do {
              if (scope.globals[name]) return true;
            } while ((scope = scope.parent));

            return false;
          }

          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }

          isPure(node, constantsOnly) {
            if (t.isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              if (!binding) return false;
              if (constantsOnly) return binding.constant;
              return true;
            } else if (t.isClass(node)) {
              if (
                node.superClass &&
                !this.isPure(node.superClass, constantsOnly)
              ) {
                return false;
              }

              return this.isPure(node.body, constantsOnly);
            } else if (t.isClassBody(node)) {
              for (const method of node.body) {
                if (!this.isPure(method, constantsOnly)) return false;
              }

              return true;
            } else if (t.isBinary(node)) {
              return (
                this.isPure(node.left, constantsOnly) &&
                this.isPure(node.right, constantsOnly)
              );
            } else if (t.isArrayExpression(node)) {
              for (const elem of node.elements) {
                if (!this.isPure(elem, constantsOnly)) return false;
              }

              return true;
            } else if (t.isObjectExpression(node)) {
              for (const prop of node.properties) {
                if (!this.isPure(prop, constantsOnly)) return false;
              }

              return true;
            } else if (t.isMethod(node)) {
              if (node.computed && !this.isPure(node.key, constantsOnly))
                return false;
              if (node.kind === "get" || node.kind === "set") return false;
              return true;
            } else if (t.isProperty(node)) {
              if (node.computed && !this.isPure(node.key, constantsOnly))
                return false;
              return this.isPure(node.value, constantsOnly);
            } else if (t.isUnaryExpression(node)) {
              return this.isPure(node.argument, constantsOnly);
            } else if (t.isTaggedTemplateExpression(node)) {
              return (
                t.matchesPattern(node.tag, "String.raw") &&
                !this.hasBinding("String", true) &&
                this.isPure(node.quasi, constantsOnly)
              );
            } else if (t.isTemplateLiteral(node)) {
              for (const expression of node.expressions) {
                if (!this.isPure(expression, constantsOnly)) return false;
              }

              return true;
            } else {
              return t.isPureish(node);
            }
          }

          setData(key, val) {
            return (this.data[key] = val);
          }

          getData(key) {
            let scope = this;

            do {
              const data = scope.data[key];
              if (data != null) return data;
            } while ((scope = scope.parent));
          }

          removeData(key) {
            let scope = this;

            do {
              const data = scope.data[key];
              if (data != null) scope.data[key] = null;
            } while ((scope = scope.parent));
          }

          init() {
            if (!this.inited) {
              this.inited = true;
              this.crawl();
            }
          }

          crawl() {
            const path = this.path;
            this.references = Object.create(null);
            this.bindings = Object.create(null);
            this.globals = Object.create(null);
            this.uids = Object.create(null);
            this.data = Object.create(null);
            const programParent = this.getProgramParent();
            if (programParent.crawling) return;
            const state = {
              references: [],
              constantViolations: [],
              assignments: [],
            };
            this.crawling = true;

            if (path.type !== "Program" && collectorVisitor._exploded) {
              for (const visit of collectorVisitor.enter) {
                visit(path, state);
              }

              const typeVisitors = collectorVisitor[path.type];

              if (typeVisitors) {
                for (const visit of typeVisitors.enter) {
                  visit(path, state);
                }
              }
            }

            path.traverse(collectorVisitor, state);
            this.crawling = false;

            for (const path of state.assignments) {
              const ids = path.getBindingIdentifiers();

              for (const name of Object.keys(ids)) {
                if (path.scope.getBinding(name)) continue;
                programParent.addGlobal(ids[name]);
              }

              path.scope.registerConstantViolation(path);
            }

            for (const ref of state.references) {
              const binding = ref.scope.getBinding(ref.node.name);

              if (binding) {
                binding.reference(ref);
              } else {
                programParent.addGlobal(ref.node);
              }
            }

            for (const path of state.constantViolations) {
              path.scope.registerConstantViolation(path);
            }
          }

          push(opts) {
            let path = this.path;

            if (!path.isBlockStatement() && !path.isProgram()) {
              path = this.getBlockParent().path;
            }

            if (path.isSwitchStatement()) {
              path = (this.getFunctionParent() || this.getProgramParent()).path;
            }

            if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
              path.ensureBlock();
              path = path.get("body");
            }

            const unique = opts.unique;
            const kind = opts.kind || "var";
            const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
            const dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique && path.getData(dataKey);

            if (!declarPath) {
              const declar = t.variableDeclaration(kind, []);
              declar._blockHoist = blockHoist;
              [declarPath] = path.unshiftContainer("body", [declar]);
              if (!unique) path.setData(dataKey, declarPath);
            }

            const declarator = t.variableDeclarator(opts.id, opts.init);
            declarPath.node.declarations.push(declarator);
            this.registerBinding(kind, declarPath.get("declarations").pop());
          }

          getProgramParent() {
            let scope = this;

            do {
              if (scope.path.isProgram()) {
                return scope;
              }
            } while ((scope = scope.parent));

            throw new Error("Couldn't find a Program");
          }

          getFunctionParent() {
            let scope = this;

            do {
              if (scope.path.isFunctionParent()) {
                return scope;
              }
            } while ((scope = scope.parent));

            return null;
          }

          getBlockParent() {
            let scope = this;

            do {
              if (scope.path.isBlockParent()) {
                return scope;
              }
            } while ((scope = scope.parent));

            throw new Error(
              "We couldn't find a BlockStatement, For, Switch, Function, Loop or Program..."
            );
          }

          getAllBindings() {
            const ids = Object.create(null);
            let scope = this;

            do {
              for (const key of Object.keys(scope.bindings)) {
                if (key in ids === false) {
                  ids[key] = scope.bindings[key];
                }
              }

              scope = scope.parent;
            } while (scope);

            return ids;
          }

          getAllBindingsOfKind(...kinds) {
            const ids = Object.create(null);

            for (const kind of kinds) {
              let scope = this;

              do {
                for (const name of Object.keys(scope.bindings)) {
                  const binding = scope.bindings[name];
                  if (binding.kind === kind) ids[name] = binding;
                }

                scope = scope.parent;
              } while (scope);
            }

            return ids;
          }

          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }

          getBinding(name) {
            let scope = this;
            let previousPath;

            do {
              const binding = scope.getOwnBinding(name);

              if (binding) {
                var _previousPath;

                if (
                  (_previousPath = previousPath) != null &&
                  _previousPath.isPattern() &&
                  binding.kind !== "param"
                ) {
                } else {
                  return binding;
                }
              }

              previousPath = scope.path;
            } while ((scope = scope.parent));
          }

          getOwnBinding(name) {
            return this.bindings[name];
          }

          getBindingIdentifier(name) {
            var _this$getBinding;

            return (_this$getBinding = this.getBinding(name)) == null
              ? void 0
              : _this$getBinding.identifier;
          }

          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return binding == null ? void 0 : binding.identifier;
          }

          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }

          hasBinding(name, noGlobals) {
            if (!name) return false;
            if (this.hasOwnBinding(name)) return true;
            if (this.parentHasBinding(name, noGlobals)) return true;
            if (this.hasUid(name)) return true;
            if (!noGlobals && Scope.globals.includes(name)) return true;
            if (!noGlobals && Scope.contextVariables.includes(name))
              return true;
            return false;
          }

          parentHasBinding(name, noGlobals) {
            var _this$parent;

            return (_this$parent = this.parent) == null
              ? void 0
              : _this$parent.hasBinding(name, noGlobals);
          }

          moveBindingTo(name, scope) {
            const info = this.getBinding(name);

            if (info) {
              info.scope.removeOwnBinding(name);
              info.scope = scope;
              scope.bindings[name] = info;
            }
          }

          removeOwnBinding(name) {
            delete this.bindings[name];
          }

          removeBinding(name) {
            var _this$getBinding2;

            (_this$getBinding2 = this.getBinding(name)) == null
              ? void 0
              : _this$getBinding2.scope.removeOwnBinding(name);
            let scope = this;

            do {
              if (scope.uids[name]) {
                scope.uids[name] = false;
              }
            } while ((scope = scope.parent));
          }
        }

        exports.default = Scope;
        Scope.globals = Object.keys(_globals.builtin);
        Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
      },
      {
        "../cache": 96,
        "../index": 99,
        "./binding": 117,
        "./lib/renamer": 119,
        "@babel/types": 168,
        globals: 250,
      },
    ],
    119: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _binding = require("../binding");

        var _helperSplitExportDeclaration = require("@babel/helper-split-export-declaration");

        var t = require("@babel/types");

        const renameVisitor = {
          ReferencedIdentifier({ node }, state) {
            if (node.name === state.oldName) {
              node.name = state.newName;
            }
          },

          Scope(path, state) {
            if (
              !path.scope.bindingIdentifierEquals(
                state.oldName,
                state.binding.identifier
              )
            ) {
              skipAllButComputedMethodKey(path);
            }
          },

          "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {
            if (path.isVariableDeclaration()) return;
            const ids = path.getOuterBindingIdentifiers();

            for (const name in ids) {
              if (name === state.oldName) ids[name].name = state.newName;
            }
          },
        };

        class Renamer {
          constructor(binding, oldName, newName) {
            this.newName = newName;
            this.oldName = oldName;
            this.binding = binding;
          }

          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;

            if (!maybeExportDeclar.isExportDeclaration()) {
              return;
            }

            if (
              maybeExportDeclar.isExportDefaultDeclaration() &&
              !maybeExportDeclar.get("declaration").node.id
            ) {
              return;
            }

            (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
          }

          maybeConvertFromClassFunctionDeclaration(path) {
            return;
            if (!path.isFunctionDeclaration() && !path.isClassDeclaration())
              return;
            if (this.binding.kind !== "hoisted") return;
            path.node.id = t.identifier(this.oldName);
            path.node._blockHoist = 3;
            path.replaceWith(
              t.variableDeclaration("let", [
                t.variableDeclarator(
                  t.identifier(this.newName),
                  t.toExpression(path.node)
                ),
              ])
            );
          }

          maybeConvertFromClassFunctionExpression(path) {
            return;
            if (!path.isFunctionExpression() && !path.isClassExpression())
              return;
            if (this.binding.kind !== "local") return;
            path.node.id = t.identifier(this.oldName);
            this.binding.scope.parent.push({
              id: t.identifier(this.newName),
            });
            path.replaceWith(
              t.assignmentExpression("=", t.identifier(this.newName), path.node)
            );
          }

          rename(block) {
            const { binding, oldName, newName } = this;
            const { scope, path } = binding;
            const parentDeclar = path.find(
              (path) =>
                path.isDeclaration() ||
                path.isFunctionExpression() ||
                path.isClassExpression()
            );

            if (parentDeclar) {
              const bindingIds = parentDeclar.getOuterBindingIdentifiers();

              if (bindingIds[oldName] === binding.identifier) {
                this.maybeConvertFromExportDeclaration(parentDeclar);
              }
            }

            const blockToTraverse = block || scope.block;

            if (
              (blockToTraverse == null ? void 0 : blockToTraverse.type) ===
              "SwitchStatement"
            ) {
              blockToTraverse.cases.forEach((c) => {
                scope.traverse(c, renameVisitor, this);
              });
            } else {
              scope.traverse(blockToTraverse, renameVisitor, this);
            }

            if (!block) {
              scope.removeOwnBinding(oldName);
              scope.bindings[newName] = binding;
              this.binding.identifier.name = newName;
            }

            if (parentDeclar) {
              this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
              this.maybeConvertFromClassFunctionExpression(parentDeclar);
            }
          }
        }

        exports.default = Renamer;

        function skipAllButComputedMethodKey(path) {
          if (!path.isMethod() || !path.node.computed) {
            path.skip();
            return;
          }

          const keys = t.VISITOR_KEYS[path.type];

          for (const key of keys) {
            if (key !== "key") path.skipKey(key);
          }
        }
      },
      {
        "../binding": 117,
        "@babel/helper-split-export-declaration": 77,
        "@babel/types": 168,
      },
    ],
    120: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.explode = explode;
        exports.verify = verify;
        exports.merge = merge;

        var virtualTypes = require("./path/lib/virtual-types");

        var t = require("@babel/types");

        function explode(visitor) {
          if (visitor._exploded) return visitor;
          visitor._exploded = true;

          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const parts = nodeType.split("|");
            if (parts.length === 1) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];

            for (const part of parts) {
              visitor[part] = fns;
            }
          }

          verify(visitor);
          delete visitor.__esModule;
          ensureEntranceObjects(visitor);
          ensureCallbackArrays(visitor);

          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const wrapper = virtualTypes[nodeType];
            if (!wrapper) continue;
            const fns = visitor[nodeType];

            for (const type of Object.keys(fns)) {
              fns[type] = wrapCheck(wrapper, fns[type]);
            }

            delete visitor[nodeType];

            if (wrapper.types) {
              for (const type of wrapper.types) {
                if (visitor[type]) {
                  mergePair(visitor[type], fns);
                } else {
                  visitor[type] = fns;
                }
              }
            } else {
              mergePair(visitor, fns);
            }
          }

          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const fns = visitor[nodeType];
            let aliases = t.FLIPPED_ALIAS_KEYS[nodeType];
            const deprecatedKey = t.DEPRECATED_KEYS[nodeType];

            if (deprecatedKey) {
              console.trace(
                `Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`
              );
              aliases = [deprecatedKey];
            }

            if (!aliases) continue;
            delete visitor[nodeType];

            for (const alias of aliases) {
              const existing = visitor[alias];

              if (existing) {
                mergePair(existing, fns);
              } else {
                visitor[alias] = Object.assign({}, fns);
              }
            }
          }

          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            ensureCallbackArrays(visitor[nodeType]);
          }

          return visitor;
        }

        function verify(visitor) {
          if (visitor._verified) return;

          if (typeof visitor === "function") {
            throw new Error(
              "You passed `traverse()` a function when it expected a visitor object, " +
                "are you sure you didn't mean `{ enter: Function }`?"
            );
          }

          for (const nodeType of Object.keys(visitor)) {
            if (nodeType === "enter" || nodeType === "exit") {
              validateVisitorMethods(nodeType, visitor[nodeType]);
            }

            if (shouldIgnoreKey(nodeType)) continue;

            if (t.TYPES.indexOf(nodeType) < 0) {
              throw new Error(
                `You gave us a visitor for the node type ${nodeType} but it's not a valid type`
              );
            }

            const visitors = visitor[nodeType];

            if (typeof visitors === "object") {
              for (const visitorKey of Object.keys(visitors)) {
                if (visitorKey === "enter" || visitorKey === "exit") {
                  validateVisitorMethods(
                    `${nodeType}.${visitorKey}`,
                    visitors[visitorKey]
                  );
                } else {
                  throw new Error(
                    "You passed `traverse()` a visitor object with the property " +
                      `${nodeType} that has the invalid property ${visitorKey}`
                  );
                }
              }
            }
          }

          visitor._verified = true;
        }

        function validateVisitorMethods(path, val) {
          const fns = [].concat(val);

          for (const fn of fns) {
            if (typeof fn !== "function") {
              throw new TypeError(
                `Non-function found defined in ${path} with type ${typeof fn}`
              );
            }
          }
        }

        function merge(visitors, states = [], wrapper) {
          const rootVisitor = {};

          for (let i = 0; i < visitors.length; i++) {
            const visitor = visitors[i];
            const state = states[i];
            explode(visitor);

            for (const type of Object.keys(visitor)) {
              let visitorType = visitor[type];

              if (state || wrapper) {
                visitorType = wrapWithStateOrWrapper(
                  visitorType,
                  state,
                  wrapper
                );
              }

              const nodeVisitor = (rootVisitor[type] = rootVisitor[type] || {});
              mergePair(nodeVisitor, visitorType);
            }
          }

          return rootVisitor;
        }

        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};

          for (const key of Object.keys(oldVisitor)) {
            let fns = oldVisitor[key];
            if (!Array.isArray(fns)) continue;
            fns = fns.map(function (fn) {
              let newFn = fn;

              if (state) {
                newFn = function (path) {
                  return fn.call(state, path, state);
                };
              }

              if (wrapper) {
                newFn = wrapper(state.key, key, newFn);
              }

              if (newFn !== fn) {
                newFn.toString = () => fn.toString();
              }

              return newFn;
            });
            newVisitor[key] = fns;
          }

          return newVisitor;
        }

        function ensureEntranceObjects(obj) {
          for (const key of Object.keys(obj)) {
            if (shouldIgnoreKey(key)) continue;
            const fns = obj[key];

            if (typeof fns === "function") {
              obj[key] = {
                enter: fns,
              };
            }
          }
        }

        function ensureCallbackArrays(obj) {
          if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
          if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
        }

        function wrapCheck(wrapper, fn) {
          const newFn = function (path) {
            if (wrapper.checkPath(path)) {
              return fn.apply(this, arguments);
            }
          };

          newFn.toString = () => fn.toString();

          return newFn;
        }

        function shouldIgnoreKey(key) {
          if (key[0] === "_") return true;
          if (key === "enter" || key === "exit" || key === "shouldSkip")
            return true;

          if (
            key === "denylist" ||
            key === "noScope" ||
            key === "skipKeys" ||
            key === "blacklist"
          ) {
            return true;
          }

          return false;
        }

        function mergePair(dest, src) {
          for (const key of Object.keys(src)) {
            dest[key] = [].concat(dest[key] || [], src[key]);
          }
        }
      },
      { "./path/lib/virtual-types": 113, "@babel/types": 168 },
    ],
    121: [
      function (require, module, exports) {
        arguments[4][38][0].apply(exports, arguments);
      },
      { "./common": 122, _process: 425, dup: 38 },
    ],
    122: [
      function (require, module, exports) {
        arguments[4][39][0].apply(exports, arguments);
      },
      { dup: 39, ms: 123 },
    ],
    123: [
      function (require, module, exports) {
        arguments[4][40][0].apply(exports, arguments);
      },
      { dup: 40 },
    ],
    124: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = assertNode;

        var _isNode = require("../validators/isNode");

        function assertNode(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;

            const type =
              (_node$type = node == null ? void 0 : node.type) != null
                ? _node$type
                : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        }
      },
      { "../validators/isNode": 190 },
    ],
    125: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.assertArrayExpression = assertArrayExpression;
        exports.assertAssignmentExpression = assertAssignmentExpression;
        exports.assertBinaryExpression = assertBinaryExpression;
        exports.assertInterpreterDirective = assertInterpreterDirective;
        exports.assertDirective = assertDirective;
        exports.assertDirectiveLiteral = assertDirectiveLiteral;
        exports.assertBlockStatement = assertBlockStatement;
        exports.assertBreakStatement = assertBreakStatement;
        exports.assertCallExpression = assertCallExpression;
        exports.assertCatchClause = assertCatchClause;
        exports.assertConditionalExpression = assertConditionalExpression;
        exports.assertContinueStatement = assertContinueStatement;
        exports.assertDebuggerStatement = assertDebuggerStatement;
        exports.assertDoWhileStatement = assertDoWhileStatement;
        exports.assertEmptyStatement = assertEmptyStatement;
        exports.assertExpressionStatement = assertExpressionStatement;
        exports.assertFile = assertFile;
        exports.assertForInStatement = assertForInStatement;
        exports.assertForStatement = assertForStatement;
        exports.assertFunctionDeclaration = assertFunctionDeclaration;
        exports.assertFunctionExpression = assertFunctionExpression;
        exports.assertIdentifier = assertIdentifier;
        exports.assertIfStatement = assertIfStatement;
        exports.assertLabeledStatement = assertLabeledStatement;
        exports.assertStringLiteral = assertStringLiteral;
        exports.assertNumericLiteral = assertNumericLiteral;
        exports.assertNullLiteral = assertNullLiteral;
        exports.assertBooleanLiteral = assertBooleanLiteral;
        exports.assertRegExpLiteral = assertRegExpLiteral;
        exports.assertLogicalExpression = assertLogicalExpression;
        exports.assertMemberExpression = assertMemberExpression;
        exports.assertNewExpression = assertNewExpression;
        exports.assertProgram = assertProgram;
        exports.assertObjectExpression = assertObjectExpression;
        exports.assertObjectMethod = assertObjectMethod;
        exports.assertObjectProperty = assertObjectProperty;
        exports.assertRestElement = assertRestElement;
        exports.assertReturnStatement = assertReturnStatement;
        exports.assertSequenceExpression = assertSequenceExpression;
        exports.assertParenthesizedExpression = assertParenthesizedExpression;
        exports.assertSwitchCase = assertSwitchCase;
        exports.assertSwitchStatement = assertSwitchStatement;
        exports.assertThisExpression = assertThisExpression;
        exports.assertThrowStatement = assertThrowStatement;
        exports.assertTryStatement = assertTryStatement;
        exports.assertUnaryExpression = assertUnaryExpression;
        exports.assertUpdateExpression = assertUpdateExpression;
        exports.assertVariableDeclaration = assertVariableDeclaration;
        exports.assertVariableDeclarator = assertVariableDeclarator;
        exports.assertWhileStatement = assertWhileStatement;
        exports.assertWithStatement = assertWithStatement;
        exports.assertAssignmentPattern = assertAssignmentPattern;
        exports.assertArrayPattern = assertArrayPattern;
        exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
        exports.assertClassBody = assertClassBody;
        exports.assertClassExpression = assertClassExpression;
        exports.assertClassDeclaration = assertClassDeclaration;
        exports.assertExportAllDeclaration = assertExportAllDeclaration;
        exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
        exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
        exports.assertExportSpecifier = assertExportSpecifier;
        exports.assertForOfStatement = assertForOfStatement;
        exports.assertImportDeclaration = assertImportDeclaration;
        exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
        exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
        exports.assertImportSpecifier = assertImportSpecifier;
        exports.assertMetaProperty = assertMetaProperty;
        exports.assertClassMethod = assertClassMethod;
        exports.assertObjectPattern = assertObjectPattern;
        exports.assertSpreadElement = assertSpreadElement;
        exports.assertSuper = assertSuper;
        exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
        exports.assertTemplateElement = assertTemplateElement;
        exports.assertTemplateLiteral = assertTemplateLiteral;
        exports.assertYieldExpression = assertYieldExpression;
        exports.assertAwaitExpression = assertAwaitExpression;
        exports.assertImport = assertImport;
        exports.assertBigIntLiteral = assertBigIntLiteral;
        exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
        exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
        exports.assertOptionalCallExpression = assertOptionalCallExpression;
        exports.assertClassProperty = assertClassProperty;
        exports.assertClassPrivateProperty = assertClassPrivateProperty;
        exports.assertClassPrivateMethod = assertClassPrivateMethod;
        exports.assertPrivateName = assertPrivateName;
        exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
        exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
        exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
        exports.assertBooleanLiteralTypeAnnotation =
          assertBooleanLiteralTypeAnnotation;
        exports.assertNullLiteralTypeAnnotation =
          assertNullLiteralTypeAnnotation;
        exports.assertClassImplements = assertClassImplements;
        exports.assertDeclareClass = assertDeclareClass;
        exports.assertDeclareFunction = assertDeclareFunction;
        exports.assertDeclareInterface = assertDeclareInterface;
        exports.assertDeclareModule = assertDeclareModule;
        exports.assertDeclareModuleExports = assertDeclareModuleExports;
        exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
        exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
        exports.assertDeclareVariable = assertDeclareVariable;
        exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
        exports.assertDeclareExportAllDeclaration =
          assertDeclareExportAllDeclaration;
        exports.assertDeclaredPredicate = assertDeclaredPredicate;
        exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
        exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
        exports.assertFunctionTypeParam = assertFunctionTypeParam;
        exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
        exports.assertInferredPredicate = assertInferredPredicate;
        exports.assertInterfaceExtends = assertInterfaceExtends;
        exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
        exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
        exports.assertIntersectionTypeAnnotation =
          assertIntersectionTypeAnnotation;
        exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
        exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
        exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
        exports.assertNumberLiteralTypeAnnotation =
          assertNumberLiteralTypeAnnotation;
        exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
        exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
        exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
        exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
        exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
        exports.assertObjectTypeProperty = assertObjectTypeProperty;
        exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
        exports.assertOpaqueType = assertOpaqueType;
        exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
        exports.assertStringLiteralTypeAnnotation =
          assertStringLiteralTypeAnnotation;
        exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
        exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
        exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
        exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
        exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
        exports.assertTypeAlias = assertTypeAlias;
        exports.assertTypeAnnotation = assertTypeAnnotation;
        exports.assertTypeCastExpression = assertTypeCastExpression;
        exports.assertTypeParameter = assertTypeParameter;
        exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
        exports.assertTypeParameterInstantiation =
          assertTypeParameterInstantiation;
        exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
        exports.assertVariance = assertVariance;
        exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
        exports.assertEnumDeclaration = assertEnumDeclaration;
        exports.assertEnumBooleanBody = assertEnumBooleanBody;
        exports.assertEnumNumberBody = assertEnumNumberBody;
        exports.assertEnumStringBody = assertEnumStringBody;
        exports.assertEnumSymbolBody = assertEnumSymbolBody;
        exports.assertEnumBooleanMember = assertEnumBooleanMember;
        exports.assertEnumNumberMember = assertEnumNumberMember;
        exports.assertEnumStringMember = assertEnumStringMember;
        exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
        exports.assertIndexedAccessType = assertIndexedAccessType;
        exports.assertOptionalIndexedAccessType =
          assertOptionalIndexedAccessType;
        exports.assertJSXAttribute = assertJSXAttribute;
        exports.assertJSXClosingElement = assertJSXClosingElement;
        exports.assertJSXElement = assertJSXElement;
        exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
        exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
        exports.assertJSXSpreadChild = assertJSXSpreadChild;
        exports.assertJSXIdentifier = assertJSXIdentifier;
        exports.assertJSXMemberExpression = assertJSXMemberExpression;
        exports.assertJSXNamespacedName = assertJSXNamespacedName;
        exports.assertJSXOpeningElement = assertJSXOpeningElement;
        exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
        exports.assertJSXText = assertJSXText;
        exports.assertJSXFragment = assertJSXFragment;
        exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
        exports.assertJSXClosingFragment = assertJSXClosingFragment;
        exports.assertNoop = assertNoop;
        exports.assertPlaceholder = assertPlaceholder;
        exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
        exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
        exports.assertBindExpression = assertBindExpression;
        exports.assertImportAttribute = assertImportAttribute;
        exports.assertDecorator = assertDecorator;
        exports.assertDoExpression = assertDoExpression;
        exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
        exports.assertRecordExpression = assertRecordExpression;
        exports.assertTupleExpression = assertTupleExpression;
        exports.assertDecimalLiteral = assertDecimalLiteral;
        exports.assertStaticBlock = assertStaticBlock;
        exports.assertModuleExpression = assertModuleExpression;
        exports.assertTopicReference = assertTopicReference;
        exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
        exports.assertPipelineBareFunction = assertPipelineBareFunction;
        exports.assertPipelinePrimaryTopicReference =
          assertPipelinePrimaryTopicReference;
        exports.assertTSParameterProperty = assertTSParameterProperty;
        exports.assertTSDeclareFunction = assertTSDeclareFunction;
        exports.assertTSDeclareMethod = assertTSDeclareMethod;
        exports.assertTSQualifiedName = assertTSQualifiedName;
        exports.assertTSCallSignatureDeclaration =
          assertTSCallSignatureDeclaration;
        exports.assertTSConstructSignatureDeclaration =
          assertTSConstructSignatureDeclaration;
        exports.assertTSPropertySignature = assertTSPropertySignature;
        exports.assertTSMethodSignature = assertTSMethodSignature;
        exports.assertTSIndexSignature = assertTSIndexSignature;
        exports.assertTSAnyKeyword = assertTSAnyKeyword;
        exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
        exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
        exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
        exports.assertTSNeverKeyword = assertTSNeverKeyword;
        exports.assertTSNullKeyword = assertTSNullKeyword;
        exports.assertTSNumberKeyword = assertTSNumberKeyword;
        exports.assertTSObjectKeyword = assertTSObjectKeyword;
        exports.assertTSStringKeyword = assertTSStringKeyword;
        exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
        exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
        exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
        exports.assertTSVoidKeyword = assertTSVoidKeyword;
        exports.assertTSThisType = assertTSThisType;
        exports.assertTSFunctionType = assertTSFunctionType;
        exports.assertTSConstructorType = assertTSConstructorType;
        exports.assertTSTypeReference = assertTSTypeReference;
        exports.assertTSTypePredicate = assertTSTypePredicate;
        exports.assertTSTypeQuery = assertTSTypeQuery;
        exports.assertTSTypeLiteral = assertTSTypeLiteral;
        exports.assertTSArrayType = assertTSArrayType;
        exports.assertTSTupleType = assertTSTupleType;
        exports.assertTSOptionalType = assertTSOptionalType;
        exports.assertTSRestType = assertTSRestType;
        exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
        exports.assertTSUnionType = assertTSUnionType;
        exports.assertTSIntersectionType = assertTSIntersectionType;
        exports.assertTSConditionalType = assertTSConditionalType;
        exports.assertTSInferType = assertTSInferType;
        exports.assertTSParenthesizedType = assertTSParenthesizedType;
        exports.assertTSTypeOperator = assertTSTypeOperator;
        exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
        exports.assertTSMappedType = assertTSMappedType;
        exports.assertTSLiteralType = assertTSLiteralType;
        exports.assertTSExpressionWithTypeArguments =
          assertTSExpressionWithTypeArguments;
        exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
        exports.assertTSInterfaceBody = assertTSInterfaceBody;
        exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
        exports.assertTSAsExpression = assertTSAsExpression;
        exports.assertTSTypeAssertion = assertTSTypeAssertion;
        exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
        exports.assertTSEnumMember = assertTSEnumMember;
        exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
        exports.assertTSModuleBlock = assertTSModuleBlock;
        exports.assertTSImportType = assertTSImportType;
        exports.assertTSImportEqualsDeclaration =
          assertTSImportEqualsDeclaration;
        exports.assertTSExternalModuleReference =
          assertTSExternalModuleReference;
        exports.assertTSNonNullExpression = assertTSNonNullExpression;
        exports.assertTSExportAssignment = assertTSExportAssignment;
        exports.assertTSNamespaceExportDeclaration =
          assertTSNamespaceExportDeclaration;
        exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
        exports.assertTSTypeParameterInstantiation =
          assertTSTypeParameterInstantiation;
        exports.assertTSTypeParameterDeclaration =
          assertTSTypeParameterDeclaration;
        exports.assertTSTypeParameter = assertTSTypeParameter;
        exports.assertExpression = assertExpression;
        exports.assertBinary = assertBinary;
        exports.assertScopable = assertScopable;
        exports.assertBlockParent = assertBlockParent;
        exports.assertBlock = assertBlock;
        exports.assertStatement = assertStatement;
        exports.assertTerminatorless = assertTerminatorless;
        exports.assertCompletionStatement = assertCompletionStatement;
        exports.assertConditional = assertConditional;
        exports.assertLoop = assertLoop;
        exports.assertWhile = assertWhile;
        exports.assertExpressionWrapper = assertExpressionWrapper;
        exports.assertFor = assertFor;
        exports.assertForXStatement = assertForXStatement;
        exports.assertFunction = assertFunction;
        exports.assertFunctionParent = assertFunctionParent;
        exports.assertPureish = assertPureish;
        exports.assertDeclaration = assertDeclaration;
        exports.assertPatternLike = assertPatternLike;
        exports.assertLVal = assertLVal;
        exports.assertTSEntityName = assertTSEntityName;
        exports.assertLiteral = assertLiteral;
        exports.assertImmutable = assertImmutable;
        exports.assertUserWhitespacable = assertUserWhitespacable;
        exports.assertMethod = assertMethod;
        exports.assertObjectMember = assertObjectMember;
        exports.assertProperty = assertProperty;
        exports.assertUnaryLike = assertUnaryLike;
        exports.assertPattern = assertPattern;
        exports.assertClass = assertClass;
        exports.assertModuleDeclaration = assertModuleDeclaration;
        exports.assertExportDeclaration = assertExportDeclaration;
        exports.assertModuleSpecifier = assertModuleSpecifier;
        exports.assertPrivate = assertPrivate;
        exports.assertFlow = assertFlow;
        exports.assertFlowType = assertFlowType;
        exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
        exports.assertFlowDeclaration = assertFlowDeclaration;
        exports.assertFlowPredicate = assertFlowPredicate;
        exports.assertEnumBody = assertEnumBody;
        exports.assertEnumMember = assertEnumMember;
        exports.assertJSX = assertJSX;
        exports.assertTSTypeElement = assertTSTypeElement;
        exports.assertTSType = assertTSType;
        exports.assertTSBaseType = assertTSBaseType;
        exports.assertNumberLiteral = assertNumberLiteral;
        exports.assertRegexLiteral = assertRegexLiteral;
        exports.assertRestProperty = assertRestProperty;
        exports.assertSpreadProperty = assertSpreadProperty;

        var _is = require("../../validators/is");

        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts)) {
            throw new Error(
              `Expected type "${type}" with option ${JSON.stringify(opts)}, ` +
                `but instead got "${node.type}".`
            );
          }
        }

        function assertArrayExpression(node, opts) {
          assert("ArrayExpression", node, opts);
        }

        function assertAssignmentExpression(node, opts) {
          assert("AssignmentExpression", node, opts);
        }

        function assertBinaryExpression(node, opts) {
          assert("BinaryExpression", node, opts);
        }

        function assertInterpreterDirective(node, opts) {
          assert("InterpreterDirective", node, opts);
        }

        function assertDirective(node, opts) {
          assert("Directive", node, opts);
        }

        function assertDirectiveLiteral(node, opts) {
          assert("DirectiveLiteral", node, opts);
        }

        function assertBlockStatement(node, opts) {
          assert("BlockStatement", node, opts);
        }

        function assertBreakStatement(node, opts) {
          assert("BreakStatement", node, opts);
        }

        function assertCallExpression(node, opts) {
          assert("CallExpression", node, opts);
        }

        function assertCatchClause(node, opts) {
          assert("CatchClause", node, opts);
        }

        function assertConditionalExpression(node, opts) {
          assert("ConditionalExpression", node, opts);
        }

        function assertContinueStatement(node, opts) {
          assert("ContinueStatement", node, opts);
        }

        function assertDebuggerStatement(node, opts) {
          assert("DebuggerStatement", node, opts);
        }

        function assertDoWhileStatement(node, opts) {
          assert("DoWhileStatement", node, opts);
        }

        function assertEmptyStatement(node, opts) {
          assert("EmptyStatement", node, opts);
        }

        function assertExpressionStatement(node, opts) {
          assert("ExpressionStatement", node, opts);
        }

        function assertFile(node, opts) {
          assert("File", node, opts);
        }

        function assertForInStatement(node, opts) {
          assert("ForInStatement", node, opts);
        }

        function assertForStatement(node, opts) {
          assert("ForStatement", node, opts);
        }

        function assertFunctionDeclaration(node, opts) {
          assert("FunctionDeclaration", node, opts);
        }

        function assertFunctionExpression(node, opts) {
          assert("FunctionExpression", node, opts);
        }

        function assertIdentifier(node, opts) {
          assert("Identifier", node, opts);
        }

        function assertIfStatement(node, opts) {
          assert("IfStatement", node, opts);
        }

        function assertLabeledStatement(node, opts) {
          assert("LabeledStatement", node, opts);
        }

        function assertStringLiteral(node, opts) {
          assert("StringLiteral", node, opts);
        }

        function assertNumericLiteral(node, opts) {
          assert("NumericLiteral", node, opts);
        }

        function assertNullLiteral(node, opts) {
          assert("NullLiteral", node, opts);
        }

        function assertBooleanLiteral(node, opts) {
          assert("BooleanLiteral", node, opts);
        }

        function assertRegExpLiteral(node, opts) {
          assert("RegExpLiteral", node, opts);
        }

        function assertLogicalExpression(node, opts) {
          assert("LogicalExpression", node, opts);
        }

        function assertMemberExpression(node, opts) {
          assert("MemberExpression", node, opts);
        }

        function assertNewExpression(node, opts) {
          assert("NewExpression", node, opts);
        }

        function assertProgram(node, opts) {
          assert("Program", node, opts);
        }

        function assertObjectExpression(node, opts) {
          assert("ObjectExpression", node, opts);
        }

        function assertObjectMethod(node, opts) {
          assert("ObjectMethod", node, opts);
        }

        function assertObjectProperty(node, opts) {
          assert("ObjectProperty", node, opts);
        }

        function assertRestElement(node, opts) {
          assert("RestElement", node, opts);
        }

        function assertReturnStatement(node, opts) {
          assert("ReturnStatement", node, opts);
        }

        function assertSequenceExpression(node, opts) {
          assert("SequenceExpression", node, opts);
        }

        function assertParenthesizedExpression(node, opts) {
          assert("ParenthesizedExpression", node, opts);
        }

        function assertSwitchCase(node, opts) {
          assert("SwitchCase", node, opts);
        }

        function assertSwitchStatement(node, opts) {
          assert("SwitchStatement", node, opts);
        }

        function assertThisExpression(node, opts) {
          assert("ThisExpression", node, opts);
        }

        function assertThrowStatement(node, opts) {
          assert("ThrowStatement", node, opts);
        }

        function assertTryStatement(node, opts) {
          assert("TryStatement", node, opts);
        }

        function assertUnaryExpression(node, opts) {
          assert("UnaryExpression", node, opts);
        }

        function assertUpdateExpression(node, opts) {
          assert("UpdateExpression", node, opts);
        }

        function assertVariableDeclaration(node, opts) {
          assert("VariableDeclaration", node, opts);
        }

        function assertVariableDeclarator(node, opts) {
          assert("VariableDeclarator", node, opts);
        }

        function assertWhileStatement(node, opts) {
          assert("WhileStatement", node, opts);
        }

        function assertWithStatement(node, opts) {
          assert("WithStatement", node, opts);
        }

        function assertAssignmentPattern(node, opts) {
          assert("AssignmentPattern", node, opts);
        }

        function assertArrayPattern(node, opts) {
          assert("ArrayPattern", node, opts);
        }

        function assertArrowFunctionExpression(node, opts) {
          assert("ArrowFunctionExpression", node, opts);
        }

        function assertClassBody(node, opts) {
          assert("ClassBody", node, opts);
        }

        function assertClassExpression(node, opts) {
          assert("ClassExpression", node, opts);
        }

        function assertClassDeclaration(node, opts) {
          assert("ClassDeclaration", node, opts);
        }

        function assertExportAllDeclaration(node, opts) {
          assert("ExportAllDeclaration", node, opts);
        }

        function assertExportDefaultDeclaration(node, opts) {
          assert("ExportDefaultDeclaration", node, opts);
        }

        function assertExportNamedDeclaration(node, opts) {
          assert("ExportNamedDeclaration", node, opts);
        }

        function assertExportSpecifier(node, opts) {
          assert("ExportSpecifier", node, opts);
        }

        function assertForOfStatement(node, opts) {
          assert("ForOfStatement", node, opts);
        }

        function assertImportDeclaration(node, opts) {
          assert("ImportDeclaration", node, opts);
        }

        function assertImportDefaultSpecifier(node, opts) {
          assert("ImportDefaultSpecifier", node, opts);
        }

        function assertImportNamespaceSpecifier(node, opts) {
          assert("ImportNamespaceSpecifier", node, opts);
        }

        function assertImportSpecifier(node, opts) {
          assert("ImportSpecifier", node, opts);
        }

        function assertMetaProperty(node, opts) {
          assert("MetaProperty", node, opts);
        }

        function assertClassMethod(node, opts) {
          assert("ClassMethod", node, opts);
        }

        function assertObjectPattern(node, opts) {
          assert("ObjectPattern", node, opts);
        }

        function assertSpreadElement(node, opts) {
          assert("SpreadElement", node, opts);
        }

        function assertSuper(node, opts) {
          assert("Super", node, opts);
        }

        function assertTaggedTemplateExpression(node, opts) {
          assert("TaggedTemplateExpression", node, opts);
        }

        function assertTemplateElement(node, opts) {
          assert("TemplateElement", node, opts);
        }

        function assertTemplateLiteral(node, opts) {
          assert("TemplateLiteral", node, opts);
        }

        function assertYieldExpression(node, opts) {
          assert("YieldExpression", node, opts);
        }

        function assertAwaitExpression(node, opts) {
          assert("AwaitExpression", node, opts);
        }

        function assertImport(node, opts) {
          assert("Import", node, opts);
        }

        function assertBigIntLiteral(node, opts) {
          assert("BigIntLiteral", node, opts);
        }

        function assertExportNamespaceSpecifier(node, opts) {
          assert("ExportNamespaceSpecifier", node, opts);
        }

        function assertOptionalMemberExpression(node, opts) {
          assert("OptionalMemberExpression", node, opts);
        }

        function assertOptionalCallExpression(node, opts) {
          assert("OptionalCallExpression", node, opts);
        }

        function assertClassProperty(node, opts) {
          assert("ClassProperty", node, opts);
        }

        function assertClassPrivateProperty(node, opts) {
          assert("ClassPrivateProperty", node, opts);
        }

        function assertClassPrivateMethod(node, opts) {
          assert("ClassPrivateMethod", node, opts);
        }

        function assertPrivateName(node, opts) {
          assert("PrivateName", node, opts);
        }

        function assertAnyTypeAnnotation(node, opts) {
          assert("AnyTypeAnnotation", node, opts);
        }

        function assertArrayTypeAnnotation(node, opts) {
          assert("ArrayTypeAnnotation", node, opts);
        }

        function assertBooleanTypeAnnotation(node, opts) {
          assert("BooleanTypeAnnotation", node, opts);
        }

        function assertBooleanLiteralTypeAnnotation(node, opts) {
          assert("BooleanLiteralTypeAnnotation", node, opts);
        }

        function assertNullLiteralTypeAnnotation(node, opts) {
          assert("NullLiteralTypeAnnotation", node, opts);
        }

        function assertClassImplements(node, opts) {
          assert("ClassImplements", node, opts);
        }

        function assertDeclareClass(node, opts) {
          assert("DeclareClass", node, opts);
        }

        function assertDeclareFunction(node, opts) {
          assert("DeclareFunction", node, opts);
        }

        function assertDeclareInterface(node, opts) {
          assert("DeclareInterface", node, opts);
        }

        function assertDeclareModule(node, opts) {
          assert("DeclareModule", node, opts);
        }

        function assertDeclareModuleExports(node, opts) {
          assert("DeclareModuleExports", node, opts);
        }

        function assertDeclareTypeAlias(node, opts) {
          assert("DeclareTypeAlias", node, opts);
        }

        function assertDeclareOpaqueType(node, opts) {
          assert("DeclareOpaqueType", node, opts);
        }

        function assertDeclareVariable(node, opts) {
          assert("DeclareVariable", node, opts);
        }

        function assertDeclareExportDeclaration(node, opts) {
          assert("DeclareExportDeclaration", node, opts);
        }

        function assertDeclareExportAllDeclaration(node, opts) {
          assert("DeclareExportAllDeclaration", node, opts);
        }

        function assertDeclaredPredicate(node, opts) {
          assert("DeclaredPredicate", node, opts);
        }

        function assertExistsTypeAnnotation(node, opts) {
          assert("ExistsTypeAnnotation", node, opts);
        }

        function assertFunctionTypeAnnotation(node, opts) {
          assert("FunctionTypeAnnotation", node, opts);
        }

        function assertFunctionTypeParam(node, opts) {
          assert("FunctionTypeParam", node, opts);
        }

        function assertGenericTypeAnnotation(node, opts) {
          assert("GenericTypeAnnotation", node, opts);
        }

        function assertInferredPredicate(node, opts) {
          assert("InferredPredicate", node, opts);
        }

        function assertInterfaceExtends(node, opts) {
          assert("InterfaceExtends", node, opts);
        }

        function assertInterfaceDeclaration(node, opts) {
          assert("InterfaceDeclaration", node, opts);
        }

        function assertInterfaceTypeAnnotation(node, opts) {
          assert("InterfaceTypeAnnotation", node, opts);
        }

        function assertIntersectionTypeAnnotation(node, opts) {
          assert("IntersectionTypeAnnotation", node, opts);
        }

        function assertMixedTypeAnnotation(node, opts) {
          assert("MixedTypeAnnotation", node, opts);
        }

        function assertEmptyTypeAnnotation(node, opts) {
          assert("EmptyTypeAnnotation", node, opts);
        }

        function assertNullableTypeAnnotation(node, opts) {
          assert("NullableTypeAnnotation", node, opts);
        }

        function assertNumberLiteralTypeAnnotation(node, opts) {
          assert("NumberLiteralTypeAnnotation", node, opts);
        }

        function assertNumberTypeAnnotation(node, opts) {
          assert("NumberTypeAnnotation", node, opts);
        }

        function assertObjectTypeAnnotation(node, opts) {
          assert("ObjectTypeAnnotation", node, opts);
        }

        function assertObjectTypeInternalSlot(node, opts) {
          assert("ObjectTypeInternalSlot", node, opts);
        }

        function assertObjectTypeCallProperty(node, opts) {
          assert("ObjectTypeCallProperty", node, opts);
        }

        function assertObjectTypeIndexer(node, opts) {
          assert("ObjectTypeIndexer", node, opts);
        }

        function assertObjectTypeProperty(node, opts) {
          assert("ObjectTypeProperty", node, opts);
        }

        function assertObjectTypeSpreadProperty(node, opts) {
          assert("ObjectTypeSpreadProperty", node, opts);
        }

        function assertOpaqueType(node, opts) {
          assert("OpaqueType", node, opts);
        }

        function assertQualifiedTypeIdentifier(node, opts) {
          assert("QualifiedTypeIdentifier", node, opts);
        }

        function assertStringLiteralTypeAnnotation(node, opts) {
          assert("StringLiteralTypeAnnotation", node, opts);
        }

        function assertStringTypeAnnotation(node, opts) {
          assert("StringTypeAnnotation", node, opts);
        }

        function assertSymbolTypeAnnotation(node, opts) {
          assert("SymbolTypeAnnotation", node, opts);
        }

        function assertThisTypeAnnotation(node, opts) {
          assert("ThisTypeAnnotation", node, opts);
        }

        function assertTupleTypeAnnotation(node, opts) {
          assert("TupleTypeAnnotation", node, opts);
        }

        function assertTypeofTypeAnnotation(node, opts) {
          assert("TypeofTypeAnnotation", node, opts);
        }

        function assertTypeAlias(node, opts) {
          assert("TypeAlias", node, opts);
        }

        function assertTypeAnnotation(node, opts) {
          assert("TypeAnnotation", node, opts);
        }

        function assertTypeCastExpression(node, opts) {
          assert("TypeCastExpression", node, opts);
        }

        function assertTypeParameter(node, opts) {
          assert("TypeParameter", node, opts);
        }

        function assertTypeParameterDeclaration(node, opts) {
          assert("TypeParameterDeclaration", node, opts);
        }

        function assertTypeParameterInstantiation(node, opts) {
          assert("TypeParameterInstantiation", node, opts);
        }

        function assertUnionTypeAnnotation(node, opts) {
          assert("UnionTypeAnnotation", node, opts);
        }

        function assertVariance(node, opts) {
          assert("Variance", node, opts);
        }

        function assertVoidTypeAnnotation(node, opts) {
          assert("VoidTypeAnnotation", node, opts);
        }

        function assertEnumDeclaration(node, opts) {
          assert("EnumDeclaration", node, opts);
        }

        function assertEnumBooleanBody(node, opts) {
          assert("EnumBooleanBody", node, opts);
        }

        function assertEnumNumberBody(node, opts) {
          assert("EnumNumberBody", node, opts);
        }

        function assertEnumStringBody(node, opts) {
          assert("EnumStringBody", node, opts);
        }

        function assertEnumSymbolBody(node, opts) {
          assert("EnumSymbolBody", node, opts);
        }

        function assertEnumBooleanMember(node, opts) {
          assert("EnumBooleanMember", node, opts);
        }

        function assertEnumNumberMember(node, opts) {
          assert("EnumNumberMember", node, opts);
        }

        function assertEnumStringMember(node, opts) {
          assert("EnumStringMember", node, opts);
        }

        function assertEnumDefaultedMember(node, opts) {
          assert("EnumDefaultedMember", node, opts);
        }

        function assertIndexedAccessType(node, opts) {
          assert("IndexedAccessType", node, opts);
        }

        function assertOptionalIndexedAccessType(node, opts) {
          assert("OptionalIndexedAccessType", node, opts);
        }

        function assertJSXAttribute(node, opts) {
          assert("JSXAttribute", node, opts);
        }

        function assertJSXClosingElement(node, opts) {
          assert("JSXClosingElement", node, opts);
        }

        function assertJSXElement(node, opts) {
          assert("JSXElement", node, opts);
        }

        function assertJSXEmptyExpression(node, opts) {
          assert("JSXEmptyExpression", node, opts);
        }

        function assertJSXExpressionContainer(node, opts) {
          assert("JSXExpressionContainer", node, opts);
        }

        function assertJSXSpreadChild(node, opts) {
          assert("JSXSpreadChild", node, opts);
        }

        function assertJSXIdentifier(node, opts) {
          assert("JSXIdentifier", node, opts);
        }

        function assertJSXMemberExpression(node, opts) {
          assert("JSXMemberExpression", node, opts);
        }

        function assertJSXNamespacedName(node, opts) {
          assert("JSXNamespacedName", node, opts);
        }

        function assertJSXOpeningElement(node, opts) {
          assert("JSXOpeningElement", node, opts);
        }

        function assertJSXSpreadAttribute(node, opts) {
          assert("JSXSpreadAttribute", node, opts);
        }

        function assertJSXText(node, opts) {
          assert("JSXText", node, opts);
        }

        function assertJSXFragment(node, opts) {
          assert("JSXFragment", node, opts);
        }

        function assertJSXOpeningFragment(node, opts) {
          assert("JSXOpeningFragment", node, opts);
        }

        function assertJSXClosingFragment(node, opts) {
          assert("JSXClosingFragment", node, opts);
        }

        function assertNoop(node, opts) {
          assert("Noop", node, opts);
        }

        function assertPlaceholder(node, opts) {
          assert("Placeholder", node, opts);
        }

        function assertV8IntrinsicIdentifier(node, opts) {
          assert("V8IntrinsicIdentifier", node, opts);
        }

        function assertArgumentPlaceholder(node, opts) {
          assert("ArgumentPlaceholder", node, opts);
        }

        function assertBindExpression(node, opts) {
          assert("BindExpression", node, opts);
        }

        function assertImportAttribute(node, opts) {
          assert("ImportAttribute", node, opts);
        }

        function assertDecorator(node, opts) {
          assert("Decorator", node, opts);
        }

        function assertDoExpression(node, opts) {
          assert("DoExpression", node, opts);
        }

        function assertExportDefaultSpecifier(node, opts) {
          assert("ExportDefaultSpecifier", node, opts);
        }

        function assertRecordExpression(node, opts) {
          assert("RecordExpression", node, opts);
        }

        function assertTupleExpression(node, opts) {
          assert("TupleExpression", node, opts);
        }

        function assertDecimalLiteral(node, opts) {
          assert("DecimalLiteral", node, opts);
        }

        function assertStaticBlock(node, opts) {
          assert("StaticBlock", node, opts);
        }

        function assertModuleExpression(node, opts) {
          assert("ModuleExpression", node, opts);
        }

        function assertTopicReference(node, opts) {
          assert("TopicReference", node, opts);
        }

        function assertPipelineTopicExpression(node, opts) {
          assert("PipelineTopicExpression", node, opts);
        }

        function assertPipelineBareFunction(node, opts) {
          assert("PipelineBareFunction", node, opts);
        }

        function assertPipelinePrimaryTopicReference(node, opts) {
          assert("PipelinePrimaryTopicReference", node, opts);
        }

        function assertTSParameterProperty(node, opts) {
          assert("TSParameterProperty", node, opts);
        }

        function assertTSDeclareFunction(node, opts) {
          assert("TSDeclareFunction", node, opts);
        }

        function assertTSDeclareMethod(node, opts) {
          assert("TSDeclareMethod", node, opts);
        }

        function assertTSQualifiedName(node, opts) {
          assert("TSQualifiedName", node, opts);
        }

        function assertTSCallSignatureDeclaration(node, opts) {
          assert("TSCallSignatureDeclaration", node, opts);
        }

        function assertTSConstructSignatureDeclaration(node, opts) {
          assert("TSConstructSignatureDeclaration", node, opts);
        }

        function assertTSPropertySignature(node, opts) {
          assert("TSPropertySignature", node, opts);
        }

        function assertTSMethodSignature(node, opts) {
          assert("TSMethodSignature", node, opts);
        }

        function assertTSIndexSignature(node, opts) {
          assert("TSIndexSignature", node, opts);
        }

        function assertTSAnyKeyword(node, opts) {
          assert("TSAnyKeyword", node, opts);
        }

        function assertTSBooleanKeyword(node, opts) {
          assert("TSBooleanKeyword", node, opts);
        }

        function assertTSBigIntKeyword(node, opts) {
          assert("TSBigIntKeyword", node, opts);
        }

        function assertTSIntrinsicKeyword(node, opts) {
          assert("TSIntrinsicKeyword", node, opts);
        }

        function assertTSNeverKeyword(node, opts) {
          assert("TSNeverKeyword", node, opts);
        }

        function assertTSNullKeyword(node, opts) {
          assert("TSNullKeyword", node, opts);
        }

        function assertTSNumberKeyword(node, opts) {
          assert("TSNumberKeyword", node, opts);
        }

        function assertTSObjectKeyword(node, opts) {
          assert("TSObjectKeyword", node, opts);
        }

        function assertTSStringKeyword(node, opts) {
          assert("TSStringKeyword", node, opts);
        }

        function assertTSSymbolKeyword(node, opts) {
          assert("TSSymbolKeyword", node, opts);
        }

        function assertTSUndefinedKeyword(node, opts) {
          assert("TSUndefinedKeyword", node, opts);
        }

        function assertTSUnknownKeyword(node, opts) {
          assert("TSUnknownKeyword", node, opts);
        }

        function assertTSVoidKeyword(node, opts) {
          assert("TSVoidKeyword", node, opts);
        }

        function assertTSThisType(node, opts) {
          assert("TSThisType", node, opts);
        }

        function assertTSFunctionType(node, opts) {
          assert("TSFunctionType", node, opts);
        }

        function assertTSConstructorType(node, opts) {
          assert("TSConstructorType", node, opts);
        }

        function assertTSTypeReference(node, opts) {
          assert("TSTypeReference", node, opts);
        }

        function assertTSTypePredicate(node, opts) {
          assert("TSTypePredicate", node, opts);
        }

        function assertTSTypeQuery(node, opts) {
          assert("TSTypeQuery", node, opts);
        }

        function assertTSTypeLiteral(node, opts) {
          assert("TSTypeLiteral", node, opts);
        }

        function assertTSArrayType(node, opts) {
          assert("TSArrayType", node, opts);
        }

        function assertTSTupleType(node, opts) {
          assert("TSTupleType", node, opts);
        }

        function assertTSOptionalType(node, opts) {
          assert("TSOptionalType", node, opts);
        }

        function assertTSRestType(node, opts) {
          assert("TSRestType", node, opts);
        }

        function assertTSNamedTupleMember(node, opts) {
          assert("TSNamedTupleMember", node, opts);
        }

        function assertTSUnionType(node, opts) {
          assert("TSUnionType", node, opts);
        }

        function assertTSIntersectionType(node, opts) {
          assert("TSIntersectionType", node, opts);
        }

        function assertTSConditionalType(node, opts) {
          assert("TSConditionalType", node, opts);
        }

        function assertTSInferType(node, opts) {
          assert("TSInferType", node, opts);
        }

        function assertTSParenthesizedType(node, opts) {
          assert("TSParenthesizedType", node, opts);
        }

        function assertTSTypeOperator(node, opts) {
          assert("TSTypeOperator", node, opts);
        }

        function assertTSIndexedAccessType(node, opts) {
          assert("TSIndexedAccessType", node, opts);
        }

        function assertTSMappedType(node, opts) {
          assert("TSMappedType", node, opts);
        }

        function assertTSLiteralType(node, opts) {
          assert("TSLiteralType", node, opts);
        }

        function assertTSExpressionWithTypeArguments(node, opts) {
          assert("TSExpressionWithTypeArguments", node, opts);
        }

        function assertTSInterfaceDeclaration(node, opts) {
          assert("TSInterfaceDeclaration", node, opts);
        }

        function assertTSInterfaceBody(node, opts) {
          assert("TSInterfaceBody", node, opts);
        }

        function assertTSTypeAliasDeclaration(node, opts) {
          assert("TSTypeAliasDeclaration", node, opts);
        }

        function assertTSAsExpression(node, opts) {
          assert("TSAsExpression", node, opts);
        }

        function assertTSTypeAssertion(node, opts) {
          assert("TSTypeAssertion", node, opts);
        }

        function assertTSEnumDeclaration(node, opts) {
          assert("TSEnumDeclaration", node, opts);
        }

        function assertTSEnumMember(node, opts) {
          assert("TSEnumMember", node, opts);
        }

        function assertTSModuleDeclaration(node, opts) {
          assert("TSModuleDeclaration", node, opts);
        }

        function assertTSModuleBlock(node, opts) {
          assert("TSModuleBlock", node, opts);
        }

        function assertTSImportType(node, opts) {
          assert("TSImportType", node, opts);
        }

        function assertTSImportEqualsDeclaration(node, opts) {
          assert("TSImportEqualsDeclaration", node, opts);
        }

        function assertTSExternalModuleReference(node, opts) {
          assert("TSExternalModuleReference", node, opts);
        }

        function assertTSNonNullExpression(node, opts) {
          assert("TSNonNullExpression", node, opts);
        }

        function assertTSExportAssignment(node, opts) {
          assert("TSExportAssignment", node, opts);
        }

        function assertTSNamespaceExportDeclaration(node, opts) {
          assert("TSNamespaceExportDeclaration", node, opts);
        }

        function assertTSTypeAnnotation(node, opts) {
          assert("TSTypeAnnotation", node, opts);
        }

        function assertTSTypeParameterInstantiation(node, opts) {
          assert("TSTypeParameterInstantiation", node, opts);
        }

        function assertTSTypeParameterDeclaration(node, opts) {
          assert("TSTypeParameterDeclaration", node, opts);
        }

        function assertTSTypeParameter(node, opts) {
          assert("TSTypeParameter", node, opts);
        }

        function assertExpression(node, opts) {
          assert("Expression", node, opts);
        }

        function assertBinary(node, opts) {
          assert("Binary", node, opts);
        }

        function assertScopable(node, opts) {
          assert("Scopable", node, opts);
        }

        function assertBlockParent(node, opts) {
          assert("BlockParent", node, opts);
        }

        function assertBlock(node, opts) {
          assert("Block", node, opts);
        }

        function assertStatement(node, opts) {
          assert("Statement", node, opts);
        }

        function assertTerminatorless(node, opts) {
          assert("Terminatorless", node, opts);
        }

        function assertCompletionStatement(node, opts) {
          assert("CompletionStatement", node, opts);
        }

        function assertConditional(node, opts) {
          assert("Conditional", node, opts);
        }

        function assertLoop(node, opts) {
          assert("Loop", node, opts);
        }

        function assertWhile(node, opts) {
          assert("While", node, opts);
        }

        function assertExpressionWrapper(node, opts) {
          assert("ExpressionWrapper", node, opts);
        }

        function assertFor(node, opts) {
          assert("For", node, opts);
        }

        function assertForXStatement(node, opts) {
          assert("ForXStatement", node, opts);
        }

        function assertFunction(node, opts) {
          assert("Function", node, opts);
        }

        function assertFunctionParent(node, opts) {
          assert("FunctionParent", node, opts);
        }

        function assertPureish(node, opts) {
          assert("Pureish", node, opts);
        }

        function assertDeclaration(node, opts) {
          assert("Declaration", node, opts);
        }

        function assertPatternLike(node, opts) {
          assert("PatternLike", node, opts);
        }

        function assertLVal(node, opts) {
          assert("LVal", node, opts);
        }

        function assertTSEntityName(node, opts) {
          assert("TSEntityName", node, opts);
        }

        function assertLiteral(node, opts) {
          assert("Literal", node, opts);
        }

        function assertImmutable(node, opts) {
          assert("Immutable", node, opts);
        }

        function assertUserWhitespacable(node, opts) {
          assert("UserWhitespacable", node, opts);
        }

        function assertMethod(node, opts) {
          assert("Method", node, opts);
        }

        function assertObjectMember(node, opts) {
          assert("ObjectMember", node, opts);
        }

        function assertProperty(node, opts) {
          assert("Property", node, opts);
        }

        function assertUnaryLike(node, opts) {
          assert("UnaryLike", node, opts);
        }

        function assertPattern(node, opts) {
          assert("Pattern", node, opts);
        }

        function assertClass(node, opts) {
          assert("Class", node, opts);
        }

        function assertModuleDeclaration(node, opts) {
          assert("ModuleDeclaration", node, opts);
        }

        function assertExportDeclaration(node, opts) {
          assert("ExportDeclaration", node, opts);
        }

        function assertModuleSpecifier(node, opts) {
          assert("ModuleSpecifier", node, opts);
        }

        function assertPrivate(node, opts) {
          assert("Private", node, opts);
        }

        function assertFlow(node, opts) {
          assert("Flow", node, opts);
        }

        function assertFlowType(node, opts) {
          assert("FlowType", node, opts);
        }

        function assertFlowBaseAnnotation(node, opts) {
          assert("FlowBaseAnnotation", node, opts);
        }

        function assertFlowDeclaration(node, opts) {
          assert("FlowDeclaration", node, opts);
        }

        function assertFlowPredicate(node, opts) {
          assert("FlowPredicate", node, opts);
        }

        function assertEnumBody(node, opts) {
          assert("EnumBody", node, opts);
        }

        function assertEnumMember(node, opts) {
          assert("EnumMember", node, opts);
        }

        function assertJSX(node, opts) {
          assert("JSX", node, opts);
        }

        function assertTSTypeElement(node, opts) {
          assert("TSTypeElement", node, opts);
        }

        function assertTSType(node, opts) {
          assert("TSType", node, opts);
        }

        function assertTSBaseType(node, opts) {
          assert("TSBaseType", node, opts);
        }

        function assertNumberLiteral(node, opts) {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );
          assert("NumberLiteral", node, opts);
        }

        function assertRegexLiteral(node, opts) {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );
          assert("RegexLiteral", node, opts);
        }

        function assertRestProperty(node, opts) {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );
          assert("RestProperty", node, opts);
        }

        function assertSpreadProperty(node, opts) {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );
          assert("SpreadProperty", node, opts);
        }
      },
      { "../../validators/is": 185 },
    ],
    126: [function (require, module, exports) {}, {}],
    127: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = builder;

        var _definitions = require("../definitions");

        var _validate = require("../validators/validate");

        function builder(type, ...args) {
          const keys = _definitions.BUILDER_KEYS[type];
          const countArgs = args.length;

          if (countArgs > keys.length) {
            throw new Error(
              `${type}: Too many arguments passed. Received ${countArgs} but can receive no more than ${keys.length}`
            );
          }

          const node = {
            type,
          };
          let i = 0;
          keys.forEach((key) => {
            const field = _definitions.NODE_FIELDS[type][key];
            let arg;
            if (i < countArgs) arg = args[i];

            if (arg === undefined) {
              arg = Array.isArray(field.default) ? [] : field.default;
            }

            node[key] = arg;
            i++;
          });

          for (const key of Object.keys(node)) {
            (0, _validate.default)(node, key, node[key]);
          }

          return node;
        }
      },
      { "../definitions": 162, "../validators/validate": 203 },
    ],
    128: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = createFlowUnionType;

        var _generated = require("../generated");

        var _removeTypeDuplicates = require("../../modifications/flow/removeTypeDuplicates");

        function createFlowUnionType(types) {
          const flattened = (0, _removeTypeDuplicates.default)(types);

          if (flattened.length === 1) {
            return flattened[0];
          } else {
            return (0, _generated.unionTypeAnnotation)(flattened);
          }
        }
      },
      {
        "../../modifications/flow/removeTypeDuplicates": 170,
        "../generated": 130,
      },
    ],
    129: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = createTypeAnnotationBasedOnTypeof;

        var _generated = require("../generated");

        function createTypeAnnotationBasedOnTypeof(type) {
          if (type === "string") {
            return (0, _generated.stringTypeAnnotation)();
          } else if (type === "number") {
            return (0, _generated.numberTypeAnnotation)();
          } else if (type === "undefined") {
            return (0, _generated.voidTypeAnnotation)();
          } else if (type === "boolean") {
            return (0, _generated.booleanTypeAnnotation)();
          } else if (type === "function") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Function")
            );
          } else if (type === "object") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Object")
            );
          } else if (type === "symbol") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Symbol")
            );
          } else if (type === "bigint") {
            return (0, _generated.anyTypeAnnotation)();
          } else {
            throw new Error("Invalid typeof value: " + type);
          }
        }
      },
      { "../generated": 130 },
    ],
    130: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.arrayExpression = arrayExpression;
        exports.assignmentExpression = assignmentExpression;
        exports.binaryExpression = binaryExpression;
        exports.interpreterDirective = interpreterDirective;
        exports.directive = directive;
        exports.directiveLiteral = directiveLiteral;
        exports.blockStatement = blockStatement;
        exports.breakStatement = breakStatement;
        exports.callExpression = callExpression;
        exports.catchClause = catchClause;
        exports.conditionalExpression = conditionalExpression;
        exports.continueStatement = continueStatement;
        exports.debuggerStatement = debuggerStatement;
        exports.doWhileStatement = doWhileStatement;
        exports.emptyStatement = emptyStatement;
        exports.expressionStatement = expressionStatement;
        exports.file = file;
        exports.forInStatement = forInStatement;
        exports.forStatement = forStatement;
        exports.functionDeclaration = functionDeclaration;
        exports.functionExpression = functionExpression;
        exports.identifier = identifier;
        exports.ifStatement = ifStatement;
        exports.labeledStatement = labeledStatement;
        exports.stringLiteral = stringLiteral;
        exports.numericLiteral = numericLiteral;
        exports.nullLiteral = nullLiteral;
        exports.booleanLiteral = booleanLiteral;
        exports.regExpLiteral = regExpLiteral;
        exports.logicalExpression = logicalExpression;
        exports.memberExpression = memberExpression;
        exports.newExpression = newExpression;
        exports.program = program;
        exports.objectExpression = objectExpression;
        exports.objectMethod = objectMethod;
        exports.objectProperty = objectProperty;
        exports.restElement = restElement;
        exports.returnStatement = returnStatement;
        exports.sequenceExpression = sequenceExpression;
        exports.parenthesizedExpression = parenthesizedExpression;
        exports.switchCase = switchCase;
        exports.switchStatement = switchStatement;
        exports.thisExpression = thisExpression;
        exports.throwStatement = throwStatement;
        exports.tryStatement = tryStatement;
        exports.unaryExpression = unaryExpression;
        exports.updateExpression = updateExpression;
        exports.variableDeclaration = variableDeclaration;
        exports.variableDeclarator = variableDeclarator;
        exports.whileStatement = whileStatement;
        exports.withStatement = withStatement;
        exports.assignmentPattern = assignmentPattern;
        exports.arrayPattern = arrayPattern;
        exports.arrowFunctionExpression = arrowFunctionExpression;
        exports.classBody = classBody;
        exports.classExpression = classExpression;
        exports.classDeclaration = classDeclaration;
        exports.exportAllDeclaration = exportAllDeclaration;
        exports.exportDefaultDeclaration = exportDefaultDeclaration;
        exports.exportNamedDeclaration = exportNamedDeclaration;
        exports.exportSpecifier = exportSpecifier;
        exports.forOfStatement = forOfStatement;
        exports.importDeclaration = importDeclaration;
        exports.importDefaultSpecifier = importDefaultSpecifier;
        exports.importNamespaceSpecifier = importNamespaceSpecifier;
        exports.importSpecifier = importSpecifier;
        exports.metaProperty = metaProperty;
        exports.classMethod = classMethod;
        exports.objectPattern = objectPattern;
        exports.spreadElement = spreadElement;
        exports.super = _super;
        exports.taggedTemplateExpression = taggedTemplateExpression;
        exports.templateElement = templateElement;
        exports.templateLiteral = templateLiteral;
        exports.yieldExpression = yieldExpression;
        exports.awaitExpression = awaitExpression;
        exports.import = _import;
        exports.bigIntLiteral = bigIntLiteral;
        exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
        exports.optionalMemberExpression = optionalMemberExpression;
        exports.optionalCallExpression = optionalCallExpression;
        exports.classProperty = classProperty;
        exports.classPrivateProperty = classPrivateProperty;
        exports.classPrivateMethod = classPrivateMethod;
        exports.privateName = privateName;
        exports.anyTypeAnnotation = anyTypeAnnotation;
        exports.arrayTypeAnnotation = arrayTypeAnnotation;
        exports.booleanTypeAnnotation = booleanTypeAnnotation;
        exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
        exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
        exports.classImplements = classImplements;
        exports.declareClass = declareClass;
        exports.declareFunction = declareFunction;
        exports.declareInterface = declareInterface;
        exports.declareModule = declareModule;
        exports.declareModuleExports = declareModuleExports;
        exports.declareTypeAlias = declareTypeAlias;
        exports.declareOpaqueType = declareOpaqueType;
        exports.declareVariable = declareVariable;
        exports.declareExportDeclaration = declareExportDeclaration;
        exports.declareExportAllDeclaration = declareExportAllDeclaration;
        exports.declaredPredicate = declaredPredicate;
        exports.existsTypeAnnotation = existsTypeAnnotation;
        exports.functionTypeAnnotation = functionTypeAnnotation;
        exports.functionTypeParam = functionTypeParam;
        exports.genericTypeAnnotation = genericTypeAnnotation;
        exports.inferredPredicate = inferredPredicate;
        exports.interfaceExtends = interfaceExtends;
        exports.interfaceDeclaration = interfaceDeclaration;
        exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
        exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
        exports.mixedTypeAnnotation = mixedTypeAnnotation;
        exports.emptyTypeAnnotation = emptyTypeAnnotation;
        exports.nullableTypeAnnotation = nullableTypeAnnotation;
        exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
        exports.numberTypeAnnotation = numberTypeAnnotation;
        exports.objectTypeAnnotation = objectTypeAnnotation;
        exports.objectTypeInternalSlot = objectTypeInternalSlot;
        exports.objectTypeCallProperty = objectTypeCallProperty;
        exports.objectTypeIndexer = objectTypeIndexer;
        exports.objectTypeProperty = objectTypeProperty;
        exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
        exports.opaqueType = opaqueType;
        exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
        exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
        exports.stringTypeAnnotation = stringTypeAnnotation;
        exports.symbolTypeAnnotation = symbolTypeAnnotation;
        exports.thisTypeAnnotation = thisTypeAnnotation;
        exports.tupleTypeAnnotation = tupleTypeAnnotation;
        exports.typeofTypeAnnotation = typeofTypeAnnotation;
        exports.typeAlias = typeAlias;
        exports.typeAnnotation = typeAnnotation;
        exports.typeCastExpression = typeCastExpression;
        exports.typeParameter = typeParameter;
        exports.typeParameterDeclaration = typeParameterDeclaration;
        exports.typeParameterInstantiation = typeParameterInstantiation;
        exports.unionTypeAnnotation = unionTypeAnnotation;
        exports.variance = variance;
        exports.voidTypeAnnotation = voidTypeAnnotation;
        exports.enumDeclaration = enumDeclaration;
        exports.enumBooleanBody = enumBooleanBody;
        exports.enumNumberBody = enumNumberBody;
        exports.enumStringBody = enumStringBody;
        exports.enumSymbolBody = enumSymbolBody;
        exports.enumBooleanMember = enumBooleanMember;
        exports.enumNumberMember = enumNumberMember;
        exports.enumStringMember = enumStringMember;
        exports.enumDefaultedMember = enumDefaultedMember;
        exports.indexedAccessType = indexedAccessType;
        exports.optionalIndexedAccessType = optionalIndexedAccessType;
        exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
        exports.jSXClosingElement = exports.jsxClosingElement =
          jsxClosingElement;
        exports.jSXElement = exports.jsxElement = jsxElement;
        exports.jSXEmptyExpression = exports.jsxEmptyExpression =
          jsxEmptyExpression;
        exports.jSXExpressionContainer = exports.jsxExpressionContainer =
          jsxExpressionContainer;
        exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
        exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;
        exports.jSXMemberExpression = exports.jsxMemberExpression =
          jsxMemberExpression;
        exports.jSXNamespacedName = exports.jsxNamespacedName =
          jsxNamespacedName;
        exports.jSXOpeningElement = exports.jsxOpeningElement =
          jsxOpeningElement;
        exports.jSXSpreadAttribute = exports.jsxSpreadAttribute =
          jsxSpreadAttribute;
        exports.jSXText = exports.jsxText = jsxText;
        exports.jSXFragment = exports.jsxFragment = jsxFragment;
        exports.jSXOpeningFragment = exports.jsxOpeningFragment =
          jsxOpeningFragment;
        exports.jSXClosingFragment = exports.jsxClosingFragment =
          jsxClosingFragment;
        exports.noop = noop;
        exports.placeholder = placeholder;
        exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
        exports.argumentPlaceholder = argumentPlaceholder;
        exports.bindExpression = bindExpression;
        exports.importAttribute = importAttribute;
        exports.decorator = decorator;
        exports.doExpression = doExpression;
        exports.exportDefaultSpecifier = exportDefaultSpecifier;
        exports.recordExpression = recordExpression;
        exports.tupleExpression = tupleExpression;
        exports.decimalLiteral = decimalLiteral;
        exports.staticBlock = staticBlock;
        exports.moduleExpression = moduleExpression;
        exports.topicReference = topicReference;
        exports.pipelineTopicExpression = pipelineTopicExpression;
        exports.pipelineBareFunction = pipelineBareFunction;
        exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
        exports.tSParameterProperty = exports.tsParameterProperty =
          tsParameterProperty;
        exports.tSDeclareFunction = exports.tsDeclareFunction =
          tsDeclareFunction;
        exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
        exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
        exports.tSCallSignatureDeclaration =
          exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
        exports.tSConstructSignatureDeclaration =
          exports.tsConstructSignatureDeclaration =
            tsConstructSignatureDeclaration;
        exports.tSPropertySignature = exports.tsPropertySignature =
          tsPropertySignature;
        exports.tSMethodSignature = exports.tsMethodSignature =
          tsMethodSignature;
        exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
        exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
        exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
        exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
        exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword =
          tsIntrinsicKeyword;
        exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
        exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
        exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
        exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
        exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
        exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
        exports.tSUndefinedKeyword = exports.tsUndefinedKeyword =
          tsUndefinedKeyword;
        exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
        exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
        exports.tSThisType = exports.tsThisType = tsThisType;
        exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
        exports.tSConstructorType = exports.tsConstructorType =
          tsConstructorType;
        exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
        exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
        exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
        exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
        exports.tSArrayType = exports.tsArrayType = tsArrayType;
        exports.tSTupleType = exports.tsTupleType = tsTupleType;
        exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
        exports.tSRestType = exports.tsRestType = tsRestType;
        exports.tSNamedTupleMember = exports.tsNamedTupleMember =
          tsNamedTupleMember;
        exports.tSUnionType = exports.tsUnionType = tsUnionType;
        exports.tSIntersectionType = exports.tsIntersectionType =
          tsIntersectionType;
        exports.tSConditionalType = exports.tsConditionalType =
          tsConditionalType;
        exports.tSInferType = exports.tsInferType = tsInferType;
        exports.tSParenthesizedType = exports.tsParenthesizedType =
          tsParenthesizedType;
        exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
        exports.tSIndexedAccessType = exports.tsIndexedAccessType =
          tsIndexedAccessType;
        exports.tSMappedType = exports.tsMappedType = tsMappedType;
        exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
        exports.tSExpressionWithTypeArguments =
          exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
        exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration =
          tsInterfaceDeclaration;
        exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
        exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration =
          tsTypeAliasDeclaration;
        exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
        exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
        exports.tSEnumDeclaration = exports.tsEnumDeclaration =
          tsEnumDeclaration;
        exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
        exports.tSModuleDeclaration = exports.tsModuleDeclaration =
          tsModuleDeclaration;
        exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
        exports.tSImportType = exports.tsImportType = tsImportType;
        exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration =
          tsImportEqualsDeclaration;
        exports.tSExternalModuleReference = exports.tsExternalModuleReference =
          tsExternalModuleReference;
        exports.tSNonNullExpression = exports.tsNonNullExpression =
          tsNonNullExpression;
        exports.tSExportAssignment = exports.tsExportAssignment =
          tsExportAssignment;
        exports.tSNamespaceExportDeclaration =
          exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
        exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
        exports.tSTypeParameterInstantiation =
          exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
        exports.tSTypeParameterDeclaration =
          exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
        exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
        exports.numberLiteral = NumberLiteral;
        exports.regexLiteral = RegexLiteral;
        exports.restProperty = RestProperty;
        exports.spreadProperty = SpreadProperty;

        var _builder = require("../builder");

        function arrayExpression(elements) {
          return (0, _builder.default)("ArrayExpression", ...arguments);
        }

        function assignmentExpression(operator, left, right) {
          return (0, _builder.default)("AssignmentExpression", ...arguments);
        }

        function binaryExpression(operator, left, right) {
          return (0, _builder.default)("BinaryExpression", ...arguments);
        }

        function interpreterDirective(value) {
          return (0, _builder.default)("InterpreterDirective", ...arguments);
        }

        function directive(value) {
          return (0, _builder.default)("Directive", ...arguments);
        }

        function directiveLiteral(value) {
          return (0, _builder.default)("DirectiveLiteral", ...arguments);
        }

        function blockStatement(body, directives) {
          return (0, _builder.default)("BlockStatement", ...arguments);
        }

        function breakStatement(label) {
          return (0, _builder.default)("BreakStatement", ...arguments);
        }

        function callExpression(callee, _arguments) {
          return (0, _builder.default)("CallExpression", ...arguments);
        }

        function catchClause(param, body) {
          return (0, _builder.default)("CatchClause", ...arguments);
        }

        function conditionalExpression(test, consequent, alternate) {
          return (0, _builder.default)("ConditionalExpression", ...arguments);
        }

        function continueStatement(label) {
          return (0, _builder.default)("ContinueStatement", ...arguments);
        }

        function debuggerStatement() {
          return (0, _builder.default)("DebuggerStatement", ...arguments);
        }

        function doWhileStatement(test, body) {
          return (0, _builder.default)("DoWhileStatement", ...arguments);
        }

        function emptyStatement() {
          return (0, _builder.default)("EmptyStatement", ...arguments);
        }

        function expressionStatement(expression) {
          return (0, _builder.default)("ExpressionStatement", ...arguments);
        }

        function file(program, comments, tokens) {
          return (0, _builder.default)("File", ...arguments);
        }

        function forInStatement(left, right, body) {
          return (0, _builder.default)("ForInStatement", ...arguments);
        }

        function forStatement(init, test, update, body) {
          return (0, _builder.default)("ForStatement", ...arguments);
        }

        function functionDeclaration(id, params, body, generator, async) {
          return (0, _builder.default)("FunctionDeclaration", ...arguments);
        }

        function functionExpression(id, params, body, generator, async) {
          return (0, _builder.default)("FunctionExpression", ...arguments);
        }

        function identifier(name) {
          return (0, _builder.default)("Identifier", ...arguments);
        }

        function ifStatement(test, consequent, alternate) {
          return (0, _builder.default)("IfStatement", ...arguments);
        }

        function labeledStatement(label, body) {
          return (0, _builder.default)("LabeledStatement", ...arguments);
        }

        function stringLiteral(value) {
          return (0, _builder.default)("StringLiteral", ...arguments);
        }

        function numericLiteral(value) {
          return (0, _builder.default)("NumericLiteral", ...arguments);
        }

        function nullLiteral() {
          return (0, _builder.default)("NullLiteral", ...arguments);
        }

        function booleanLiteral(value) {
          return (0, _builder.default)("BooleanLiteral", ...arguments);
        }

        function regExpLiteral(pattern, flags) {
          return (0, _builder.default)("RegExpLiteral", ...arguments);
        }

        function logicalExpression(operator, left, right) {
          return (0, _builder.default)("LogicalExpression", ...arguments);
        }

        function memberExpression(object, property, computed, optional) {
          return (0, _builder.default)("MemberExpression", ...arguments);
        }

        function newExpression(callee, _arguments) {
          return (0, _builder.default)("NewExpression", ...arguments);
        }

        function program(body, directives, sourceType, interpreter) {
          return (0, _builder.default)("Program", ...arguments);
        }

        function objectExpression(properties) {
          return (0, _builder.default)("ObjectExpression", ...arguments);
        }

        function objectMethod(
          kind,
          key,
          params,
          body,
          computed,
          generator,
          async
        ) {
          return (0, _builder.default)("ObjectMethod", ...arguments);
        }

        function objectProperty(key, value, computed, shorthand, decorators) {
          return (0, _builder.default)("ObjectProperty", ...arguments);
        }

        function restElement(argument) {
          return (0, _builder.default)("RestElement", ...arguments);
        }

        function returnStatement(argument) {
          return (0, _builder.default)("ReturnStatement", ...arguments);
        }

        function sequenceExpression(expressions) {
          return (0, _builder.default)("SequenceExpression", ...arguments);
        }

        function parenthesizedExpression(expression) {
          return (0, _builder.default)("ParenthesizedExpression", ...arguments);
        }

        function switchCase(test, consequent) {
          return (0, _builder.default)("SwitchCase", ...arguments);
        }

        function switchStatement(discriminant, cases) {
          return (0, _builder.default)("SwitchStatement", ...arguments);
        }

        function thisExpression() {
          return (0, _builder.default)("ThisExpression", ...arguments);
        }

        function throwStatement(argument) {
          return (0, _builder.default)("ThrowStatement", ...arguments);
        }

        function tryStatement(block, handler, finalizer) {
          return (0, _builder.default)("TryStatement", ...arguments);
        }

        function unaryExpression(operator, argument, prefix) {
          return (0, _builder.default)("UnaryExpression", ...arguments);
        }

        function updateExpression(operator, argument, prefix) {
          return (0, _builder.default)("UpdateExpression", ...arguments);
        }

        function variableDeclaration(kind, declarations) {
          return (0, _builder.default)("VariableDeclaration", ...arguments);
        }

        function variableDeclarator(id, init) {
          return (0, _builder.default)("VariableDeclarator", ...arguments);
        }

        function whileStatement(test, body) {
          return (0, _builder.default)("WhileStatement", ...arguments);
        }

        function withStatement(object, body) {
          return (0, _builder.default)("WithStatement", ...arguments);
        }

        function assignmentPattern(left, right) {
          return (0, _builder.default)("AssignmentPattern", ...arguments);
        }

        function arrayPattern(elements) {
          return (0, _builder.default)("ArrayPattern", ...arguments);
        }

        function arrowFunctionExpression(params, body, async) {
          return (0, _builder.default)("ArrowFunctionExpression", ...arguments);
        }

        function classBody(body) {
          return (0, _builder.default)("ClassBody", ...arguments);
        }

        function classExpression(id, superClass, body, decorators) {
          return (0, _builder.default)("ClassExpression", ...arguments);
        }

        function classDeclaration(id, superClass, body, decorators) {
          return (0, _builder.default)("ClassDeclaration", ...arguments);
        }

        function exportAllDeclaration(source) {
          return (0, _builder.default)("ExportAllDeclaration", ...arguments);
        }

        function exportDefaultDeclaration(declaration) {
          return (0, _builder.default)(
            "ExportDefaultDeclaration",
            ...arguments
          );
        }

        function exportNamedDeclaration(declaration, specifiers, source) {
          return (0, _builder.default)("ExportNamedDeclaration", ...arguments);
        }

        function exportSpecifier(local, exported) {
          return (0, _builder.default)("ExportSpecifier", ...arguments);
        }

        function forOfStatement(left, right, body, _await) {
          return (0, _builder.default)("ForOfStatement", ...arguments);
        }

        function importDeclaration(specifiers, source) {
          return (0, _builder.default)("ImportDeclaration", ...arguments);
        }

        function importDefaultSpecifier(local) {
          return (0, _builder.default)("ImportDefaultSpecifier", ...arguments);
        }

        function importNamespaceSpecifier(local) {
          return (0, _builder.default)(
            "ImportNamespaceSpecifier",
            ...arguments
          );
        }

        function importSpecifier(local, imported) {
          return (0, _builder.default)("ImportSpecifier", ...arguments);
        }

        function metaProperty(meta, property) {
          return (0, _builder.default)("MetaProperty", ...arguments);
        }

        function classMethod(
          kind,
          key,
          params,
          body,
          computed,
          _static,
          generator,
          async
        ) {
          return (0, _builder.default)("ClassMethod", ...arguments);
        }

        function objectPattern(properties) {
          return (0, _builder.default)("ObjectPattern", ...arguments);
        }

        function spreadElement(argument) {
          return (0, _builder.default)("SpreadElement", ...arguments);
        }

        function _super() {
          return (0, _builder.default)("Super", ...arguments);
        }

        function taggedTemplateExpression(tag, quasi) {
          return (0, _builder.default)(
            "TaggedTemplateExpression",
            ...arguments
          );
        }

        function templateElement(value, tail) {
          return (0, _builder.default)("TemplateElement", ...arguments);
        }

        function templateLiteral(quasis, expressions) {
          return (0, _builder.default)("TemplateLiteral", ...arguments);
        }

        function yieldExpression(argument, delegate) {
          return (0, _builder.default)("YieldExpression", ...arguments);
        }

        function awaitExpression(argument) {
          return (0, _builder.default)("AwaitExpression", ...arguments);
        }

        function _import() {
          return (0, _builder.default)("Import", ...arguments);
        }

        function bigIntLiteral(value) {
          return (0, _builder.default)("BigIntLiteral", ...arguments);
        }

        function exportNamespaceSpecifier(exported) {
          return (0, _builder.default)(
            "ExportNamespaceSpecifier",
            ...arguments
          );
        }

        function optionalMemberExpression(
          object,
          property,
          computed,
          optional
        ) {
          return (0, _builder.default)(
            "OptionalMemberExpression",
            ...arguments
          );
        }

        function optionalCallExpression(callee, _arguments, optional) {
          return (0, _builder.default)("OptionalCallExpression", ...arguments);
        }

        function classProperty(
          key,
          value,
          typeAnnotation,
          decorators,
          computed,
          _static
        ) {
          return (0, _builder.default)("ClassProperty", ...arguments);
        }

        function classPrivateProperty(key, value, decorators, _static) {
          return (0, _builder.default)("ClassPrivateProperty", ...arguments);
        }

        function classPrivateMethod(kind, key, params, body, _static) {
          return (0, _builder.default)("ClassPrivateMethod", ...arguments);
        }

        function privateName(id) {
          return (0, _builder.default)("PrivateName", ...arguments);
        }

        function anyTypeAnnotation() {
          return (0, _builder.default)("AnyTypeAnnotation", ...arguments);
        }

        function arrayTypeAnnotation(elementType) {
          return (0, _builder.default)("ArrayTypeAnnotation", ...arguments);
        }

        function booleanTypeAnnotation() {
          return (0, _builder.default)("BooleanTypeAnnotation", ...arguments);
        }

        function booleanLiteralTypeAnnotation(value) {
          return (0, _builder.default)(
            "BooleanLiteralTypeAnnotation",
            ...arguments
          );
        }

        function nullLiteralTypeAnnotation() {
          return (0, _builder.default)(
            "NullLiteralTypeAnnotation",
            ...arguments
          );
        }

        function classImplements(id, typeParameters) {
          return (0, _builder.default)("ClassImplements", ...arguments);
        }

        function declareClass(id, typeParameters, _extends, body) {
          return (0, _builder.default)("DeclareClass", ...arguments);
        }

        function declareFunction(id) {
          return (0, _builder.default)("DeclareFunction", ...arguments);
        }

        function declareInterface(id, typeParameters, _extends, body) {
          return (0, _builder.default)("DeclareInterface", ...arguments);
        }

        function declareModule(id, body, kind) {
          return (0, _builder.default)("DeclareModule", ...arguments);
        }

        function declareModuleExports(typeAnnotation) {
          return (0, _builder.default)("DeclareModuleExports", ...arguments);
        }

        function declareTypeAlias(id, typeParameters, right) {
          return (0, _builder.default)("DeclareTypeAlias", ...arguments);
        }

        function declareOpaqueType(id, typeParameters, supertype) {
          return (0, _builder.default)("DeclareOpaqueType", ...arguments);
        }

        function declareVariable(id) {
          return (0, _builder.default)("DeclareVariable", ...arguments);
        }

        function declareExportDeclaration(declaration, specifiers, source) {
          return (0, _builder.default)(
            "DeclareExportDeclaration",
            ...arguments
          );
        }

        function declareExportAllDeclaration(source) {
          return (0, _builder.default)(
            "DeclareExportAllDeclaration",
            ...arguments
          );
        }

        function declaredPredicate(value) {
          return (0, _builder.default)("DeclaredPredicate", ...arguments);
        }

        function existsTypeAnnotation() {
          return (0, _builder.default)("ExistsTypeAnnotation", ...arguments);
        }

        function functionTypeAnnotation(
          typeParameters,
          params,
          rest,
          returnType
        ) {
          return (0, _builder.default)("FunctionTypeAnnotation", ...arguments);
        }

        function functionTypeParam(name, typeAnnotation) {
          return (0, _builder.default)("FunctionTypeParam", ...arguments);
        }

        function genericTypeAnnotation(id, typeParameters) {
          return (0, _builder.default)("GenericTypeAnnotation", ...arguments);
        }

        function inferredPredicate() {
          return (0, _builder.default)("InferredPredicate", ...arguments);
        }

        function interfaceExtends(id, typeParameters) {
          return (0, _builder.default)("InterfaceExtends", ...arguments);
        }

        function interfaceDeclaration(id, typeParameters, _extends, body) {
          return (0, _builder.default)("InterfaceDeclaration", ...arguments);
        }

        function interfaceTypeAnnotation(_extends, body) {
          return (0, _builder.default)("InterfaceTypeAnnotation", ...arguments);
        }

        function intersectionTypeAnnotation(types) {
          return (0, _builder.default)(
            "IntersectionTypeAnnotation",
            ...arguments
          );
        }

        function mixedTypeAnnotation() {
          return (0, _builder.default)("MixedTypeAnnotation", ...arguments);
        }

        function emptyTypeAnnotation() {
          return (0, _builder.default)("EmptyTypeAnnotation", ...arguments);
        }

        function nullableTypeAnnotation(typeAnnotation) {
          return (0, _builder.default)("NullableTypeAnnotation", ...arguments);
        }

        function numberLiteralTypeAnnotation(value) {
          return (0, _builder.default)(
            "NumberLiteralTypeAnnotation",
            ...arguments
          );
        }

        function numberTypeAnnotation() {
          return (0, _builder.default)("NumberTypeAnnotation", ...arguments);
        }

        function objectTypeAnnotation(
          properties,
          indexers,
          callProperties,
          internalSlots,
          exact
        ) {
          return (0, _builder.default)("ObjectTypeAnnotation", ...arguments);
        }

        function objectTypeInternalSlot(id, value, optional, _static, method) {
          return (0, _builder.default)("ObjectTypeInternalSlot", ...arguments);
        }

        function objectTypeCallProperty(value) {
          return (0, _builder.default)("ObjectTypeCallProperty", ...arguments);
        }

        function objectTypeIndexer(id, key, value, variance) {
          return (0, _builder.default)("ObjectTypeIndexer", ...arguments);
        }

        function objectTypeProperty(key, value, variance) {
          return (0, _builder.default)("ObjectTypeProperty", ...arguments);
        }

        function objectTypeSpreadProperty(argument) {
          return (0, _builder.default)(
            "ObjectTypeSpreadProperty",
            ...arguments
          );
        }

        function opaqueType(id, typeParameters, supertype, impltype) {
          return (0, _builder.default)("OpaqueType", ...arguments);
        }

        function qualifiedTypeIdentifier(id, qualification) {
          return (0, _builder.default)("QualifiedTypeIdentifier", ...arguments);
        }

        function stringLiteralTypeAnnotation(value) {
          return (0, _builder.default)(
            "StringLiteralTypeAnnotation",
            ...arguments
          );
        }

        function stringTypeAnnotation() {
          return (0, _builder.default)("StringTypeAnnotation", ...arguments);
        }

        function symbolTypeAnnotation() {
          return (0, _builder.default)("SymbolTypeAnnotation", ...arguments);
        }

        function thisTypeAnnotation() {
          return (0, _builder.default)("ThisTypeAnnotation", ...arguments);
        }

        function tupleTypeAnnotation(types) {
          return (0, _builder.default)("TupleTypeAnnotation", ...arguments);
        }

        function typeofTypeAnnotation(argument) {
          return (0, _builder.default)("TypeofTypeAnnotation", ...arguments);
        }

        function typeAlias(id, typeParameters, right) {
          return (0, _builder.default)("TypeAlias", ...arguments);
        }

        function typeAnnotation(typeAnnotation) {
          return (0, _builder.default)("TypeAnnotation", ...arguments);
        }

        function typeCastExpression(expression, typeAnnotation) {
          return (0, _builder.default)("TypeCastExpression", ...arguments);
        }

        function typeParameter(bound, _default, variance) {
          return (0, _builder.default)("TypeParameter", ...arguments);
        }

        function typeParameterDeclaration(params) {
          return (0, _builder.default)(
            "TypeParameterDeclaration",
            ...arguments
          );
        }

        function typeParameterInstantiation(params) {
          return (0, _builder.default)(
            "TypeParameterInstantiation",
            ...arguments
          );
        }

        function unionTypeAnnotation(types) {
          return (0, _builder.default)("UnionTypeAnnotation", ...arguments);
        }

        function variance(kind) {
          return (0, _builder.default)("Variance", ...arguments);
        }

        function voidTypeAnnotation() {
          return (0, _builder.default)("VoidTypeAnnotation", ...arguments);
        }

        function enumDeclaration(id, body) {
          return (0, _builder.default)("EnumDeclaration", ...arguments);
        }

        function enumBooleanBody(members) {
          return (0, _builder.default)("EnumBooleanBody", ...arguments);
        }

        function enumNumberBody(members) {
          return (0, _builder.default)("EnumNumberBody", ...arguments);
        }

        function enumStringBody(members) {
          return (0, _builder.default)("EnumStringBody", ...arguments);
        }

        function enumSymbolBody(members) {
          return (0, _builder.default)("EnumSymbolBody", ...arguments);
        }

        function enumBooleanMember(id) {
          return (0, _builder.default)("EnumBooleanMember", ...arguments);
        }

        function enumNumberMember(id, init) {
          return (0, _builder.default)("EnumNumberMember", ...arguments);
        }

        function enumStringMember(id, init) {
          return (0, _builder.default)("EnumStringMember", ...arguments);
        }

        function enumDefaultedMember(id) {
          return (0, _builder.default)("EnumDefaultedMember", ...arguments);
        }

        function indexedAccessType(objectType, indexType) {
          return (0, _builder.default)("IndexedAccessType", ...arguments);
        }

        function optionalIndexedAccessType(objectType, indexType) {
          return (0, _builder.default)(
            "OptionalIndexedAccessType",
            ...arguments
          );
        }

        function jsxAttribute(name, value) {
          return (0, _builder.default)("JSXAttribute", ...arguments);
        }

        function jsxClosingElement(name) {
          return (0, _builder.default)("JSXClosingElement", ...arguments);
        }

        function jsxElement(
          openingElement,
          closingElement,
          children,
          selfClosing
        ) {
          return (0, _builder.default)("JSXElement", ...arguments);
        }

        function jsxEmptyExpression() {
          return (0, _builder.default)("JSXEmptyExpression", ...arguments);
        }

        function jsxExpressionContainer(expression) {
          return (0, _builder.default)("JSXExpressionContainer", ...arguments);
        }

        function jsxSpreadChild(expression) {
          return (0, _builder.default)("JSXSpreadChild", ...arguments);
        }

        function jsxIdentifier(name) {
          return (0, _builder.default)("JSXIdentifier", ...arguments);
        }

        function jsxMemberExpression(object, property) {
          return (0, _builder.default)("JSXMemberExpression", ...arguments);
        }

        function jsxNamespacedName(namespace, name) {
          return (0, _builder.default)("JSXNamespacedName", ...arguments);
        }

        function jsxOpeningElement(name, attributes, selfClosing) {
          return (0, _builder.default)("JSXOpeningElement", ...arguments);
        }

        function jsxSpreadAttribute(argument) {
          return (0, _builder.default)("JSXSpreadAttribute", ...arguments);
        }

        function jsxText(value) {
          return (0, _builder.default)("JSXText", ...arguments);
        }

        function jsxFragment(openingFragment, closingFragment, children) {
          return (0, _builder.default)("JSXFragment", ...arguments);
        }

        function jsxOpeningFragment() {
          return (0, _builder.default)("JSXOpeningFragment", ...arguments);
        }

        function jsxClosingFragment() {
          return (0, _builder.default)("JSXClosingFragment", ...arguments);
        }

        function noop() {
          return (0, _builder.default)("Noop", ...arguments);
        }

        function placeholder(expectedNode, name) {
          return (0, _builder.default)("Placeholder", ...arguments);
        }

        function v8IntrinsicIdentifier(name) {
          return (0, _builder.default)("V8IntrinsicIdentifier", ...arguments);
        }

        function argumentPlaceholder() {
          return (0, _builder.default)("ArgumentPlaceholder", ...arguments);
        }

        function bindExpression(object, callee) {
          return (0, _builder.default)("BindExpression", ...arguments);
        }

        function importAttribute(key, value) {
          return (0, _builder.default)("ImportAttribute", ...arguments);
        }

        function decorator(expression) {
          return (0, _builder.default)("Decorator", ...arguments);
        }

        function doExpression(body, async) {
          return (0, _builder.default)("DoExpression", ...arguments);
        }

        function exportDefaultSpecifier(exported) {
          return (0, _builder.default)("ExportDefaultSpecifier", ...arguments);
        }

        function recordExpression(properties) {
          return (0, _builder.default)("RecordExpression", ...arguments);
        }

        function tupleExpression(elements) {
          return (0, _builder.default)("TupleExpression", ...arguments);
        }

        function decimalLiteral(value) {
          return (0, _builder.default)("DecimalLiteral", ...arguments);
        }

        function staticBlock(body) {
          return (0, _builder.default)("StaticBlock", ...arguments);
        }

        function moduleExpression(body) {
          return (0, _builder.default)("ModuleExpression", ...arguments);
        }

        function topicReference() {
          return (0, _builder.default)("TopicReference", ...arguments);
        }

        function pipelineTopicExpression(expression) {
          return (0, _builder.default)("PipelineTopicExpression", ...arguments);
        }

        function pipelineBareFunction(callee) {
          return (0, _builder.default)("PipelineBareFunction", ...arguments);
        }

        function pipelinePrimaryTopicReference() {
          return (0, _builder.default)(
            "PipelinePrimaryTopicReference",
            ...arguments
          );
        }

        function tsParameterProperty(parameter) {
          return (0, _builder.default)("TSParameterProperty", ...arguments);
        }

        function tsDeclareFunction(id, typeParameters, params, returnType) {
          return (0, _builder.default)("TSDeclareFunction", ...arguments);
        }

        function tsDeclareMethod(
          decorators,
          key,
          typeParameters,
          params,
          returnType
        ) {
          return (0, _builder.default)("TSDeclareMethod", ...arguments);
        }

        function tsQualifiedName(left, right) {
          return (0, _builder.default)("TSQualifiedName", ...arguments);
        }

        function tsCallSignatureDeclaration(
          typeParameters,
          parameters,
          typeAnnotation
        ) {
          return (0, _builder.default)(
            "TSCallSignatureDeclaration",
            ...arguments
          );
        }

        function tsConstructSignatureDeclaration(
          typeParameters,
          parameters,
          typeAnnotation
        ) {
          return (0, _builder.default)(
            "TSConstructSignatureDeclaration",
            ...arguments
          );
        }

        function tsPropertySignature(key, typeAnnotation, initializer) {
          return (0, _builder.default)("TSPropertySignature", ...arguments);
        }

        function tsMethodSignature(
          key,
          typeParameters,
          parameters,
          typeAnnotation
        ) {
          return (0, _builder.default)("TSMethodSignature", ...arguments);
        }

        function tsIndexSignature(parameters, typeAnnotation) {
          return (0, _builder.default)("TSIndexSignature", ...arguments);
        }

        function tsAnyKeyword() {
          return (0, _builder.default)("TSAnyKeyword", ...arguments);
        }

        function tsBooleanKeyword() {
          return (0, _builder.default)("TSBooleanKeyword", ...arguments);
        }

        function tsBigIntKeyword() {
          return (0, _builder.default)("TSBigIntKeyword", ...arguments);
        }

        function tsIntrinsicKeyword() {
          return (0, _builder.default)("TSIntrinsicKeyword", ...arguments);
        }

        function tsNeverKeyword() {
          return (0, _builder.default)("TSNeverKeyword", ...arguments);
        }

        function tsNullKeyword() {
          return (0, _builder.default)("TSNullKeyword", ...arguments);
        }

        function tsNumberKeyword() {
          return (0, _builder.default)("TSNumberKeyword", ...arguments);
        }

        function tsObjectKeyword() {
          return (0, _builder.default)("TSObjectKeyword", ...arguments);
        }

        function tsStringKeyword() {
          return (0, _builder.default)("TSStringKeyword", ...arguments);
        }

        function tsSymbolKeyword() {
          return (0, _builder.default)("TSSymbolKeyword", ...arguments);
        }

        function tsUndefinedKeyword() {
          return (0, _builder.default)("TSUndefinedKeyword", ...arguments);
        }

        function tsUnknownKeyword() {
          return (0, _builder.default)("TSUnknownKeyword", ...arguments);
        }

        function tsVoidKeyword() {
          return (0, _builder.default)("TSVoidKeyword", ...arguments);
        }

        function tsThisType() {
          return (0, _builder.default)("TSThisType", ...arguments);
        }

        function tsFunctionType(typeParameters, parameters, typeAnnotation) {
          return (0, _builder.default)("TSFunctionType", ...arguments);
        }

        function tsConstructorType(typeParameters, parameters, typeAnnotation) {
          return (0, _builder.default)("TSConstructorType", ...arguments);
        }

        function tsTypeReference(typeName, typeParameters) {
          return (0, _builder.default)("TSTypeReference", ...arguments);
        }

        function tsTypePredicate(parameterName, typeAnnotation, asserts) {
          return (0, _builder.default)("TSTypePredicate", ...arguments);
        }

        function tsTypeQuery(exprName) {
          return (0, _builder.default)("TSTypeQuery", ...arguments);
        }

        function tsTypeLiteral(members) {
          return (0, _builder.default)("TSTypeLiteral", ...arguments);
        }

        function tsArrayType(elementType) {
          return (0, _builder.default)("TSArrayType", ...arguments);
        }

        function tsTupleType(elementTypes) {
          return (0, _builder.default)("TSTupleType", ...arguments);
        }

        function tsOptionalType(typeAnnotation) {
          return (0, _builder.default)("TSOptionalType", ...arguments);
        }

        function tsRestType(typeAnnotation) {
          return (0, _builder.default)("TSRestType", ...arguments);
        }

        function tsNamedTupleMember(label, elementType, optional) {
          return (0, _builder.default)("TSNamedTupleMember", ...arguments);
        }

        function tsUnionType(types) {
          return (0, _builder.default)("TSUnionType", ...arguments);
        }

        function tsIntersectionType(types) {
          return (0, _builder.default)("TSIntersectionType", ...arguments);
        }

        function tsConditionalType(
          checkType,
          extendsType,
          trueType,
          falseType
        ) {
          return (0, _builder.default)("TSConditionalType", ...arguments);
        }

        function tsInferType(typeParameter) {
          return (0, _builder.default)("TSInferType", ...arguments);
        }

        function tsParenthesizedType(typeAnnotation) {
          return (0, _builder.default)("TSParenthesizedType", ...arguments);
        }

        function tsTypeOperator(typeAnnotation) {
          return (0, _builder.default)("TSTypeOperator", ...arguments);
        }

        function tsIndexedAccessType(objectType, indexType) {
          return (0, _builder.default)("TSIndexedAccessType", ...arguments);
        }

        function tsMappedType(typeParameter, typeAnnotation, nameType) {
          return (0, _builder.default)("TSMappedType", ...arguments);
        }

        function tsLiteralType(literal) {
          return (0, _builder.default)("TSLiteralType", ...arguments);
        }

        function tsExpressionWithTypeArguments(expression, typeParameters) {
          return (0, _builder.default)(
            "TSExpressionWithTypeArguments",
            ...arguments
          );
        }

        function tsInterfaceDeclaration(id, typeParameters, _extends, body) {
          return (0, _builder.default)("TSInterfaceDeclaration", ...arguments);
        }

        function tsInterfaceBody(body) {
          return (0, _builder.default)("TSInterfaceBody", ...arguments);
        }

        function tsTypeAliasDeclaration(id, typeParameters, typeAnnotation) {
          return (0, _builder.default)("TSTypeAliasDeclaration", ...arguments);
        }

        function tsAsExpression(expression, typeAnnotation) {
          return (0, _builder.default)("TSAsExpression", ...arguments);
        }

        function tsTypeAssertion(typeAnnotation, expression) {
          return (0, _builder.default)("TSTypeAssertion", ...arguments);
        }

        function tsEnumDeclaration(id, members) {
          return (0, _builder.default)("TSEnumDeclaration", ...arguments);
        }

        function tsEnumMember(id, initializer) {
          return (0, _builder.default)("TSEnumMember", ...arguments);
        }

        function tsModuleDeclaration(id, body) {
          return (0, _builder.default)("TSModuleDeclaration", ...arguments);
        }

        function tsModuleBlock(body) {
          return (0, _builder.default)("TSModuleBlock", ...arguments);
        }

        function tsImportType(argument, qualifier, typeParameters) {
          return (0, _builder.default)("TSImportType", ...arguments);
        }

        function tsImportEqualsDeclaration(id, moduleReference) {
          return (0, _builder.default)(
            "TSImportEqualsDeclaration",
            ...arguments
          );
        }

        function tsExternalModuleReference(expression) {
          return (0, _builder.default)(
            "TSExternalModuleReference",
            ...arguments
          );
        }

        function tsNonNullExpression(expression) {
          return (0, _builder.default)("TSNonNullExpression", ...arguments);
        }

        function tsExportAssignment(expression) {
          return (0, _builder.default)("TSExportAssignment", ...arguments);
        }

        function tsNamespaceExportDeclaration(id) {
          return (0, _builder.default)(
            "TSNamespaceExportDeclaration",
            ...arguments
          );
        }

        function tsTypeAnnotation(typeAnnotation) {
          return (0, _builder.default)("TSTypeAnnotation", ...arguments);
        }

        function tsTypeParameterInstantiation(params) {
          return (0, _builder.default)(
            "TSTypeParameterInstantiation",
            ...arguments
          );
        }

        function tsTypeParameterDeclaration(params) {
          return (0, _builder.default)(
            "TSTypeParameterDeclaration",
            ...arguments
          );
        }

        function tsTypeParameter(constraint, _default, name) {
          return (0, _builder.default)("TSTypeParameter", ...arguments);
        }

        function NumberLiteral(...args) {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );
          return (0, _builder.default)("NumberLiteral", ...args);
        }

        function RegexLiteral(...args) {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );
          return (0, _builder.default)("RegexLiteral", ...args);
        }

        function RestProperty(...args) {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );
          return (0, _builder.default)("RestProperty", ...args);
        }

        function SpreadProperty(...args) {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );
          return (0, _builder.default)("SpreadProperty", ...args);
        }
      },
      { "../builder": 127 },
    ],
    131: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "ArrayExpression", {
          enumerable: true,
          get: function () {
            return _index.arrayExpression;
          },
        });
        Object.defineProperty(exports, "AssignmentExpression", {
          enumerable: true,
          get: function () {
            return _index.assignmentExpression;
          },
        });
        Object.defineProperty(exports, "BinaryExpression", {
          enumerable: true,
          get: function () {
            return _index.binaryExpression;
          },
        });
        Object.defineProperty(exports, "InterpreterDirective", {
          enumerable: true,
          get: function () {
            return _index.interpreterDirective;
          },
        });
        Object.defineProperty(exports, "Directive", {
          enumerable: true,
          get: function () {
            return _index.directive;
          },
        });
        Object.defineProperty(exports, "DirectiveLiteral", {
          enumerable: true,
          get: function () {
            return _index.directiveLiteral;
          },
        });
        Object.defineProperty(exports, "BlockStatement", {
          enumerable: true,
          get: function () {
            return _index.blockStatement;
          },
        });
        Object.defineProperty(exports, "BreakStatement", {
          enumerable: true,
          get: function () {
            return _index.breakStatement;
          },
        });
        Object.defineProperty(exports, "CallExpression", {
          enumerable: true,
          get: function () {
            return _index.callExpression;
          },
        });
        Object.defineProperty(exports, "CatchClause", {
          enumerable: true,
          get: function () {
            return _index.catchClause;
          },
        });
        Object.defineProperty(exports, "ConditionalExpression", {
          enumerable: true,
          get: function () {
            return _index.conditionalExpression;
          },
        });
        Object.defineProperty(exports, "ContinueStatement", {
          enumerable: true,
          get: function () {
            return _index.continueStatement;
          },
        });
        Object.defineProperty(exports, "DebuggerStatement", {
          enumerable: true,
          get: function () {
            return _index.debuggerStatement;
          },
        });
        Object.defineProperty(exports, "DoWhileStatement", {
          enumerable: true,
          get: function () {
            return _index.doWhileStatement;
          },
        });
        Object.defineProperty(exports, "EmptyStatement", {
          enumerable: true,
          get: function () {
            return _index.emptyStatement;
          },
        });
        Object.defineProperty(exports, "ExpressionStatement", {
          enumerable: true,
          get: function () {
            return _index.expressionStatement;
          },
        });
        Object.defineProperty(exports, "File", {
          enumerable: true,
          get: function () {
            return _index.file;
          },
        });
        Object.defineProperty(exports, "ForInStatement", {
          enumerable: true,
          get: function () {
            return _index.forInStatement;
          },
        });
        Object.defineProperty(exports, "ForStatement", {
          enumerable: true,
          get: function () {
            return _index.forStatement;
          },
        });
        Object.defineProperty(exports, "FunctionDeclaration", {
          enumerable: true,
          get: function () {
            return _index.functionDeclaration;
          },
        });
        Object.defineProperty(exports, "FunctionExpression", {
          enumerable: true,
          get: function () {
            return _index.functionExpression;
          },
        });
        Object.defineProperty(exports, "Identifier", {
          enumerable: true,
          get: function () {
            return _index.identifier;
          },
        });
        Object.defineProperty(exports, "IfStatement", {
          enumerable: true,
          get: function () {
            return _index.ifStatement;
          },
        });
        Object.defineProperty(exports, "LabeledStatement", {
          enumerable: true,
          get: function () {
            return _index.labeledStatement;
          },
        });
        Object.defineProperty(exports, "StringLiteral", {
          enumerable: true,
          get: function () {
            return _index.stringLiteral;
          },
        });
        Object.defineProperty(exports, "NumericLiteral", {
          enumerable: true,
          get: function () {
            return _index.numericLiteral;
          },
        });
        Object.defineProperty(exports, "NullLiteral", {
          enumerable: true,
          get: function () {
            return _index.nullLiteral;
          },
        });
        Object.defineProperty(exports, "BooleanLiteral", {
          enumerable: true,
          get: function () {
            return _index.booleanLiteral;
          },
        });
        Object.defineProperty(exports, "RegExpLiteral", {
          enumerable: true,
          get: function () {
            return _index.regExpLiteral;
          },
        });
        Object.defineProperty(exports, "LogicalExpression", {
          enumerable: true,
          get: function () {
            return _index.logicalExpression;
          },
        });
        Object.defineProperty(exports, "MemberExpression", {
          enumerable: true,
          get: function () {
            return _index.memberExpression;
          },
        });
        Object.defineProperty(exports, "NewExpression", {
          enumerable: true,
          get: function () {
            return _index.newExpression;
          },
        });
        Object.defineProperty(exports, "Program", {
          enumerable: true,
          get: function () {
            return _index.program;
          },
        });
        Object.defineProperty(exports, "ObjectExpression", {
          enumerable: true,
          get: function () {
            return _index.objectExpression;
          },
        });
        Object.defineProperty(exports, "ObjectMethod", {
          enumerable: true,
          get: function () {
            return _index.objectMethod;
          },
        });
        Object.defineProperty(exports, "ObjectProperty", {
          enumerable: true,
          get: function () {
            return _index.objectProperty;
          },
        });
        Object.defineProperty(exports, "RestElement", {
          enumerable: true,
          get: function () {
            return _index.restElement;
          },
        });
        Object.defineProperty(exports, "ReturnStatement", {
          enumerable: true,
          get: function () {
            return _index.returnStatement;
          },
        });
        Object.defineProperty(exports, "SequenceExpression", {
          enumerable: true,
          get: function () {
            return _index.sequenceExpression;
          },
        });
        Object.defineProperty(exports, "ParenthesizedExpression", {
          enumerable: true,
          get: function () {
            return _index.parenthesizedExpression;
          },
        });
        Object.defineProperty(exports, "SwitchCase", {
          enumerable: true,
          get: function () {
            return _index.switchCase;
          },
        });
        Object.defineProperty(exports, "SwitchStatement", {
          enumerable: true,
          get: function () {
            return _index.switchStatement;
          },
        });
        Object.defineProperty(exports, "ThisExpression", {
          enumerable: true,
          get: function () {
            return _index.thisExpression;
          },
        });
        Object.defineProperty(exports, "ThrowStatement", {
          enumerable: true,
          get: function () {
            return _index.throwStatement;
          },
        });
        Object.defineProperty(exports, "TryStatement", {
          enumerable: true,
          get: function () {
            return _index.tryStatement;
          },
        });
        Object.defineProperty(exports, "UnaryExpression", {
          enumerable: true,
          get: function () {
            return _index.unaryExpression;
          },
        });
        Object.defineProperty(exports, "UpdateExpression", {
          enumerable: true,
          get: function () {
            return _index.updateExpression;
          },
        });
        Object.defineProperty(exports, "VariableDeclaration", {
          enumerable: true,
          get: function () {
            return _index.variableDeclaration;
          },
        });
        Object.defineProperty(exports, "VariableDeclarator", {
          enumerable: true,
          get: function () {
            return _index.variableDeclarator;
          },
        });
        Object.defineProperty(exports, "WhileStatement", {
          enumerable: true,
          get: function () {
            return _index.whileStatement;
          },
        });
        Object.defineProperty(exports, "WithStatement", {
          enumerable: true,
          get: function () {
            return _index.withStatement;
          },
        });
        Object.defineProperty(exports, "AssignmentPattern", {
          enumerable: true,
          get: function () {
            return _index.assignmentPattern;
          },
        });
        Object.defineProperty(exports, "ArrayPattern", {
          enumerable: true,
          get: function () {
            return _index.arrayPattern;
          },
        });
        Object.defineProperty(exports, "ArrowFunctionExpression", {
          enumerable: true,
          get: function () {
            return _index.arrowFunctionExpression;
          },
        });
        Object.defineProperty(exports, "ClassBody", {
          enumerable: true,
          get: function () {
            return _index.classBody;
          },
        });
        Object.defineProperty(exports, "ClassExpression", {
          enumerable: true,
          get: function () {
            return _index.classExpression;
          },
        });
        Object.defineProperty(exports, "ClassDeclaration", {
          enumerable: true,
          get: function () {
            return _index.classDeclaration;
          },
        });
        Object.defineProperty(exports, "ExportAllDeclaration", {
          enumerable: true,
          get: function () {
            return _index.exportAllDeclaration;
          },
        });
        Object.defineProperty(exports, "ExportDefaultDeclaration", {
          enumerable: true,
          get: function () {
            return _index.exportDefaultDeclaration;
          },
        });
        Object.defineProperty(exports, "ExportNamedDeclaration", {
          enumerable: true,
          get: function () {
            return _index.exportNamedDeclaration;
          },
        });
        Object.defineProperty(exports, "ExportSpecifier", {
          enumerable: true,
          get: function () {
            return _index.exportSpecifier;
          },
        });
        Object.defineProperty(exports, "ForOfStatement", {
          enumerable: true,
          get: function () {
            return _index.forOfStatement;
          },
        });
        Object.defineProperty(exports, "ImportDeclaration", {
          enumerable: true,
          get: function () {
            return _index.importDeclaration;
          },
        });
        Object.defineProperty(exports, "ImportDefaultSpecifier", {
          enumerable: true,
          get: function () {
            return _index.importDefaultSpecifier;
          },
        });
        Object.defineProperty(exports, "ImportNamespaceSpecifier", {
          enumerable: true,
          get: function () {
            return _index.importNamespaceSpecifier;
          },
        });
        Object.defineProperty(exports, "ImportSpecifier", {
          enumerable: true,
          get: function () {
            return _index.importSpecifier;
          },
        });
        Object.defineProperty(exports, "MetaProperty", {
          enumerable: true,
          get: function () {
            return _index.metaProperty;
          },
        });
        Object.defineProperty(exports, "ClassMethod", {
          enumerable: true,
          get: function () {
            return _index.classMethod;
          },
        });
        Object.defineProperty(exports, "ObjectPattern", {
          enumerable: true,
          get: function () {
            return _index.objectPattern;
          },
        });
        Object.defineProperty(exports, "SpreadElement", {
          enumerable: true,
          get: function () {
            return _index.spreadElement;
          },
        });
        Object.defineProperty(exports, "Super", {
          enumerable: true,
          get: function () {
            return _index.super;
          },
        });
        Object.defineProperty(exports, "TaggedTemplateExpression", {
          enumerable: true,
          get: function () {
            return _index.taggedTemplateExpression;
          },
        });
        Object.defineProperty(exports, "TemplateElement", {
          enumerable: true,
          get: function () {
            return _index.templateElement;
          },
        });
        Object.defineProperty(exports, "TemplateLiteral", {
          enumerable: true,
          get: function () {
            return _index.templateLiteral;
          },
        });
        Object.defineProperty(exports, "YieldExpression", {
          enumerable: true,
          get: function () {
            return _index.yieldExpression;
          },
        });
        Object.defineProperty(exports, "AwaitExpression", {
          enumerable: true,
          get: function () {
            return _index.awaitExpression;
          },
        });
        Object.defineProperty(exports, "Import", {
          enumerable: true,
          get: function () {
            return _index.import;
          },
        });
        Object.defineProperty(exports, "BigIntLiteral", {
          enumerable: true,
          get: function () {
            return _index.bigIntLiteral;
          },
        });
        Object.defineProperty(exports, "ExportNamespaceSpecifier", {
          enumerable: true,
          get: function () {
            return _index.exportNamespaceSpecifier;
          },
        });
        Object.defineProperty(exports, "OptionalMemberExpression", {
          enumerable: true,
          get: function () {
            return _index.optionalMemberExpression;
          },
        });
        Object.defineProperty(exports, "OptionalCallExpression", {
          enumerable: true,
          get: function () {
            return _index.optionalCallExpression;
          },
        });
        Object.defineProperty(exports, "ClassProperty", {
          enumerable: true,
          get: function () {
            return _index.classProperty;
          },
        });
        Object.defineProperty(exports, "ClassPrivateProperty", {
          enumerable: true,
          get: function () {
            return _index.classPrivateProperty;
          },
        });
        Object.defineProperty(exports, "ClassPrivateMethod", {
          enumerable: true,
          get: function () {
            return _index.classPrivateMethod;
          },
        });
        Object.defineProperty(exports, "PrivateName", {
          enumerable: true,
          get: function () {
            return _index.privateName;
          },
        });
        Object.defineProperty(exports, "AnyTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.anyTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "ArrayTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.arrayTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "BooleanTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.booleanTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.booleanLiteralTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.nullLiteralTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "ClassImplements", {
          enumerable: true,
          get: function () {
            return _index.classImplements;
          },
        });
        Object.defineProperty(exports, "DeclareClass", {
          enumerable: true,
          get: function () {
            return _index.declareClass;
          },
        });
        Object.defineProperty(exports, "DeclareFunction", {
          enumerable: true,
          get: function () {
            return _index.declareFunction;
          },
        });
        Object.defineProperty(exports, "DeclareInterface", {
          enumerable: true,
          get: function () {
            return _index.declareInterface;
          },
        });
        Object.defineProperty(exports, "DeclareModule", {
          enumerable: true,
          get: function () {
            return _index.declareModule;
          },
        });
        Object.defineProperty(exports, "DeclareModuleExports", {
          enumerable: true,
          get: function () {
            return _index.declareModuleExports;
          },
        });
        Object.defineProperty(exports, "DeclareTypeAlias", {
          enumerable: true,
          get: function () {
            return _index.declareTypeAlias;
          },
        });
        Object.defineProperty(exports, "DeclareOpaqueType", {
          enumerable: true,
          get: function () {
            return _index.declareOpaqueType;
          },
        });
        Object.defineProperty(exports, "DeclareVariable", {
          enumerable: true,
          get: function () {
            return _index.declareVariable;
          },
        });
        Object.defineProperty(exports, "DeclareExportDeclaration", {
          enumerable: true,
          get: function () {
            return _index.declareExportDeclaration;
          },
        });
        Object.defineProperty(exports, "DeclareExportAllDeclaration", {
          enumerable: true,
          get: function () {
            return _index.declareExportAllDeclaration;
          },
        });
        Object.defineProperty(exports, "DeclaredPredicate", {
          enumerable: true,
          get: function () {
            return _index.declaredPredicate;
          },
        });
        Object.defineProperty(exports, "ExistsTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.existsTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "FunctionTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.functionTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "FunctionTypeParam", {
          enumerable: true,
          get: function () {
            return _index.functionTypeParam;
          },
        });
        Object.defineProperty(exports, "GenericTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.genericTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "InferredPredicate", {
          enumerable: true,
          get: function () {
            return _index.inferredPredicate;
          },
        });
        Object.defineProperty(exports, "InterfaceExtends", {
          enumerable: true,
          get: function () {
            return _index.interfaceExtends;
          },
        });
        Object.defineProperty(exports, "InterfaceDeclaration", {
          enumerable: true,
          get: function () {
            return _index.interfaceDeclaration;
          },
        });
        Object.defineProperty(exports, "InterfaceTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.interfaceTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "IntersectionTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.intersectionTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "MixedTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.mixedTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "EmptyTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.emptyTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "NullableTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.nullableTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.numberLiteralTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "NumberTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.numberTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "ObjectTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.objectTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "ObjectTypeInternalSlot", {
          enumerable: true,
          get: function () {
            return _index.objectTypeInternalSlot;
          },
        });
        Object.defineProperty(exports, "ObjectTypeCallProperty", {
          enumerable: true,
          get: function () {
            return _index.objectTypeCallProperty;
          },
        });
        Object.defineProperty(exports, "ObjectTypeIndexer", {
          enumerable: true,
          get: function () {
            return _index.objectTypeIndexer;
          },
        });
        Object.defineProperty(exports, "ObjectTypeProperty", {
          enumerable: true,
          get: function () {
            return _index.objectTypeProperty;
          },
        });
        Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
          enumerable: true,
          get: function () {
            return _index.objectTypeSpreadProperty;
          },
        });
        Object.defineProperty(exports, "OpaqueType", {
          enumerable: true,
          get: function () {
            return _index.opaqueType;
          },
        });
        Object.defineProperty(exports, "QualifiedTypeIdentifier", {
          enumerable: true,
          get: function () {
            return _index.qualifiedTypeIdentifier;
          },
        });
        Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.stringLiteralTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "StringTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.stringTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "SymbolTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.symbolTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "ThisTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.thisTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "TupleTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.tupleTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "TypeofTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.typeofTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "TypeAlias", {
          enumerable: true,
          get: function () {
            return _index.typeAlias;
          },
        });
        Object.defineProperty(exports, "TypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.typeAnnotation;
          },
        });
        Object.defineProperty(exports, "TypeCastExpression", {
          enumerable: true,
          get: function () {
            return _index.typeCastExpression;
          },
        });
        Object.defineProperty(exports, "TypeParameter", {
          enumerable: true,
          get: function () {
            return _index.typeParameter;
          },
        });
        Object.defineProperty(exports, "TypeParameterDeclaration", {
          enumerable: true,
          get: function () {
            return _index.typeParameterDeclaration;
          },
        });
        Object.defineProperty(exports, "TypeParameterInstantiation", {
          enumerable: true,
          get: function () {
            return _index.typeParameterInstantiation;
          },
        });
        Object.defineProperty(exports, "UnionTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.unionTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "Variance", {
          enumerable: true,
          get: function () {
            return _index.variance;
          },
        });
        Object.defineProperty(exports, "VoidTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.voidTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "EnumDeclaration", {
          enumerable: true,
          get: function () {
            return _index.enumDeclaration;
          },
        });
        Object.defineProperty(exports, "EnumBooleanBody", {
          enumerable: true,
          get: function () {
            return _index.enumBooleanBody;
          },
        });
        Object.defineProperty(exports, "EnumNumberBody", {
          enumerable: true,
          get: function () {
            return _index.enumNumberBody;
          },
        });
        Object.defineProperty(exports, "EnumStringBody", {
          enumerable: true,
          get: function () {
            return _index.enumStringBody;
          },
        });
        Object.defineProperty(exports, "EnumSymbolBody", {
          enumerable: true,
          get: function () {
            return _index.enumSymbolBody;
          },
        });
        Object.defineProperty(exports, "EnumBooleanMember", {
          enumerable: true,
          get: function () {
            return _index.enumBooleanMember;
          },
        });
        Object.defineProperty(exports, "EnumNumberMember", {
          enumerable: true,
          get: function () {
            return _index.enumNumberMember;
          },
        });
        Object.defineProperty(exports, "EnumStringMember", {
          enumerable: true,
          get: function () {
            return _index.enumStringMember;
          },
        });
        Object.defineProperty(exports, "EnumDefaultedMember", {
          enumerable: true,
          get: function () {
            return _index.enumDefaultedMember;
          },
        });
        Object.defineProperty(exports, "IndexedAccessType", {
          enumerable: true,
          get: function () {
            return _index.indexedAccessType;
          },
        });
        Object.defineProperty(exports, "OptionalIndexedAccessType", {
          enumerable: true,
          get: function () {
            return _index.optionalIndexedAccessType;
          },
        });
        Object.defineProperty(exports, "JSXAttribute", {
          enumerable: true,
          get: function () {
            return _index.jsxAttribute;
          },
        });
        Object.defineProperty(exports, "JSXClosingElement", {
          enumerable: true,
          get: function () {
            return _index.jsxClosingElement;
          },
        });
        Object.defineProperty(exports, "JSXElement", {
          enumerable: true,
          get: function () {
            return _index.jsxElement;
          },
        });
        Object.defineProperty(exports, "JSXEmptyExpression", {
          enumerable: true,
          get: function () {
            return _index.jsxEmptyExpression;
          },
        });
        Object.defineProperty(exports, "JSXExpressionContainer", {
          enumerable: true,
          get: function () {
            return _index.jsxExpressionContainer;
          },
        });
        Object.defineProperty(exports, "JSXSpreadChild", {
          enumerable: true,
          get: function () {
            return _index.jsxSpreadChild;
          },
        });
        Object.defineProperty(exports, "JSXIdentifier", {
          enumerable: true,
          get: function () {
            return _index.jsxIdentifier;
          },
        });
        Object.defineProperty(exports, "JSXMemberExpression", {
          enumerable: true,
          get: function () {
            return _index.jsxMemberExpression;
          },
        });
        Object.defineProperty(exports, "JSXNamespacedName", {
          enumerable: true,
          get: function () {
            return _index.jsxNamespacedName;
          },
        });
        Object.defineProperty(exports, "JSXOpeningElement", {
          enumerable: true,
          get: function () {
            return _index.jsxOpeningElement;
          },
        });
        Object.defineProperty(exports, "JSXSpreadAttribute", {
          enumerable: true,
          get: function () {
            return _index.jsxSpreadAttribute;
          },
        });
        Object.defineProperty(exports, "JSXText", {
          enumerable: true,
          get: function () {
            return _index.jsxText;
          },
        });
        Object.defineProperty(exports, "JSXFragment", {
          enumerable: true,
          get: function () {
            return _index.jsxFragment;
          },
        });
        Object.defineProperty(exports, "JSXOpeningFragment", {
          enumerable: true,
          get: function () {
            return _index.jsxOpeningFragment;
          },
        });
        Object.defineProperty(exports, "JSXClosingFragment", {
          enumerable: true,
          get: function () {
            return _index.jsxClosingFragment;
          },
        });
        Object.defineProperty(exports, "Noop", {
          enumerable: true,
          get: function () {
            return _index.noop;
          },
        });
        Object.defineProperty(exports, "Placeholder", {
          enumerable: true,
          get: function () {
            return _index.placeholder;
          },
        });
        Object.defineProperty(exports, "V8IntrinsicIdentifier", {
          enumerable: true,
          get: function () {
            return _index.v8IntrinsicIdentifier;
          },
        });
        Object.defineProperty(exports, "ArgumentPlaceholder", {
          enumerable: true,
          get: function () {
            return _index.argumentPlaceholder;
          },
        });
        Object.defineProperty(exports, "BindExpression", {
          enumerable: true,
          get: function () {
            return _index.bindExpression;
          },
        });
        Object.defineProperty(exports, "ImportAttribute", {
          enumerable: true,
          get: function () {
            return _index.importAttribute;
          },
        });
        Object.defineProperty(exports, "Decorator", {
          enumerable: true,
          get: function () {
            return _index.decorator;
          },
        });
        Object.defineProperty(exports, "DoExpression", {
          enumerable: true,
          get: function () {
            return _index.doExpression;
          },
        });
        Object.defineProperty(exports, "ExportDefaultSpecifier", {
          enumerable: true,
          get: function () {
            return _index.exportDefaultSpecifier;
          },
        });
        Object.defineProperty(exports, "RecordExpression", {
          enumerable: true,
          get: function () {
            return _index.recordExpression;
          },
        });
        Object.defineProperty(exports, "TupleExpression", {
          enumerable: true,
          get: function () {
            return _index.tupleExpression;
          },
        });
        Object.defineProperty(exports, "DecimalLiteral", {
          enumerable: true,
          get: function () {
            return _index.decimalLiteral;
          },
        });
        Object.defineProperty(exports, "StaticBlock", {
          enumerable: true,
          get: function () {
            return _index.staticBlock;
          },
        });
        Object.defineProperty(exports, "ModuleExpression", {
          enumerable: true,
          get: function () {
            return _index.moduleExpression;
          },
        });
        Object.defineProperty(exports, "TopicReference", {
          enumerable: true,
          get: function () {
            return _index.topicReference;
          },
        });
        Object.defineProperty(exports, "PipelineTopicExpression", {
          enumerable: true,
          get: function () {
            return _index.pipelineTopicExpression;
          },
        });
        Object.defineProperty(exports, "PipelineBareFunction", {
          enumerable: true,
          get: function () {
            return _index.pipelineBareFunction;
          },
        });
        Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
          enumerable: true,
          get: function () {
            return _index.pipelinePrimaryTopicReference;
          },
        });
        Object.defineProperty(exports, "TSParameterProperty", {
          enumerable: true,
          get: function () {
            return _index.tsParameterProperty;
          },
        });
        Object.defineProperty(exports, "TSDeclareFunction", {
          enumerable: true,
          get: function () {
            return _index.tsDeclareFunction;
          },
        });
        Object.defineProperty(exports, "TSDeclareMethod", {
          enumerable: true,
          get: function () {
            return _index.tsDeclareMethod;
          },
        });
        Object.defineProperty(exports, "TSQualifiedName", {
          enumerable: true,
          get: function () {
            return _index.tsQualifiedName;
          },
        });
        Object.defineProperty(exports, "TSCallSignatureDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsCallSignatureDeclaration;
          },
        });
        Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsConstructSignatureDeclaration;
          },
        });
        Object.defineProperty(exports, "TSPropertySignature", {
          enumerable: true,
          get: function () {
            return _index.tsPropertySignature;
          },
        });
        Object.defineProperty(exports, "TSMethodSignature", {
          enumerable: true,
          get: function () {
            return _index.tsMethodSignature;
          },
        });
        Object.defineProperty(exports, "TSIndexSignature", {
          enumerable: true,
          get: function () {
            return _index.tsIndexSignature;
          },
        });
        Object.defineProperty(exports, "TSAnyKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsAnyKeyword;
          },
        });
        Object.defineProperty(exports, "TSBooleanKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsBooleanKeyword;
          },
        });
        Object.defineProperty(exports, "TSBigIntKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsBigIntKeyword;
          },
        });
        Object.defineProperty(exports, "TSIntrinsicKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsIntrinsicKeyword;
          },
        });
        Object.defineProperty(exports, "TSNeverKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsNeverKeyword;
          },
        });
        Object.defineProperty(exports, "TSNullKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsNullKeyword;
          },
        });
        Object.defineProperty(exports, "TSNumberKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsNumberKeyword;
          },
        });
        Object.defineProperty(exports, "TSObjectKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsObjectKeyword;
          },
        });
        Object.defineProperty(exports, "TSStringKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsStringKeyword;
          },
        });
        Object.defineProperty(exports, "TSSymbolKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsSymbolKeyword;
          },
        });
        Object.defineProperty(exports, "TSUndefinedKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsUndefinedKeyword;
          },
        });
        Object.defineProperty(exports, "TSUnknownKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsUnknownKeyword;
          },
        });
        Object.defineProperty(exports, "TSVoidKeyword", {
          enumerable: true,
          get: function () {
            return _index.tsVoidKeyword;
          },
        });
        Object.defineProperty(exports, "TSThisType", {
          enumerable: true,
          get: function () {
            return _index.tsThisType;
          },
        });
        Object.defineProperty(exports, "TSFunctionType", {
          enumerable: true,
          get: function () {
            return _index.tsFunctionType;
          },
        });
        Object.defineProperty(exports, "TSConstructorType", {
          enumerable: true,
          get: function () {
            return _index.tsConstructorType;
          },
        });
        Object.defineProperty(exports, "TSTypeReference", {
          enumerable: true,
          get: function () {
            return _index.tsTypeReference;
          },
        });
        Object.defineProperty(exports, "TSTypePredicate", {
          enumerable: true,
          get: function () {
            return _index.tsTypePredicate;
          },
        });
        Object.defineProperty(exports, "TSTypeQuery", {
          enumerable: true,
          get: function () {
            return _index.tsTypeQuery;
          },
        });
        Object.defineProperty(exports, "TSTypeLiteral", {
          enumerable: true,
          get: function () {
            return _index.tsTypeLiteral;
          },
        });
        Object.defineProperty(exports, "TSArrayType", {
          enumerable: true,
          get: function () {
            return _index.tsArrayType;
          },
        });
        Object.defineProperty(exports, "TSTupleType", {
          enumerable: true,
          get: function () {
            return _index.tsTupleType;
          },
        });
        Object.defineProperty(exports, "TSOptionalType", {
          enumerable: true,
          get: function () {
            return _index.tsOptionalType;
          },
        });
        Object.defineProperty(exports, "TSRestType", {
          enumerable: true,
          get: function () {
            return _index.tsRestType;
          },
        });
        Object.defineProperty(exports, "TSNamedTupleMember", {
          enumerable: true,
          get: function () {
            return _index.tsNamedTupleMember;
          },
        });
        Object.defineProperty(exports, "TSUnionType", {
          enumerable: true,
          get: function () {
            return _index.tsUnionType;
          },
        });
        Object.defineProperty(exports, "TSIntersectionType", {
          enumerable: true,
          get: function () {
            return _index.tsIntersectionType;
          },
        });
        Object.defineProperty(exports, "TSConditionalType", {
          enumerable: true,
          get: function () {
            return _index.tsConditionalType;
          },
        });
        Object.defineProperty(exports, "TSInferType", {
          enumerable: true,
          get: function () {
            return _index.tsInferType;
          },
        });
        Object.defineProperty(exports, "TSParenthesizedType", {
          enumerable: true,
          get: function () {
            return _index.tsParenthesizedType;
          },
        });
        Object.defineProperty(exports, "TSTypeOperator", {
          enumerable: true,
          get: function () {
            return _index.tsTypeOperator;
          },
        });
        Object.defineProperty(exports, "TSIndexedAccessType", {
          enumerable: true,
          get: function () {
            return _index.tsIndexedAccessType;
          },
        });
        Object.defineProperty(exports, "TSMappedType", {
          enumerable: true,
          get: function () {
            return _index.tsMappedType;
          },
        });
        Object.defineProperty(exports, "TSLiteralType", {
          enumerable: true,
          get: function () {
            return _index.tsLiteralType;
          },
        });
        Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
          enumerable: true,
          get: function () {
            return _index.tsExpressionWithTypeArguments;
          },
        });
        Object.defineProperty(exports, "TSInterfaceDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsInterfaceDeclaration;
          },
        });
        Object.defineProperty(exports, "TSInterfaceBody", {
          enumerable: true,
          get: function () {
            return _index.tsInterfaceBody;
          },
        });
        Object.defineProperty(exports, "TSTypeAliasDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsTypeAliasDeclaration;
          },
        });
        Object.defineProperty(exports, "TSAsExpression", {
          enumerable: true,
          get: function () {
            return _index.tsAsExpression;
          },
        });
        Object.defineProperty(exports, "TSTypeAssertion", {
          enumerable: true,
          get: function () {
            return _index.tsTypeAssertion;
          },
        });
        Object.defineProperty(exports, "TSEnumDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsEnumDeclaration;
          },
        });
        Object.defineProperty(exports, "TSEnumMember", {
          enumerable: true,
          get: function () {
            return _index.tsEnumMember;
          },
        });
        Object.defineProperty(exports, "TSModuleDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsModuleDeclaration;
          },
        });
        Object.defineProperty(exports, "TSModuleBlock", {
          enumerable: true,
          get: function () {
            return _index.tsModuleBlock;
          },
        });
        Object.defineProperty(exports, "TSImportType", {
          enumerable: true,
          get: function () {
            return _index.tsImportType;
          },
        });
        Object.defineProperty(exports, "TSImportEqualsDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsImportEqualsDeclaration;
          },
        });
        Object.defineProperty(exports, "TSExternalModuleReference", {
          enumerable: true,
          get: function () {
            return _index.tsExternalModuleReference;
          },
        });
        Object.defineProperty(exports, "TSNonNullExpression", {
          enumerable: true,
          get: function () {
            return _index.tsNonNullExpression;
          },
        });
        Object.defineProperty(exports, "TSExportAssignment", {
          enumerable: true,
          get: function () {
            return _index.tsExportAssignment;
          },
        });
        Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsNamespaceExportDeclaration;
          },
        });
        Object.defineProperty(exports, "TSTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _index.tsTypeAnnotation;
          },
        });
        Object.defineProperty(exports, "TSTypeParameterInstantiation", {
          enumerable: true,
          get: function () {
            return _index.tsTypeParameterInstantiation;
          },
        });
        Object.defineProperty(exports, "TSTypeParameterDeclaration", {
          enumerable: true,
          get: function () {
            return _index.tsTypeParameterDeclaration;
          },
        });
        Object.defineProperty(exports, "TSTypeParameter", {
          enumerable: true,
          get: function () {
            return _index.tsTypeParameter;
          },
        });
        Object.defineProperty(exports, "NumberLiteral", {
          enumerable: true,
          get: function () {
            return _index.numberLiteral;
          },
        });
        Object.defineProperty(exports, "RegexLiteral", {
          enumerable: true,
          get: function () {
            return _index.regexLiteral;
          },
        });
        Object.defineProperty(exports, "RestProperty", {
          enumerable: true,
          get: function () {
            return _index.restProperty;
          },
        });
        Object.defineProperty(exports, "SpreadProperty", {
          enumerable: true,
          get: function () {
            return _index.spreadProperty;
          },
        });

        var _index = require("./index");
      },
      { "./index": 130 },
    ],
    132: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = buildChildren;

        var _generated = require("../../validators/generated");

        var _cleanJSXElementLiteralChild = require("../../utils/react/cleanJSXElementLiteralChild");

        function buildChildren(node) {
          const elements = [];

          for (let i = 0; i < node.children.length; i++) {
            let child = node.children[i];

            if ((0, _generated.isJSXText)(child)) {
              (0, _cleanJSXElementLiteralChild.default)(child, elements);
              continue;
            }

            if ((0, _generated.isJSXExpressionContainer)(child))
              child = child.expression;
            if ((0, _generated.isJSXEmptyExpression)(child)) continue;
            elements.push(child);
          }

          return elements;
        }
      },
      {
        "../../utils/react/cleanJSXElementLiteralChild": 181,
        "../../validators/generated": 184,
      },
    ],
    133: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = createTSUnionType;

        var _generated = require("../generated");

        var _removeTypeDuplicates = require("../../modifications/typescript/removeTypeDuplicates");

        function createTSUnionType(typeAnnotations) {
          const types = typeAnnotations.map((type) => type.typeAnnotation);
          const flattened = (0, _removeTypeDuplicates.default)(types);

          if (flattened.length === 1) {
            return flattened[0];
          } else {
            return (0, _generated.tsUnionType)(flattened);
          }
        }
      },
      {
        "../../modifications/typescript/removeTypeDuplicates": 175,
        "../generated": 130,
      },
    ],
    134: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = clone;

        var _cloneNode = require("./cloneNode");

        function clone(node) {
          return (0, _cloneNode.default)(node, false);
        }
      },
      { "./cloneNode": 137 },
    ],
    135: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = cloneDeep;

        var _cloneNode = require("./cloneNode");

        function cloneDeep(node) {
          return (0, _cloneNode.default)(node);
        }
      },
      { "./cloneNode": 137 },
    ],
    136: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = cloneDeepWithoutLoc;

        var _cloneNode = require("./cloneNode");

        function cloneDeepWithoutLoc(node) {
          return (0, _cloneNode.default)(node, true, true);
        }
      },
      { "./cloneNode": 137 },
    ],
    137: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = cloneNode;

        var _definitions = require("../definitions");

        var _generated = require("../validators/generated");

        const has = Function.call.bind(Object.prototype.hasOwnProperty);

        function cloneIfNode(obj, deep, withoutLoc) {
          if (obj && typeof obj.type === "string") {
            return cloneNode(obj, deep, withoutLoc);
          }

          return obj;
        }

        function cloneIfNodeOrArray(obj, deep, withoutLoc) {
          if (Array.isArray(obj)) {
            return obj.map((node) => cloneIfNode(node, deep, withoutLoc));
          }

          return cloneIfNode(obj, deep, withoutLoc);
        }

        function cloneNode(node, deep = true, withoutLoc = false) {
          if (!node) return node;
          const { type } = node;
          const newNode = {
            type: node.type,
          };

          if ((0, _generated.isIdentifier)(node)) {
            newNode.name = node.name;

            if (has(node, "optional") && typeof node.optional === "boolean") {
              newNode.optional = node.optional;
            }

            if (has(node, "typeAnnotation")) {
              newNode.typeAnnotation = deep
                ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc)
                : node.typeAnnotation;
            }
          } else if (!has(_definitions.NODE_FIELDS, type)) {
            throw new Error(`Unknown node type: "${type}"`);
          } else {
            for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {
              if (has(node, field)) {
                if (deep) {
                  newNode[field] =
                    (0, _generated.isFile)(node) && field === "comments"
                      ? maybeCloneComments(node.comments, deep, withoutLoc)
                      : cloneIfNodeOrArray(node[field], true, withoutLoc);
                } else {
                  newNode[field] = node[field];
                }
              }
            }
          }

          if (has(node, "loc")) {
            if (withoutLoc) {
              newNode.loc = null;
            } else {
              newNode.loc = node.loc;
            }
          }

          if (has(node, "leadingComments")) {
            newNode.leadingComments = maybeCloneComments(
              node.leadingComments,
              deep,
              withoutLoc
            );
          }

          if (has(node, "innerComments")) {
            newNode.innerComments = maybeCloneComments(
              node.innerComments,
              deep,
              withoutLoc
            );
          }

          if (has(node, "trailingComments")) {
            newNode.trailingComments = maybeCloneComments(
              node.trailingComments,
              deep,
              withoutLoc
            );
          }

          if (has(node, "extra")) {
            newNode.extra = Object.assign({}, node.extra);
          }

          return newNode;
        }

        function maybeCloneComments(comments, deep, withoutLoc) {
          if (!comments || !deep) {
            return comments;
          }

          return comments.map(({ type, value, loc }) => {
            if (withoutLoc) {
              return {
                type,
                value,
                loc: null,
              };
            }

            return {
              type,
              value,
              loc,
            };
          });
        }
      },
      { "../definitions": 162, "../validators/generated": 184 },
    ],
    138: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = cloneWithoutLoc;

        var _cloneNode = require("./cloneNode");

        function cloneWithoutLoc(node) {
          return (0, _cloneNode.default)(node, false, true);
        }
      },
      { "./cloneNode": 137 },
    ],
    139: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = addComment;

        var _addComments = require("./addComments");

        function addComment(node, type, content, line) {
          return (0, _addComments.default)(node, type, [
            {
              type: line ? "CommentLine" : "CommentBlock",
              value: content,
            },
          ]);
        }
      },
      { "./addComments": 140 },
    ],
    140: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = addComments;

        function addComments(node, type, comments) {
          if (!comments || !node) return node;
          const key = `${type}Comments`;

          if (node[key]) {
            if (type === "leading") {
              node[key] = comments.concat(node[key]);
            } else {
              node[key] = node[key].concat(comments);
            }
          } else {
            node[key] = comments;
          }

          return node;
        }
      },
      {},
    ],
    141: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inheritInnerComments;

        var _inherit = require("../utils/inherit");

        function inheritInnerComments(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        }
      },
      { "../utils/inherit": 180 },
    ],
    142: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inheritLeadingComments;

        var _inherit = require("../utils/inherit");

        function inheritLeadingComments(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        }
      },
      { "../utils/inherit": 180 },
    ],
    143: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inheritTrailingComments;

        var _inherit = require("../utils/inherit");

        function inheritTrailingComments(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        }
      },
      { "../utils/inherit": 180 },
    ],
    144: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inheritsComments;

        var _inheritTrailingComments = require("./inheritTrailingComments");

        var _inheritLeadingComments = require("./inheritLeadingComments");

        var _inheritInnerComments = require("./inheritInnerComments");

        function inheritsComments(child, parent) {
          (0, _inheritTrailingComments.default)(child, parent);
          (0, _inheritLeadingComments.default)(child, parent);
          (0, _inheritInnerComments.default)(child, parent);
          return child;
        }
      },
      {
        "./inheritInnerComments": 141,
        "./inheritLeadingComments": 142,
        "./inheritTrailingComments": 143,
      },
    ],
    145: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = removeComments;

        var _constants = require("../constants");

        function removeComments(node) {
          _constants.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          });

          return node;
        }
      },
      { "../constants": 147 },
    ],
    146: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.TSBASETYPE_TYPES =
          exports.TSTYPE_TYPES =
          exports.TSTYPEELEMENT_TYPES =
          exports.JSX_TYPES =
          exports.ENUMMEMBER_TYPES =
          exports.ENUMBODY_TYPES =
          exports.FLOWPREDICATE_TYPES =
          exports.FLOWDECLARATION_TYPES =
          exports.FLOWBASEANNOTATION_TYPES =
          exports.FLOWTYPE_TYPES =
          exports.FLOW_TYPES =
          exports.PRIVATE_TYPES =
          exports.MODULESPECIFIER_TYPES =
          exports.EXPORTDECLARATION_TYPES =
          exports.MODULEDECLARATION_TYPES =
          exports.CLASS_TYPES =
          exports.PATTERN_TYPES =
          exports.UNARYLIKE_TYPES =
          exports.PROPERTY_TYPES =
          exports.OBJECTMEMBER_TYPES =
          exports.METHOD_TYPES =
          exports.USERWHITESPACABLE_TYPES =
          exports.IMMUTABLE_TYPES =
          exports.LITERAL_TYPES =
          exports.TSENTITYNAME_TYPES =
          exports.LVAL_TYPES =
          exports.PATTERNLIKE_TYPES =
          exports.DECLARATION_TYPES =
          exports.PUREISH_TYPES =
          exports.FUNCTIONPARENT_TYPES =
          exports.FUNCTION_TYPES =
          exports.FORXSTATEMENT_TYPES =
          exports.FOR_TYPES =
          exports.EXPRESSIONWRAPPER_TYPES =
          exports.WHILE_TYPES =
          exports.LOOP_TYPES =
          exports.CONDITIONAL_TYPES =
          exports.COMPLETIONSTATEMENT_TYPES =
          exports.TERMINATORLESS_TYPES =
          exports.STATEMENT_TYPES =
          exports.BLOCK_TYPES =
          exports.BLOCKPARENT_TYPES =
          exports.SCOPABLE_TYPES =
          exports.BINARY_TYPES =
          exports.EXPRESSION_TYPES =
            void 0;

        var _definitions = require("../../definitions");

        const EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Expression"];
        exports.EXPRESSION_TYPES = EXPRESSION_TYPES;
        const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Binary"];
        exports.BINARY_TYPES = BINARY_TYPES;
        const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Scopable"];
        exports.SCOPABLE_TYPES = SCOPABLE_TYPES;
        const BLOCKPARENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["BlockParent"];
        exports.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
        const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Block"];
        exports.BLOCK_TYPES = BLOCK_TYPES;
        const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Statement"];
        exports.STATEMENT_TYPES = STATEMENT_TYPES;
        const TERMINATORLESS_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["Terminatorless"];
        exports.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
        const COMPLETIONSTATEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["CompletionStatement"];
        exports.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
        const CONDITIONAL_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["Conditional"];
        exports.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
        const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Loop"];
        exports.LOOP_TYPES = LOOP_TYPES;
        const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["While"];
        exports.WHILE_TYPES = WHILE_TYPES;
        const EXPRESSIONWRAPPER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
        exports.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
        const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS["For"];
        exports.FOR_TYPES = FOR_TYPES;
        const FORXSTATEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ForXStatement"];
        exports.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
        const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Function"];
        exports.FUNCTION_TYPES = FUNCTION_TYPES;
        const FUNCTIONPARENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FunctionParent"];
        exports.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
        const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pureish"];
        exports.PUREISH_TYPES = PUREISH_TYPES;
        const DECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["Declaration"];
        exports.DECLARATION_TYPES = DECLARATION_TYPES;
        const PATTERNLIKE_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["PatternLike"];
        exports.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
        const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["LVal"];
        exports.LVAL_TYPES = LVAL_TYPES;
        const TSENTITYNAME_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["TSEntityName"];
        exports.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
        const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Literal"];
        exports.LITERAL_TYPES = LITERAL_TYPES;
        const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Immutable"];
        exports.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
        const USERWHITESPACABLE_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
        exports.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
        const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Method"];
        exports.METHOD_TYPES = METHOD_TYPES;
        const OBJECTMEMBER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ObjectMember"];
        exports.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
        const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Property"];
        exports.PROPERTY_TYPES = PROPERTY_TYPES;
        const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UnaryLike"];
        exports.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
        const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pattern"];
        exports.PATTERN_TYPES = PATTERN_TYPES;
        const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Class"];
        exports.CLASS_TYPES = CLASS_TYPES;
        const MODULEDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
        exports.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
        const EXPORTDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
        exports.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
        const MODULESPECIFIER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
        exports.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
        const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Private"];
        exports.PRIVATE_TYPES = PRIVATE_TYPES;
        const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Flow"];
        exports.FLOW_TYPES = FLOW_TYPES;
        const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowType"];
        exports.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
        const FLOWBASEANNOTATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
        exports.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
        const FLOWDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
        exports.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
        const FLOWPREDICATE_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowPredicate"];
        exports.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
        const ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumBody"];
        exports.ENUMBODY_TYPES = ENUMBODY_TYPES;
        const ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumMember"];
        exports.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
        const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS["JSX"];
        exports.JSX_TYPES = JSX_TYPES;
        const TSTYPEELEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["TSTypeElement"];
        exports.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
        const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSType"];
        exports.TSTYPE_TYPES = TSTYPE_TYPES;
        const TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSBaseType"];
        exports.TSBASETYPE_TYPES = TSBASETYPE_TYPES;
      },
      { "../../definitions": 162 },
    ],
    147: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.NOT_LOCAL_BINDING =
          exports.BLOCK_SCOPED_SYMBOL =
          exports.INHERIT_KEYS =
          exports.UNARY_OPERATORS =
          exports.STRING_UNARY_OPERATORS =
          exports.NUMBER_UNARY_OPERATORS =
          exports.BOOLEAN_UNARY_OPERATORS =
          exports.ASSIGNMENT_OPERATORS =
          exports.BINARY_OPERATORS =
          exports.NUMBER_BINARY_OPERATORS =
          exports.BOOLEAN_BINARY_OPERATORS =
          exports.COMPARISON_BINARY_OPERATORS =
          exports.EQUALITY_BINARY_OPERATORS =
          exports.BOOLEAN_NUMBER_BINARY_OPERATORS =
          exports.UPDATE_OPERATORS =
          exports.LOGICAL_OPERATORS =
          exports.COMMENT_KEYS =
          exports.FOR_INIT_KEYS =
          exports.FLATTENABLE_KEYS =
          exports.STATEMENT_OR_BLOCK_KEYS =
            void 0;
        const STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
        exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
        const FLATTENABLE_KEYS = ["body", "expressions"];
        exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
        const FOR_INIT_KEYS = ["left", "init"];
        exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
        const COMMENT_KEYS = [
          "leadingComments",
          "trailingComments",
          "innerComments",
        ];
        exports.COMMENT_KEYS = COMMENT_KEYS;
        const LOGICAL_OPERATORS = ["||", "&&", "??"];
        exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
        const UPDATE_OPERATORS = ["++", "--"];
        exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
        const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
        exports.BOOLEAN_NUMBER_BINARY_OPERATORS =
          BOOLEAN_NUMBER_BINARY_OPERATORS;
        const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
        exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
        const COMPARISON_BINARY_OPERATORS = [
          ...EQUALITY_BINARY_OPERATORS,
          "in",
          "instanceof",
        ];
        exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
        const BOOLEAN_BINARY_OPERATORS = [
          ...COMPARISON_BINARY_OPERATORS,
          ...BOOLEAN_NUMBER_BINARY_OPERATORS,
        ];
        exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
        const NUMBER_BINARY_OPERATORS = [
          "-",
          "/",
          "%",
          "*",
          "**",
          "&",
          "|",
          ">>",
          ">>>",
          "<<",
          "^",
        ];
        exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
        const BINARY_OPERATORS = [
          "+",
          ...NUMBER_BINARY_OPERATORS,
          ...BOOLEAN_BINARY_OPERATORS,
        ];
        exports.BINARY_OPERATORS = BINARY_OPERATORS;
        const ASSIGNMENT_OPERATORS = [
          "=",
          "+=",
          ...NUMBER_BINARY_OPERATORS.map((op) => op + "="),
          ...LOGICAL_OPERATORS.map((op) => op + "="),
        ];
        exports.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
        const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
        exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
        const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
        exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
        const STRING_UNARY_OPERATORS = ["typeof"];
        exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
        const UNARY_OPERATORS = [
          "void",
          "throw",
          ...BOOLEAN_UNARY_OPERATORS,
          ...NUMBER_UNARY_OPERATORS,
          ...STRING_UNARY_OPERATORS,
        ];
        exports.UNARY_OPERATORS = UNARY_OPERATORS;
        const INHERIT_KEYS = {
          optional: ["typeAnnotation", "typeParameters", "returnType"],
          force: ["start", "loc", "end"],
        };
        exports.INHERIT_KEYS = INHERIT_KEYS;
        const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
        exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
        const NOT_LOCAL_BINDING = Symbol.for(
          "should not be considered a local binding"
        );
        exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
      },
      {},
    ],
    148: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = ensureBlock;

        var _toBlock = require("./toBlock");

        function ensureBlock(node, key = "body") {
          return (node[key] = (0, _toBlock.default)(node[key], node));
        }
      },
      { "./toBlock": 151 },
    ],
    149: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = gatherSequenceExpressions;

        var _getBindingIdentifiers = require("../retrievers/getBindingIdentifiers");

        var _generated = require("../validators/generated");

        var _generated2 = require("../builders/generated");

        var _cloneNode = require("../clone/cloneNode");

        function gatherSequenceExpressions(nodes, scope, declars) {
          const exprs = [];
          let ensureLastUndefined = true;

          for (const node of nodes) {
            if (!(0, _generated.isEmptyStatement)(node)) {
              ensureLastUndefined = false;
            }

            if ((0, _generated.isExpression)(node)) {
              exprs.push(node);
            } else if ((0, _generated.isExpressionStatement)(node)) {
              exprs.push(node.expression);
            } else if ((0, _generated.isVariableDeclaration)(node)) {
              if (node.kind !== "var") return;

              for (const declar of node.declarations) {
                const bindings = (0, _getBindingIdentifiers.default)(declar);

                for (const key of Object.keys(bindings)) {
                  declars.push({
                    kind: node.kind,
                    id: (0, _cloneNode.default)(bindings[key]),
                  });
                }

                if (declar.init) {
                  exprs.push(
                    (0, _generated2.assignmentExpression)(
                      "=",
                      declar.id,
                      declar.init
                    )
                  );
                }
              }

              ensureLastUndefined = true;
            } else if ((0, _generated.isIfStatement)(node)) {
              const consequent = node.consequent
                ? gatherSequenceExpressions([node.consequent], scope, declars)
                : scope.buildUndefinedNode();
              const alternate = node.alternate
                ? gatherSequenceExpressions([node.alternate], scope, declars)
                : scope.buildUndefinedNode();
              if (!consequent || !alternate) return;
              exprs.push(
                (0, _generated2.conditionalExpression)(
                  node.test,
                  consequent,
                  alternate
                )
              );
            } else if ((0, _generated.isBlockStatement)(node)) {
              const body = gatherSequenceExpressions(node.body, scope, declars);
              if (!body) return;
              exprs.push(body);
            } else if ((0, _generated.isEmptyStatement)(node)) {
              if (nodes.indexOf(node) === 0) {
                ensureLastUndefined = true;
              }
            } else {
              return;
            }
          }

          if (ensureLastUndefined) {
            exprs.push(scope.buildUndefinedNode());
          }

          if (exprs.length === 1) {
            return exprs[0];
          } else {
            return (0, _generated2.sequenceExpression)(exprs);
          }
        }
      },
      {
        "../builders/generated": 130,
        "../clone/cloneNode": 137,
        "../retrievers/getBindingIdentifiers": 176,
        "../validators/generated": 184,
      },
    ],
    150: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toBindingIdentifierName;

        var _toIdentifier = require("./toIdentifier");

        function toBindingIdentifierName(name) {
          name = (0, _toIdentifier.default)(name);
          if (name === "eval" || name === "arguments") name = "_" + name;
          return name;
        }
      },
      { "./toIdentifier": 154 },
    ],
    151: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toBlock;

        var _generated = require("../validators/generated");

        var _generated2 = require("../builders/generated");

        function toBlock(node, parent) {
          if ((0, _generated.isBlockStatement)(node)) {
            return node;
          }

          let blockNodes = [];

          if ((0, _generated.isEmptyStatement)(node)) {
            blockNodes = [];
          } else {
            if (!(0, _generated.isStatement)(node)) {
              if ((0, _generated.isFunction)(parent)) {
                node = (0, _generated2.returnStatement)(node);
              } else {
                node = (0, _generated2.expressionStatement)(node);
              }
            }

            blockNodes = [node];
          }

          return (0, _generated2.blockStatement)(blockNodes);
        }
      },
      { "../builders/generated": 130, "../validators/generated": 184 },
    ],
    152: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toComputedKey;

        var _generated = require("../validators/generated");

        var _generated2 = require("../builders/generated");

        function toComputedKey(node, key = node.key || node.property) {
          if (!node.computed && (0, _generated.isIdentifier)(key))
            key = (0, _generated2.stringLiteral)(key.name);
          return key;
        }
      },
      { "../builders/generated": 130, "../validators/generated": 184 },
    ],
    153: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _generated = require("../validators/generated");

        var _default = toExpression;
        exports.default = _default;

        function toExpression(node) {
          if ((0, _generated.isExpressionStatement)(node)) {
            node = node.expression;
          }

          if ((0, _generated.isExpression)(node)) {
            return node;
          }

          if ((0, _generated.isClass)(node)) {
            node.type = "ClassExpression";
          } else if ((0, _generated.isFunction)(node)) {
            node.type = "FunctionExpression";
          }

          if (!(0, _generated.isExpression)(node)) {
            throw new Error(`cannot turn ${node.type} to an expression`);
          }

          return node;
        }
      },
      { "../validators/generated": 184 },
    ],
    154: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toIdentifier;

        var _isValidIdentifier = require("../validators/isValidIdentifier");

        var _helperValidatorIdentifier = require("@babel/helper-validator-identifier");

        function toIdentifier(input) {
          input = input + "";
          let name = "";

          for (const c of input) {
            name += (0, _helperValidatorIdentifier.isIdentifierChar)(
              c.codePointAt(0)
            )
              ? c
              : "-";
          }

          name = name.replace(/^[-0-9]+/, "");
          name = name.replace(/[-\s]+(.)?/g, function (match, c) {
            return c ? c.toUpperCase() : "";
          });

          if (!(0, _isValidIdentifier.default)(name)) {
            name = `_${name}`;
          }

          return name || "_";
        }
      },
      {
        "../validators/isValidIdentifier": 198,
        "@babel/helper-validator-identifier": 79,
      },
    ],
    155: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toKeyAlias;

        var _generated = require("../validators/generated");

        var _cloneNode = require("../clone/cloneNode");

        var _removePropertiesDeep = require("../modifications/removePropertiesDeep");

        function toKeyAlias(node, key = node.key) {
          let alias;

          if (node.kind === "method") {
            return toKeyAlias.increment() + "";
          } else if ((0, _generated.isIdentifier)(key)) {
            alias = key.name;
          } else if ((0, _generated.isStringLiteral)(key)) {
            alias = JSON.stringify(key.value);
          } else {
            alias = JSON.stringify(
              (0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))
            );
          }

          if (node.computed) {
            alias = `[${alias}]`;
          }

          if (node.static) {
            alias = `static:${alias}`;
          }

          return alias;
        }

        toKeyAlias.uid = 0;

        toKeyAlias.increment = function () {
          if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
            return (toKeyAlias.uid = 0);
          } else {
            return toKeyAlias.uid++;
          }
        };
      },
      {
        "../clone/cloneNode": 137,
        "../modifications/removePropertiesDeep": 174,
        "../validators/generated": 184,
      },
    ],
    156: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = toSequenceExpression;

        var _gatherSequenceExpressions = require("./gatherSequenceExpressions");

        function toSequenceExpression(nodes, scope) {
          if (!(nodes != null && nodes.length)) return;
          const declars = [];
          const result = (0, _gatherSequenceExpressions.default)(
            nodes,
            scope,
            declars
          );
          if (!result) return;

          for (const declar of declars) {
            scope.push(declar);
          }

          return result;
        }
      },
      { "./gatherSequenceExpressions": 149 },
    ],
    157: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _generated = require("../validators/generated");

        var _generated2 = require("../builders/generated");

        var _default = toStatement;
        exports.default = _default;

        function toStatement(node, ignore) {
          if ((0, _generated.isStatement)(node)) {
            return node;
          }

          let mustHaveId = false;
          let newType;

          if ((0, _generated.isClass)(node)) {
            mustHaveId = true;
            newType = "ClassDeclaration";
          } else if ((0, _generated.isFunction)(node)) {
            mustHaveId = true;
            newType = "FunctionDeclaration";
          } else if ((0, _generated.isAssignmentExpression)(node)) {
            return (0, _generated2.expressionStatement)(node);
          }

          if (mustHaveId && !node.id) {
            newType = false;
          }

          if (!newType) {
            if (ignore) {
              return false;
            } else {
              throw new Error(`cannot turn ${node.type} to a statement`);
            }
          }

          node.type = newType;
          return node;
        }
      },
      { "../builders/generated": 130, "../validators/generated": 184 },
    ],
    158: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _isValidIdentifier = require("../validators/isValidIdentifier");

        var _generated = require("../builders/generated");

        var _default = valueToNode;
        exports.default = _default;
        const objectToString = Function.call.bind(Object.prototype.toString);

        function isRegExp(value) {
          return objectToString(value) === "[object RegExp]";
        }

        function isPlainObject(value) {
          if (
            typeof value !== "object" ||
            value === null ||
            Object.prototype.toString.call(value) !== "[object Object]"
          ) {
            return false;
          }

          const proto = Object.getPrototypeOf(value);
          return proto === null || Object.getPrototypeOf(proto) === null;
        }

        function valueToNode(value) {
          if (value === undefined) {
            return (0, _generated.identifier)("undefined");
          }

          if (value === true || value === false) {
            return (0, _generated.booleanLiteral)(value);
          }

          if (value === null) {
            return (0, _generated.nullLiteral)();
          }

          if (typeof value === "string") {
            return (0, _generated.stringLiteral)(value);
          }

          if (typeof value === "number") {
            let result;

            if (Number.isFinite(value)) {
              result = (0, _generated.numericLiteral)(Math.abs(value));
            } else {
              let numerator;

              if (Number.isNaN(value)) {
                numerator = (0, _generated.numericLiteral)(0);
              } else {
                numerator = (0, _generated.numericLiteral)(1);
              }

              result = (0, _generated.binaryExpression)(
                "/",
                numerator,
                (0, _generated.numericLiteral)(0)
              );
            }

            if (value < 0 || Object.is(value, -0)) {
              result = (0, _generated.unaryExpression)("-", result);
            }

            return result;
          }

          if (isRegExp(value)) {
            const pattern = value.source;
            const flags = value.toString().match(/\/([a-z]+|)$/)[1];
            return (0, _generated.regExpLiteral)(pattern, flags);
          }

          if (Array.isArray(value)) {
            return (0, _generated.arrayExpression)(value.map(valueToNode));
          }

          if (isPlainObject(value)) {
            const props = [];

            for (const key of Object.keys(value)) {
              let nodeKey;

              if ((0, _isValidIdentifier.default)(key)) {
                nodeKey = (0, _generated.identifier)(key);
              } else {
                nodeKey = (0, _generated.stringLiteral)(key);
              }

              props.push(
                (0, _generated.objectProperty)(nodeKey, valueToNode(value[key]))
              );
            }

            return (0, _generated.objectExpression)(props);
          }

          throw new Error("don't know how to turn this value into a node");
        }
      },
      { "../builders/generated": 130, "../validators/isValidIdentifier": 198 },
    ],
    159: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.classMethodOrDeclareMethodCommon =
              exports.classMethodOrPropertyCommon =
              exports.patternLikeCommon =
              exports.functionDeclarationCommon =
              exports.functionTypeAnnotationCommon =
              exports.functionCommon =
                void 0;

            var _is = require("../validators/is");

            var _isValidIdentifier = require("../validators/isValidIdentifier");

            var _helperValidatorIdentifier = require("@babel/helper-validator-identifier");

            var _constants = require("../constants");

            var _utils = require("./utils");

            (0, _utils.default)("ArrayExpression", {
              fields: {
                elements: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeOrValueType)(
                        "null",
                        "Expression",
                        "SpreadElement"
                      )
                    )
                  ),
                  default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,
                },
              },
              visitor: ["elements"],
              aliases: ["Expression"],
            });
            (0, _utils.default)("AssignmentExpression", {
              fields: {
                operator: {
                  validate: (function () {
                    if (!process.env.BABEL_TYPES_8_BREAKING) {
                      return (0, _utils.assertValueType)("string");
                    }

                    const identifier = (0, _utils.assertOneOf)(
                      ..._constants.ASSIGNMENT_OPERATORS
                    );
                    const pattern = (0, _utils.assertOneOf)("=");
                    return function (node, key, val) {
                      const validator = (0, _is.default)("Pattern", node.left)
                        ? pattern
                        : identifier;
                      validator(node, key, val);
                    };
                  })(),
                },
                left: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertNodeType)("LVal")
                    : (0, _utils.assertNodeType)(
                        "Identifier",
                        "MemberExpression",
                        "ArrayPattern",
                        "ObjectPattern"
                      ),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              builder: ["operator", "left", "right"],
              visitor: ["left", "right"],
              aliases: ["Expression"],
            });
            (0, _utils.default)("BinaryExpression", {
              builder: ["operator", "left", "right"],
              fields: {
                operator: {
                  validate: (0, _utils.assertOneOf)(
                    ..._constants.BINARY_OPERATORS
                  ),
                },
                left: {
                  validate: (function () {
                    const expression = (0, _utils.assertNodeType)("Expression");
                    const inOp = (0, _utils.assertNodeType)(
                      "Expression",
                      "PrivateName"
                    );

                    const validator = function (node, key, val) {
                      const validator =
                        node.operator === "in" ? inOp : expression;
                      validator(node, key, val);
                    };

                    validator.oneOfNodeTypes = ["Expression", "PrivateName"];
                    return validator;
                  })(),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              visitor: ["left", "right"],
              aliases: ["Binary", "Expression"],
            });
            (0, _utils.default)("InterpreterDirective", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("string"),
                },
              },
            });
            (0, _utils.default)("Directive", {
              visitor: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertNodeType)("DirectiveLiteral"),
                },
              },
            });
            (0, _utils.default)("DirectiveLiteral", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("string"),
                },
              },
            });
            (0, _utils.default)("BlockStatement", {
              builder: ["body", "directives"],
              visitor: ["directives", "body"],
              fields: {
                directives: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Directive")
                    )
                  ),
                  default: [],
                },
                body: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Statement")
                    )
                  ),
                },
              },
              aliases: ["Scopable", "BlockParent", "Block", "Statement"],
            });
            (0, _utils.default)("BreakStatement", {
              visitor: ["label"],
              fields: {
                label: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                  optional: true,
                },
              },
              aliases: ["Statement", "Terminatorless", "CompletionStatement"],
            });
            (0, _utils.default)("CallExpression", {
              visitor: [
                "callee",
                "arguments",
                "typeParameters",
                "typeArguments",
              ],
              builder: ["callee", "arguments"],
              aliases: ["Expression"],
              fields: Object.assign(
                {
                  callee: {
                    validate: (0, _utils.assertNodeType)(
                      "Expression",
                      "V8IntrinsicIdentifier"
                    ),
                  },
                  arguments: {
                    validate: (0, _utils.chain)(
                      (0, _utils.assertValueType)("array"),
                      (0, _utils.assertEach)(
                        (0, _utils.assertNodeType)(
                          "Expression",
                          "SpreadElement",
                          "JSXNamespacedName",
                          "ArgumentPlaceholder"
                        )
                      )
                    ),
                  },
                },
                !process.env.BABEL_TYPES_8_BREAKING
                  ? {
                      optional: {
                        validate: (0, _utils.assertOneOf)(true, false),
                        optional: true,
                      },
                    }
                  : {},
                {
                  typeArguments: {
                    validate: (0, _utils.assertNodeType)(
                      "TypeParameterInstantiation"
                    ),
                    optional: true,
                  },
                  typeParameters: {
                    validate: (0, _utils.assertNodeType)(
                      "TSTypeParameterInstantiation"
                    ),
                    optional: true,
                  },
                }
              ),
            });
            (0, _utils.default)("CatchClause", {
              visitor: ["param", "body"],
              fields: {
                param: {
                  validate: (0, _utils.assertNodeType)(
                    "Identifier",
                    "ArrayPattern",
                    "ObjectPattern"
                  ),
                  optional: true,
                },
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              },
              aliases: ["Scopable", "BlockParent"],
            });
            (0, _utils.default)("ConditionalExpression", {
              visitor: ["test", "consequent", "alternate"],
              fields: {
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                consequent: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                alternate: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              aliases: ["Expression", "Conditional"],
            });
            (0, _utils.default)("ContinueStatement", {
              visitor: ["label"],
              fields: {
                label: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                  optional: true,
                },
              },
              aliases: ["Statement", "Terminatorless", "CompletionStatement"],
            });
            (0, _utils.default)("DebuggerStatement", {
              aliases: ["Statement"],
            });
            (0, _utils.default)("DoWhileStatement", {
              visitor: ["test", "body"],
              fields: {
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
              aliases: [
                "Statement",
                "BlockParent",
                "Loop",
                "While",
                "Scopable",
              ],
            });
            (0, _utils.default)("EmptyStatement", {
              aliases: ["Statement"],
            });
            (0, _utils.default)("ExpressionStatement", {
              visitor: ["expression"],
              fields: {
                expression: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              aliases: ["Statement", "ExpressionWrapper"],
            });
            (0, _utils.default)("File", {
              builder: ["program", "comments", "tokens"],
              visitor: ["program"],
              fields: {
                program: {
                  validate: (0, _utils.assertNodeType)("Program"),
                },
                comments: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? Object.assign(() => {}, {
                        each: {
                          oneOfNodeTypes: ["CommentBlock", "CommentLine"],
                        },
                      })
                    : (0, _utils.assertEach)(
                        (0, _utils.assertNodeType)(
                          "CommentBlock",
                          "CommentLine"
                        )
                      ),
                  optional: true,
                },
                tokens: {
                  validate: (0, _utils.assertEach)(
                    Object.assign(() => {}, {
                      type: "any",
                    })
                  ),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("ForInStatement", {
              visitor: ["left", "right", "body"],
              aliases: [
                "Scopable",
                "Statement",
                "For",
                "BlockParent",
                "Loop",
                "ForXStatement",
              ],
              fields: {
                left: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal")
                    : (0, _utils.assertNodeType)(
                        "VariableDeclaration",
                        "Identifier",
                        "MemberExpression",
                        "ArrayPattern",
                        "ObjectPattern"
                      ),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            (0, _utils.default)("ForStatement", {
              visitor: ["init", "test", "update", "body"],
              aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
              fields: {
                init: {
                  validate: (0, _utils.assertNodeType)(
                    "VariableDeclaration",
                    "Expression"
                  ),
                  optional: true,
                },
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
                update: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            const functionCommon = {
              params: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)(
                      "Identifier",
                      "Pattern",
                      "RestElement"
                    )
                  )
                ),
              },
              generator: {
                default: false,
              },
              async: {
                default: false,
              },
            };
            exports.functionCommon = functionCommon;
            const functionTypeAnnotationCommon = {
              returnType: {
                validate: (0, _utils.assertNodeType)(
                  "TypeAnnotation",
                  "TSTypeAnnotation",
                  "Noop"
                ),
                optional: true,
              },
              typeParameters: {
                validate: (0, _utils.assertNodeType)(
                  "TypeParameterDeclaration",
                  "TSTypeParameterDeclaration",
                  "Noop"
                ),
                optional: true,
              },
            };
            exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
            const functionDeclarationCommon = Object.assign(
              {},
              functionCommon,
              {
                declare: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                id: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                  optional: true,
                },
              }
            );
            exports.functionDeclarationCommon = functionDeclarationCommon;
            (0, _utils.default)("FunctionDeclaration", {
              builder: ["id", "params", "body", "generator", "async"],
              visitor: ["id", "params", "body", "returnType", "typeParameters"],
              fields: Object.assign(
                {},
                functionDeclarationCommon,
                functionTypeAnnotationCommon,
                {
                  body: {
                    validate: (0, _utils.assertNodeType)("BlockStatement"),
                  },
                }
              ),
              aliases: [
                "Scopable",
                "Function",
                "BlockParent",
                "FunctionParent",
                "Statement",
                "Pureish",
                "Declaration",
              ],
              validate: (function () {
                if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};
                const identifier = (0, _utils.assertNodeType)("Identifier");
                return function (parent, key, node) {
                  if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
                    identifier(node, "id", node.id);
                  }
                };
              })(),
            });
            (0, _utils.default)("FunctionExpression", {
              inherits: "FunctionDeclaration",
              aliases: [
                "Scopable",
                "Function",
                "BlockParent",
                "FunctionParent",
                "Expression",
                "Pureish",
              ],
              fields: Object.assign(
                {},
                functionCommon,
                functionTypeAnnotationCommon,
                {
                  id: {
                    validate: (0, _utils.assertNodeType)("Identifier"),
                    optional: true,
                  },
                  body: {
                    validate: (0, _utils.assertNodeType)("BlockStatement"),
                  },
                }
              ),
            });
            const patternLikeCommon = {
              typeAnnotation: {
                validate: (0, _utils.assertNodeType)(
                  "TypeAnnotation",
                  "TSTypeAnnotation",
                  "Noop"
                ),
                optional: true,
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                ),
              },
            };
            exports.patternLikeCommon = patternLikeCommon;
            (0, _utils.default)("Identifier", {
              builder: ["name"],
              visitor: ["typeAnnotation", "decorators"],
              aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
              fields: Object.assign({}, patternLikeCommon, {
                name: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("string"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;

                        if (!(0, _isValidIdentifier.default)(val, false)) {
                          throw new TypeError(
                            `"${val}" is not a valid identifier name`
                          );
                        }
                      },
                      {
                        type: "string",
                      }
                    )
                  ),
                },
                optional: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
              }),

              validate(parent, key, node) {
                if (!process.env.BABEL_TYPES_8_BREAKING) return;
                const match = /\.(\w+)$/.exec(key);
                if (!match) return;
                const [, parentKey] = match;
                const nonComp = {
                  computed: false,
                };

                if (parentKey === "property") {
                  if ((0, _is.default)("MemberExpression", parent, nonComp))
                    return;
                  if (
                    (0, _is.default)(
                      "OptionalMemberExpression",
                      parent,
                      nonComp
                    )
                  )
                    return;
                } else if (parentKey === "key") {
                  if ((0, _is.default)("Property", parent, nonComp)) return;
                  if ((0, _is.default)("Method", parent, nonComp)) return;
                } else if (parentKey === "exported") {
                  if ((0, _is.default)("ExportSpecifier", parent)) return;
                } else if (parentKey === "imported") {
                  if (
                    (0, _is.default)("ImportSpecifier", parent, {
                      imported: node,
                    })
                  )
                    return;
                } else if (parentKey === "meta") {
                  if (
                    (0, _is.default)("MetaProperty", parent, {
                      meta: node,
                    })
                  )
                    return;
                }

                if (
                  ((0, _helperValidatorIdentifier.isKeyword)(node.name) ||
                    (0, _helperValidatorIdentifier.isReservedWord)(
                      node.name,
                      false
                    )) &&
                  node.name !== "this"
                ) {
                  throw new TypeError(
                    `"${node.name}" is not a valid identifier`
                  );
                }
              },
            });
            (0, _utils.default)("IfStatement", {
              visitor: ["test", "consequent", "alternate"],
              aliases: ["Statement", "Conditional"],
              fields: {
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                consequent: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
                alternate: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            (0, _utils.default)("LabeledStatement", {
              visitor: ["label", "body"],
              aliases: ["Statement"],
              fields: {
                label: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            (0, _utils.default)("StringLiteral", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("string"),
                },
              },
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("NumericLiteral", {
              builder: ["value"],
              deprecatedAlias: "NumberLiteral",
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("number"),
                },
              },
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("NullLiteral", {
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("BooleanLiteral", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("boolean"),
                },
              },
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("RegExpLiteral", {
              builder: ["pattern", "flags"],
              deprecatedAlias: "RegexLiteral",
              aliases: ["Expression", "Pureish", "Literal"],
              fields: {
                pattern: {
                  validate: (0, _utils.assertValueType)("string"),
                },
                flags: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("string"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;
                        const invalid = /[^gimsuy]/.exec(val);

                        if (invalid) {
                          throw new TypeError(
                            `"${invalid[0]}" is not a valid RegExp flag`
                          );
                        }
                      },
                      {
                        type: "string",
                      }
                    )
                  ),
                  default: "",
                },
              },
            });
            (0, _utils.default)("LogicalExpression", {
              builder: ["operator", "left", "right"],
              visitor: ["left", "right"],
              aliases: ["Binary", "Expression"],
              fields: {
                operator: {
                  validate: (0, _utils.assertOneOf)(
                    ..._constants.LOGICAL_OPERATORS
                  ),
                },
                left: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("MemberExpression", {
              builder: [
                "object",
                "property",
                "computed",
                ...(!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []),
              ],
              visitor: ["object", "property"],
              aliases: ["Expression", "LVal"],
              fields: Object.assign(
                {
                  object: {
                    validate: (0, _utils.assertNodeType)("Expression"),
                  },
                  property: {
                    validate: (function () {
                      const normal = (0, _utils.assertNodeType)(
                        "Identifier",
                        "PrivateName"
                      );
                      const computed = (0, _utils.assertNodeType)("Expression");

                      const validator = function (node, key, val) {
                        const validator = node.computed ? computed : normal;
                        validator(node, key, val);
                      };

                      validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier",
                        "PrivateName",
                      ];
                      return validator;
                    })(),
                  },
                  computed: {
                    default: false,
                  },
                },
                !process.env.BABEL_TYPES_8_BREAKING
                  ? {
                      optional: {
                        validate: (0, _utils.assertOneOf)(true, false),
                        optional: true,
                      },
                    }
                  : {}
              ),
            });
            (0, _utils.default)("NewExpression", {
              inherits: "CallExpression",
            });
            (0, _utils.default)("Program", {
              visitor: ["directives", "body"],
              builder: ["body", "directives", "sourceType", "interpreter"],
              fields: {
                sourceFile: {
                  validate: (0, _utils.assertValueType)("string"),
                },
                sourceType: {
                  validate: (0, _utils.assertOneOf)("script", "module"),
                  default: "script",
                },
                interpreter: {
                  validate: (0, _utils.assertNodeType)("InterpreterDirective"),
                  default: null,
                  optional: true,
                },
                directives: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Directive")
                    )
                  ),
                  default: [],
                },
                body: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Statement")
                    )
                  ),
                },
              },
              aliases: ["Scopable", "BlockParent", "Block"],
            });
            (0, _utils.default)("ObjectExpression", {
              visitor: ["properties"],
              aliases: ["Expression"],
              fields: {
                properties: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "ObjectMethod",
                        "ObjectProperty",
                        "SpreadElement"
                      )
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("ObjectMethod", {
              builder: [
                "kind",
                "key",
                "params",
                "body",
                "computed",
                "generator",
                "async",
              ],
              fields: Object.assign(
                {},
                functionCommon,
                functionTypeAnnotationCommon,
                {
                  kind: Object.assign(
                    {
                      validate: (0, _utils.assertOneOf)("method", "get", "set"),
                    },
                    !process.env.BABEL_TYPES_8_BREAKING
                      ? {
                          default: "method",
                        }
                      : {}
                  ),
                  computed: {
                    default: false,
                  },
                  key: {
                    validate: (function () {
                      const normal = (0, _utils.assertNodeType)(
                        "Identifier",
                        "StringLiteral",
                        "NumericLiteral"
                      );
                      const computed = (0, _utils.assertNodeType)("Expression");

                      const validator = function (node, key, val) {
                        const validator = node.computed ? computed : normal;
                        validator(node, key, val);
                      };

                      validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier",
                        "StringLiteral",
                        "NumericLiteral",
                      ];
                      return validator;
                    })(),
                  },
                  decorators: {
                    validate: (0, _utils.chain)(
                      (0, _utils.assertValueType)("array"),
                      (0, _utils.assertEach)(
                        (0, _utils.assertNodeType)("Decorator")
                      )
                    ),
                    optional: true,
                  },
                  body: {
                    validate: (0, _utils.assertNodeType)("BlockStatement"),
                  },
                }
              ),
              visitor: [
                "key",
                "params",
                "body",
                "decorators",
                "returnType",
                "typeParameters",
              ],
              aliases: [
                "UserWhitespacable",
                "Function",
                "Scopable",
                "BlockParent",
                "FunctionParent",
                "Method",
                "ObjectMember",
              ],
            });
            (0, _utils.default)("ObjectProperty", {
              builder: [
                "key",
                "value",
                "computed",
                "shorthand",
                ...(!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []),
              ],
              fields: {
                computed: {
                  default: false,
                },
                key: {
                  validate: (function () {
                    const normal = (0, _utils.assertNodeType)(
                      "Identifier",
                      "StringLiteral",
                      "NumericLiteral"
                    );
                    const computed = (0, _utils.assertNodeType)("Expression");

                    const validator = function (node, key, val) {
                      const validator = node.computed ? computed : normal;
                      validator(node, key, val);
                    };

                    validator.oneOfNodeTypes = [
                      "Expression",
                      "Identifier",
                      "StringLiteral",
                      "NumericLiteral",
                    ];
                    return validator;
                  })(),
                },
                value: {
                  validate: (0, _utils.assertNodeType)(
                    "Expression",
                    "PatternLike"
                  ),
                },
                shorthand: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("boolean"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;

                        if (val && node.computed) {
                          throw new TypeError(
                            "Property shorthand of ObjectProperty cannot be true if computed is true"
                          );
                        }
                      },
                      {
                        type: "boolean",
                      }
                    ),
                    function (node, key, val) {
                      if (!process.env.BABEL_TYPES_8_BREAKING) return;

                      if (val && !(0, _is.default)("Identifier", node.key)) {
                        throw new TypeError(
                          "Property shorthand of ObjectProperty cannot be true if key is not an Identifier"
                        );
                      }
                    }
                  ),
                  default: false,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
              },
              visitor: ["key", "value", "decorators"],
              aliases: ["UserWhitespacable", "Property", "ObjectMember"],
              validate: (function () {
                const pattern = (0, _utils.assertNodeType)(
                  "Identifier",
                  "Pattern"
                );
                const expression = (0, _utils.assertNodeType)("Expression");
                return function (parent, key, node) {
                  if (!process.env.BABEL_TYPES_8_BREAKING) return;
                  const validator = (0, _is.default)("ObjectPattern", parent)
                    ? pattern
                    : expression;
                  validator(node, "value", node.value);
                };
              })(),
            });
            (0, _utils.default)("RestElement", {
              visitor: ["argument", "typeAnnotation"],
              builder: ["argument"],
              aliases: ["LVal", "PatternLike"],
              deprecatedAlias: "RestProperty",
              fields: Object.assign({}, patternLikeCommon, {
                argument: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertNodeType)("LVal")
                    : (0, _utils.assertNodeType)(
                        "Identifier",
                        "Pattern",
                        "MemberExpression"
                      ),
                },
                optional: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
              }),

              validate(parent, key) {
                if (!process.env.BABEL_TYPES_8_BREAKING) return;
                const match = /(\w+)\[(\d+)\]/.exec(key);
                if (!match)
                  throw new Error("Internal Babel error: malformed key.");
                const [, listKey, index] = match;

                if (parent[listKey].length > index + 1) {
                  throw new TypeError(
                    `RestElement must be last element of ${listKey}`
                  );
                }
              },
            });
            (0, _utils.default)("ReturnStatement", {
              visitor: ["argument"],
              aliases: ["Statement", "Terminatorless", "CompletionStatement"],
              fields: {
                argument: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("SequenceExpression", {
              visitor: ["expressions"],
              fields: {
                expressions: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Expression")
                    )
                  ),
                },
              },
              aliases: ["Expression"],
            });
            (0, _utils.default)("ParenthesizedExpression", {
              visitor: ["expression"],
              aliases: ["Expression", "ExpressionWrapper"],
              fields: {
                expression: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("SwitchCase", {
              visitor: ["test", "consequent"],
              fields: {
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
                consequent: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Statement")
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("SwitchStatement", {
              visitor: ["discriminant", "cases"],
              aliases: ["Statement", "BlockParent", "Scopable"],
              fields: {
                discriminant: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                cases: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("SwitchCase")
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("ThisExpression", {
              aliases: ["Expression"],
            });
            (0, _utils.default)("ThrowStatement", {
              visitor: ["argument"],
              aliases: ["Statement", "Terminatorless", "CompletionStatement"],
              fields: {
                argument: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("TryStatement", {
              visitor: ["block", "handler", "finalizer"],
              aliases: ["Statement"],
              fields: {
                block: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertNodeType)("BlockStatement"),
                    Object.assign(
                      function (node) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;

                        if (!node.handler && !node.finalizer) {
                          throw new TypeError(
                            "TryStatement expects either a handler or finalizer, or both"
                          );
                        }
                      },
                      {
                        oneOfNodeTypes: ["BlockStatement"],
                      }
                    )
                  ),
                },
                handler: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("CatchClause"),
                },
                finalizer: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
              },
            });
            (0, _utils.default)("UnaryExpression", {
              builder: ["operator", "argument", "prefix"],
              fields: {
                prefix: {
                  default: true,
                },
                argument: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                operator: {
                  validate: (0, _utils.assertOneOf)(
                    ..._constants.UNARY_OPERATORS
                  ),
                },
              },
              visitor: ["argument"],
              aliases: ["UnaryLike", "Expression"],
            });
            (0, _utils.default)("UpdateExpression", {
              builder: ["operator", "argument", "prefix"],
              fields: {
                prefix: {
                  default: false,
                },
                argument: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertNodeType)("Expression")
                    : (0, _utils.assertNodeType)(
                        "Identifier",
                        "MemberExpression"
                      ),
                },
                operator: {
                  validate: (0, _utils.assertOneOf)(
                    ..._constants.UPDATE_OPERATORS
                  ),
                },
              },
              visitor: ["argument"],
              aliases: ["Expression"],
            });
            (0, _utils.default)("VariableDeclaration", {
              builder: ["kind", "declarations"],
              visitor: ["declarations"],
              aliases: ["Statement", "Declaration"],
              fields: {
                declare: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                kind: {
                  validate: (0, _utils.assertOneOf)("var", "let", "const"),
                },
                declarations: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("VariableDeclarator")
                    )
                  ),
                },
              },

              validate(parent, key, node) {
                if (!process.env.BABEL_TYPES_8_BREAKING) return;
                if (
                  !(0, _is.default)("ForXStatement", parent, {
                    left: node,
                  })
                )
                  return;

                if (node.declarations.length !== 1) {
                  throw new TypeError(
                    `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`
                  );
                }
              },
            });
            (0, _utils.default)("VariableDeclarator", {
              visitor: ["id", "init"],
              fields: {
                id: {
                  validate: (function () {
                    if (!process.env.BABEL_TYPES_8_BREAKING) {
                      return (0, _utils.assertNodeType)("LVal");
                    }

                    const normal = (0, _utils.assertNodeType)(
                      "Identifier",
                      "ArrayPattern",
                      "ObjectPattern"
                    );
                    const without = (0, _utils.assertNodeType)("Identifier");
                    return function (node, key, val) {
                      const validator = node.init ? normal : without;
                      validator(node, key, val);
                    };
                  })(),
                },
                definite: {
                  optional: true,
                  validate: (0, _utils.assertValueType)("boolean"),
                },
                init: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("WhileStatement", {
              visitor: ["test", "body"],
              aliases: [
                "Statement",
                "BlockParent",
                "Loop",
                "While",
                "Scopable",
              ],
              fields: {
                test: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            (0, _utils.default)("WithStatement", {
              visitor: ["object", "body"],
              aliases: ["Statement"],
              fields: {
                object: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
              },
            });
            (0, _utils.default)("AssignmentPattern", {
              visitor: ["left", "right", "decorators"],
              builder: ["left", "right"],
              aliases: ["Pattern", "PatternLike", "LVal"],
              fields: Object.assign({}, patternLikeCommon, {
                left: {
                  validate: (0, _utils.assertNodeType)(
                    "Identifier",
                    "ObjectPattern",
                    "ArrayPattern",
                    "MemberExpression"
                  ),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
              }),
            });
            (0, _utils.default)("ArrayPattern", {
              visitor: ["elements", "typeAnnotation"],
              builder: ["elements"],
              aliases: ["Pattern", "PatternLike", "LVal"],
              fields: Object.assign({}, patternLikeCommon, {
                elements: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeOrValueType)("null", "PatternLike")
                    )
                  ),
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
                optional: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
              }),
            });
            (0, _utils.default)("ArrowFunctionExpression", {
              builder: ["params", "body", "async"],
              visitor: ["params", "body", "returnType", "typeParameters"],
              aliases: [
                "Scopable",
                "Function",
                "BlockParent",
                "FunctionParent",
                "Expression",
                "Pureish",
              ],
              fields: Object.assign(
                {},
                functionCommon,
                functionTypeAnnotationCommon,
                {
                  expression: {
                    validate: (0, _utils.assertValueType)("boolean"),
                  },
                  body: {
                    validate: (0, _utils.assertNodeType)(
                      "BlockStatement",
                      "Expression"
                    ),
                  },
                }
              ),
            });
            (0, _utils.default)("ClassBody", {
              visitor: ["body"],
              fields: {
                body: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "ClassMethod",
                        "ClassPrivateMethod",
                        "ClassProperty",
                        "ClassPrivateProperty",
                        "TSDeclareMethod",
                        "TSIndexSignature"
                      )
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("ClassExpression", {
              builder: ["id", "superClass", "body", "decorators"],
              visitor: [
                "id",
                "body",
                "superClass",
                "mixins",
                "typeParameters",
                "superTypeParameters",
                "implements",
                "decorators",
              ],
              aliases: ["Scopable", "Class", "Expression"],
              fields: {
                id: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                  optional: true,
                },
                typeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterDeclaration",
                    "TSTypeParameterDeclaration",
                    "Noop"
                  ),
                  optional: true,
                },
                body: {
                  validate: (0, _utils.assertNodeType)("ClassBody"),
                },
                superClass: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                superTypeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterInstantiation",
                    "TSTypeParameterInstantiation"
                  ),
                  optional: true,
                },
                implements: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "TSExpressionWithTypeArguments",
                        "ClassImplements"
                      )
                    )
                  ),
                  optional: true,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
                mixins: {
                  validate: (0, _utils.assertNodeType)("InterfaceExtends"),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("ClassDeclaration", {
              inherits: "ClassExpression",
              aliases: ["Scopable", "Class", "Statement", "Declaration"],
              fields: {
                id: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
                typeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterDeclaration",
                    "TSTypeParameterDeclaration",
                    "Noop"
                  ),
                  optional: true,
                },
                body: {
                  validate: (0, _utils.assertNodeType)("ClassBody"),
                },
                superClass: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                superTypeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterInstantiation",
                    "TSTypeParameterInstantiation"
                  ),
                  optional: true,
                },
                implements: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "TSExpressionWithTypeArguments",
                        "ClassImplements"
                      )
                    )
                  ),
                  optional: true,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
                mixins: {
                  validate: (0, _utils.assertNodeType)("InterfaceExtends"),
                  optional: true,
                },
                declare: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                abstract: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
              },
              validate: (function () {
                const identifier = (0, _utils.assertNodeType)("Identifier");
                return function (parent, key, node) {
                  if (!process.env.BABEL_TYPES_8_BREAKING) return;

                  if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
                    identifier(node, "id", node.id);
                  }
                };
              })(),
            });
            (0, _utils.default)("ExportAllDeclaration", {
              visitor: ["source"],
              aliases: [
                "Statement",
                "Declaration",
                "ModuleDeclaration",
                "ExportDeclaration",
              ],
              fields: {
                source: {
                  validate: (0, _utils.assertNodeType)("StringLiteral"),
                },
                exportKind: (0, _utils.validateOptional)(
                  (0, _utils.assertOneOf)("type", "value")
                ),
                assertions: {
                  optional: true,
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("ImportAttribute")
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("ExportDefaultDeclaration", {
              visitor: ["declaration"],
              aliases: [
                "Statement",
                "Declaration",
                "ModuleDeclaration",
                "ExportDeclaration",
              ],
              fields: {
                declaration: {
                  validate: (0, _utils.assertNodeType)(
                    "FunctionDeclaration",
                    "TSDeclareFunction",
                    "ClassDeclaration",
                    "Expression"
                  ),
                },
                exportKind: (0, _utils.validateOptional)(
                  (0, _utils.assertOneOf)("value")
                ),
              },
            });
            (0, _utils.default)("ExportNamedDeclaration", {
              visitor: ["declaration", "specifiers", "source"],
              aliases: [
                "Statement",
                "Declaration",
                "ModuleDeclaration",
                "ExportDeclaration",
              ],
              fields: {
                declaration: {
                  optional: true,
                  validate: (0, _utils.chain)(
                    (0, _utils.assertNodeType)("Declaration"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;

                        if (val && node.specifiers.length) {
                          throw new TypeError(
                            "Only declaration or specifiers is allowed on ExportNamedDeclaration"
                          );
                        }
                      },
                      {
                        oneOfNodeTypes: ["Declaration"],
                      }
                    ),
                    function (node, key, val) {
                      if (!process.env.BABEL_TYPES_8_BREAKING) return;

                      if (val && node.source) {
                        throw new TypeError(
                          "Cannot export a declaration from a source"
                        );
                      }
                    }
                  ),
                },
                assertions: {
                  optional: true,
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("ImportAttribute")
                    )
                  ),
                },
                specifiers: {
                  default: [],
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (function () {
                        const sourced = (0, _utils.assertNodeType)(
                          "ExportSpecifier",
                          "ExportDefaultSpecifier",
                          "ExportNamespaceSpecifier"
                        );
                        const sourceless = (0, _utils.assertNodeType)(
                          "ExportSpecifier"
                        );
                        if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
                        return function (node, key, val) {
                          const validator = node.source ? sourced : sourceless;
                          validator(node, key, val);
                        };
                      })()
                    )
                  ),
                },
                source: {
                  validate: (0, _utils.assertNodeType)("StringLiteral"),
                  optional: true,
                },
                exportKind: (0, _utils.validateOptional)(
                  (0, _utils.assertOneOf)("type", "value")
                ),
              },
            });
            (0, _utils.default)("ExportSpecifier", {
              visitor: ["local", "exported"],
              aliases: ["ModuleSpecifier"],
              fields: {
                local: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
                exported: {
                  validate: (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral"
                  ),
                },
              },
            });
            (0, _utils.default)("ForOfStatement", {
              visitor: ["left", "right", "body"],
              builder: ["left", "right", "body", "await"],
              aliases: [
                "Scopable",
                "Statement",
                "For",
                "BlockParent",
                "Loop",
                "ForXStatement",
              ],
              fields: {
                left: {
                  validate: (function () {
                    if (!process.env.BABEL_TYPES_8_BREAKING) {
                      return (0, _utils.assertNodeType)(
                        "VariableDeclaration",
                        "LVal"
                      );
                    }

                    const declaration = (0, _utils.assertNodeType)(
                      "VariableDeclaration"
                    );
                    const lval = (0, _utils.assertNodeType)(
                      "Identifier",
                      "MemberExpression",
                      "ArrayPattern",
                      "ObjectPattern"
                    );
                    return function (node, key, val) {
                      if ((0, _is.default)("VariableDeclaration", val)) {
                        declaration(node, key, val);
                      } else {
                        lval(node, key, val);
                      }
                    };
                  })(),
                },
                right: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                body: {
                  validate: (0, _utils.assertNodeType)("Statement"),
                },
                await: {
                  default: false,
                },
              },
            });
            (0, _utils.default)("ImportDeclaration", {
              visitor: ["specifiers", "source"],
              aliases: ["Statement", "Declaration", "ModuleDeclaration"],
              fields: {
                assertions: {
                  optional: true,
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("ImportAttribute")
                    )
                  ),
                },
                specifiers: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "ImportSpecifier",
                        "ImportDefaultSpecifier",
                        "ImportNamespaceSpecifier"
                      )
                    )
                  ),
                },
                source: {
                  validate: (0, _utils.assertNodeType)("StringLiteral"),
                },
                importKind: {
                  validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("ImportDefaultSpecifier", {
              visitor: ["local"],
              aliases: ["ModuleSpecifier"],
              fields: {
                local: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
            (0, _utils.default)("ImportNamespaceSpecifier", {
              visitor: ["local"],
              aliases: ["ModuleSpecifier"],
              fields: {
                local: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
            (0, _utils.default)("ImportSpecifier", {
              visitor: ["local", "imported"],
              aliases: ["ModuleSpecifier"],
              fields: {
                local: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
                imported: {
                  validate: (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral"
                  ),
                },
                importKind: {
                  validate: (0, _utils.assertOneOf)("type", "typeof"),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("MetaProperty", {
              visitor: ["meta", "property"],
              aliases: ["Expression"],
              fields: {
                meta: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertNodeType)("Identifier"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;
                        let property;

                        switch (val.name) {
                          case "function":
                            property = "sent";
                            break;

                          case "new":
                            property = "target";
                            break;

                          case "import":
                            property = "meta";
                            break;
                        }

                        if (
                          !(0, _is.default)("Identifier", node.property, {
                            name: property,
                          })
                        ) {
                          throw new TypeError("Unrecognised MetaProperty");
                        }
                      },
                      {
                        oneOfNodeTypes: ["Identifier"],
                      }
                    )
                  ),
                },
                property: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
            const classMethodOrPropertyCommon = {
              abstract: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              accessibility: {
                validate: (0, _utils.assertOneOf)(
                  "public",
                  "private",
                  "protected"
                ),
                optional: true,
              },
              static: {
                default: false,
              },
              override: {
                default: false,
              },
              computed: {
                default: false,
              },
              optional: {
                validate: (0, _utils.assertValueType)("boolean"),
                optional: true,
              },
              key: {
                validate: (0, _utils.chain)(
                  (function () {
                    const normal = (0, _utils.assertNodeType)(
                      "Identifier",
                      "StringLiteral",
                      "NumericLiteral"
                    );
                    const computed = (0, _utils.assertNodeType)("Expression");
                    return function (node, key, val) {
                      const validator = node.computed ? computed : normal;
                      validator(node, key, val);
                    };
                  })(),
                  (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral",
                    "NumericLiteral",
                    "Expression"
                  )
                ),
              },
            };
            exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
            const classMethodOrDeclareMethodCommon = Object.assign(
              {},
              functionCommon,
              classMethodOrPropertyCommon,
              {
                params: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "Identifier",
                        "Pattern",
                        "RestElement",
                        "TSParameterProperty"
                      )
                    )
                  ),
                },
                kind: {
                  validate: (0, _utils.assertOneOf)(
                    "get",
                    "set",
                    "method",
                    "constructor"
                  ),
                  default: "method",
                },
                access: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("string"),
                    (0, _utils.assertOneOf)("public", "private", "protected")
                  ),
                  optional: true,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
              }
            );
            exports.classMethodOrDeclareMethodCommon =
              classMethodOrDeclareMethodCommon;
            (0, _utils.default)("ClassMethod", {
              aliases: [
                "Function",
                "Scopable",
                "BlockParent",
                "FunctionParent",
                "Method",
              ],
              builder: [
                "kind",
                "key",
                "params",
                "body",
                "computed",
                "static",
                "generator",
                "async",
              ],
              visitor: [
                "key",
                "params",
                "body",
                "decorators",
                "returnType",
                "typeParameters",
              ],
              fields: Object.assign(
                {},
                classMethodOrDeclareMethodCommon,
                functionTypeAnnotationCommon,
                {
                  body: {
                    validate: (0, _utils.assertNodeType)("BlockStatement"),
                  },
                }
              ),
            });
            (0, _utils.default)("ObjectPattern", {
              visitor: ["properties", "typeAnnotation", "decorators"],
              builder: ["properties"],
              aliases: ["Pattern", "PatternLike", "LVal"],
              fields: Object.assign({}, patternLikeCommon, {
                properties: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "RestElement",
                        "ObjectProperty"
                      )
                    )
                  ),
                },
              }),
            });
            (0, _utils.default)("SpreadElement", {
              visitor: ["argument"],
              aliases: ["UnaryLike"],
              deprecatedAlias: "SpreadProperty",
              fields: {
                argument: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("Super", {
              aliases: ["Expression"],
            });
            (0, _utils.default)("TaggedTemplateExpression", {
              visitor: ["tag", "quasi", "typeParameters"],
              builder: ["tag", "quasi"],
              aliases: ["Expression"],
              fields: {
                tag: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                quasi: {
                  validate: (0, _utils.assertNodeType)("TemplateLiteral"),
                },
                typeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterInstantiation",
                    "TSTypeParameterInstantiation"
                  ),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("TemplateElement", {
              builder: ["value", "tail"],
              fields: {
                value: {
                  validate: (0, _utils.assertShape)({
                    raw: {
                      validate: (0, _utils.assertValueType)("string"),
                    },
                    cooked: {
                      validate: (0, _utils.assertValueType)("string"),
                      optional: true,
                    },
                  }),
                },
                tail: {
                  default: false,
                },
              },
            });
            (0, _utils.default)("TemplateLiteral", {
              visitor: ["quasis", "expressions"],
              aliases: ["Expression", "Literal"],
              fields: {
                quasis: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("TemplateElement")
                    )
                  ),
                },
                expressions: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Expression", "TSType")
                    ),
                    function (node, key, val) {
                      if (node.quasis.length !== val.length + 1) {
                        throw new TypeError(
                          `Number of ${
                            node.type
                          } quasis should be exactly one more than the number of expressions.\nExpected ${
                            val.length + 1
                          } quasis but got ${node.quasis.length}`
                        );
                      }
                    }
                  ),
                },
              },
            });
            (0, _utils.default)("YieldExpression", {
              builder: ["argument", "delegate"],
              visitor: ["argument"],
              aliases: ["Expression", "Terminatorless"],
              fields: {
                delegate: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("boolean"),
                    Object.assign(
                      function (node, key, val) {
                        if (!process.env.BABEL_TYPES_8_BREAKING) return;

                        if (val && !node.argument) {
                          throw new TypeError(
                            "Property delegate of YieldExpression cannot be true if there is no argument"
                          );
                        }
                      },
                      {
                        type: "boolean",
                      }
                    )
                  ),
                  default: false,
                },
                argument: {
                  optional: true,
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("AwaitExpression", {
              builder: ["argument"],
              visitor: ["argument"],
              aliases: ["Expression", "Terminatorless"],
              fields: {
                argument: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("Import", {
              aliases: ["Expression"],
            });
            (0, _utils.default)("BigIntLiteral", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("string"),
                },
              },
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("ExportNamespaceSpecifier", {
              visitor: ["exported"],
              aliases: ["ModuleSpecifier"],
              fields: {
                exported: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
            (0, _utils.default)("OptionalMemberExpression", {
              builder: ["object", "property", "computed", "optional"],
              visitor: ["object", "property"],
              aliases: ["Expression"],
              fields: {
                object: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                property: {
                  validate: (function () {
                    const normal = (0, _utils.assertNodeType)("Identifier");
                    const computed = (0, _utils.assertNodeType)("Expression");

                    const validator = function (node, key, val) {
                      const validator = node.computed ? computed : normal;
                      validator(node, key, val);
                    };

                    validator.oneOfNodeTypes = ["Expression", "Identifier"];
                    return validator;
                  })(),
                },
                computed: {
                  default: false,
                },
                optional: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertValueType)("boolean")
                    : (0, _utils.chain)(
                        (0, _utils.assertValueType)("boolean"),
                        (0, _utils.assertOptionalChainStart)()
                      ),
                },
              },
            });
            (0, _utils.default)("OptionalCallExpression", {
              visitor: [
                "callee",
                "arguments",
                "typeParameters",
                "typeArguments",
              ],
              builder: ["callee", "arguments", "optional"],
              aliases: ["Expression"],
              fields: {
                callee: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
                arguments: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "Expression",
                        "SpreadElement",
                        "JSXNamespacedName",
                        "ArgumentPlaceholder"
                      )
                    )
                  ),
                },
                optional: {
                  validate: !process.env.BABEL_TYPES_8_BREAKING
                    ? (0, _utils.assertValueType)("boolean")
                    : (0, _utils.chain)(
                        (0, _utils.assertValueType)("boolean"),
                        (0, _utils.assertOptionalChainStart)()
                      ),
                },
                typeArguments: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeParameterInstantiation"
                  ),
                  optional: true,
                },
                typeParameters: {
                  validate: (0, _utils.assertNodeType)(
                    "TSTypeParameterInstantiation"
                  ),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("ClassProperty", {
              visitor: ["key", "value", "typeAnnotation", "decorators"],
              builder: [
                "key",
                "value",
                "typeAnnotation",
                "decorators",
                "computed",
                "static",
              ],
              aliases: ["Property"],
              fields: Object.assign({}, classMethodOrPropertyCommon, {
                value: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
                definite: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                typeAnnotation: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeAnnotation",
                    "TSTypeAnnotation",
                    "Noop"
                  ),
                  optional: true,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
                readonly: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                declare: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                variance: {
                  validate: (0, _utils.assertNodeType)("Variance"),
                  optional: true,
                },
              }),
            });
            (0, _utils.default)("ClassPrivateProperty", {
              visitor: ["key", "value", "decorators", "typeAnnotation"],
              builder: ["key", "value", "decorators", "static"],
              aliases: ["Property", "Private"],
              fields: {
                key: {
                  validate: (0, _utils.assertNodeType)("PrivateName"),
                },
                value: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                  optional: true,
                },
                typeAnnotation: {
                  validate: (0, _utils.assertNodeType)(
                    "TypeAnnotation",
                    "TSTypeAnnotation",
                    "Noop"
                  ),
                  optional: true,
                },
                decorators: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Decorator")
                    )
                  ),
                  optional: true,
                },
                readonly: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                definite: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  optional: true,
                },
                variance: {
                  validate: (0, _utils.assertNodeType)("Variance"),
                  optional: true,
                },
              },
            });
            (0, _utils.default)("ClassPrivateMethod", {
              builder: ["kind", "key", "params", "body", "static"],
              visitor: [
                "key",
                "params",
                "body",
                "decorators",
                "returnType",
                "typeParameters",
              ],
              aliases: [
                "Function",
                "Scopable",
                "BlockParent",
                "FunctionParent",
                "Method",
                "Private",
              ],
              fields: Object.assign(
                {},
                classMethodOrDeclareMethodCommon,
                functionTypeAnnotationCommon,
                {
                  key: {
                    validate: (0, _utils.assertNodeType)("PrivateName"),
                  },
                  body: {
                    validate: (0, _utils.assertNodeType)("BlockStatement"),
                  },
                }
              ),
            });
            (0, _utils.default)("PrivateName", {
              visitor: ["id"],
              aliases: ["Private"],
              fields: {
                id: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
          }).call(this);
        }).call(this, require("_process"));
      },
      {
        "../constants": 147,
        "../validators/is": 185,
        "../validators/isValidIdentifier": 198,
        "./utils": 167,
        "@babel/helper-validator-identifier": 79,
        _process: 425,
      },
    ],
    160: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            var _utils = require("./utils");

            (0, _utils.default)("ArgumentPlaceholder", {});
            (0, _utils.default)("BindExpression", {
              visitor: ["object", "callee"],
              aliases: ["Expression"],
              fields: !process.env.BABEL_TYPES_8_BREAKING
                ? {
                    object: {
                      validate: Object.assign(() => {}, {
                        oneOfNodeTypes: ["Expression"],
                      }),
                    },
                    callee: {
                      validate: Object.assign(() => {}, {
                        oneOfNodeTypes: ["Expression"],
                      }),
                    },
                  }
                : {
                    object: {
                      validate: (0, _utils.assertNodeType)("Expression"),
                    },
                    callee: {
                      validate: (0, _utils.assertNodeType)("Expression"),
                    },
                  },
            });
            (0, _utils.default)("ImportAttribute", {
              visitor: ["key", "value"],
              fields: {
                key: {
                  validate: (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral"
                  ),
                },
                value: {
                  validate: (0, _utils.assertNodeType)("StringLiteral"),
                },
              },
            });
            (0, _utils.default)("Decorator", {
              visitor: ["expression"],
              fields: {
                expression: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
            });
            (0, _utils.default)("DoExpression", {
              visitor: ["body"],
              builder: ["body", "async"],
              aliases: ["Expression"],
              fields: {
                body: {
                  validate: (0, _utils.assertNodeType)("BlockStatement"),
                },
                async: {
                  validate: (0, _utils.assertValueType)("boolean"),
                  default: false,
                },
              },
            });
            (0, _utils.default)("ExportDefaultSpecifier", {
              visitor: ["exported"],
              aliases: ["ModuleSpecifier"],
              fields: {
                exported: {
                  validate: (0, _utils.assertNodeType)("Identifier"),
                },
              },
            });
            (0, _utils.default)("RecordExpression", {
              visitor: ["properties"],
              aliases: ["Expression"],
              fields: {
                properties: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)(
                        "ObjectProperty",
                        "SpreadElement"
                      )
                    )
                  ),
                },
              },
            });
            (0, _utils.default)("TupleExpression", {
              fields: {
                elements: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Expression", "SpreadElement")
                    )
                  ),
                  default: [],
                },
              },
              visitor: ["elements"],
              aliases: ["Expression"],
            });
            (0, _utils.default)("DecimalLiteral", {
              builder: ["value"],
              fields: {
                value: {
                  validate: (0, _utils.assertValueType)("string"),
                },
              },
              aliases: ["Expression", "Pureish", "Literal", "Immutable"],
            });
            (0, _utils.default)("StaticBlock", {
              visitor: ["body"],
              fields: {
                body: {
                  validate: (0, _utils.chain)(
                    (0, _utils.assertValueType)("array"),
                    (0, _utils.assertEach)(
                      (0, _utils.assertNodeType)("Statement")
                    )
                  ),
                },
              },
              aliases: ["Scopable", "BlockParent"],
            });
            (0, _utils.default)("ModuleExpression", {
              visitor: ["body"],
              fields: {
                body: {
                  validate: (0, _utils.assertNodeType)("Program"),
                },
              },
              aliases: ["Expression"],
            });
            (0, _utils.default)("TopicReference", {
              aliases: ["Expression"],
            });
            (0, _utils.default)("PipelineTopicExpression", {
              builder: ["expression"],
              visitor: ["expression"],
              fields: {
                expression: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              aliases: ["Expression"],
            });
            (0, _utils.default)("PipelineBareFunction", {
              builder: ["callee"],
              visitor: ["callee"],
              fields: {
                callee: {
                  validate: (0, _utils.assertNodeType)("Expression"),
                },
              },
              aliases: ["Expression"],
            });
            (0, _utils.default)("PipelinePrimaryTopicReference", {
              aliases: ["Expression"],
            });
          }).call(this);
        }).call(this, require("_process"));
      },
      { "./utils": 167, _process: 425 },
    ],
    161: [
      function (require, module, exports) {
        "use strict";

        var _utils = require("./utils");

        const defineInterfaceishType = (
          name,
          typeParameterType = "TypeParameterDeclaration"
        ) => {
          (0, _utils.default)(name, {
            builder: ["id", "typeParameters", "extends", "body"],
            visitor: [
              "id",
              "typeParameters",
              "extends",
              "mixins",
              "implements",
              "body",
            ],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                typeParameterType
              ),
              extends: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("InterfaceExtends")
              ),
              mixins: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("InterfaceExtends")
              ),
              implements: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("ClassImplements")
              ),
              body: (0, _utils.validateType)("ObjectTypeAnnotation"),
            },
          });
        };

        (0, _utils.default)("AnyTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("ArrayTypeAnnotation", {
          visitor: ["elementType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            elementType: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("BooleanTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("BooleanLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          },
        });
        (0, _utils.default)("NullLiteralTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("ClassImplements", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            ),
          },
        });
        defineInterfaceishType("DeclareClass");
        (0, _utils.default)("DeclareFunction", {
          visitor: ["id"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            predicate: (0, _utils.validateOptionalType)("DeclaredPredicate"),
          },
        });
        defineInterfaceishType("DeclareInterface");
        (0, _utils.default)("DeclareModule", {
          builder: ["id", "body", "kind"],
          visitor: ["id", "body"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            body: (0, _utils.validateType)("BlockStatement"),
            kind: (0, _utils.validateOptional)(
              (0, _utils.assertOneOf)("CommonJS", "ES")
            ),
          },
        });
        (0, _utils.default)("DeclareModuleExports", {
          visitor: ["typeAnnotation"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TypeAnnotation"),
          },
        });
        (0, _utils.default)("DeclareTypeAlias", {
          visitor: ["id", "typeParameters", "right"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            right: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("DeclareOpaqueType", {
          visitor: ["id", "typeParameters", "supertype"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            supertype: (0, _utils.validateOptionalType)("FlowType"),
            impltype: (0, _utils.validateOptionalType)("FlowType"),
          },
        });
        (0, _utils.default)("DeclareVariable", {
          visitor: ["id"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
          },
        });
        (0, _utils.default)("DeclareExportDeclaration", {
          visitor: ["declaration", "specifiers", "source"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            declaration: (0, _utils.validateOptionalType)("Flow"),
            specifiers: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)([
                "ExportSpecifier",
                "ExportNamespaceSpecifier",
              ])
            ),
            source: (0, _utils.validateOptionalType)("StringLiteral"),
            default: (0, _utils.validateOptional)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("DeclareExportAllDeclaration", {
          visitor: ["source"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            source: (0, _utils.validateType)("StringLiteral"),
            exportKind: (0, _utils.validateOptional)(
              (0, _utils.assertOneOf)("type", "value")
            ),
          },
        });
        (0, _utils.default)("DeclaredPredicate", {
          visitor: ["value"],
          aliases: ["Flow", "FlowPredicate"],
          fields: {
            value: (0, _utils.validateType)("Flow"),
          },
        });
        (0, _utils.default)("ExistsTypeAnnotation", {
          aliases: ["Flow", "FlowType"],
        });
        (0, _utils.default)("FunctionTypeAnnotation", {
          visitor: ["typeParameters", "params", "rest", "returnType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            params: (0, _utils.validate)(
              (0, _utils.arrayOfType)("FunctionTypeParam")
            ),
            rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
            this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
            returnType: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("FunctionTypeParam", {
          visitor: ["name", "typeAnnotation"],
          aliases: ["Flow"],
          fields: {
            name: (0, _utils.validateOptionalType)("Identifier"),
            typeAnnotation: (0, _utils.validateType)("FlowType"),
            optional: (0, _utils.validateOptional)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("GenericTypeAnnotation", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow", "FlowType"],
          fields: {
            id: (0, _utils.validateType)([
              "Identifier",
              "QualifiedTypeIdentifier",
            ]),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            ),
          },
        });
        (0, _utils.default)("InferredPredicate", {
          aliases: ["Flow", "FlowPredicate"],
        });
        (0, _utils.default)("InterfaceExtends", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)([
              "Identifier",
              "QualifiedTypeIdentifier",
            ]),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            ),
          },
        });
        defineInterfaceishType("InterfaceDeclaration");
        (0, _utils.default)("InterfaceTypeAnnotation", {
          visitor: ["extends", "body"],
          aliases: ["Flow", "FlowType"],
          fields: {
            extends: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("InterfaceExtends")
            ),
            body: (0, _utils.validateType)("ObjectTypeAnnotation"),
          },
        });
        (0, _utils.default)("IntersectionTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
          },
        });
        (0, _utils.default)("MixedTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("EmptyTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("NullableTypeAnnotation", {
          visitor: ["typeAnnotation"],
          aliases: ["Flow", "FlowType"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("NumberLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("number")),
          },
        });
        (0, _utils.default)("NumberTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("ObjectTypeAnnotation", {
          visitor: [
            "properties",
            "indexers",
            "callProperties",
            "internalSlots",
          ],
          aliases: ["Flow", "FlowType"],
          builder: [
            "properties",
            "indexers",
            "callProperties",
            "internalSlots",
            "exact",
          ],
          fields: {
            properties: (0, _utils.validate)(
              (0, _utils.arrayOfType)([
                "ObjectTypeProperty",
                "ObjectTypeSpreadProperty",
              ])
            ),
            indexers: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("ObjectTypeIndexer")
            ),
            callProperties: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("ObjectTypeCallProperty")
            ),
            internalSlots: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("ObjectTypeInternalSlot")
            ),
            exact: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false,
            },
            inexact: (0, _utils.validateOptional)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("ObjectTypeInternalSlot", {
          visitor: ["id", "value", "optional", "static", "method"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            value: (0, _utils.validateType)("FlowType"),
            optional: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            method: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("ObjectTypeCallProperty", {
          visitor: ["value"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            value: (0, _utils.validateType)("FlowType"),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("ObjectTypeIndexer", {
          visitor: ["id", "key", "value", "variance"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            id: (0, _utils.validateOptionalType)("Identifier"),
            key: (0, _utils.validateType)("FlowType"),
            value: (0, _utils.validateType)("FlowType"),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            variance: (0, _utils.validateOptionalType)("Variance"),
          },
        });
        (0, _utils.default)("ObjectTypeProperty", {
          visitor: ["key", "value", "variance"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            value: (0, _utils.validateType)("FlowType"),
            kind: (0, _utils.validate)(
              (0, _utils.assertOneOf)("init", "get", "set")
            ),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
            optional: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            variance: (0, _utils.validateOptionalType)("Variance"),
            method: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("ObjectTypeSpreadProperty", {
          visitor: ["argument"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            argument: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("OpaqueType", {
          visitor: ["id", "typeParameters", "supertype", "impltype"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            supertype: (0, _utils.validateOptionalType)("FlowType"),
            impltype: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("QualifiedTypeIdentifier", {
          visitor: ["id", "qualification"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            qualification: (0, _utils.validateType)([
              "Identifier",
              "QualifiedTypeIdentifier",
            ]),
          },
        });
        (0, _utils.default)("StringLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("string")),
          },
        });
        (0, _utils.default)("StringTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("SymbolTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("ThisTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("TupleTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
          },
        });
        (0, _utils.default)("TypeofTypeAnnotation", {
          visitor: ["argument"],
          aliases: ["Flow", "FlowType"],
          fields: {
            argument: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("TypeAlias", {
          visitor: ["id", "typeParameters", "right"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            right: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("TypeAnnotation", {
          aliases: ["Flow"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("TypeCastExpression", {
          visitor: ["expression", "typeAnnotation"],
          aliases: ["Flow", "ExpressionWrapper", "Expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
            typeAnnotation: (0, _utils.validateType)("TypeAnnotation"),
          },
        });
        (0, _utils.default)("TypeParameter", {
          aliases: ["Flow"],
          visitor: ["bound", "default", "variance"],
          fields: {
            name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
            bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
            default: (0, _utils.validateOptionalType)("FlowType"),
            variance: (0, _utils.validateOptionalType)("Variance"),
          },
        });
        (0, _utils.default)("TypeParameterDeclaration", {
          aliases: ["Flow"],
          visitor: ["params"],
          fields: {
            params: (0, _utils.validate)(
              (0, _utils.arrayOfType)("TypeParameter")
            ),
          },
        });
        (0, _utils.default)("TypeParameterInstantiation", {
          aliases: ["Flow"],
          visitor: ["params"],
          fields: {
            params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
          },
        });
        (0, _utils.default)("UnionTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")),
          },
        });
        (0, _utils.default)("Variance", {
          aliases: ["Flow"],
          builder: ["kind"],
          fields: {
            kind: (0, _utils.validate)(
              (0, _utils.assertOneOf)("minus", "plus")
            ),
          },
        });
        (0, _utils.default)("VoidTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"],
        });
        (0, _utils.default)("EnumDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "body"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            body: (0, _utils.validateType)([
              "EnumBooleanBody",
              "EnumNumberBody",
              "EnumStringBody",
              "EnumSymbolBody",
            ]),
          },
        });
        (0, _utils.default)("EnumBooleanBody", {
          aliases: ["EnumBody"],
          visitor: ["members"],
          fields: {
            explicitType: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
            hasUnknownMembers: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("EnumNumberBody", {
          aliases: ["EnumBody"],
          visitor: ["members"],
          fields: {
            explicitType: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
            hasUnknownMembers: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("EnumStringBody", {
          aliases: ["EnumBody"],
          visitor: ["members"],
          fields: {
            explicitType: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            members: (0, _utils.validateArrayOfType)([
              "EnumStringMember",
              "EnumDefaultedMember",
            ]),
            hasUnknownMembers: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("EnumSymbolBody", {
          aliases: ["EnumBody"],
          visitor: ["members"],
          fields: {
            members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
            hasUnknownMembers: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
        (0, _utils.default)("EnumBooleanMember", {
          aliases: ["EnumMember"],
          visitor: ["id"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            init: (0, _utils.validateType)("BooleanLiteral"),
          },
        });
        (0, _utils.default)("EnumNumberMember", {
          aliases: ["EnumMember"],
          visitor: ["id", "init"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            init: (0, _utils.validateType)("NumericLiteral"),
          },
        });
        (0, _utils.default)("EnumStringMember", {
          aliases: ["EnumMember"],
          visitor: ["id", "init"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            init: (0, _utils.validateType)("StringLiteral"),
          },
        });
        (0, _utils.default)("EnumDefaultedMember", {
          aliases: ["EnumMember"],
          visitor: ["id"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
          },
        });
        (0, _utils.default)("IndexedAccessType", {
          visitor: ["objectType", "indexType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            objectType: (0, _utils.validateType)("FlowType"),
            indexType: (0, _utils.validateType)("FlowType"),
          },
        });
        (0, _utils.default)("OptionalIndexedAccessType", {
          visitor: ["objectType", "indexType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            objectType: (0, _utils.validateType)("FlowType"),
            indexType: (0, _utils.validateType)("FlowType"),
            optional: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
          },
        });
      },
      { "./utils": 167 },
    ],
    162: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "VISITOR_KEYS", {
          enumerable: true,
          get: function () {
            return _utils.VISITOR_KEYS;
          },
        });
        Object.defineProperty(exports, "ALIAS_KEYS", {
          enumerable: true,
          get: function () {
            return _utils.ALIAS_KEYS;
          },
        });
        Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
          enumerable: true,
          get: function () {
            return _utils.FLIPPED_ALIAS_KEYS;
          },
        });
        Object.defineProperty(exports, "NODE_FIELDS", {
          enumerable: true,
          get: function () {
            return _utils.NODE_FIELDS;
          },
        });
        Object.defineProperty(exports, "BUILDER_KEYS", {
          enumerable: true,
          get: function () {
            return _utils.BUILDER_KEYS;
          },
        });
        Object.defineProperty(exports, "DEPRECATED_KEYS", {
          enumerable: true,
          get: function () {
            return _utils.DEPRECATED_KEYS;
          },
        });
        Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
          enumerable: true,
          get: function () {
            return _utils.NODE_PARENT_VALIDATIONS;
          },
        });
        Object.defineProperty(exports, "PLACEHOLDERS", {
          enumerable: true,
          get: function () {
            return _placeholders.PLACEHOLDERS;
          },
        });
        Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
          enumerable: true,
          get: function () {
            return _placeholders.PLACEHOLDERS_ALIAS;
          },
        });
        Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
          enumerable: true,
          get: function () {
            return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
          },
        });
        exports.TYPES = void 0;

        var _toFastProperties = require("to-fast-properties");

        require("./core");

        require("./flow");

        require("./jsx");

        require("./misc");

        require("./experimental");

        require("./typescript");

        var _utils = require("./utils");

        var _placeholders = require("./placeholders");

        _toFastProperties(_utils.VISITOR_KEYS);

        _toFastProperties(_utils.ALIAS_KEYS);

        _toFastProperties(_utils.FLIPPED_ALIAS_KEYS);

        _toFastProperties(_utils.NODE_FIELDS);

        _toFastProperties(_utils.BUILDER_KEYS);

        _toFastProperties(_utils.DEPRECATED_KEYS);

        _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);

        _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);

        const TYPES = Object.keys(_utils.VISITOR_KEYS)
          .concat(Object.keys(_utils.FLIPPED_ALIAS_KEYS))
          .concat(Object.keys(_utils.DEPRECATED_KEYS));
        exports.TYPES = TYPES;
      },
      {
        "./core": 159,
        "./experimental": 160,
        "./flow": 161,
        "./jsx": 163,
        "./misc": 164,
        "./placeholders": 165,
        "./typescript": 166,
        "./utils": 167,
        "to-fast-properties": 441,
      },
    ],
    163: [
      function (require, module, exports) {
        "use strict";

        var _utils = require("./utils");

        (0, _utils.default)("JSXAttribute", {
          visitor: ["name", "value"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXNamespacedName"
              ),
            },
            value: {
              optional: true,
              validate: (0, _utils.assertNodeType)(
                "JSXElement",
                "JSXFragment",
                "StringLiteral",
                "JSXExpressionContainer"
              ),
            },
          },
        });
        (0, _utils.default)("JSXClosingElement", {
          visitor: ["name"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXMemberExpression",
                "JSXNamespacedName"
              ),
            },
          },
        });
        (0, _utils.default)("JSXElement", {
          builder: [
            "openingElement",
            "closingElement",
            "children",
            "selfClosing",
          ],
          visitor: ["openingElement", "children", "closingElement"],
          aliases: ["JSX", "Immutable", "Expression"],
          fields: {
            openingElement: {
              validate: (0, _utils.assertNodeType)("JSXOpeningElement"),
            },
            closingElement: {
              optional: true,
              validate: (0, _utils.assertNodeType)("JSXClosingElement"),
            },
            children: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXText",
                    "JSXExpressionContainer",
                    "JSXSpreadChild",
                    "JSXElement",
                    "JSXFragment"
                  )
                )
              ),
            },
            selfClosing: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
          },
        });
        (0, _utils.default)("JSXEmptyExpression", {
          aliases: ["JSX"],
        });
        (0, _utils.default)("JSXExpressionContainer", {
          visitor: ["expression"],
          aliases: ["JSX", "Immutable"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)(
                "Expression",
                "JSXEmptyExpression"
              ),
            },
          },
        });
        (0, _utils.default)("JSXSpreadChild", {
          visitor: ["expression"],
          aliases: ["JSX", "Immutable"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)("Expression"),
            },
          },
        });
        (0, _utils.default)("JSXIdentifier", {
          builder: ["name"],
          aliases: ["JSX"],
          fields: {
            name: {
              validate: (0, _utils.assertValueType)("string"),
            },
          },
        });
        (0, _utils.default)("JSXMemberExpression", {
          visitor: ["object", "property"],
          aliases: ["JSX"],
          fields: {
            object: {
              validate: (0, _utils.assertNodeType)(
                "JSXMemberExpression",
                "JSXIdentifier"
              ),
            },
            property: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier"),
            },
          },
        });
        (0, _utils.default)("JSXNamespacedName", {
          visitor: ["namespace", "name"],
          aliases: ["JSX"],
          fields: {
            namespace: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier"),
            },
            name: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier"),
            },
          },
        });
        (0, _utils.default)("JSXOpeningElement", {
          builder: ["name", "attributes", "selfClosing"],
          visitor: ["name", "attributes"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXMemberExpression",
                "JSXNamespacedName"
              ),
            },
            selfClosing: {
              default: false,
            },
            attributes: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXAttribute",
                    "JSXSpreadAttribute"
                  )
                )
              ),
            },
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterInstantiation",
                "TSTypeParameterInstantiation"
              ),
              optional: true,
            },
          },
        });
        (0, _utils.default)("JSXSpreadAttribute", {
          visitor: ["argument"],
          aliases: ["JSX"],
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression"),
            },
          },
        });
        (0, _utils.default)("JSXText", {
          aliases: ["JSX", "Immutable"],
          builder: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("string"),
            },
          },
        });
        (0, _utils.default)("JSXFragment", {
          builder: ["openingFragment", "closingFragment", "children"],
          visitor: ["openingFragment", "children", "closingFragment"],
          aliases: ["JSX", "Immutable", "Expression"],
          fields: {
            openingFragment: {
              validate: (0, _utils.assertNodeType)("JSXOpeningFragment"),
            },
            closingFragment: {
              validate: (0, _utils.assertNodeType)("JSXClosingFragment"),
            },
            children: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXText",
                    "JSXExpressionContainer",
                    "JSXSpreadChild",
                    "JSXElement",
                    "JSXFragment"
                  )
                )
              ),
            },
          },
        });
        (0, _utils.default)("JSXOpeningFragment", {
          aliases: ["JSX", "Immutable"],
        });
        (0, _utils.default)("JSXClosingFragment", {
          aliases: ["JSX", "Immutable"],
        });
      },
      { "./utils": 167 },
    ],
    164: [
      function (require, module, exports) {
        "use strict";

        var _utils = require("./utils");

        var _placeholders = require("./placeholders");

        {
          (0, _utils.default)("Noop", {
            visitor: [],
          });
        }
        (0, _utils.default)("Placeholder", {
          visitor: [],
          builder: ["expectedNode", "name"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)("Identifier"),
            },
            expectedNode: {
              validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS),
            },
          },
        });
        (0, _utils.default)("V8IntrinsicIdentifier", {
          builder: ["name"],
          fields: {
            name: {
              validate: (0, _utils.assertValueType)("string"),
            },
          },
        });
      },
      { "./placeholders": 165, "./utils": 167 },
    ],
    165: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.PLACEHOLDERS_FLIPPED_ALIAS =
          exports.PLACEHOLDERS_ALIAS =
          exports.PLACEHOLDERS =
            void 0;

        var _utils = require("./utils");

        const PLACEHOLDERS = [
          "Identifier",
          "StringLiteral",
          "Expression",
          "Statement",
          "Declaration",
          "BlockStatement",
          "ClassBody",
          "Pattern",
        ];
        exports.PLACEHOLDERS = PLACEHOLDERS;
        const PLACEHOLDERS_ALIAS = {
          Declaration: ["Statement"],
          Pattern: ["PatternLike", "LVal"],
        };
        exports.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;

        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
        }

        const PLACEHOLDERS_FLIPPED_ALIAS = {};
        exports.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS;
        Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            if (
              !Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)
            ) {
              PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
            }

            PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      },
      { "./utils": 167 },
    ],
    166: [
      function (require, module, exports) {
        "use strict";

        var _utils = require("./utils");

        var _core = require("./core");

        var _is = require("../validators/is");

        const bool = (0, _utils.assertValueType)("boolean");
        const tSFunctionTypeAnnotationCommon = {
          returnType: {
            validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
            optional: true,
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)(
              "TSTypeParameterDeclaration",
              "Noop"
            ),
            optional: true,
          },
        };
        (0, _utils.default)("TSParameterProperty", {
          aliases: ["LVal"],
          visitor: ["parameter"],
          fields: {
            accessibility: {
              validate: (0, _utils.assertOneOf)(
                "public",
                "private",
                "protected"
              ),
              optional: true,
            },
            readonly: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            parameter: {
              validate: (0, _utils.assertNodeType)(
                "Identifier",
                "AssignmentPattern"
              ),
            },
            override: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true,
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true,
            },
          },
        });
        (0, _utils.default)("TSDeclareFunction", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "params", "returnType"],
          fields: Object.assign(
            {},
            _core.functionDeclarationCommon,
            tSFunctionTypeAnnotationCommon
          ),
        });
        (0, _utils.default)("TSDeclareMethod", {
          visitor: [
            "decorators",
            "key",
            "typeParameters",
            "params",
            "returnType",
          ],
          fields: Object.assign(
            {},
            _core.classMethodOrDeclareMethodCommon,
            tSFunctionTypeAnnotationCommon
          ),
        });
        (0, _utils.default)("TSQualifiedName", {
          aliases: ["TSEntityName"],
          visitor: ["left", "right"],
          fields: {
            left: (0, _utils.validateType)("TSEntityName"),
            right: (0, _utils.validateType)("Identifier"),
          },
        });
        const signatureDeclarationCommon = {
          typeParameters: (0, _utils.validateOptionalType)(
            "TSTypeParameterDeclaration"
          ),
          parameters: (0, _utils.validateArrayOfType)([
            "Identifier",
            "RestElement",
          ]),
          typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
        };
        const callConstructSignatureDeclaration = {
          aliases: ["TSTypeElement"],
          visitor: ["typeParameters", "parameters", "typeAnnotation"],
          fields: signatureDeclarationCommon,
        };
        (0, _utils.default)(
          "TSCallSignatureDeclaration",
          callConstructSignatureDeclaration
        );
        (0, _utils.default)(
          "TSConstructSignatureDeclaration",
          callConstructSignatureDeclaration
        );
        const namedTypeElementCommon = {
          key: (0, _utils.validateType)("Expression"),
          computed: (0, _utils.validate)(bool),
          optional: (0, _utils.validateOptional)(bool),
        };
        (0, _utils.default)("TSPropertySignature", {
          aliases: ["TSTypeElement"],
          visitor: ["key", "typeAnnotation", "initializer"],
          fields: Object.assign({}, namedTypeElementCommon, {
            readonly: (0, _utils.validateOptional)(bool),
            typeAnnotation: (0, _utils.validateOptionalType)(
              "TSTypeAnnotation"
            ),
            initializer: (0, _utils.validateOptionalType)("Expression"),
            kind: {
              validate: (0, _utils.assertOneOf)("get", "set"),
            },
          }),
        });
        (0, _utils.default)("TSMethodSignature", {
          aliases: ["TSTypeElement"],
          visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
          fields: Object.assign(
            {},
            signatureDeclarationCommon,
            namedTypeElementCommon,
            {
              kind: {
                validate: (0, _utils.assertOneOf)("method", "get", "set"),
              },
            }
          ),
        });
        (0, _utils.default)("TSIndexSignature", {
          aliases: ["TSTypeElement"],
          visitor: ["parameters", "typeAnnotation"],
          fields: {
            readonly: (0, _utils.validateOptional)(bool),
            static: (0, _utils.validateOptional)(bool),
            parameters: (0, _utils.validateArrayOfType)("Identifier"),
            typeAnnotation: (0, _utils.validateOptionalType)(
              "TSTypeAnnotation"
            ),
          },
        });
        const tsKeywordTypes = [
          "TSAnyKeyword",
          "TSBooleanKeyword",
          "TSBigIntKeyword",
          "TSIntrinsicKeyword",
          "TSNeverKeyword",
          "TSNullKeyword",
          "TSNumberKeyword",
          "TSObjectKeyword",
          "TSStringKeyword",
          "TSSymbolKeyword",
          "TSUndefinedKeyword",
          "TSUnknownKeyword",
          "TSVoidKeyword",
        ];

        for (const type of tsKeywordTypes) {
          (0, _utils.default)(type, {
            aliases: ["TSType", "TSBaseType"],
            visitor: [],
            fields: {},
          });
        }

        (0, _utils.default)("TSThisType", {
          aliases: ["TSType", "TSBaseType"],
          visitor: [],
          fields: {},
        });
        const fnOrCtrBase = {
          aliases: ["TSType"],
          visitor: ["typeParameters", "parameters", "typeAnnotation"],
        };
        (0, _utils.default)(
          "TSFunctionType",
          Object.assign({}, fnOrCtrBase, {
            fields: signatureDeclarationCommon,
          })
        );
        (0, _utils.default)(
          "TSConstructorType",
          Object.assign({}, fnOrCtrBase, {
            fields: Object.assign({}, signatureDeclarationCommon, {
              abstract: (0, _utils.validateOptional)(bool),
            }),
          })
        );
        (0, _utils.default)("TSTypeReference", {
          aliases: ["TSType"],
          visitor: ["typeName", "typeParameters"],
          fields: {
            typeName: (0, _utils.validateType)("TSEntityName"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterInstantiation"
            ),
          },
        });
        (0, _utils.default)("TSTypePredicate", {
          aliases: ["TSType"],
          visitor: ["parameterName", "typeAnnotation"],
          builder: ["parameterName", "typeAnnotation", "asserts"],
          fields: {
            parameterName: (0, _utils.validateType)([
              "Identifier",
              "TSThisType",
            ]),
            typeAnnotation: (0, _utils.validateOptionalType)(
              "TSTypeAnnotation"
            ),
            asserts: (0, _utils.validateOptional)(bool),
          },
        });
        (0, _utils.default)("TSTypeQuery", {
          aliases: ["TSType"],
          visitor: ["exprName"],
          fields: {
            exprName: (0, _utils.validateType)([
              "TSEntityName",
              "TSImportType",
            ]),
          },
        });
        (0, _utils.default)("TSTypeLiteral", {
          aliases: ["TSType"],
          visitor: ["members"],
          fields: {
            members: (0, _utils.validateArrayOfType)("TSTypeElement"),
          },
        });
        (0, _utils.default)("TSArrayType", {
          aliases: ["TSType"],
          visitor: ["elementType"],
          fields: {
            elementType: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSTupleType", {
          aliases: ["TSType"],
          visitor: ["elementTypes"],
          fields: {
            elementTypes: (0, _utils.validateArrayOfType)([
              "TSType",
              "TSNamedTupleMember",
            ]),
          },
        });
        (0, _utils.default)("TSOptionalType", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSRestType", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSNamedTupleMember", {
          visitor: ["label", "elementType"],
          builder: ["label", "elementType", "optional"],
          fields: {
            label: (0, _utils.validateType)("Identifier"),
            optional: {
              validate: bool,
              default: false,
            },
            elementType: (0, _utils.validateType)("TSType"),
          },
        });
        const unionOrIntersection = {
          aliases: ["TSType"],
          visitor: ["types"],
          fields: {
            types: (0, _utils.validateArrayOfType)("TSType"),
          },
        };
        (0, _utils.default)("TSUnionType", unionOrIntersection);
        (0, _utils.default)("TSIntersectionType", unionOrIntersection);
        (0, _utils.default)("TSConditionalType", {
          aliases: ["TSType"],
          visitor: ["checkType", "extendsType", "trueType", "falseType"],
          fields: {
            checkType: (0, _utils.validateType)("TSType"),
            extendsType: (0, _utils.validateType)("TSType"),
            trueType: (0, _utils.validateType)("TSType"),
            falseType: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSInferType", {
          aliases: ["TSType"],
          visitor: ["typeParameter"],
          fields: {
            typeParameter: (0, _utils.validateType)("TSTypeParameter"),
          },
        });
        (0, _utils.default)("TSParenthesizedType", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSTypeOperator", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            operator: (0, _utils.validate)(
              (0, _utils.assertValueType)("string")
            ),
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSIndexedAccessType", {
          aliases: ["TSType"],
          visitor: ["objectType", "indexType"],
          fields: {
            objectType: (0, _utils.validateType)("TSType"),
            indexType: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSMappedType", {
          aliases: ["TSType"],
          visitor: ["typeParameter", "typeAnnotation", "nameType"],
          fields: {
            readonly: (0, _utils.validateOptional)(bool),
            typeParameter: (0, _utils.validateType)("TSTypeParameter"),
            optional: (0, _utils.validateOptional)(bool),
            typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
            nameType: (0, _utils.validateOptionalType)("TSType"),
          },
        });
        (0, _utils.default)("TSLiteralType", {
          aliases: ["TSType", "TSBaseType"],
          visitor: ["literal"],
          fields: {
            literal: {
              validate: (function () {
                const unaryExpression = (0, _utils.assertNodeType)(
                  "NumericLiteral",
                  "BigIntLiteral"
                );
                const unaryOperator = (0, _utils.assertOneOf)("-");
                const literal = (0, _utils.assertNodeType)(
                  "NumericLiteral",
                  "StringLiteral",
                  "BooleanLiteral",
                  "BigIntLiteral"
                );

                function validator(parent, key, node) {
                  if ((0, _is.default)("UnaryExpression", node)) {
                    unaryOperator(node, "operator", node.operator);
                    unaryExpression(node, "argument", node.argument);
                  } else {
                    literal(parent, key, node);
                  }
                }

                validator.oneOfNodeTypes = [
                  "NumericLiteral",
                  "StringLiteral",
                  "BooleanLiteral",
                  "BigIntLiteral",
                  "UnaryExpression",
                ];
                return validator;
              })(),
            },
          },
        });
        (0, _utils.default)("TSExpressionWithTypeArguments", {
          aliases: ["TSType"],
          visitor: ["expression", "typeParameters"],
          fields: {
            expression: (0, _utils.validateType)("TSEntityName"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterInstantiation"
            ),
          },
        });
        (0, _utils.default)("TSInterfaceDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "extends", "body"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterDeclaration"
            ),
            extends: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("TSExpressionWithTypeArguments")
            ),
            body: (0, _utils.validateType)("TSInterfaceBody"),
          },
        });
        (0, _utils.default)("TSInterfaceBody", {
          visitor: ["body"],
          fields: {
            body: (0, _utils.validateArrayOfType)("TSTypeElement"),
          },
        });
        (0, _utils.default)("TSTypeAliasDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "typeAnnotation"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterDeclaration"
            ),
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSAsExpression", {
          aliases: ["Expression"],
          visitor: ["expression", "typeAnnotation"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
            typeAnnotation: (0, _utils.validateType)("TSType"),
          },
        });
        (0, _utils.default)("TSTypeAssertion", {
          aliases: ["Expression"],
          visitor: ["typeAnnotation", "expression"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType"),
            expression: (0, _utils.validateType)("Expression"),
          },
        });
        (0, _utils.default)("TSEnumDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "members"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            const: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            members: (0, _utils.validateArrayOfType)("TSEnumMember"),
            initializer: (0, _utils.validateOptionalType)("Expression"),
          },
        });
        (0, _utils.default)("TSEnumMember", {
          visitor: ["id", "initializer"],
          fields: {
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            initializer: (0, _utils.validateOptionalType)("Expression"),
          },
        });
        (0, _utils.default)("TSModuleDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "body"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            global: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            body: (0, _utils.validateType)([
              "TSModuleBlock",
              "TSModuleDeclaration",
            ]),
          },
        });
        (0, _utils.default)("TSModuleBlock", {
          aliases: ["Scopable", "Block", "BlockParent"],
          visitor: ["body"],
          fields: {
            body: (0, _utils.validateArrayOfType)("Statement"),
          },
        });
        (0, _utils.default)("TSImportType", {
          aliases: ["TSType"],
          visitor: ["argument", "qualifier", "typeParameters"],
          fields: {
            argument: (0, _utils.validateType)("StringLiteral"),
            qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterInstantiation"
            ),
          },
        });
        (0, _utils.default)("TSImportEqualsDeclaration", {
          aliases: ["Statement"],
          visitor: ["id", "moduleReference"],
          fields: {
            isExport: (0, _utils.validate)(bool),
            id: (0, _utils.validateType)("Identifier"),
            moduleReference: (0, _utils.validateType)([
              "TSEntityName",
              "TSExternalModuleReference",
            ]),
            importKind: {
              validate: (0, _utils.assertOneOf)("type", "value"),
              optional: true,
            },
          },
        });
        (0, _utils.default)("TSExternalModuleReference", {
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("StringLiteral"),
          },
        });
        (0, _utils.default)("TSNonNullExpression", {
          aliases: ["Expression"],
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
          },
        });
        (0, _utils.default)("TSExportAssignment", {
          aliases: ["Statement"],
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
          },
        });
        (0, _utils.default)("TSNamespaceExportDeclaration", {
          aliases: ["Statement"],
          visitor: ["id"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
          },
        });
        (0, _utils.default)("TSTypeAnnotation", {
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: {
              validate: (0, _utils.assertNodeType)("TSType"),
            },
          },
        });
        (0, _utils.default)("TSTypeParameterInstantiation", {
          visitor: ["params"],
          fields: {
            params: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))
              ),
            },
          },
        });
        (0, _utils.default)("TSTypeParameterDeclaration", {
          visitor: ["params"],
          fields: {
            params: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("TSTypeParameter")
                )
              ),
            },
          },
        });
        (0, _utils.default)("TSTypeParameter", {
          builder: ["constraint", "default", "name"],
          visitor: ["constraint", "default"],
          fields: {
            name: {
              validate: (0, _utils.assertValueType)("string"),
            },
            constraint: {
              validate: (0, _utils.assertNodeType)("TSType"),
              optional: true,
            },
            default: {
              validate: (0, _utils.assertNodeType)("TSType"),
              optional: true,
            },
          },
        });
      },
      { "../validators/is": 185, "./core": 159, "./utils": 167 },
    ],
    167: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.validate = validate;
            exports.typeIs = typeIs;
            exports.validateType = validateType;
            exports.validateOptional = validateOptional;
            exports.validateOptionalType = validateOptionalType;
            exports.arrayOf = arrayOf;
            exports.arrayOfType = arrayOfType;
            exports.validateArrayOfType = validateArrayOfType;
            exports.assertEach = assertEach;
            exports.assertOneOf = assertOneOf;
            exports.assertNodeType = assertNodeType;
            exports.assertNodeOrValueType = assertNodeOrValueType;
            exports.assertValueType = assertValueType;
            exports.assertShape = assertShape;
            exports.assertOptionalChainStart = assertOptionalChainStart;
            exports.chain = chain;
            exports.default = defineType;
            exports.NODE_PARENT_VALIDATIONS =
              exports.DEPRECATED_KEYS =
              exports.BUILDER_KEYS =
              exports.NODE_FIELDS =
              exports.FLIPPED_ALIAS_KEYS =
              exports.ALIAS_KEYS =
              exports.VISITOR_KEYS =
                void 0;

            var _is = require("../validators/is");

            var _validate = require("../validators/validate");

            const VISITOR_KEYS = {};
            exports.VISITOR_KEYS = VISITOR_KEYS;
            const ALIAS_KEYS = {};
            exports.ALIAS_KEYS = ALIAS_KEYS;
            const FLIPPED_ALIAS_KEYS = {};
            exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
            const NODE_FIELDS = {};
            exports.NODE_FIELDS = NODE_FIELDS;
            const BUILDER_KEYS = {};
            exports.BUILDER_KEYS = BUILDER_KEYS;
            const DEPRECATED_KEYS = {};
            exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
            const NODE_PARENT_VALIDATIONS = {};
            exports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;

            function getType(val) {
              if (Array.isArray(val)) {
                return "array";
              } else if (val === null) {
                return "null";
              } else {
                return typeof val;
              }
            }

            function validate(validate) {
              return {
                validate,
              };
            }

            function typeIs(typeName) {
              return typeof typeName === "string"
                ? assertNodeType(typeName)
                : assertNodeType(...typeName);
            }

            function validateType(typeName) {
              return validate(typeIs(typeName));
            }

            function validateOptional(validate) {
              return {
                validate,
                optional: true,
              };
            }

            function validateOptionalType(typeName) {
              return {
                validate: typeIs(typeName),
                optional: true,
              };
            }

            function arrayOf(elementType) {
              return chain(assertValueType("array"), assertEach(elementType));
            }

            function arrayOfType(typeName) {
              return arrayOf(typeIs(typeName));
            }

            function validateArrayOfType(typeName) {
              return validate(arrayOfType(typeName));
            }

            function assertEach(callback) {
              function validator(node, key, val) {
                if (!Array.isArray(val)) return;

                for (let i = 0; i < val.length; i++) {
                  const subkey = `${key}[${i}]`;
                  const v = val[i];
                  callback(node, subkey, v);
                  if (process.env.BABEL_TYPES_8_BREAKING)
                    (0, _validate.validateChild)(node, subkey, v);
                }
              }

              validator.each = callback;
              return validator;
            }

            function assertOneOf(...values) {
              function validate(node, key, val) {
                if (values.indexOf(val) < 0) {
                  throw new TypeError(
                    `Property ${key} expected value to be one of ${JSON.stringify(
                      values
                    )} but got ${JSON.stringify(val)}`
                  );
                }
              }

              validate.oneOf = values;
              return validate;
            }

            function assertNodeType(...types) {
              function validate(node, key, val) {
                for (const type of types) {
                  if ((0, _is.default)(type, val)) {
                    (0, _validate.validateChild)(node, key, val);
                    return;
                  }
                }

                throw new TypeError(
                  `Property ${key} of ${
                    node.type
                  } expected node to be of a type ${JSON.stringify(
                    types
                  )} but instead got ${JSON.stringify(
                    val == null ? void 0 : val.type
                  )}`
                );
              }

              validate.oneOfNodeTypes = types;
              return validate;
            }

            function assertNodeOrValueType(...types) {
              function validate(node, key, val) {
                for (const type of types) {
                  if (getType(val) === type || (0, _is.default)(type, val)) {
                    (0, _validate.validateChild)(node, key, val);
                    return;
                  }
                }

                throw new TypeError(
                  `Property ${key} of ${
                    node.type
                  } expected node to be of a type ${JSON.stringify(
                    types
                  )} but instead got ${JSON.stringify(
                    val == null ? void 0 : val.type
                  )}`
                );
              }

              validate.oneOfNodeOrValueTypes = types;
              return validate;
            }

            function assertValueType(type) {
              function validate(node, key, val) {
                const valid = getType(val) === type;

                if (!valid) {
                  throw new TypeError(
                    `Property ${key} expected type of ${type} but got ${getType(
                      val
                    )}`
                  );
                }
              }

              validate.type = type;
              return validate;
            }

            function assertShape(shape) {
              function validate(node, key, val) {
                const errors = [];

                for (const property of Object.keys(shape)) {
                  try {
                    (0, _validate.validateField)(
                      node,
                      property,
                      val[property],
                      shape[property]
                    );
                  } catch (error) {
                    if (error instanceof TypeError) {
                      errors.push(error.message);
                      continue;
                    }

                    throw error;
                  }
                }

                if (errors.length) {
                  throw new TypeError(
                    `Property ${key} of ${
                      node.type
                    } expected to have the following:\n${errors.join("\n")}`
                  );
                }
              }

              validate.shapeOf = shape;
              return validate;
            }

            function assertOptionalChainStart() {
              function validate(node) {
                var _current;

                let current = node;

                while (node) {
                  const { type } = current;

                  if (type === "OptionalCallExpression") {
                    if (current.optional) return;
                    current = current.callee;
                    continue;
                  }

                  if (type === "OptionalMemberExpression") {
                    if (current.optional) return;
                    current = current.object;
                    continue;
                  }

                  break;
                }

                throw new TypeError(
                  `Non-optional ${
                    node.type
                  } must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${
                    (_current = current) == null ? void 0 : _current.type
                  }`
                );
              }

              return validate;
            }

            function chain(...fns) {
              function validate(...args) {
                for (const fn of fns) {
                  fn(...args);
                }
              }

              validate.chainOf = fns;

              if (
                fns.length >= 2 &&
                "type" in fns[0] &&
                fns[0].type === "array" &&
                !("each" in fns[1])
              ) {
                throw new Error(
                  `An assertValueType("array") validator can only be followed by an assertEach(...) validator.`
                );
              }

              return validate;
            }

            const validTypeOpts = [
              "aliases",
              "builder",
              "deprecatedAlias",
              "fields",
              "inherits",
              "visitor",
              "validate",
            ];
            const validFieldKeys = ["default", "optional", "validate"];

            function defineType(type, opts = {}) {
              const inherits = (opts.inherits && store[opts.inherits]) || {};
              let fields = opts.fields;

              if (!fields) {
                fields = {};

                if (inherits.fields) {
                  const keys = Object.getOwnPropertyNames(inherits.fields);

                  for (const key of keys) {
                    const field = inherits.fields[key];
                    const def = field.default;

                    if (
                      Array.isArray(def)
                        ? def.length > 0
                        : def && typeof def === "object"
                    ) {
                      throw new Error(
                        "field defaults can only be primitives or empty arrays currently"
                      );
                    }

                    fields[key] = {
                      default: Array.isArray(def) ? [] : def,
                      optional: field.optional,
                      validate: field.validate,
                    };
                  }
                }
              }

              const visitor = opts.visitor || inherits.visitor || [];
              const aliases = opts.aliases || inherits.aliases || [];
              const builder =
                opts.builder || inherits.builder || opts.visitor || [];

              for (const k of Object.keys(opts)) {
                if (validTypeOpts.indexOf(k) === -1) {
                  throw new Error(`Unknown type option "${k}" on ${type}`);
                }
              }

              if (opts.deprecatedAlias) {
                DEPRECATED_KEYS[opts.deprecatedAlias] = type;
              }

              for (const key of visitor.concat(builder)) {
                fields[key] = fields[key] || {};
              }

              for (const key of Object.keys(fields)) {
                const field = fields[key];

                if (
                  field.default !== undefined &&
                  builder.indexOf(key) === -1
                ) {
                  field.optional = true;
                }

                if (field.default === undefined) {
                  field.default = null;
                } else if (!field.validate && field.default != null) {
                  field.validate = assertValueType(getType(field.default));
                }

                for (const k of Object.keys(field)) {
                  if (validFieldKeys.indexOf(k) === -1) {
                    throw new Error(
                      `Unknown field key "${k}" on ${type}.${key}`
                    );
                  }
                }
              }

              VISITOR_KEYS[type] = opts.visitor = visitor;
              BUILDER_KEYS[type] = opts.builder = builder;
              NODE_FIELDS[type] = opts.fields = fields;
              ALIAS_KEYS[type] = opts.aliases = aliases;
              aliases.forEach((alias) => {
                FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
                FLIPPED_ALIAS_KEYS[alias].push(type);
              });

              if (opts.validate) {
                NODE_PARENT_VALIDATIONS[type] = opts.validate;
              }

              store[type] = opts;
            }

            const store = {};
          }).call(this);
        }).call(this, require("_process"));
      },
      { "../validators/is": 185, "../validators/validate": 203, _process: 425 },
    ],
    168: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        var _exportNames = {
          react: true,
          assertNode: true,
          createTypeAnnotationBasedOnTypeof: true,
          createUnionTypeAnnotation: true,
          createFlowUnionType: true,
          createTSUnionType: true,
          cloneNode: true,
          clone: true,
          cloneDeep: true,
          cloneDeepWithoutLoc: true,
          cloneWithoutLoc: true,
          addComment: true,
          addComments: true,
          inheritInnerComments: true,
          inheritLeadingComments: true,
          inheritsComments: true,
          inheritTrailingComments: true,
          removeComments: true,
          ensureBlock: true,
          toBindingIdentifierName: true,
          toBlock: true,
          toComputedKey: true,
          toExpression: true,
          toIdentifier: true,
          toKeyAlias: true,
          toSequenceExpression: true,
          toStatement: true,
          valueToNode: true,
          appendToMemberExpression: true,
          inherits: true,
          prependToMemberExpression: true,
          removeProperties: true,
          removePropertiesDeep: true,
          removeTypeDuplicates: true,
          getBindingIdentifiers: true,
          getOuterBindingIdentifiers: true,
          traverse: true,
          traverseFast: true,
          shallowEqual: true,
          is: true,
          isBinding: true,
          isBlockScoped: true,
          isImmutable: true,
          isLet: true,
          isNode: true,
          isNodesEquivalent: true,
          isPlaceholderType: true,
          isReferenced: true,
          isScope: true,
          isSpecifierDefault: true,
          isType: true,
          isValidES3Identifier: true,
          isValidIdentifier: true,
          isVar: true,
          matchesPattern: true,
          validate: true,
          buildMatchMemberExpression: true,
        };
        Object.defineProperty(exports, "assertNode", {
          enumerable: true,
          get: function () {
            return _assertNode.default;
          },
        });
        Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
          enumerable: true,
          get: function () {
            return _createTypeAnnotationBasedOnTypeof.default;
          },
        });
        Object.defineProperty(exports, "createUnionTypeAnnotation", {
          enumerable: true,
          get: function () {
            return _createFlowUnionType.default;
          },
        });
        Object.defineProperty(exports, "createFlowUnionType", {
          enumerable: true,
          get: function () {
            return _createFlowUnionType.default;
          },
        });
        Object.defineProperty(exports, "createTSUnionType", {
          enumerable: true,
          get: function () {
            return _createTSUnionType.default;
          },
        });
        Object.defineProperty(exports, "cloneNode", {
          enumerable: true,
          get: function () {
            return _cloneNode.default;
          },
        });
        Object.defineProperty(exports, "clone", {
          enumerable: true,
          get: function () {
            return _clone.default;
          },
        });
        Object.defineProperty(exports, "cloneDeep", {
          enumerable: true,
          get: function () {
            return _cloneDeep.default;
          },
        });
        Object.defineProperty(exports, "cloneDeepWithoutLoc", {
          enumerable: true,
          get: function () {
            return _cloneDeepWithoutLoc.default;
          },
        });
        Object.defineProperty(exports, "cloneWithoutLoc", {
          enumerable: true,
          get: function () {
            return _cloneWithoutLoc.default;
          },
        });
        Object.defineProperty(exports, "addComment", {
          enumerable: true,
          get: function () {
            return _addComment.default;
          },
        });
        Object.defineProperty(exports, "addComments", {
          enumerable: true,
          get: function () {
            return _addComments.default;
          },
        });
        Object.defineProperty(exports, "inheritInnerComments", {
          enumerable: true,
          get: function () {
            return _inheritInnerComments.default;
          },
        });
        Object.defineProperty(exports, "inheritLeadingComments", {
          enumerable: true,
          get: function () {
            return _inheritLeadingComments.default;
          },
        });
        Object.defineProperty(exports, "inheritsComments", {
          enumerable: true,
          get: function () {
            return _inheritsComments.default;
          },
        });
        Object.defineProperty(exports, "inheritTrailingComments", {
          enumerable: true,
          get: function () {
            return _inheritTrailingComments.default;
          },
        });
        Object.defineProperty(exports, "removeComments", {
          enumerable: true,
          get: function () {
            return _removeComments.default;
          },
        });
        Object.defineProperty(exports, "ensureBlock", {
          enumerable: true,
          get: function () {
            return _ensureBlock.default;
          },
        });
        Object.defineProperty(exports, "toBindingIdentifierName", {
          enumerable: true,
          get: function () {
            return _toBindingIdentifierName.default;
          },
        });
        Object.defineProperty(exports, "toBlock", {
          enumerable: true,
          get: function () {
            return _toBlock.default;
          },
        });
        Object.defineProperty(exports, "toComputedKey", {
          enumerable: true,
          get: function () {
            return _toComputedKey.default;
          },
        });
        Object.defineProperty(exports, "toExpression", {
          enumerable: true,
          get: function () {
            return _toExpression.default;
          },
        });
        Object.defineProperty(exports, "toIdentifier", {
          enumerable: true,
          get: function () {
            return _toIdentifier.default;
          },
        });
        Object.defineProperty(exports, "toKeyAlias", {
          enumerable: true,
          get: function () {
            return _toKeyAlias.default;
          },
        });
        Object.defineProperty(exports, "toSequenceExpression", {
          enumerable: true,
          get: function () {
            return _toSequenceExpression.default;
          },
        });
        Object.defineProperty(exports, "toStatement", {
          enumerable: true,
          get: function () {
            return _toStatement.default;
          },
        });
        Object.defineProperty(exports, "valueToNode", {
          enumerable: true,
          get: function () {
            return _valueToNode.default;
          },
        });
        Object.defineProperty(exports, "appendToMemberExpression", {
          enumerable: true,
          get: function () {
            return _appendToMemberExpression.default;
          },
        });
        Object.defineProperty(exports, "inherits", {
          enumerable: true,
          get: function () {
            return _inherits.default;
          },
        });
        Object.defineProperty(exports, "prependToMemberExpression", {
          enumerable: true,
          get: function () {
            return _prependToMemberExpression.default;
          },
        });
        Object.defineProperty(exports, "removeProperties", {
          enumerable: true,
          get: function () {
            return _removeProperties.default;
          },
        });
        Object.defineProperty(exports, "removePropertiesDeep", {
          enumerable: true,
          get: function () {
            return _removePropertiesDeep.default;
          },
        });
        Object.defineProperty(exports, "removeTypeDuplicates", {
          enumerable: true,
          get: function () {
            return _removeTypeDuplicates.default;
          },
        });
        Object.defineProperty(exports, "getBindingIdentifiers", {
          enumerable: true,
          get: function () {
            return _getBindingIdentifiers.default;
          },
        });
        Object.defineProperty(exports, "getOuterBindingIdentifiers", {
          enumerable: true,
          get: function () {
            return _getOuterBindingIdentifiers.default;
          },
        });
        Object.defineProperty(exports, "traverse", {
          enumerable: true,
          get: function () {
            return _traverse.default;
          },
        });
        Object.defineProperty(exports, "traverseFast", {
          enumerable: true,
          get: function () {
            return _traverseFast.default;
          },
        });
        Object.defineProperty(exports, "shallowEqual", {
          enumerable: true,
          get: function () {
            return _shallowEqual.default;
          },
        });
        Object.defineProperty(exports, "is", {
          enumerable: true,
          get: function () {
            return _is.default;
          },
        });
        Object.defineProperty(exports, "isBinding", {
          enumerable: true,
          get: function () {
            return _isBinding.default;
          },
        });
        Object.defineProperty(exports, "isBlockScoped", {
          enumerable: true,
          get: function () {
            return _isBlockScoped.default;
          },
        });
        Object.defineProperty(exports, "isImmutable", {
          enumerable: true,
          get: function () {
            return _isImmutable.default;
          },
        });
        Object.defineProperty(exports, "isLet", {
          enumerable: true,
          get: function () {
            return _isLet.default;
          },
        });
        Object.defineProperty(exports, "isNode", {
          enumerable: true,
          get: function () {
            return _isNode.default;
          },
        });
        Object.defineProperty(exports, "isNodesEquivalent", {
          enumerable: true,
          get: function () {
            return _isNodesEquivalent.default;
          },
        });
        Object.defineProperty(exports, "isPlaceholderType", {
          enumerable: true,
          get: function () {
            return _isPlaceholderType.default;
          },
        });
        Object.defineProperty(exports, "isReferenced", {
          enumerable: true,
          get: function () {
            return _isReferenced.default;
          },
        });
        Object.defineProperty(exports, "isScope", {
          enumerable: true,
          get: function () {
            return _isScope.default;
          },
        });
        Object.defineProperty(exports, "isSpecifierDefault", {
          enumerable: true,
          get: function () {
            return _isSpecifierDefault.default;
          },
        });
        Object.defineProperty(exports, "isType", {
          enumerable: true,
          get: function () {
            return _isType.default;
          },
        });
        Object.defineProperty(exports, "isValidES3Identifier", {
          enumerable: true,
          get: function () {
            return _isValidES3Identifier.default;
          },
        });
        Object.defineProperty(exports, "isValidIdentifier", {
          enumerable: true,
          get: function () {
            return _isValidIdentifier.default;
          },
        });
        Object.defineProperty(exports, "isVar", {
          enumerable: true,
          get: function () {
            return _isVar.default;
          },
        });
        Object.defineProperty(exports, "matchesPattern", {
          enumerable: true,
          get: function () {
            return _matchesPattern.default;
          },
        });
        Object.defineProperty(exports, "validate", {
          enumerable: true,
          get: function () {
            return _validate.default;
          },
        });
        Object.defineProperty(exports, "buildMatchMemberExpression", {
          enumerable: true,
          get: function () {
            return _buildMatchMemberExpression.default;
          },
        });
        exports.react = void 0;

        var _isReactComponent = require("./validators/react/isReactComponent");

        var _isCompatTag = require("./validators/react/isCompatTag");

        var _buildChildren = require("./builders/react/buildChildren");

        var _assertNode = require("./asserts/assertNode");

        var _generated = require("./asserts/generated");

        Object.keys(_generated).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _generated[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _generated[key];
            },
          });
        });

        var _createTypeAnnotationBasedOnTypeof = require("./builders/flow/createTypeAnnotationBasedOnTypeof");

        var _createFlowUnionType = require("./builders/flow/createFlowUnionType");

        var _createTSUnionType = require("./builders/typescript/createTSUnionType");

        var _generated2 = require("./builders/generated");

        Object.keys(_generated2).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _generated2[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _generated2[key];
            },
          });
        });

        var _uppercase = require("./builders/generated/uppercase");

        Object.keys(_uppercase).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _uppercase[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _uppercase[key];
            },
          });
        });

        var _cloneNode = require("./clone/cloneNode");

        var _clone = require("./clone/clone");

        var _cloneDeep = require("./clone/cloneDeep");

        var _cloneDeepWithoutLoc = require("./clone/cloneDeepWithoutLoc");

        var _cloneWithoutLoc = require("./clone/cloneWithoutLoc");

        var _addComment = require("./comments/addComment");

        var _addComments = require("./comments/addComments");

        var _inheritInnerComments = require("./comments/inheritInnerComments");

        var _inheritLeadingComments = require("./comments/inheritLeadingComments");

        var _inheritsComments = require("./comments/inheritsComments");

        var _inheritTrailingComments = require("./comments/inheritTrailingComments");

        var _removeComments = require("./comments/removeComments");

        var _generated3 = require("./constants/generated");

        Object.keys(_generated3).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _generated3[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _generated3[key];
            },
          });
        });

        var _constants = require("./constants");

        Object.keys(_constants).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _constants[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _constants[key];
            },
          });
        });

        var _ensureBlock = require("./converters/ensureBlock");

        var _toBindingIdentifierName = require("./converters/toBindingIdentifierName");

        var _toBlock = require("./converters/toBlock");

        var _toComputedKey = require("./converters/toComputedKey");

        var _toExpression = require("./converters/toExpression");

        var _toIdentifier = require("./converters/toIdentifier");

        var _toKeyAlias = require("./converters/toKeyAlias");

        var _toSequenceExpression = require("./converters/toSequenceExpression");

        var _toStatement = require("./converters/toStatement");

        var _valueToNode = require("./converters/valueToNode");

        var _definitions = require("./definitions");

        Object.keys(_definitions).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _definitions[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _definitions[key];
            },
          });
        });

        var _appendToMemberExpression = require("./modifications/appendToMemberExpression");

        var _inherits = require("./modifications/inherits");

        var _prependToMemberExpression = require("./modifications/prependToMemberExpression");

        var _removeProperties = require("./modifications/removeProperties");

        var _removePropertiesDeep = require("./modifications/removePropertiesDeep");

        var _removeTypeDuplicates = require("./modifications/flow/removeTypeDuplicates");

        var _getBindingIdentifiers = require("./retrievers/getBindingIdentifiers");

        var _getOuterBindingIdentifiers = require("./retrievers/getOuterBindingIdentifiers");

        var _traverse = require("./traverse/traverse");

        Object.keys(_traverse).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _traverse[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _traverse[key];
            },
          });
        });

        var _traverseFast = require("./traverse/traverseFast");

        var _shallowEqual = require("./utils/shallowEqual");

        var _is = require("./validators/is");

        var _isBinding = require("./validators/isBinding");

        var _isBlockScoped = require("./validators/isBlockScoped");

        var _isImmutable = require("./validators/isImmutable");

        var _isLet = require("./validators/isLet");

        var _isNode = require("./validators/isNode");

        var _isNodesEquivalent = require("./validators/isNodesEquivalent");

        var _isPlaceholderType = require("./validators/isPlaceholderType");

        var _isReferenced = require("./validators/isReferenced");

        var _isScope = require("./validators/isScope");

        var _isSpecifierDefault = require("./validators/isSpecifierDefault");

        var _isType = require("./validators/isType");

        var _isValidES3Identifier = require("./validators/isValidES3Identifier");

        var _isValidIdentifier = require("./validators/isValidIdentifier");

        var _isVar = require("./validators/isVar");

        var _matchesPattern = require("./validators/matchesPattern");

        var _validate = require("./validators/validate");

        var _buildMatchMemberExpression = require("./validators/buildMatchMemberExpression");

        var _generated4 = require("./validators/generated");

        Object.keys(_generated4).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _generated4[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _generated4[key];
            },
          });
        });

        var _generated5 = require("./ast-types/generated");

        Object.keys(_generated5).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          if (key in exports && exports[key] === _generated5[key]) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
              return _generated5[key];
            },
          });
        });
        const react = {
          isReactComponent: _isReactComponent.default,
          isCompatTag: _isCompatTag.default,
          buildChildren: _buildChildren.default,
        };
        exports.react = react;
      },
      {
        "./asserts/assertNode": 124,
        "./asserts/generated": 125,
        "./ast-types/generated": 126,
        "./builders/flow/createFlowUnionType": 128,
        "./builders/flow/createTypeAnnotationBasedOnTypeof": 129,
        "./builders/generated": 130,
        "./builders/generated/uppercase": 131,
        "./builders/react/buildChildren": 132,
        "./builders/typescript/createTSUnionType": 133,
        "./clone/clone": 134,
        "./clone/cloneDeep": 135,
        "./clone/cloneDeepWithoutLoc": 136,
        "./clone/cloneNode": 137,
        "./clone/cloneWithoutLoc": 138,
        "./comments/addComment": 139,
        "./comments/addComments": 140,
        "./comments/inheritInnerComments": 141,
        "./comments/inheritLeadingComments": 142,
        "./comments/inheritTrailingComments": 143,
        "./comments/inheritsComments": 144,
        "./comments/removeComments": 145,
        "./constants": 147,
        "./constants/generated": 146,
        "./converters/ensureBlock": 148,
        "./converters/toBindingIdentifierName": 150,
        "./converters/toBlock": 151,
        "./converters/toComputedKey": 152,
        "./converters/toExpression": 153,
        "./converters/toIdentifier": 154,
        "./converters/toKeyAlias": 155,
        "./converters/toSequenceExpression": 156,
        "./converters/toStatement": 157,
        "./converters/valueToNode": 158,
        "./definitions": 162,
        "./modifications/appendToMemberExpression": 169,
        "./modifications/flow/removeTypeDuplicates": 170,
        "./modifications/inherits": 171,
        "./modifications/prependToMemberExpression": 172,
        "./modifications/removeProperties": 173,
        "./modifications/removePropertiesDeep": 174,
        "./retrievers/getBindingIdentifiers": 176,
        "./retrievers/getOuterBindingIdentifiers": 177,
        "./traverse/traverse": 178,
        "./traverse/traverseFast": 179,
        "./utils/shallowEqual": 182,
        "./validators/buildMatchMemberExpression": 183,
        "./validators/generated": 184,
        "./validators/is": 185,
        "./validators/isBinding": 186,
        "./validators/isBlockScoped": 187,
        "./validators/isImmutable": 188,
        "./validators/isLet": 189,
        "./validators/isNode": 190,
        "./validators/isNodesEquivalent": 191,
        "./validators/isPlaceholderType": 192,
        "./validators/isReferenced": 193,
        "./validators/isScope": 194,
        "./validators/isSpecifierDefault": 195,
        "./validators/isType": 196,
        "./validators/isValidES3Identifier": 197,
        "./validators/isValidIdentifier": 198,
        "./validators/isVar": 199,
        "./validators/matchesPattern": 200,
        "./validators/react/isCompatTag": 201,
        "./validators/react/isReactComponent": 202,
        "./validators/validate": 203,
      },
    ],
    169: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = appendToMemberExpression;

        var _generated = require("../builders/generated");

        function appendToMemberExpression(member, append, computed = false) {
          member.object = (0, _generated.memberExpression)(
            member.object,
            member.property,
            member.computed
          );
          member.property = append;
          member.computed = !!computed;
          return member;
        }
      },
      { "../builders/generated": 130 },
    ],
    170: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = removeTypeDuplicates;

        var _generated = require("../../validators/generated");

        function getQualifiedName(node) {
          return (0, _generated.isIdentifier)(node)
            ? node.name
            : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }

        function removeTypeDuplicates(nodes) {
          const generics = {};
          const bases = {};
          const typeGroups = [];
          const types = [];

          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (!node) continue;

            if (types.indexOf(node) >= 0) {
              continue;
            }

            if ((0, _generated.isAnyTypeAnnotation)(node)) {
              return [node];
            }

            if ((0, _generated.isFlowBaseAnnotation)(node)) {
              bases[node.type] = node;
              continue;
            }

            if ((0, _generated.isUnionTypeAnnotation)(node)) {
              if (typeGroups.indexOf(node.types) < 0) {
                nodes = nodes.concat(node.types);
                typeGroups.push(node.types);
              }

              continue;
            }

            if ((0, _generated.isGenericTypeAnnotation)(node)) {
              const name = getQualifiedName(node.id);

              if (generics[name]) {
                let existing = generics[name];

                if (existing.typeParameters) {
                  if (node.typeParameters) {
                    existing.typeParameters.params = removeTypeDuplicates(
                      existing.typeParameters.params.concat(
                        node.typeParameters.params
                      )
                    );
                  }
                } else {
                  existing = node.typeParameters;
                }
              } else {
                generics[name] = node;
              }

              continue;
            }

            types.push(node);
          }

          for (const type of Object.keys(bases)) {
            types.push(bases[type]);
          }

          for (const name of Object.keys(generics)) {
            types.push(generics[name]);
          }

          return types;
        }
      },
      { "../../validators/generated": 184 },
    ],
    171: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inherits;

        var _constants = require("../constants");

        var _inheritsComments = require("../comments/inheritsComments");

        function inherits(child, parent) {
          if (!child || !parent) return child;

          for (const key of _constants.INHERIT_KEYS.optional) {
            if (child[key] == null) {
              child[key] = parent[key];
            }
          }

          for (const key of Object.keys(parent)) {
            if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
          }

          for (const key of _constants.INHERIT_KEYS.force) {
            child[key] = parent[key];
          }

          (0, _inheritsComments.default)(child, parent);
          return child;
        }
      },
      { "../comments/inheritsComments": 144, "../constants": 147 },
    ],
    172: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = prependToMemberExpression;

        var _generated = require("../builders/generated");

        function prependToMemberExpression(member, prepend) {
          member.object = (0, _generated.memberExpression)(
            prepend,
            member.object
          );
          return member;
        }
      },
      { "../builders/generated": 130 },
    ],
    173: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = removeProperties;

        var _constants = require("../constants");

        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];

        const CLEAR_KEYS_PLUS_COMMENTS = _constants.COMMENT_KEYS.concat([
          "comments",
        ]).concat(CLEAR_KEYS);

        function removeProperties(node, opts = {}) {
          const map = opts.preserveComments
            ? CLEAR_KEYS
            : CLEAR_KEYS_PLUS_COMMENTS;

          for (const key of map) {
            if (node[key] != null) node[key] = undefined;
          }

          for (const key of Object.keys(node)) {
            if (key[0] === "_" && node[key] != null) node[key] = undefined;
          }

          const symbols = Object.getOwnPropertySymbols(node);

          for (const sym of symbols) {
            node[sym] = null;
          }
        }
      },
      { "../constants": 147 },
    ],
    174: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = removePropertiesDeep;

        var _traverseFast = require("../traverse/traverseFast");

        var _removeProperties = require("./removeProperties");

        function removePropertiesDeep(tree, opts) {
          (0, _traverseFast.default)(tree, _removeProperties.default, opts);
          return tree;
        }
      },
      { "../traverse/traverseFast": 179, "./removeProperties": 173 },
    ],
    175: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = removeTypeDuplicates;

        var _generated = require("../../validators/generated");

        function removeTypeDuplicates(nodes) {
          const generics = {};
          const bases = {};
          const typeGroups = [];
          const types = [];

          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (!node) continue;

            if (types.indexOf(node) >= 0) {
              continue;
            }

            if ((0, _generated.isTSAnyKeyword)(node)) {
              return [node];
            }

            if ((0, _generated.isTSBaseType)(node)) {
              bases[node.type] = node;
              continue;
            }

            if ((0, _generated.isTSUnionType)(node)) {
              if (typeGroups.indexOf(node.types) < 0) {
                nodes = nodes.concat(node.types);
                typeGroups.push(node.types);
              }

              continue;
            }

            types.push(node);
          }

          for (const type of Object.keys(bases)) {
            types.push(bases[type]);
          }

          for (const name of Object.keys(generics)) {
            types.push(generics[name]);
          }

          return types;
        }
      },
      { "../../validators/generated": 184 },
    ],
    176: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = getBindingIdentifiers;

        var _generated = require("../validators/generated");

        function getBindingIdentifiers(node, duplicates, outerOnly) {
          let search = [].concat(node);
          const ids = Object.create(null);

          while (search.length) {
            const id = search.shift();
            if (!id) continue;
            const keys = getBindingIdentifiers.keys[id.type];

            if ((0, _generated.isIdentifier)(id)) {
              if (duplicates) {
                const _ids = (ids[id.name] = ids[id.name] || []);

                _ids.push(id);
              } else {
                ids[id.name] = id;
              }

              continue;
            }

            if (
              (0, _generated.isExportDeclaration)(id) &&
              !(0, _generated.isExportAllDeclaration)(id)
            ) {
              if ((0, _generated.isDeclaration)(id.declaration)) {
                search.push(id.declaration);
              }

              continue;
            }

            if (outerOnly) {
              if ((0, _generated.isFunctionDeclaration)(id)) {
                search.push(id.id);
                continue;
              }

              if ((0, _generated.isFunctionExpression)(id)) {
                continue;
              }
            }

            if (keys) {
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (id[key]) {
                  search = search.concat(id[key]);
                }
              }
            }
          }

          return ids;
        }

        getBindingIdentifiers.keys = {
          DeclareClass: ["id"],
          DeclareFunction: ["id"],
          DeclareModule: ["id"],
          DeclareVariable: ["id"],
          DeclareInterface: ["id"],
          DeclareTypeAlias: ["id"],
          DeclareOpaqueType: ["id"],
          InterfaceDeclaration: ["id"],
          TypeAlias: ["id"],
          OpaqueType: ["id"],
          CatchClause: ["param"],
          LabeledStatement: ["label"],
          UnaryExpression: ["argument"],
          AssignmentExpression: ["left"],
          ImportSpecifier: ["local"],
          ImportNamespaceSpecifier: ["local"],
          ImportDefaultSpecifier: ["local"],
          ImportDeclaration: ["specifiers"],
          ExportSpecifier: ["exported"],
          ExportNamespaceSpecifier: ["exported"],
          ExportDefaultSpecifier: ["exported"],
          FunctionDeclaration: ["id", "params"],
          FunctionExpression: ["id", "params"],
          ArrowFunctionExpression: ["params"],
          ObjectMethod: ["params"],
          ClassMethod: ["params"],
          ForInStatement: ["left"],
          ForOfStatement: ["left"],
          ClassDeclaration: ["id"],
          ClassExpression: ["id"],
          RestElement: ["argument"],
          UpdateExpression: ["argument"],
          ObjectProperty: ["value"],
          AssignmentPattern: ["left"],
          ArrayPattern: ["elements"],
          ObjectPattern: ["properties"],
          VariableDeclaration: ["declarations"],
          VariableDeclarator: ["id"],
        };
      },
      { "../validators/generated": 184 },
    ],
    177: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _getBindingIdentifiers = require("./getBindingIdentifiers");

        var _default = getOuterBindingIdentifiers;
        exports.default = _default;

        function getOuterBindingIdentifiers(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        }
      },
      { "./getBindingIdentifiers": 176 },
    ],
    178: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = traverse;

        var _definitions = require("../definitions");

        function traverse(node, handlers, state) {
          if (typeof handlers === "function") {
            handlers = {
              enter: handlers,
            };
          }

          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        }

        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys) return;
          if (enter) enter(node, ancestors, state);

          for (const key of keys) {
            const subNode = node[key];

            if (Array.isArray(subNode)) {
              for (let i = 0; i < subNode.length; i++) {
                const child = subNode[i];
                if (!child) continue;
                ancestors.push({
                  node,
                  key,
                  index: i,
                });
                traverseSimpleImpl(child, enter, exit, state, ancestors);
                ancestors.pop();
              }
            } else if (subNode) {
              ancestors.push({
                node,
                key,
              });
              traverseSimpleImpl(subNode, enter, exit, state, ancestors);
              ancestors.pop();
            }
          }

          if (exit) exit(node, ancestors, state);
        }
      },
      { "../definitions": 162 },
    ],
    179: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = traverseFast;

        var _definitions = require("../definitions");

        function traverseFast(node, enter, opts) {
          if (!node) return;
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys) return;
          opts = opts || {};
          enter(node, opts);

          for (const key of keys) {
            const subNode = node[key];

            if (Array.isArray(subNode)) {
              for (const node of subNode) {
                traverseFast(node, enter, opts);
              }
            } else {
              traverseFast(subNode, enter, opts);
            }
          }
        }
      },
      { "../definitions": 162 },
    ],
    180: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = inherit;

        function inherit(key, child, parent) {
          if (child && parent) {
            child[key] = Array.from(
              new Set([].concat(child[key], parent[key]).filter(Boolean))
            );
          }
        }
      },
      {},
    ],
    181: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = cleanJSXElementLiteralChild;

        var _generated = require("../../builders/generated");

        function cleanJSXElementLiteralChild(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;

          for (let i = 0; i < lines.length; i++) {
            if (lines[i].match(/[^ \t]/)) {
              lastNonEmptyLine = i;
            }
          }

          let str = "";

          for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const isFirstLine = i === 0;
            const isLastLine = i === lines.length - 1;
            const isLastNonEmptyLine = i === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");

            if (!isFirstLine) {
              trimmedLine = trimmedLine.replace(/^[ ]+/, "");
            }

            if (!isLastLine) {
              trimmedLine = trimmedLine.replace(/[ ]+$/, "");
            }

            if (trimmedLine) {
              if (!isLastNonEmptyLine) {
                trimmedLine += " ";
              }

              str += trimmedLine;
            }
          }

          if (str) args.push((0, _generated.stringLiteral)(str));
        }
      },
      { "../../builders/generated": 130 },
    ],
    182: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = shallowEqual;

        function shallowEqual(actual, expected) {
          const keys = Object.keys(expected);

          for (const key of keys) {
            if (actual[key] !== expected[key]) {
              return false;
            }
          }

          return true;
        }
      },
      {},
    ],
    183: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = buildMatchMemberExpression;

        var _matchesPattern = require("./matchesPattern");

        function buildMatchMemberExpression(match, allowPartial) {
          const parts = match.split(".");
          return (member) =>
            (0, _matchesPattern.default)(member, parts, allowPartial);
        }
      },
      { "./matchesPattern": 200 },
    ],
    184: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.isArrayExpression = isArrayExpression;
        exports.isAssignmentExpression = isAssignmentExpression;
        exports.isBinaryExpression = isBinaryExpression;
        exports.isInterpreterDirective = isInterpreterDirective;
        exports.isDirective = isDirective;
        exports.isDirectiveLiteral = isDirectiveLiteral;
        exports.isBlockStatement = isBlockStatement;
        exports.isBreakStatement = isBreakStatement;
        exports.isCallExpression = isCallExpression;
        exports.isCatchClause = isCatchClause;
        exports.isConditionalExpression = isConditionalExpression;
        exports.isContinueStatement = isContinueStatement;
        exports.isDebuggerStatement = isDebuggerStatement;
        exports.isDoWhileStatement = isDoWhileStatement;
        exports.isEmptyStatement = isEmptyStatement;
        exports.isExpressionStatement = isExpressionStatement;
        exports.isFile = isFile;
        exports.isForInStatement = isForInStatement;
        exports.isForStatement = isForStatement;
        exports.isFunctionDeclaration = isFunctionDeclaration;
        exports.isFunctionExpression = isFunctionExpression;
        exports.isIdentifier = isIdentifier;
        exports.isIfStatement = isIfStatement;
        exports.isLabeledStatement = isLabeledStatement;
        exports.isStringLiteral = isStringLiteral;
        exports.isNumericLiteral = isNumericLiteral;
        exports.isNullLiteral = isNullLiteral;
        exports.isBooleanLiteral = isBooleanLiteral;
        exports.isRegExpLiteral = isRegExpLiteral;
        exports.isLogicalExpression = isLogicalExpression;
        exports.isMemberExpression = isMemberExpression;
        exports.isNewExpression = isNewExpression;
        exports.isProgram = isProgram;
        exports.isObjectExpression = isObjectExpression;
        exports.isObjectMethod = isObjectMethod;
        exports.isObjectProperty = isObjectProperty;
        exports.isRestElement = isRestElement;
        exports.isReturnStatement = isReturnStatement;
        exports.isSequenceExpression = isSequenceExpression;
        exports.isParenthesizedExpression = isParenthesizedExpression;
        exports.isSwitchCase = isSwitchCase;
        exports.isSwitchStatement = isSwitchStatement;
        exports.isThisExpression = isThisExpression;
        exports.isThrowStatement = isThrowStatement;
        exports.isTryStatement = isTryStatement;
        exports.isUnaryExpression = isUnaryExpression;
        exports.isUpdateExpression = isUpdateExpression;
        exports.isVariableDeclaration = isVariableDeclaration;
        exports.isVariableDeclarator = isVariableDeclarator;
        exports.isWhileStatement = isWhileStatement;
        exports.isWithStatement = isWithStatement;
        exports.isAssignmentPattern = isAssignmentPattern;
        exports.isArrayPattern = isArrayPattern;
        exports.isArrowFunctionExpression = isArrowFunctionExpression;
        exports.isClassBody = isClassBody;
        exports.isClassExpression = isClassExpression;
        exports.isClassDeclaration = isClassDeclaration;
        exports.isExportAllDeclaration = isExportAllDeclaration;
        exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
        exports.isExportNamedDeclaration = isExportNamedDeclaration;
        exports.isExportSpecifier = isExportSpecifier;
        exports.isForOfStatement = isForOfStatement;
        exports.isImportDeclaration = isImportDeclaration;
        exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
        exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
        exports.isImportSpecifier = isImportSpecifier;
        exports.isMetaProperty = isMetaProperty;
        exports.isClassMethod = isClassMethod;
        exports.isObjectPattern = isObjectPattern;
        exports.isSpreadElement = isSpreadElement;
        exports.isSuper = isSuper;
        exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
        exports.isTemplateElement = isTemplateElement;
        exports.isTemplateLiteral = isTemplateLiteral;
        exports.isYieldExpression = isYieldExpression;
        exports.isAwaitExpression = isAwaitExpression;
        exports.isImport = isImport;
        exports.isBigIntLiteral = isBigIntLiteral;
        exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
        exports.isOptionalMemberExpression = isOptionalMemberExpression;
        exports.isOptionalCallExpression = isOptionalCallExpression;
        exports.isClassProperty = isClassProperty;
        exports.isClassPrivateProperty = isClassPrivateProperty;
        exports.isClassPrivateMethod = isClassPrivateMethod;
        exports.isPrivateName = isPrivateName;
        exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
        exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
        exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
        exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
        exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
        exports.isClassImplements = isClassImplements;
        exports.isDeclareClass = isDeclareClass;
        exports.isDeclareFunction = isDeclareFunction;
        exports.isDeclareInterface = isDeclareInterface;
        exports.isDeclareModule = isDeclareModule;
        exports.isDeclareModuleExports = isDeclareModuleExports;
        exports.isDeclareTypeAlias = isDeclareTypeAlias;
        exports.isDeclareOpaqueType = isDeclareOpaqueType;
        exports.isDeclareVariable = isDeclareVariable;
        exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
        exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
        exports.isDeclaredPredicate = isDeclaredPredicate;
        exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
        exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
        exports.isFunctionTypeParam = isFunctionTypeParam;
        exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
        exports.isInferredPredicate = isInferredPredicate;
        exports.isInterfaceExtends = isInterfaceExtends;
        exports.isInterfaceDeclaration = isInterfaceDeclaration;
        exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
        exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
        exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
        exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
        exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
        exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
        exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
        exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
        exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
        exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
        exports.isObjectTypeIndexer = isObjectTypeIndexer;
        exports.isObjectTypeProperty = isObjectTypeProperty;
        exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
        exports.isOpaqueType = isOpaqueType;
        exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
        exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
        exports.isStringTypeAnnotation = isStringTypeAnnotation;
        exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
        exports.isThisTypeAnnotation = isThisTypeAnnotation;
        exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
        exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
        exports.isTypeAlias = isTypeAlias;
        exports.isTypeAnnotation = isTypeAnnotation;
        exports.isTypeCastExpression = isTypeCastExpression;
        exports.isTypeParameter = isTypeParameter;
        exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
        exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
        exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
        exports.isVariance = isVariance;
        exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
        exports.isEnumDeclaration = isEnumDeclaration;
        exports.isEnumBooleanBody = isEnumBooleanBody;
        exports.isEnumNumberBody = isEnumNumberBody;
        exports.isEnumStringBody = isEnumStringBody;
        exports.isEnumSymbolBody = isEnumSymbolBody;
        exports.isEnumBooleanMember = isEnumBooleanMember;
        exports.isEnumNumberMember = isEnumNumberMember;
        exports.isEnumStringMember = isEnumStringMember;
        exports.isEnumDefaultedMember = isEnumDefaultedMember;
        exports.isIndexedAccessType = isIndexedAccessType;
        exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
        exports.isJSXAttribute = isJSXAttribute;
        exports.isJSXClosingElement = isJSXClosingElement;
        exports.isJSXElement = isJSXElement;
        exports.isJSXEmptyExpression = isJSXEmptyExpression;
        exports.isJSXExpressionContainer = isJSXExpressionContainer;
        exports.isJSXSpreadChild = isJSXSpreadChild;
        exports.isJSXIdentifier = isJSXIdentifier;
        exports.isJSXMemberExpression = isJSXMemberExpression;
        exports.isJSXNamespacedName = isJSXNamespacedName;
        exports.isJSXOpeningElement = isJSXOpeningElement;
        exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
        exports.isJSXText = isJSXText;
        exports.isJSXFragment = isJSXFragment;
        exports.isJSXOpeningFragment = isJSXOpeningFragment;
        exports.isJSXClosingFragment = isJSXClosingFragment;
        exports.isNoop = isNoop;
        exports.isPlaceholder = isPlaceholder;
        exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
        exports.isArgumentPlaceholder = isArgumentPlaceholder;
        exports.isBindExpression = isBindExpression;
        exports.isImportAttribute = isImportAttribute;
        exports.isDecorator = isDecorator;
        exports.isDoExpression = isDoExpression;
        exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
        exports.isRecordExpression = isRecordExpression;
        exports.isTupleExpression = isTupleExpression;
        exports.isDecimalLiteral = isDecimalLiteral;
        exports.isStaticBlock = isStaticBlock;
        exports.isModuleExpression = isModuleExpression;
        exports.isTopicReference = isTopicReference;
        exports.isPipelineTopicExpression = isPipelineTopicExpression;
        exports.isPipelineBareFunction = isPipelineBareFunction;
        exports.isPipelinePrimaryTopicReference =
          isPipelinePrimaryTopicReference;
        exports.isTSParameterProperty = isTSParameterProperty;
        exports.isTSDeclareFunction = isTSDeclareFunction;
        exports.isTSDeclareMethod = isTSDeclareMethod;
        exports.isTSQualifiedName = isTSQualifiedName;
        exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
        exports.isTSConstructSignatureDeclaration =
          isTSConstructSignatureDeclaration;
        exports.isTSPropertySignature = isTSPropertySignature;
        exports.isTSMethodSignature = isTSMethodSignature;
        exports.isTSIndexSignature = isTSIndexSignature;
        exports.isTSAnyKeyword = isTSAnyKeyword;
        exports.isTSBooleanKeyword = isTSBooleanKeyword;
        exports.isTSBigIntKeyword = isTSBigIntKeyword;
        exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
        exports.isTSNeverKeyword = isTSNeverKeyword;
        exports.isTSNullKeyword = isTSNullKeyword;
        exports.isTSNumberKeyword = isTSNumberKeyword;
        exports.isTSObjectKeyword = isTSObjectKeyword;
        exports.isTSStringKeyword = isTSStringKeyword;
        exports.isTSSymbolKeyword = isTSSymbolKeyword;
        exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
        exports.isTSUnknownKeyword = isTSUnknownKeyword;
        exports.isTSVoidKeyword = isTSVoidKeyword;
        exports.isTSThisType = isTSThisType;
        exports.isTSFunctionType = isTSFunctionType;
        exports.isTSConstructorType = isTSConstructorType;
        exports.isTSTypeReference = isTSTypeReference;
        exports.isTSTypePredicate = isTSTypePredicate;
        exports.isTSTypeQuery = isTSTypeQuery;
        exports.isTSTypeLiteral = isTSTypeLiteral;
        exports.isTSArrayType = isTSArrayType;
        exports.isTSTupleType = isTSTupleType;
        exports.isTSOptionalType = isTSOptionalType;
        exports.isTSRestType = isTSRestType;
        exports.isTSNamedTupleMember = isTSNamedTupleMember;
        exports.isTSUnionType = isTSUnionType;
        exports.isTSIntersectionType = isTSIntersectionType;
        exports.isTSConditionalType = isTSConditionalType;
        exports.isTSInferType = isTSInferType;
        exports.isTSParenthesizedType = isTSParenthesizedType;
        exports.isTSTypeOperator = isTSTypeOperator;
        exports.isTSIndexedAccessType = isTSIndexedAccessType;
        exports.isTSMappedType = isTSMappedType;
        exports.isTSLiteralType = isTSLiteralType;
        exports.isTSExpressionWithTypeArguments =
          isTSExpressionWithTypeArguments;
        exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
        exports.isTSInterfaceBody = isTSInterfaceBody;
        exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
        exports.isTSAsExpression = isTSAsExpression;
        exports.isTSTypeAssertion = isTSTypeAssertion;
        exports.isTSEnumDeclaration = isTSEnumDeclaration;
        exports.isTSEnumMember = isTSEnumMember;
        exports.isTSModuleDeclaration = isTSModuleDeclaration;
        exports.isTSModuleBlock = isTSModuleBlock;
        exports.isTSImportType = isTSImportType;
        exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
        exports.isTSExternalModuleReference = isTSExternalModuleReference;
        exports.isTSNonNullExpression = isTSNonNullExpression;
        exports.isTSExportAssignment = isTSExportAssignment;
        exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
        exports.isTSTypeAnnotation = isTSTypeAnnotation;
        exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
        exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
        exports.isTSTypeParameter = isTSTypeParameter;
        exports.isExpression = isExpression;
        exports.isBinary = isBinary;
        exports.isScopable = isScopable;
        exports.isBlockParent = isBlockParent;
        exports.isBlock = isBlock;
        exports.isStatement = isStatement;
        exports.isTerminatorless = isTerminatorless;
        exports.isCompletionStatement = isCompletionStatement;
        exports.isConditional = isConditional;
        exports.isLoop = isLoop;
        exports.isWhile = isWhile;
        exports.isExpressionWrapper = isExpressionWrapper;
        exports.isFor = isFor;
        exports.isForXStatement = isForXStatement;
        exports.isFunction = isFunction;
        exports.isFunctionParent = isFunctionParent;
        exports.isPureish = isPureish;
        exports.isDeclaration = isDeclaration;
        exports.isPatternLike = isPatternLike;
        exports.isLVal = isLVal;
        exports.isTSEntityName = isTSEntityName;
        exports.isLiteral = isLiteral;
        exports.isImmutable = isImmutable;
        exports.isUserWhitespacable = isUserWhitespacable;
        exports.isMethod = isMethod;
        exports.isObjectMember = isObjectMember;
        exports.isProperty = isProperty;
        exports.isUnaryLike = isUnaryLike;
        exports.isPattern = isPattern;
        exports.isClass = isClass;
        exports.isModuleDeclaration = isModuleDeclaration;
        exports.isExportDeclaration = isExportDeclaration;
        exports.isModuleSpecifier = isModuleSpecifier;
        exports.isPrivate = isPrivate;
        exports.isFlow = isFlow;
        exports.isFlowType = isFlowType;
        exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
        exports.isFlowDeclaration = isFlowDeclaration;
        exports.isFlowPredicate = isFlowPredicate;
        exports.isEnumBody = isEnumBody;
        exports.isEnumMember = isEnumMember;
        exports.isJSX = isJSX;
        exports.isTSTypeElement = isTSTypeElement;
        exports.isTSType = isTSType;
        exports.isTSBaseType = isTSBaseType;
        exports.isNumberLiteral = isNumberLiteral;
        exports.isRegexLiteral = isRegexLiteral;
        exports.isRestProperty = isRestProperty;
        exports.isSpreadProperty = isSpreadProperty;

        var _shallowEqual = require("../../utils/shallowEqual");

        function isArrayExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ArrayExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAssignmentExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "AssignmentExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBinaryExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BinaryExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterpreterDirective(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "InterpreterDirective") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDirective(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Directive") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDirectiveLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DirectiveLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlockStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BlockStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBreakStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BreakStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCallExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "CallExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCatchClause(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "CatchClause") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isConditionalExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ConditionalExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isContinueStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ContinueStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDebuggerStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DebuggerStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDoWhileStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DoWhileStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEmptyStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EmptyStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpressionStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExpressionStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFile(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "File") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForInStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ForInStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ForStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "FunctionDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "FunctionExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIdentifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Identifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIfStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "IfStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLabeledStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "LabeledStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "StringLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumericLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NumericLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NullLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BooleanLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRegExpLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "RegExpLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLogicalExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "LogicalExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMemberExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "MemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNewExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NewExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isProgram(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Program") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectMethod(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRestElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "RestElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isReturnStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ReturnStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSequenceExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SequenceExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isParenthesizedExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ParenthesizedExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSwitchCase(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SwitchCase") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSwitchStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SwitchStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThisExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ThisExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThrowStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ThrowStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTryStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TryStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnaryExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "UnaryExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUpdateExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "UpdateExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariableDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "VariableDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariableDeclarator(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "VariableDeclarator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWhileStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "WhileStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWithStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "WithStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAssignmentPattern(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "AssignmentPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrayPattern(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ArrayPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrowFunctionExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ArrowFunctionExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportAllDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportAllDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDefaultDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportDefaultDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportNamedDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportNamedDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForOfStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ForOfStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ImportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportDefaultSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ImportDefaultSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportNamespaceSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ImportNamespaceSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ImportSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMetaProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "MetaProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassMethod(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectPattern(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSpreadElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SpreadElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSuper(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Super") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTaggedTemplateExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TaggedTemplateExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTemplateElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TemplateElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTemplateLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TemplateLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isYieldExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "YieldExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAwaitExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "AwaitExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImport(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Import") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBigIntLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BigIntLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportNamespaceSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportNamespaceSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOptionalMemberExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "OptionalMemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOptionalCallExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "OptionalCallExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassPrivateProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassPrivateProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassPrivateMethod(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassPrivateMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPrivateName(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "PrivateName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAnyTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "AnyTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrayTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ArrayTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BooleanTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BooleanLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NullLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassImplements(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ClassImplements") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareClass(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareClass") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareFunction(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareFunction") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareInterface(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareInterface") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareModule(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareModule") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareModuleExports(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareModuleExports") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareTypeAlias(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareTypeAlias") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareOpaqueType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareOpaqueType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareVariable(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareVariable") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareExportDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareExportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareExportAllDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclareExportAllDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclaredPredicate(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DeclaredPredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExistsTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExistsTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "FunctionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionTypeParam(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "FunctionTypeParam") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isGenericTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "GenericTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInferredPredicate(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "InferredPredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterfaceExtends(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "InterfaceExtends") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterfaceDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "InterfaceDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterfaceTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "InterfaceTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIntersectionTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "IntersectionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMixedTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "MixedTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEmptyTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EmptyTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullableTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NullableTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NumberLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NumberTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeInternalSlot(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeInternalSlot") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeCallProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeCallProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeIndexer(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeIndexer") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeSpreadProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ObjectTypeSpreadProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOpaqueType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "OpaqueType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isQualifiedTypeIdentifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "QualifiedTypeIdentifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "StringLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "StringTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSymbolTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SymbolTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThisTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ThisTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTupleTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TupleTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeofTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeofTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeAlias(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeAlias") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeCastExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeCastExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameter(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeParameter") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameterDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeParameterDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameterInstantiation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TypeParameterInstantiation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnionTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "UnionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariance(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Variance") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVoidTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "VoidTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumBooleanBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumBooleanBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumNumberBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumNumberBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumStringBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumStringBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumSymbolBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumSymbolBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumBooleanMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumBooleanMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumNumberMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumNumberMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumStringMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumStringMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumDefaultedMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "EnumDefaultedMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIndexedAccessType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "IndexedAccessType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOptionalIndexedAccessType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "OptionalIndexedAccessType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXAttribute(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXAttribute") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXClosingElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXClosingElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXEmptyExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXEmptyExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXExpressionContainer(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXExpressionContainer") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXSpreadChild(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXSpreadChild") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXIdentifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXIdentifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXMemberExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXMemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXNamespacedName(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXNamespacedName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXOpeningElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXOpeningElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXSpreadAttribute(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXSpreadAttribute") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXText(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXText") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXFragment(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXOpeningFragment(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXOpeningFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXClosingFragment(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "JSXClosingFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNoop(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Noop") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPlaceholder(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Placeholder") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isV8IntrinsicIdentifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "V8IntrinsicIdentifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArgumentPlaceholder(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ArgumentPlaceholder") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBindExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "BindExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportAttribute(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ImportAttribute") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDecorator(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "Decorator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDoExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DoExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDefaultSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ExportDefaultSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRecordExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "RecordExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTupleExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TupleExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDecimalLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "DecimalLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStaticBlock(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "StaticBlock") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isModuleExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "ModuleExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTopicReference(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TopicReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPipelineTopicExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "PipelineTopicExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPipelineBareFunction(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "PipelineBareFunction") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPipelinePrimaryTopicReference(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "PipelinePrimaryTopicReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSParameterProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSParameterProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSDeclareFunction(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSDeclareFunction") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSDeclareMethod(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSDeclareMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSQualifiedName(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSQualifiedName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSCallSignatureDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSCallSignatureDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConstructSignatureDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSConstructSignatureDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSPropertySignature(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSPropertySignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSMethodSignature(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSMethodSignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIndexSignature(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSIndexSignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSAnyKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSAnyKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSBooleanKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSBooleanKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSBigIntKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSBigIntKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIntrinsicKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSIntrinsicKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNeverKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNeverKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNullKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNullKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNumberKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNumberKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSObjectKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSObjectKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSStringKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSStringKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSSymbolKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSSymbolKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSUndefinedKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSUndefinedKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSUnknownKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSUnknownKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSVoidKeyword(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSVoidKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSThisType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSThisType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSFunctionType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSFunctionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConstructorType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSConstructorType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeReference(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypePredicate(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypePredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeQuery(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeQuery") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSArrayType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSArrayType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTupleType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTupleType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSOptionalType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSOptionalType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSRestType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSRestType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNamedTupleMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNamedTupleMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSUnionType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSUnionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIntersectionType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSIntersectionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConditionalType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSConditionalType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInferType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSInferType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSParenthesizedType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSParenthesizedType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeOperator(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeOperator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIndexedAccessType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSIndexedAccessType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSMappedType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSMappedType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSLiteralType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSLiteralType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExpressionWithTypeArguments(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSExpressionWithTypeArguments") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInterfaceDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSInterfaceDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInterfaceBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSInterfaceBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAliasDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeAliasDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSAsExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSAsExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAssertion(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeAssertion") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEnumDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSEnumDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEnumMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSEnumMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSModuleDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSModuleDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSModuleBlock(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSModuleBlock") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSImportType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSImportType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSImportEqualsDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSImportEqualsDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExternalModuleReference(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSExternalModuleReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNonNullExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNonNullExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExportAssignment(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSExportAssignment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNamespaceExportDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSNamespaceExportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameterInstantiation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeParameterInstantiation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameterDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeParameterDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameter(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "TSTypeParameter") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpression(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ArrayExpression" === nodeType ||
            "AssignmentExpression" === nodeType ||
            "BinaryExpression" === nodeType ||
            "CallExpression" === nodeType ||
            "ConditionalExpression" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Identifier" === nodeType ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "RegExpLiteral" === nodeType ||
            "LogicalExpression" === nodeType ||
            "MemberExpression" === nodeType ||
            "NewExpression" === nodeType ||
            "ObjectExpression" === nodeType ||
            "SequenceExpression" === nodeType ||
            "ParenthesizedExpression" === nodeType ||
            "ThisExpression" === nodeType ||
            "UnaryExpression" === nodeType ||
            "UpdateExpression" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassExpression" === nodeType ||
            "MetaProperty" === nodeType ||
            "Super" === nodeType ||
            "TaggedTemplateExpression" === nodeType ||
            "TemplateLiteral" === nodeType ||
            "YieldExpression" === nodeType ||
            "AwaitExpression" === nodeType ||
            "Import" === nodeType ||
            "BigIntLiteral" === nodeType ||
            "OptionalMemberExpression" === nodeType ||
            "OptionalCallExpression" === nodeType ||
            "TypeCastExpression" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXFragment" === nodeType ||
            "BindExpression" === nodeType ||
            "DoExpression" === nodeType ||
            "RecordExpression" === nodeType ||
            "TupleExpression" === nodeType ||
            "DecimalLiteral" === nodeType ||
            "ModuleExpression" === nodeType ||
            "TopicReference" === nodeType ||
            "PipelineTopicExpression" === nodeType ||
            "PipelineBareFunction" === nodeType ||
            "PipelinePrimaryTopicReference" === nodeType ||
            "TSAsExpression" === nodeType ||
            "TSTypeAssertion" === nodeType ||
            "TSNonNullExpression" === nodeType ||
            (nodeType === "Placeholder" &&
              ("Expression" === node.expectedNode ||
                "Identifier" === node.expectedNode ||
                "StringLiteral" === node.expectedNode))
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBinary(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BinaryExpression" === nodeType ||
            "LogicalExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isScopable(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BlockStatement" === nodeType ||
            "CatchClause" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Program" === nodeType ||
            "ObjectMethod" === nodeType ||
            "SwitchStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassExpression" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ClassMethod" === nodeType ||
            "ClassPrivateMethod" === nodeType ||
            "StaticBlock" === nodeType ||
            "TSModuleBlock" === nodeType ||
            (nodeType === "Placeholder" &&
              "BlockStatement" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlockParent(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BlockStatement" === nodeType ||
            "CatchClause" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Program" === nodeType ||
            "ObjectMethod" === nodeType ||
            "SwitchStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ClassMethod" === nodeType ||
            "ClassPrivateMethod" === nodeType ||
            "StaticBlock" === nodeType ||
            "TSModuleBlock" === nodeType ||
            (nodeType === "Placeholder" &&
              "BlockStatement" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlock(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BlockStatement" === nodeType ||
            "Program" === nodeType ||
            "TSModuleBlock" === nodeType ||
            (nodeType === "Placeholder" &&
              "BlockStatement" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BlockStatement" === nodeType ||
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "DebuggerStatement" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "EmptyStatement" === nodeType ||
            "ExpressionStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "IfStatement" === nodeType ||
            "LabeledStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "SwitchStatement" === nodeType ||
            "ThrowStatement" === nodeType ||
            "TryStatement" === nodeType ||
            "VariableDeclaration" === nodeType ||
            "WhileStatement" === nodeType ||
            "WithStatement" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ImportDeclaration" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType ||
            "EnumDeclaration" === nodeType ||
            "TSDeclareFunction" === nodeType ||
            "TSInterfaceDeclaration" === nodeType ||
            "TSTypeAliasDeclaration" === nodeType ||
            "TSEnumDeclaration" === nodeType ||
            "TSModuleDeclaration" === nodeType ||
            "TSImportEqualsDeclaration" === nodeType ||
            "TSExportAssignment" === nodeType ||
            "TSNamespaceExportDeclaration" === nodeType ||
            (nodeType === "Placeholder" &&
              ("Statement" === node.expectedNode ||
                "Declaration" === node.expectedNode ||
                "BlockStatement" === node.expectedNode))
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTerminatorless(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "ThrowStatement" === nodeType ||
            "YieldExpression" === nodeType ||
            "AwaitExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCompletionStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "ThrowStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isConditional(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ConditionalExpression" === nodeType ||
            "IfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLoop(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ForOfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWhile(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "DoWhileStatement" === nodeType ||
            "WhileStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpressionWrapper(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ExpressionStatement" === nodeType ||
            "ParenthesizedExpression" === nodeType ||
            "TypeCastExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFor(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "ForOfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForXStatement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if ("ForInStatement" === nodeType || "ForOfStatement" === nodeType) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunction(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "ObjectMethod" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassMethod" === nodeType ||
            "ClassPrivateMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionParent(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "ObjectMethod" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassMethod" === nodeType ||
            "ClassPrivateMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPureish(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "RegExpLiteral" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "BigIntLiteral" === nodeType ||
            "DecimalLiteral" === nodeType ||
            (nodeType === "Placeholder" &&
              "StringLiteral" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "FunctionDeclaration" === nodeType ||
            "VariableDeclaration" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ImportDeclaration" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType ||
            "EnumDeclaration" === nodeType ||
            "TSDeclareFunction" === nodeType ||
            "TSInterfaceDeclaration" === nodeType ||
            "TSTypeAliasDeclaration" === nodeType ||
            "TSEnumDeclaration" === nodeType ||
            "TSModuleDeclaration" === nodeType ||
            (nodeType === "Placeholder" && "Declaration" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPatternLike(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "Identifier" === nodeType ||
            "RestElement" === nodeType ||
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType ||
            (nodeType === "Placeholder" &&
              ("Pattern" === node.expectedNode ||
                "Identifier" === node.expectedNode))
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLVal(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "Identifier" === nodeType ||
            "MemberExpression" === nodeType ||
            "RestElement" === nodeType ||
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType ||
            "TSParameterProperty" === nodeType ||
            (nodeType === "Placeholder" &&
              ("Pattern" === node.expectedNode ||
                "Identifier" === node.expectedNode))
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEntityName(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "Identifier" === nodeType ||
            "TSQualifiedName" === nodeType ||
            (nodeType === "Placeholder" && "Identifier" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLiteral(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "RegExpLiteral" === nodeType ||
            "TemplateLiteral" === nodeType ||
            "BigIntLiteral" === nodeType ||
            "DecimalLiteral" === nodeType ||
            (nodeType === "Placeholder" &&
              "StringLiteral" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImmutable(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "BigIntLiteral" === nodeType ||
            "JSXAttribute" === nodeType ||
            "JSXClosingElement" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXExpressionContainer" === nodeType ||
            "JSXSpreadChild" === nodeType ||
            "JSXOpeningElement" === nodeType ||
            "JSXText" === nodeType ||
            "JSXFragment" === nodeType ||
            "JSXOpeningFragment" === nodeType ||
            "JSXClosingFragment" === nodeType ||
            "DecimalLiteral" === nodeType ||
            (nodeType === "Placeholder" &&
              "StringLiteral" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUserWhitespacable(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ObjectMethod" === nodeType ||
            "ObjectProperty" === nodeType ||
            "ObjectTypeInternalSlot" === nodeType ||
            "ObjectTypeCallProperty" === nodeType ||
            "ObjectTypeIndexer" === nodeType ||
            "ObjectTypeProperty" === nodeType ||
            "ObjectTypeSpreadProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMethod(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ObjectMethod" === nodeType ||
            "ClassMethod" === nodeType ||
            "ClassPrivateMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isProperty(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ObjectProperty" === nodeType ||
            "ClassProperty" === nodeType ||
            "ClassPrivateProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnaryLike(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if ("UnaryExpression" === nodeType || "SpreadElement" === nodeType) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPattern(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType ||
            (nodeType === "Placeholder" && "Pattern" === node.expectedNode)
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClass(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ClassExpression" === nodeType ||
            "ClassDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isModuleDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ImportDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isModuleSpecifier(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ExportSpecifier" === nodeType ||
            "ImportDefaultSpecifier" === nodeType ||
            "ImportNamespaceSpecifier" === nodeType ||
            "ImportSpecifier" === nodeType ||
            "ExportNamespaceSpecifier" === nodeType ||
            "ExportDefaultSpecifier" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPrivate(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "ClassPrivateProperty" === nodeType ||
            "ClassPrivateMethod" === nodeType ||
            "PrivateName" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlow(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "AnyTypeAnnotation" === nodeType ||
            "ArrayTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "BooleanLiteralTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "ClassImplements" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "DeclaredPredicate" === nodeType ||
            "ExistsTypeAnnotation" === nodeType ||
            "FunctionTypeAnnotation" === nodeType ||
            "FunctionTypeParam" === nodeType ||
            "GenericTypeAnnotation" === nodeType ||
            "InferredPredicate" === nodeType ||
            "InterfaceExtends" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "InterfaceTypeAnnotation" === nodeType ||
            "IntersectionTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NullableTypeAnnotation" === nodeType ||
            "NumberLiteralTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "ObjectTypeAnnotation" === nodeType ||
            "ObjectTypeInternalSlot" === nodeType ||
            "ObjectTypeCallProperty" === nodeType ||
            "ObjectTypeIndexer" === nodeType ||
            "ObjectTypeProperty" === nodeType ||
            "ObjectTypeSpreadProperty" === nodeType ||
            "OpaqueType" === nodeType ||
            "QualifiedTypeIdentifier" === nodeType ||
            "StringLiteralTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "SymbolTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "TupleTypeAnnotation" === nodeType ||
            "TypeofTypeAnnotation" === nodeType ||
            "TypeAlias" === nodeType ||
            "TypeAnnotation" === nodeType ||
            "TypeCastExpression" === nodeType ||
            "TypeParameter" === nodeType ||
            "TypeParameterDeclaration" === nodeType ||
            "TypeParameterInstantiation" === nodeType ||
            "UnionTypeAnnotation" === nodeType ||
            "Variance" === nodeType ||
            "VoidTypeAnnotation" === nodeType ||
            "IndexedAccessType" === nodeType ||
            "OptionalIndexedAccessType" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "AnyTypeAnnotation" === nodeType ||
            "ArrayTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "BooleanLiteralTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "ExistsTypeAnnotation" === nodeType ||
            "FunctionTypeAnnotation" === nodeType ||
            "GenericTypeAnnotation" === nodeType ||
            "InterfaceTypeAnnotation" === nodeType ||
            "IntersectionTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NullableTypeAnnotation" === nodeType ||
            "NumberLiteralTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "ObjectTypeAnnotation" === nodeType ||
            "StringLiteralTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "SymbolTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "TupleTypeAnnotation" === nodeType ||
            "TypeofTypeAnnotation" === nodeType ||
            "UnionTypeAnnotation" === nodeType ||
            "VoidTypeAnnotation" === nodeType ||
            "IndexedAccessType" === nodeType ||
            "OptionalIndexedAccessType" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowBaseAnnotation(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "AnyTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "SymbolTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "VoidTypeAnnotation" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowDeclaration(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowPredicate(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "DeclaredPredicate" === nodeType ||
            "InferredPredicate" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumBody(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "EnumBooleanBody" === nodeType ||
            "EnumNumberBody" === nodeType ||
            "EnumStringBody" === nodeType ||
            "EnumSymbolBody" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEnumMember(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "EnumBooleanMember" === nodeType ||
            "EnumNumberMember" === nodeType ||
            "EnumStringMember" === nodeType ||
            "EnumDefaultedMember" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSX(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "JSXAttribute" === nodeType ||
            "JSXClosingElement" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXEmptyExpression" === nodeType ||
            "JSXExpressionContainer" === nodeType ||
            "JSXSpreadChild" === nodeType ||
            "JSXIdentifier" === nodeType ||
            "JSXMemberExpression" === nodeType ||
            "JSXNamespacedName" === nodeType ||
            "JSXOpeningElement" === nodeType ||
            "JSXSpreadAttribute" === nodeType ||
            "JSXText" === nodeType ||
            "JSXFragment" === nodeType ||
            "JSXOpeningFragment" === nodeType ||
            "JSXClosingFragment" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeElement(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "TSCallSignatureDeclaration" === nodeType ||
            "TSConstructSignatureDeclaration" === nodeType ||
            "TSPropertySignature" === nodeType ||
            "TSMethodSignature" === nodeType ||
            "TSIndexSignature" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "TSAnyKeyword" === nodeType ||
            "TSBooleanKeyword" === nodeType ||
            "TSBigIntKeyword" === nodeType ||
            "TSIntrinsicKeyword" === nodeType ||
            "TSNeverKeyword" === nodeType ||
            "TSNullKeyword" === nodeType ||
            "TSNumberKeyword" === nodeType ||
            "TSObjectKeyword" === nodeType ||
            "TSStringKeyword" === nodeType ||
            "TSSymbolKeyword" === nodeType ||
            "TSUndefinedKeyword" === nodeType ||
            "TSUnknownKeyword" === nodeType ||
            "TSVoidKeyword" === nodeType ||
            "TSThisType" === nodeType ||
            "TSFunctionType" === nodeType ||
            "TSConstructorType" === nodeType ||
            "TSTypeReference" === nodeType ||
            "TSTypePredicate" === nodeType ||
            "TSTypeQuery" === nodeType ||
            "TSTypeLiteral" === nodeType ||
            "TSArrayType" === nodeType ||
            "TSTupleType" === nodeType ||
            "TSOptionalType" === nodeType ||
            "TSRestType" === nodeType ||
            "TSUnionType" === nodeType ||
            "TSIntersectionType" === nodeType ||
            "TSConditionalType" === nodeType ||
            "TSInferType" === nodeType ||
            "TSParenthesizedType" === nodeType ||
            "TSTypeOperator" === nodeType ||
            "TSIndexedAccessType" === nodeType ||
            "TSMappedType" === nodeType ||
            "TSLiteralType" === nodeType ||
            "TSExpressionWithTypeArguments" === nodeType ||
            "TSImportType" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSBaseType(node, opts) {
          if (!node) return false;
          const nodeType = node.type;

          if (
            "TSAnyKeyword" === nodeType ||
            "TSBooleanKeyword" === nodeType ||
            "TSBigIntKeyword" === nodeType ||
            "TSIntrinsicKeyword" === nodeType ||
            "TSNeverKeyword" === nodeType ||
            "TSNullKeyword" === nodeType ||
            "TSNumberKeyword" === nodeType ||
            "TSObjectKeyword" === nodeType ||
            "TSStringKeyword" === nodeType ||
            "TSSymbolKeyword" === nodeType ||
            "TSUndefinedKeyword" === nodeType ||
            "TSUnknownKeyword" === nodeType ||
            "TSVoidKeyword" === nodeType ||
            "TSThisType" === nodeType ||
            "TSLiteralType" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberLiteral(node, opts) {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "NumberLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRegexLiteral(node, opts) {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "RegexLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRestProperty(node, opts) {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "RestProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSpreadProperty(node, opts) {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );
          if (!node) return false;
          const nodeType = node.type;

          if (nodeType === "SpreadProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }
      },
      { "../../utils/shallowEqual": 182 },
    ],
    185: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = is;

        var _shallowEqual = require("../utils/shallowEqual");

        var _isType = require("./isType");

        var _isPlaceholderType = require("./isPlaceholderType");

        var _definitions = require("../definitions");

        function is(type, node, opts) {
          if (!node) return false;
          const matches = (0, _isType.default)(node.type, type);

          if (!matches) {
            if (
              !opts &&
              node.type === "Placeholder" &&
              type in _definitions.FLIPPED_ALIAS_KEYS
            ) {
              return (0, _isPlaceholderType.default)(node.expectedNode, type);
            }

            return false;
          }

          if (typeof opts === "undefined") {
            return true;
          } else {
            return (0, _shallowEqual.default)(node, opts);
          }
        }
      },
      {
        "../definitions": 162,
        "../utils/shallowEqual": 182,
        "./isPlaceholderType": 192,
        "./isType": 196,
      },
    ],
    186: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isBinding;

        var _getBindingIdentifiers = require("../retrievers/getBindingIdentifiers");

        function isBinding(node, parent, grandparent) {
          if (
            grandparent &&
            node.type === "Identifier" &&
            parent.type === "ObjectProperty" &&
            grandparent.type === "ObjectExpression"
          ) {
            return false;
          }

          const keys = _getBindingIdentifiers.default.keys[parent.type];

          if (keys) {
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const val = parent[key];

              if (Array.isArray(val)) {
                if (val.indexOf(node) >= 0) return true;
              } else {
                if (val === node) return true;
              }
            }
          }

          return false;
        }
      },
      { "../retrievers/getBindingIdentifiers": 176 },
    ],
    187: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isBlockScoped;

        var _generated = require("./generated");

        var _isLet = require("./isLet");

        function isBlockScoped(node) {
          return (
            (0, _generated.isFunctionDeclaration)(node) ||
            (0, _generated.isClassDeclaration)(node) ||
            (0, _isLet.default)(node)
          );
        }
      },
      { "./generated": 184, "./isLet": 189 },
    ],
    188: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isImmutable;

        var _isType = require("./isType");

        var _generated = require("./generated");

        function isImmutable(node) {
          if ((0, _isType.default)(node.type, "Immutable")) return true;

          if ((0, _generated.isIdentifier)(node)) {
            if (node.name === "undefined") {
              return true;
            } else {
              return false;
            }
          }

          return false;
        }
      },
      { "./generated": 184, "./isType": 196 },
    ],
    189: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isLet;

        var _generated = require("./generated");

        var _constants = require("../constants");

        function isLet(node) {
          return (
            (0, _generated.isVariableDeclaration)(node) &&
            (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL])
          );
        }
      },
      { "../constants": 147, "./generated": 184 },
    ],
    190: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isNode;

        var _definitions = require("../definitions");

        function isNode(node) {
          return !!(node && _definitions.VISITOR_KEYS[node.type]);
        }
      },
      { "../definitions": 162 },
    ],
    191: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isNodesEquivalent;

        var _definitions = require("../definitions");

        function isNodesEquivalent(a, b) {
          if (
            typeof a !== "object" ||
            typeof b !== "object" ||
            a == null ||
            b == null
          ) {
            return a === b;
          }

          if (a.type !== b.type) {
            return false;
          }

          const fields = Object.keys(
            _definitions.NODE_FIELDS[a.type] || a.type
          );
          const visitorKeys = _definitions.VISITOR_KEYS[a.type];

          for (const field of fields) {
            if (typeof a[field] !== typeof b[field]) {
              return false;
            }

            if (a[field] == null && b[field] == null) {
              continue;
            } else if (a[field] == null || b[field] == null) {
              return false;
            }

            if (Array.isArray(a[field])) {
              if (!Array.isArray(b[field])) {
                return false;
              }

              if (a[field].length !== b[field].length) {
                return false;
              }

              for (let i = 0; i < a[field].length; i++) {
                if (!isNodesEquivalent(a[field][i], b[field][i])) {
                  return false;
                }
              }

              continue;
            }

            if (
              typeof a[field] === "object" &&
              !(visitorKeys != null && visitorKeys.includes(field))
            ) {
              for (const key of Object.keys(a[field])) {
                if (a[field][key] !== b[field][key]) {
                  return false;
                }
              }

              continue;
            }

            if (!isNodesEquivalent(a[field], b[field])) {
              return false;
            }
          }

          return true;
        }
      },
      { "../definitions": 162 },
    ],
    192: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isPlaceholderType;

        var _definitions = require("../definitions");

        function isPlaceholderType(placeholderType, targetType) {
          if (placeholderType === targetType) return true;
          const aliases = _definitions.PLACEHOLDERS_ALIAS[placeholderType];

          if (aliases) {
            for (const alias of aliases) {
              if (targetType === alias) return true;
            }
          }

          return false;
        }
      },
      { "../definitions": 162 },
    ],
    193: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isReferenced;

        function isReferenced(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "JSXMemberExpression":
            case "OptionalMemberExpression":
              if (parent.property === node) {
                return !!parent.computed;
              }

              return parent.object === node;

            case "VariableDeclarator":
              return parent.init === node;

            case "ArrowFunctionExpression":
              return parent.body === node;

            case "PrivateName":
              return false;

            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              if (parent.params.includes(node)) {
                return false;
              }

            case "ObjectProperty":
            case "ClassProperty":
            case "ClassPrivateProperty":
              if (parent.key === node) {
                return !!parent.computed;
              }

              if (parent.value === node) {
                return !grandparent || grandparent.type !== "ObjectPattern";
              }

              return true;

            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;

            case "AssignmentExpression":
              return parent.right === node;

            case "AssignmentPattern":
              return parent.right === node;

            case "LabeledStatement":
              return false;

            case "CatchClause":
              return false;

            case "RestElement":
              return false;

            case "BreakStatement":
            case "ContinueStatement":
              return false;

            case "FunctionDeclaration":
            case "FunctionExpression":
              return false;

            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
              return false;

            case "ExportSpecifier":
              if (grandparent != null && grandparent.source) {
                return false;
              }

              return parent.local === node;

            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
              return false;

            case "JSXAttribute":
              return false;

            case "ObjectPattern":
            case "ArrayPattern":
              return false;

            case "MetaProperty":
              return false;

            case "ObjectTypeProperty":
              return parent.key !== node;

            case "TSEnumMember":
              return parent.id !== node;

            case "TSPropertySignature":
              if (parent.key === node) {
                return !!parent.computed;
              }

              return true;
          }

          return true;
        }
      },
      {},
    ],
    194: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isScope;

        var _generated = require("./generated");

        function isScope(node, parent) {
          if (
            (0, _generated.isBlockStatement)(node) &&
            ((0, _generated.isFunction)(parent) ||
              (0, _generated.isCatchClause)(parent))
          ) {
            return false;
          }

          if (
            (0, _generated.isPattern)(node) &&
            ((0, _generated.isFunction)(parent) ||
              (0, _generated.isCatchClause)(parent))
          ) {
            return true;
          }

          return (0, _generated.isScopable)(node);
        }
      },
      { "./generated": 184 },
    ],
    195: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isSpecifierDefault;

        var _generated = require("./generated");

        function isSpecifierDefault(specifier) {
          return (
            (0, _generated.isImportDefaultSpecifier)(specifier) ||
            (0, _generated.isIdentifier)(
              specifier.imported || specifier.exported,
              {
                name: "default",
              }
            )
          );
        }
      },
      { "./generated": 184 },
    ],
    196: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isType;

        var _definitions = require("../definitions");

        function isType(nodeType, targetType) {
          if (nodeType === targetType) return true;
          if (_definitions.ALIAS_KEYS[targetType]) return false;
          const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];

          if (aliases) {
            if (aliases[0] === nodeType) return true;

            for (const alias of aliases) {
              if (nodeType === alias) return true;
            }
          }

          return false;
        }
      },
      { "../definitions": 162 },
    ],
    197: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isValidES3Identifier;

        var _isValidIdentifier = require("./isValidIdentifier");

        const RESERVED_WORDS_ES3_ONLY = new Set([
          "abstract",
          "boolean",
          "byte",
          "char",
          "double",
          "enum",
          "final",
          "float",
          "goto",
          "implements",
          "int",
          "interface",
          "long",
          "native",
          "package",
          "private",
          "protected",
          "public",
          "short",
          "static",
          "synchronized",
          "throws",
          "transient",
          "volatile",
        ]);

        function isValidES3Identifier(name) {
          return (
            (0, _isValidIdentifier.default)(name) &&
            !RESERVED_WORDS_ES3_ONLY.has(name)
          );
        }
      },
      { "./isValidIdentifier": 198 },
    ],
    198: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isValidIdentifier;

        var _helperValidatorIdentifier = require("@babel/helper-validator-identifier");

        function isValidIdentifier(name, reserved = true) {
          if (typeof name !== "string") return false;

          if (reserved) {
            if (
              (0, _helperValidatorIdentifier.isKeyword)(name) ||
              (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)
            ) {
              return false;
            }
          }

          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        }
      },
      { "@babel/helper-validator-identifier": 79 },
    ],
    199: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isVar;

        var _generated = require("./generated");

        var _constants = require("../constants");

        function isVar(node) {
          return (
            (0, _generated.isVariableDeclaration)(node, {
              kind: "var",
            }) && !node[_constants.BLOCK_SCOPED_SYMBOL]
          );
        }
      },
      { "../constants": 147, "./generated": 184 },
    ],
    200: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = matchesPattern;

        var _generated = require("./generated");

        function matchesPattern(member, match, allowPartial) {
          if (!(0, _generated.isMemberExpression)(member)) return false;
          const parts = Array.isArray(match) ? match : match.split(".");
          const nodes = [];
          let node;

          for (
            node = member;
            (0, _generated.isMemberExpression)(node);
            node = node.object
          ) {
            nodes.push(node.property);
          }

          nodes.push(node);
          if (nodes.length < parts.length) return false;
          if (!allowPartial && nodes.length > parts.length) return false;

          for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
            const node = nodes[j];
            let value;

            if ((0, _generated.isIdentifier)(node)) {
              value = node.name;
            } else if ((0, _generated.isStringLiteral)(node)) {
              value = node.value;
            } else if ((0, _generated.isThisExpression)(node)) {
              value = "this";
            } else {
              return false;
            }

            if (parts[i] !== value) return false;
          }

          return true;
        }
      },
      { "./generated": 184 },
    ],
    201: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = isCompatTag;

        function isCompatTag(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        }
      },
      {},
    ],
    202: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;

        var _buildMatchMemberExpression = require("../buildMatchMemberExpression");

        const isReactComponent = (0, _buildMatchMemberExpression.default)(
          "React.Component"
        );
        var _default = isReactComponent;
        exports.default = _default;
      },
      { "../buildMatchMemberExpression": 183 },
    ],
    203: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = validate;
        exports.validateField = validateField;
        exports.validateChild = validateChild;

        var _definitions = require("../definitions");

        function validate(node, key, val) {
          if (!node) return;
          const fields = _definitions.NODE_FIELDS[node.type];
          if (!fields) return;
          const field = fields[key];
          validateField(node, key, val, field);
          validateChild(node, key, val);
        }

        function validateField(node, key, val, field) {
          if (!(field != null && field.validate)) return;
          if (field.optional && val == null) return;
          field.validate(node, key, val);
        }

        function validateChild(node, key, val) {
          if (val == null) return;
          const validate = _definitions.NODE_PARENT_VALIDATIONS[val.type];
          if (!validate) return;
          validate(node, key, val);
        }
      },
      { "../definitions": 162 },
    ],
    204: [
      function (require, module, exports) {
        "use strict";
        const colorConvert = require("color-convert");

        const wrapAnsi16 = (fn, offset) =>
          function () {
            const code = fn.apply(colorConvert, arguments);
            return `\u001B[${code + offset}m`;
          };

        const wrapAnsi256 = (fn, offset) =>
          function () {
            const code = fn.apply(colorConvert, arguments);
            return `\u001B[${38 + offset};5;${code}m`;
          };

        const wrapAnsi16m = (fn, offset) =>
          function () {
            const rgb = fn.apply(colorConvert, arguments);
            return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
          };

        function assembleStyles() {
          const codes = new Map();
          const styles = {
            modifier: {
              reset: [0, 0],
              // 21 isn't widely supported and 22 does the same thing
              bold: [1, 22],
              dim: [2, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              hidden: [8, 28],
              strikethrough: [9, 29],
            },
            color: {
              black: [30, 39],
              red: [31, 39],
              green: [32, 39],
              yellow: [33, 39],
              blue: [34, 39],
              magenta: [35, 39],
              cyan: [36, 39],
              white: [37, 39],
              gray: [90, 39],

              // Bright color
              redBright: [91, 39],
              greenBright: [92, 39],
              yellowBright: [93, 39],
              blueBright: [94, 39],
              magentaBright: [95, 39],
              cyanBright: [96, 39],
              whiteBright: [97, 39],
            },
            bgColor: {
              bgBlack: [40, 49],
              bgRed: [41, 49],
              bgGreen: [42, 49],
              bgYellow: [43, 49],
              bgBlue: [44, 49],
              bgMagenta: [45, 49],
              bgCyan: [46, 49],
              bgWhite: [47, 49],

              // Bright color
              bgBlackBright: [100, 49],
              bgRedBright: [101, 49],
              bgGreenBright: [102, 49],
              bgYellowBright: [103, 49],
              bgBlueBright: [104, 49],
              bgMagentaBright: [105, 49],
              bgCyanBright: [106, 49],
              bgWhiteBright: [107, 49],
            },
          };

          // Fix humans
          styles.color.grey = styles.color.gray;

          for (const groupName of Object.keys(styles)) {
            const group = styles[groupName];

            for (const styleName of Object.keys(group)) {
              const style = group[styleName];

              styles[styleName] = {
                open: `\u001B[${style[0]}m`,
                close: `\u001B[${style[1]}m`,
              };

              group[styleName] = styles[styleName];

              codes.set(style[0], style[1]);
            }

            Object.defineProperty(styles, groupName, {
              value: group,
              enumerable: false,
            });

            Object.defineProperty(styles, "codes", {
              value: codes,
              enumerable: false,
            });
          }

          const ansi2ansi = (n) => n;
          const rgb2rgb = (r, g, b) => [r, g, b];

          styles.color.close = "\u001B[39m";
          styles.bgColor.close = "\u001B[49m";

          styles.color.ansi = {
            ansi: wrapAnsi16(ansi2ansi, 0),
          };
          styles.color.ansi256 = {
            ansi256: wrapAnsi256(ansi2ansi, 0),
          };
          styles.color.ansi16m = {
            rgb: wrapAnsi16m(rgb2rgb, 0),
          };

          styles.bgColor.ansi = {
            ansi: wrapAnsi16(ansi2ansi, 10),
          };
          styles.bgColor.ansi256 = {
            ansi256: wrapAnsi256(ansi2ansi, 10),
          };
          styles.bgColor.ansi16m = {
            rgb: wrapAnsi16m(rgb2rgb, 10),
          };

          for (let key of Object.keys(colorConvert)) {
            if (typeof colorConvert[key] !== "object") {
              continue;
            }

            const suite = colorConvert[key];

            if (key === "ansi16") {
              key = "ansi";
            }

            if ("ansi16" in suite) {
              styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
              styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
            }

            if ("ansi256" in suite) {
              styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
              styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
            }

            if ("rgb" in suite) {
              styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
              styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
            }
          }

          return styles;
        }

        // Make the export immutable
        Object.defineProperty(module, "exports", {
          enumerable: true,
          get: assembleStyles,
        });
      },
      { "color-convert": 243 },
    ],
    205: [
      function (require, module, exports) {
        (function (global) {
          (function () {
            "use strict";

            var objectAssign = require("object-assign");

            // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
            // original notice:

            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */
            function compare(a, b) {
              if (a === b) {
                return 0;
              }

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) {
                return -1;
              }
              if (y < x) {
                return 1;
              }
              return 0;
            }
            function isBuffer(b) {
              if (
                global.Buffer &&
                typeof global.Buffer.isBuffer === "function"
              ) {
                return global.Buffer.isBuffer(b);
              }
              return !!(b != null && b._isBuffer);
            }

            // based on node assert, original notice:
            // NB: The URL to the CommonJS spec is kept just for tradition.
            //     node-assert has evolved a lot since then, both in API and behavior.

            // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
            //
            // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
            //
            // Originally from narwhal.js (http://narwhaljs.org)
            // Copyright (c) 2009 Thomas Robinson <280north.com>
            //
            // Permission is hereby granted, free of charge, to any person obtaining a copy
            // of this software and associated documentation files (the 'Software'), to
            // deal in the Software without restriction, including without limitation the
            // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
            // sell copies of the Software, and to permit persons to whom the Software is
            // furnished to do so, subject to the following conditions:
            //
            // The above copyright notice and this permission notice shall be included in
            // all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
            // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
            // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

            var util = require("util/");
            var hasOwn = Object.prototype.hasOwnProperty;
            var pSlice = Array.prototype.slice;
            var functionsHaveNames = (function () {
              return function foo() {}.name === "foo";
            })();
            function pToString(obj) {
              return Object.prototype.toString.call(obj);
            }
            function isView(arrbuf) {
              if (isBuffer(arrbuf)) {
                return false;
              }
              if (typeof global.ArrayBuffer !== "function") {
                return false;
              }
              if (typeof ArrayBuffer.isView === "function") {
                return ArrayBuffer.isView(arrbuf);
              }
              if (!arrbuf) {
                return false;
              }
              if (arrbuf instanceof DataView) {
                return true;
              }
              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true;
              }
              return false;
            }
            // 1. The assert module provides functions that throw
            // AssertionError's when particular conditions are not met. The
            // assert module must conform to the following interface.

            var assert = (module.exports = ok);

            // 2. The AssertionError is defined in assert.
            // new assert.AssertionError({ message: message,
            //                             actual: actual,
            //                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/;
            // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
            function getName(func) {
              if (!util.isFunction(func)) {
                return;
              }
              if (functionsHaveNames) {
                return func.name;
              }
              var str = func.toString();
              var match = str.match(regex);
              return match && match[1];
            }
            assert.AssertionError = function AssertionError(options) {
              this.name = "AssertionError";
              this.actual = options.actual;
              this.expected = options.expected;
              this.operator = options.operator;
              if (options.message) {
                this.message = options.message;
                this.generatedMessage = false;
              } else {
                this.message = getMessage(this);
                this.generatedMessage = true;
              }
              var stackStartFunction = options.stackStartFunction || fail;
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction);
              } else {
                // non v8 browsers so we can have a stacktrace
                var err = new Error();
                if (err.stack) {
                  var out = err.stack;

                  // try to strip useless frames
                  var fn_name = getName(stackStartFunction);
                  var idx = out.indexOf("\n" + fn_name);
                  if (idx >= 0) {
                    // once we have located the function frame
                    // we need to strip out everything before it (and its line)
                    var next_line = out.indexOf("\n", idx + 1);
                    out = out.substring(next_line + 1);
                  }

                  this.stack = out;
                }
              }
            };

            // assert.AssertionError instanceof Error
            util.inherits(assert.AssertionError, Error);

            function truncate(s, n) {
              if (typeof s === "string") {
                return s.length < n ? s : s.slice(0, n);
              } else {
                return s;
              }
            }
            function inspect(something) {
              if (functionsHaveNames || !util.isFunction(something)) {
                return util.inspect(something);
              }
              var rawname = getName(something);
              var name = rawname ? ": " + rawname : "";
              return "[Function" + name + "]";
            }
            function getMessage(self) {
              return (
                truncate(inspect(self.actual), 128) +
                " " +
                self.operator +
                " " +
                truncate(inspect(self.expected), 128)
              );
            }

            // At present only the three keys mentioned above are used and
            // understood by the spec. Implementations or sub modules can pass
            // other keys to the AssertionError's constructor - they will be
            // ignored.

            // 3. All of the following functions must throw an AssertionError
            // when a corresponding condition is not met, with a message that
            // may be undefined if not provided.  All assertion methods provide
            // both the actual and expected values to the assertion error for
            // display purposes.

            function fail(
              actual,
              expected,
              message,
              operator,
              stackStartFunction
            ) {
              throw new assert.AssertionError({
                message: message,
                actual: actual,
                expected: expected,
                operator: operator,
                stackStartFunction: stackStartFunction,
              });
            }

            // EXTENSION! allows for well behaved errors defined elsewhere.
            assert.fail = fail;

            // 4. Pure assertion tests whether a value is truthy, as determined
            // by !!guard.
            // assert.ok(guard, message_opt);
            // This statement is equivalent to assert.equal(true, !!guard,
            // message_opt);. To test strictly for the value true, use
            // assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
              if (!value) fail(value, true, message, "==", assert.ok);
            }
            assert.ok = ok;

            // 5. The equality assertion tests shallow, coercive equality with
            // ==.
            // assert.equal(actual, expected, message_opt);

            assert.equal = function equal(actual, expected, message) {
              if (actual != expected)
                fail(actual, expected, message, "==", assert.equal);
            };

            // 6. The non-equality assertion tests for whether two objects are not equal
            // with != assert.notEqual(actual, expected, message_opt);

            assert.notEqual = function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, "!=", assert.notEqual);
              }
            };

            // 7. The equivalence assertion tests a deep equality relation.
            // assert.deepEqual(actual, expected, message_opt);

            assert.deepEqual = function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, "deepEqual", assert.deepEqual);
              }
            };

            assert.deepStrictEqual = function deepStrictEqual(
              actual,
              expected,
              message
            ) {
              if (!_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  "deepStrictEqual",
                  assert.deepStrictEqual
                );
              }
            };

            function _deepEqual(actual, expected, strict, memos) {
              // 7.1. All identical values are equivalent, as determined by ===.
              if (actual === expected) {
                return true;
              } else if (isBuffer(actual) && isBuffer(expected)) {
                return compare(actual, expected) === 0;

                // 7.2. If the expected value is a Date object, the actual value is
                // equivalent if it is also a Date object that refers to the same time.
              } else if (util.isDate(actual) && util.isDate(expected)) {
                return actual.getTime() === expected.getTime();

                // 7.3 If the expected value is a RegExp object, the actual value is
                // equivalent if it is also a RegExp object with the same source and
                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
              } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                return (
                  actual.source === expected.source &&
                  actual.global === expected.global &&
                  actual.multiline === expected.multiline &&
                  actual.lastIndex === expected.lastIndex &&
                  actual.ignoreCase === expected.ignoreCase
                );

                // 7.4. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
              } else if (
                (actual === null || typeof actual !== "object") &&
                (expected === null || typeof expected !== "object")
              ) {
                return strict ? actual === expected : actual == expected;

                // If both values are instances of typed arrays, wrap their underlying
                // ArrayBuffers in a Buffer each to increase performance
                // This optimization requires the arrays to have the same type as checked by
                // Object.prototype.toString (aka pToString). Never perform binary
                // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                // bit patterns are not identical.
              } else if (
                isView(actual) &&
                isView(expected) &&
                pToString(actual) === pToString(expected) &&
                !(
                  actual instanceof Float32Array ||
                  actual instanceof Float64Array
                )
              ) {
                return (
                  compare(
                    new Uint8Array(actual.buffer),
                    new Uint8Array(expected.buffer)
                  ) === 0
                );

                // 7.5 For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
              } else if (isBuffer(actual) !== isBuffer(expected)) {
                return false;
              } else {
                memos = memos || { actual: [], expected: [] };

                var actualIndex = memos.actual.indexOf(actual);
                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true;
                  }
                }

                memos.actual.push(actual);
                memos.expected.push(expected);

                return objEquiv(actual, expected, strict, memos);
              }
            }

            function isArguments(object) {
              return (
                Object.prototype.toString.call(object) == "[object Arguments]"
              );
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
              if (
                a === null ||
                a === undefined ||
                b === null ||
                b === undefined
              )
                return false;
              // if one is a primitive, the other must be same
              if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
              if (
                strict &&
                Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)
              )
                return false;
              var aIsArgs = isArguments(a);
              var bIsArgs = isArguments(b);
              if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs)) return false;
              if (aIsArgs) {
                a = pSlice.call(a);
                b = pSlice.call(b);
                return _deepEqual(a, b, strict);
              }
              var ka = objectKeys(a);
              var kb = objectKeys(b);
              var key, i;
              // having the same number of owned properties (keys incorporates
              // hasOwnProperty)
              if (ka.length !== kb.length) return false;
              //the same set of keys (although not necessarily the same order),
              ka.sort();
              kb.sort();
              //~~~cheap key test
              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i]) return false;
              }
              //equivalent values for every corresponding key, and
              //~~~possibly expensive deep test
              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                  return false;
              }
              return true;
            }

            // 8. The non-equivalence assertion tests for any deep inequality.
            // assert.notDeepEqual(actual, expected, message_opt);

            assert.notDeepEqual = function notDeepEqual(
              actual,
              expected,
              message
            ) {
              if (_deepEqual(actual, expected, false)) {
                fail(
                  actual,
                  expected,
                  message,
                  "notDeepEqual",
                  assert.notDeepEqual
                );
              }
            };

            assert.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  "notDeepStrictEqual",
                  notDeepStrictEqual
                );
              }
            }

            // 9. The strict equality assertion tests strict equality, as determined by ===.
            // assert.strictEqual(actual, expected, message_opt);

            assert.strictEqual = function strictEqual(
              actual,
              expected,
              message
            ) {
              if (actual !== expected) {
                fail(actual, expected, message, "===", assert.strictEqual);
              }
            };

            // 10. The strict non-equality assertion tests for strict inequality, as
            // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert.notStrictEqual = function notStrictEqual(
              actual,
              expected,
              message
            ) {
              if (actual === expected) {
                fail(actual, expected, message, "!==", assert.notStrictEqual);
              }
            };

            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false;
              }

              if (
                Object.prototype.toString.call(expected) == "[object RegExp]"
              ) {
                return expected.test(actual);
              }

              try {
                if (actual instanceof expected) {
                  return true;
                }
              } catch (e) {
                // Ignore.  The instanceof check doesn't work for arrow functions.
              }

              if (Error.isPrototypeOf(expected)) {
                return false;
              }

              return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
              var error;
              try {
                block();
              } catch (e) {
                error = e;
              }
              return error;
            }

            function _throws(shouldThrow, block, expected, message) {
              var actual;

              if (typeof block !== "function") {
                throw new TypeError('"block" argument must be a function');
              }

              if (typeof expected === "string") {
                message = expected;
                expected = null;
              }

              actual = _tryBlock(block);

              message =
                (expected && expected.name
                  ? " (" + expected.name + ")."
                  : ".") + (message ? " " + message : ".");

              if (shouldThrow && !actual) {
                fail(actual, expected, "Missing expected exception" + message);
              }

              var userProvidedMessage = typeof message === "string";
              var isUnwantedException = !shouldThrow && util.isError(actual);
              var isUnexpectedException = !shouldThrow && actual && !expected;

              if (
                (isUnwantedException &&
                  userProvidedMessage &&
                  expectedException(actual, expected)) ||
                isUnexpectedException
              ) {
                fail(actual, expected, "Got unwanted exception" + message);
              }

              if (
                (shouldThrow &&
                  actual &&
                  expected &&
                  !expectedException(actual, expected)) ||
                (!shouldThrow && actual)
              ) {
                throw actual;
              }
            }

            // 11. Expected to throw an error:
            // assert.throws(block, Error_opt, message_opt);

            assert.throws = function (
              block,
              /*optional*/ error,
              /*optional*/ message
            ) {
              _throws(true, block, error, message);
            };

            // EXTENSION! This is annoying to write outside this module.
            assert.doesNotThrow = function (
              block,
              /*optional*/ error,
              /*optional*/ message
            ) {
              _throws(false, block, error, message);
            };

            assert.ifError = function (err) {
              if (err) throw err;
            };

            // Expose a strict only variant of assert
            function strict(value, message) {
              if (!value) fail(value, true, message, "==", strict);
            }
            assert.strict = objectAssign(strict, assert, {
              equal: assert.strictEqual,
              deepEqual: assert.deepStrictEqual,
              notEqual: assert.notStrictEqual,
              notDeepEqual: assert.notDeepStrictEqual,
            });
            assert.strict.strict = assert.strict;

            var objectKeys =
              Object.keys ||
              function (obj) {
                var keys = [];
                for (var key in obj) {
                  if (hasOwn.call(obj, key)) keys.push(key);
                }
                return keys;
              };
          }).call(this);
        }).call(
          this,
          typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
            ? window
            : {}
        );
      },
      { "object-assign": 423, "util/": 208 },
    ],
    206: [
      function (require, module, exports) {
        if (typeof Object.create === "function") {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          };
        }
      },
      {},
    ],
    207: [
      function (require, module, exports) {
        module.exports = function isBuffer(arg) {
          return (
            arg &&
            typeof arg === "object" &&
            typeof arg.copy === "function" &&
            typeof arg.fill === "function" &&
            typeof arg.readUInt8 === "function"
          );
        };
      },
      {},
    ],
    208: [
      function (require, module, exports) {
        (function (process, global) {
          (function () {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            var formatRegExp = /%[sdj%]/g;
            exports.format = function (f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(" ");
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function (x) {
                if (x === "%%") return "%";
                if (i >= len) return x;
                switch (x) {
                  case "%s":
                    return String(args[i++]);
                  case "%d":
                    return Number(args[i++]);
                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }
                  default:
                    return x;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }
              return str;
            };

            // Mark that a method should not be used.
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.
            exports.deprecate = function (fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined(global.process)) {
                return function () {
                  return exports.deprecate(fn, msg).apply(this, arguments);
                };
              }

              if (process.noDeprecation === true) {
                return fn;
              }

              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }

              return deprecated;
            };

            var debugs = {};
            var debugEnviron;
            exports.debuglog = function (set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process.env.NODE_DEBUG || "";
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                  var pid = process.pid;
                  debugs[set] = function () {
                    var msg = exports.format.apply(exports, arguments);
                    console.error("%s %d: %s", set, pid, msg);
                  };
                } else {
                  debugs[set] = function () {};
                }
              }
              return debugs[set];
            };

            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */
            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor,
              };
              // legacy...
              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                // legacy...
                ctx.showHidden = opts;
              } else if (opts) {
                // got an "options" object
                exports._extend(ctx, opts);
              }
              // set default options
              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }
            exports.inspect = inspect;

            // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
              bold: [1, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              white: [37, 39],
              grey: [90, 39],
              black: [30, 39],
              blue: [34, 39],
              cyan: [36, 39],
              green: [32, 39],
              magenta: [35, 39],
              red: [31, 39],
              yellow: [33, 39],
            };

            // Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
              special: "cyan",
              number: "yellow",
              boolean: "yellow",
              undefined: "grey",
              null: "bold",
              string: "green",
              date: "magenta",
              // "name": intentionally not styling
              regexp: "red",
            };

            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];

              if (style) {
                return (
                  "\u001b[" +
                  inspect.colors[style][0] +
                  "m" +
                  str +
                  "\u001b[" +
                  inspect.colors[style][1] +
                  "m"
                );
              } else {
                return str;
              }
            }

            function stylizeNoColor(str, styleType) {
              return str;
            }

            function arrayToHash(array) {
              var hash = {};

              array.forEach(function (val, idx) {
                hash[val] = true;
              });

              return hash;
            }

            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (
                ctx.customInspect &&
                value &&
                isFunction(value.inspect) &&
                // Filter out the util module, it's inspect function is special
                value.inspect !== exports.inspect &&
                // Also filter out any prototype objects using the circular check.
                !(value.constructor && value.constructor.prototype === value)
              ) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }

              // Primitive types cannot have properties
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }

              // Look up the keys of the object.
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }

              // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
              if (
                isError(value) &&
                (keys.indexOf("message") >= 0 ||
                  keys.indexOf("description") >= 0)
              ) {
                return formatError(value);
              }

              // Some type of object without properties can be shortcutted.
              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }
                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    "regexp"
                  );
                }
                if (isDate(value)) {
                  return ctx.stylize(
                    Date.prototype.toString.call(value),
                    "date"
                  );
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }

              var base = "",
                array = false,
                braces = ["{", "}"];

              // Make Array say that they are Array
              if (isArray(value)) {
                array = true;
                braces = ["[", "]"];
              }

              // Make functions say that they are functions
              if (isFunction(value)) {
                var n = value.name ? ": " + value.name : "";
                base = " [Function" + n + "]";
              }

              // Make RegExps say that they are RegExps
              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }

              // Make dates with properties first say the date
              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }

              // Make error with message first say the error
              if (isError(value)) {
                base = " " + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    "regexp"
                  );
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }

              ctx.seen.push(value);

              var output;
              if (array) {
                output = formatArray(
                  ctx,
                  value,
                  recurseTimes,
                  visibleKeys,
                  keys
                );
              } else {
                output = keys.map(function (key) {
                  return formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    array
                  );
                });
              }

              ctx.seen.pop();

              return reduceToSingleString(output, base, braces);
            }

            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");
              if (isString(value)) {
                var simple =
                  "'" +
                  JSON.stringify(value)
                    .replace(/^"|"$/g, "")
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"') +
                  "'";
                return ctx.stylize(simple, "string");
              }
              if (isNumber(value)) return ctx.stylize("" + value, "number");
              if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
              // For some reason typeof null is "object", so special case here.
              if (isNull(value)) return ctx.stylize("null", "null");
            }

            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }

            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      String(i),
                      true
                    )
                  );
                } else {
                  output.push("");
                }
              }
              keys.forEach(function (key) {
                if (!key.match(/^\d+$/)) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      key,
                      true
                    )
                  );
                }
              });
              return output;
            }

            function formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              array
            ) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key],
              };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = "[" + key + "]";
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str
                        .split("\n")
                        .map(function (line) {
                          return "  " + line;
                        })
                        .join("\n")
                        .substr(2);
                    } else {
                      str =
                        "\n" +
                        str
                          .split("\n")
                          .map(function (line) {
                            return "   " + line;
                          })
                          .join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify("" + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"')
                    .replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }

              return name + ": " + str;
            }

            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0;
              var length = output.reduce(function (prev, cur) {
                numLinesEst++;
                if (cur.indexOf("\n") >= 0) numLinesEst++;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);

              if (length > 60) {
                return (
                  braces[0] +
                  (base === "" ? "" : base + "\n ") +
                  " " +
                  output.join(",\n  ") +
                  " " +
                  braces[1]
                );
              }

              return (
                braces[0] + base + " " + output.join(", ") + " " + braces[1]
              );
            }

            // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.
            function isArray(ar) {
              return Array.isArray(ar);
            }
            exports.isArray = isArray;

            function isBoolean(arg) {
              return typeof arg === "boolean";
            }
            exports.isBoolean = isBoolean;

            function isNull(arg) {
              return arg === null;
            }
            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports.isNumber = isNumber;

            function isString(arg) {
              return typeof arg === "string";
            }
            exports.isString = isString;

            function isSymbol(arg) {
              return typeof arg === "symbol";
            }
            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
              return arg === void 0;
            }
            exports.isUndefined = isUndefined;

            function isRegExp(re) {
              return isObject(re) && objectToString(re) === "[object RegExp]";
            }
            exports.isRegExp = isRegExp;

            function isObject(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports.isObject = isObject;

            function isDate(d) {
              return isObject(d) && objectToString(d) === "[object Date]";
            }
            exports.isDate = isDate;

            function isError(e) {
              return (
                isObject(e) &&
                (objectToString(e) === "[object Error]" || e instanceof Error)
              );
            }
            exports.isError = isError;

            function isFunction(arg) {
              return typeof arg === "function";
            }
            exports.isFunction = isFunction;

            function isPrimitive(arg) {
              return (
                arg === null ||
                typeof arg === "boolean" ||
                typeof arg === "number" ||
                typeof arg === "string" ||
                typeof arg === "symbol" || // ES6 symbol
                typeof arg === "undefined"
              );
            }
            exports.isPrimitive = isPrimitive;

            exports.isBuffer = require("./support/isBuffer");

            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }

            function pad(n) {
              return n < 10 ? "0" + n.toString(10) : n.toString(10);
            }

            var months = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ];

            // 26 Feb 16:19:34
            function timestamp() {
              var d = new Date();
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds()),
              ].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }

            // log is just a thin wrapper to console.log that prepends a timestamp
            exports.log = function () {
              console.log(
                "%s - %s",
                timestamp(),
                exports.format.apply(exports, arguments)
              );
            };

            /**
             * Inherit the prototype methods from one constructor into another.
             *
             * The Function.prototype.inherits from lang.js rewritten as a standalone
             * function (not on Function.prototype). NOTE: If this file is to be loaded
             * during bootstrapping this function needs to be rewritten using some native
             * functions as prototype setup using normal JavaScript does not work as
             * expected during bootstrapping (see mirror.js in r114903).
             *
             * @param {function} ctor Constructor function which needs to inherit the
             *     prototype.
             * @param {function} superCtor Constructor function to inherit prototype from.
             */
            exports.inherits = require("inherits");

            exports._extend = function (origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject(add)) return origin;

              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            };

            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
          }).call(this);
        }).call(
          this,
          require("_process"),
          typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
            ? window
            : {}
        );
      },
      { "./support/isBuffer": 207, _process: 425, inherits: 206 },
    ],
    209: [
      function (require, module, exports) {
        module.exports = require("./lib/axios");
      },
      { "./lib/axios": 211 },
    ],
    210: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");
        var settle = require("./../core/settle");
        var cookies = require("./../helpers/cookies");
        var buildURL = require("./../helpers/buildURL");
        var buildFullPath = require("../core/buildFullPath");
        var parseHeaders = require("./../helpers/parseHeaders");
        var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
        var createError = require("../core/createError");

        module.exports = function xhrAdapter(config) {
          return new Promise(function dispatchXhrRequest(resolve, reject) {
            var requestData = config.data;
            var requestHeaders = config.headers;

            if (utils.isFormData(requestData)) {
              delete requestHeaders["Content-Type"]; // Let the browser set it
            }

            var request = new XMLHttpRequest();

            // HTTP basic authentication
            if (config.auth) {
              var username = config.auth.username || "";
              var password = config.auth.password
                ? unescape(encodeURIComponent(config.auth.password))
                : "";
              requestHeaders.Authorization =
                "Basic " + btoa(username + ":" + password);
            }

            var fullPath = buildFullPath(config.baseURL, config.url);
            request.open(
              config.method.toUpperCase(),
              buildURL(fullPath, config.params, config.paramsSerializer),
              true
            );

            // Set the request timeout in MS
            request.timeout = config.timeout;

            // Listen for ready state
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }

              // The request errored out and we didn't get a response, this will be
              // handled by onerror instead
              // With one exception: request that using file: protocol, most browsers
              // will return status as 0 even though it's a successful request
              if (
                request.status === 0 &&
                !(
                  request.responseURL &&
                  request.responseURL.indexOf("file:") === 0
                )
              ) {
                return;
              }

              // Prepare the response
              var responseHeaders =
                "getAllResponseHeaders" in request
                  ? parseHeaders(request.getAllResponseHeaders())
                  : null;
              var responseData =
                !config.responseType || config.responseType === "text"
                  ? request.responseText
                  : request.response;
              var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request,
              };

              settle(resolve, reject, response);

              // Clean up request
              request = null;
            };

            // Handle browser request cancellation (as opposed to a manual cancellation)
            request.onabort = function handleAbort() {
              if (!request) {
                return;
              }

              reject(
                createError("Request aborted", config, "ECONNABORTED", request)
              );

              // Clean up request
              request = null;
            };

            // Handle low level network errors
            request.onerror = function handleError() {
              // Real errors are hidden from us by the browser
              // onerror should only fire if it's a network error
              reject(createError("Network Error", config, null, request));

              // Clean up request
              request = null;
            };

            // Handle timeout
            request.ontimeout = function handleTimeout() {
              var timeoutErrorMessage =
                "timeout of " + config.timeout + "ms exceeded";
              if (config.timeoutErrorMessage) {
                timeoutErrorMessage = config.timeoutErrorMessage;
              }
              reject(
                createError(
                  timeoutErrorMessage,
                  config,
                  "ECONNABORTED",
                  request
                )
              );

              // Clean up request
              request = null;
            };

            // Add xsrf header
            // This is only done if running in a standard browser environment.
            // Specifically not if we're in a web worker, or react-native.
            if (utils.isStandardBrowserEnv()) {
              // Add xsrf header
              var xsrfValue =
                (config.withCredentials || isURLSameOrigin(fullPath)) &&
                config.xsrfCookieName
                  ? cookies.read(config.xsrfCookieName)
                  : undefined;

              if (xsrfValue) {
                requestHeaders[config.xsrfHeaderName] = xsrfValue;
              }
            }

            // Add headers to the request
            if ("setRequestHeader" in request) {
              utils.forEach(
                requestHeaders,
                function setRequestHeader(val, key) {
                  if (
                    typeof requestData === "undefined" &&
                    key.toLowerCase() === "content-type"
                  ) {
                    // Remove Content-Type if data is undefined
                    delete requestHeaders[key];
                  } else {
                    // Otherwise add header to the request
                    request.setRequestHeader(key, val);
                  }
                }
              );
            }

            // Add withCredentials to request if needed
            if (!utils.isUndefined(config.withCredentials)) {
              request.withCredentials = !!config.withCredentials;
            }

            // Add responseType to request if needed
            if (config.responseType) {
              try {
                request.responseType = config.responseType;
              } catch (e) {
                // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                if (config.responseType !== "json") {
                  throw e;
                }
              }
            }

            // Handle progress if needed
            if (typeof config.onDownloadProgress === "function") {
              request.addEventListener("progress", config.onDownloadProgress);
            }

            // Not all browsers support upload events
            if (
              typeof config.onUploadProgress === "function" &&
              request.upload
            ) {
              request.upload.addEventListener(
                "progress",
                config.onUploadProgress
              );
            }

            if (config.cancelToken) {
              // Handle cancellation
              config.cancelToken.promise.then(function onCanceled(cancel) {
                if (!request) {
                  return;
                }

                request.abort();
                reject(cancel);
                // Clean up request
                request = null;
              });
            }

            if (!requestData) {
              requestData = null;
            }

            // Send the request
            request.send(requestData);
          });
        };
      },
      {
        "../core/buildFullPath": 217,
        "../core/createError": 218,
        "./../core/settle": 222,
        "./../helpers/buildURL": 226,
        "./../helpers/cookies": 228,
        "./../helpers/isURLSameOrigin": 231,
        "./../helpers/parseHeaders": 233,
        "./../utils": 235,
      },
    ],
    211: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./utils");
        var bind = require("./helpers/bind");
        var Axios = require("./core/Axios");
        var mergeConfig = require("./core/mergeConfig");
        var defaults = require("./defaults");

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          var context = new Axios(defaultConfig);
          var instance = bind(Axios.prototype.request, context);

          // Copy axios.prototype to instance
          utils.extend(instance, Axios.prototype, context);

          // Copy context to instance
          utils.extend(instance, context);

          return instance;
        }

        // Create the default instance to be exported
        var axios = createInstance(defaults);

        // Expose Axios class to allow class inheritance
        axios.Axios = Axios;

        // Factory for creating new instances
        axios.create = function create(instanceConfig) {
          return createInstance(mergeConfig(axios.defaults, instanceConfig));
        };

        // Expose Cancel & CancelToken
        axios.Cancel = require("./cancel/Cancel");
        axios.CancelToken = require("./cancel/CancelToken");
        axios.isCancel = require("./cancel/isCancel");

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };
        axios.spread = require("./helpers/spread");

        // Expose isAxiosError
        axios.isAxiosError = require("./helpers/isAxiosError");

        module.exports = axios;

        // Allow use of default import syntax in TypeScript
        module.exports.default = axios;
      },
      {
        "./cancel/Cancel": 212,
        "./cancel/CancelToken": 213,
        "./cancel/isCancel": 214,
        "./core/Axios": 215,
        "./core/mergeConfig": 221,
        "./defaults": 224,
        "./helpers/bind": 225,
        "./helpers/isAxiosError": 230,
        "./helpers/spread": 234,
        "./utils": 235,
      },
    ],
    212: [
      function (require, module, exports) {
        "use strict";

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
          this.message = message;
        }

        Cancel.prototype.toString = function toString() {
          return "Cancel" + (this.message ? ": " + this.message : "");
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;
      },
      {},
    ],
    213: [
      function (require, module, exports) {
        "use strict";

        var Cancel = require("./Cancel");

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
          if (typeof executor !== "function") {
            throw new TypeError("executor must be a function.");
          }

          var resolvePromise;
          this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
          });

          var token = this;
          executor(function cancel(message) {
            if (token.reason) {
              // Cancellation has already been requested
              return;
            }

            token.reason = new Cancel(message);
            resolvePromise(token.reason);
          });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
          if (this.reason) {
            throw this.reason;
          }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
          var cancel;
          var token = new CancelToken(function executor(c) {
            cancel = c;
          });
          return {
            token: token,
            cancel: cancel,
          };
        };

        module.exports = CancelToken;
      },
      { "./Cancel": 212 },
    ],
    214: [
      function (require, module, exports) {
        "use strict";

        module.exports = function isCancel(value) {
          return !!(value && value.__CANCEL__);
        };
      },
      {},
    ],
    215: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");
        var buildURL = require("../helpers/buildURL");
        var InterceptorManager = require("./InterceptorManager");
        var dispatchRequest = require("./dispatchRequest");
        var mergeConfig = require("./mergeConfig");

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
          this.defaults = instanceConfig;
          this.interceptors = {
            request: new InterceptorManager(),
            response: new InterceptorManager(),
          };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
          /*eslint no-param-reassign:0*/
          // Allow for axios('example/url'[, config]) a la fetch API
          if (typeof config === "string") {
            config = arguments[1] || {};
            config.url = arguments[0];
          } else {
            config = config || {};
          }

          config = mergeConfig(this.defaults, config);

          // Set config.method
          if (config.method) {
            config.method = config.method.toLowerCase();
          } else if (this.defaults.method) {
            config.method = this.defaults.method.toLowerCase();
          } else {
            config.method = "get";
          }

          // Hook up interceptors middleware
          var chain = [dispatchRequest, undefined];
          var promise = Promise.resolve(config);

          this.interceptors.request.forEach(function unshiftRequestInterceptors(
            interceptor
          ) {
            chain.unshift(interceptor.fulfilled, interceptor.rejected);
          });

          this.interceptors.response.forEach(function pushResponseInterceptors(
            interceptor
          ) {
            chain.push(interceptor.fulfilled, interceptor.rejected);
          });

          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }

          return promise;
        };

        Axios.prototype.getUri = function getUri(config) {
          config = mergeConfig(this.defaults, config);
          return buildURL(
            config.url,
            config.params,
            config.paramsSerializer
          ).replace(/^\?/, "");
        };

        // Provide aliases for supported request methods
        utils.forEach(
          ["delete", "get", "head", "options"],
          function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
              return this.request(
                mergeConfig(config || {}, {
                  method: method,
                  url: url,
                  data: (config || {}).data,
                })
              );
            };
          }
        );

        utils.forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, data, config) {
              return this.request(
                mergeConfig(config || {}, {
                  method: method,
                  url: url,
                  data: data,
                })
              );
            };
          }
        );

        module.exports = Axios;
      },
      {
        "../helpers/buildURL": 226,
        "./../utils": 235,
        "./InterceptorManager": 216,
        "./dispatchRequest": 219,
        "./mergeConfig": 221,
      },
    ],
    216: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        function InterceptorManager() {
          this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
          this.handlers.push({
            fulfilled: fulfilled,
            rejected: rejected,
          });
          return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
          if (this.handlers[id]) {
            this.handlers[id] = null;
          }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
          utils.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
              fn(h);
            }
          });
        };

        module.exports = InterceptorManager;
      },
      { "./../utils": 235 },
    ],
    217: [
      function (require, module, exports) {
        "use strict";

        var isAbsoluteURL = require("../helpers/isAbsoluteURL");
        var combineURLs = require("../helpers/combineURLs");

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         * @returns {string} The combined full path
         */
        module.exports = function buildFullPath(baseURL, requestedURL) {
          if (baseURL && !isAbsoluteURL(requestedURL)) {
            return combineURLs(baseURL, requestedURL);
          }
          return requestedURL;
        };
      },
      { "../helpers/combineURLs": 227, "../helpers/isAbsoluteURL": 229 },
    ],
    218: [
      function (require, module, exports) {
        "use strict";

        var enhanceError = require("./enhanceError");

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(
          message,
          config,
          code,
          request,
          response
        ) {
          var error = new Error(message);
          return enhanceError(error, config, code, request, response);
        };
      },
      { "./enhanceError": 220 },
    ],
    219: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");
        var transformData = require("./transformData");
        var isCancel = require("../cancel/isCancel");
        var defaults = require("../defaults");

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          // Ensure headers exist
          config.headers = config.headers || {};

          // Transform request data
          config.data = transformData(
            config.data,
            config.headers,
            config.transformRequest
          );

          // Flatten headers
          config.headers = utils.merge(
            config.headers.common || {},
            config.headers[config.method] || {},
            config.headers
          );

          utils.forEach(
            ["delete", "get", "head", "post", "put", "patch", "common"],
            function cleanHeaderConfig(method) {
              delete config.headers[method];
            }
          );

          var adapter = config.adapter || defaults.adapter;

          return adapter(config).then(
            function onAdapterResolution(response) {
              throwIfCancellationRequested(config);

              // Transform response data
              response.data = transformData(
                response.data,
                response.headers,
                config.transformResponse
              );

              return response;
            },
            function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config);

                // Transform response data
                if (reason && reason.response) {
                  reason.response.data = transformData(
                    reason.response.data,
                    reason.response.headers,
                    config.transformResponse
                  );
                }
              }

              return Promise.reject(reason);
            }
          );
        };
      },
      {
        "../cancel/isCancel": 214,
        "../defaults": 224,
        "./../utils": 235,
        "./transformData": 223,
      },
    ],
    220: [
      function (require, module, exports) {
        "use strict";

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(
          error,
          config,
          code,
          request,
          response
        ) {
          error.config = config;
          if (code) {
            error.code = code;
          }

          error.request = request;
          error.response = response;
          error.isAxiosError = true;

          error.toJSON = function toJSON() {
            return {
              // Standard
              message: this.message,
              name: this.name,
              // Microsoft
              description: this.description,
              number: this.number,
              // Mozilla
              fileName: this.fileName,
              lineNumber: this.lineNumber,
              columnNumber: this.columnNumber,
              stack: this.stack,
              // Axios
              config: this.config,
              code: this.code,
            };
          };
          return error;
        };
      },
      {},
    ],
    221: [
      function (require, module, exports) {
        "use strict";

        var utils = require("../utils");

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         * @returns {Object} New object resulting from merging config2 to config1
         */
        module.exports = function mergeConfig(config1, config2) {
          // eslint-disable-next-line no-param-reassign
          config2 = config2 || {};
          var config = {};

          var valueFromConfig2Keys = ["url", "method", "data"];
          var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
          var defaultToConfig2Keys = [
            "baseURL",
            "transformRequest",
            "transformResponse",
            "paramsSerializer",
            "timeout",
            "timeoutMessage",
            "withCredentials",
            "adapter",
            "responseType",
            "xsrfCookieName",
            "xsrfHeaderName",
            "onUploadProgress",
            "onDownloadProgress",
            "decompress",
            "maxContentLength",
            "maxBodyLength",
            "maxRedirects",
            "transport",
            "httpAgent",
            "httpsAgent",
            "cancelToken",
            "socketPath",
            "responseEncoding",
          ];
          var directMergeKeys = ["validateStatus"];

          function getMergedValue(target, source) {
            if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
              return utils.merge(target, source);
            } else if (utils.isPlainObject(source)) {
              return utils.merge({}, source);
            } else if (utils.isArray(source)) {
              return source.slice();
            }
            return source;
          }

          function mergeDeepProperties(prop) {
            if (!utils.isUndefined(config2[prop])) {
              config[prop] = getMergedValue(config1[prop], config2[prop]);
            } else if (!utils.isUndefined(config1[prop])) {
              config[prop] = getMergedValue(undefined, config1[prop]);
            }
          }

          utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
            if (!utils.isUndefined(config2[prop])) {
              config[prop] = getMergedValue(undefined, config2[prop]);
            }
          });

          utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

          utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
            if (!utils.isUndefined(config2[prop])) {
              config[prop] = getMergedValue(undefined, config2[prop]);
            } else if (!utils.isUndefined(config1[prop])) {
              config[prop] = getMergedValue(undefined, config1[prop]);
            }
          });

          utils.forEach(directMergeKeys, function merge(prop) {
            if (prop in config2) {
              config[prop] = getMergedValue(config1[prop], config2[prop]);
            } else if (prop in config1) {
              config[prop] = getMergedValue(undefined, config1[prop]);
            }
          });

          var axiosKeys = valueFromConfig2Keys
            .concat(mergeDeepPropertiesKeys)
            .concat(defaultToConfig2Keys)
            .concat(directMergeKeys);

          var otherKeys = Object.keys(config1)
            .concat(Object.keys(config2))
            .filter(function filterAxiosKeys(key) {
              return axiosKeys.indexOf(key) === -1;
            });

          utils.forEach(otherKeys, mergeDeepProperties);

          return config;
        };
      },
      { "../utils": 235 },
    ],
    222: [
      function (require, module, exports) {
        "use strict";

        var createError = require("./createError");

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
          var validateStatus = response.config.validateStatus;
          if (
            !response.status ||
            !validateStatus ||
            validateStatus(response.status)
          ) {
            resolve(response);
          } else {
            reject(
              createError(
                "Request failed with status code " + response.status,
                response.config,
                null,
                response.request,
                response
              )
            );
          }
        };
      },
      { "./createError": 218 },
    ],
    223: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
          /*eslint no-param-reassign:0*/
          utils.forEach(fns, function transform(fn) {
            data = fn(data, headers);
          });

          return data;
        };
      },
      { "./../utils": 235 },
    ],
    224: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            var utils = require("./utils");
            var normalizeHeaderName = require("./helpers/normalizeHeaderName");

            var DEFAULT_CONTENT_TYPE = {
              "Content-Type": "application/x-www-form-urlencoded",
            };

            function setContentTypeIfUnset(headers, value) {
              if (
                !utils.isUndefined(headers) &&
                utils.isUndefined(headers["Content-Type"])
              ) {
                headers["Content-Type"] = value;
              }
            }

            function getDefaultAdapter() {
              var adapter;
              if (typeof XMLHttpRequest !== "undefined") {
                // For browsers use XHR adapter
                adapter = require("./adapters/xhr");
              } else if (
                typeof process !== "undefined" &&
                Object.prototype.toString.call(process) === "[object process]"
              ) {
                // For node use HTTP adapter
                adapter = require("./adapters/http");
              }
              return adapter;
            }

            var defaults = {
              adapter: getDefaultAdapter(),

              transformRequest: [
                function transformRequest(data, headers) {
                  normalizeHeaderName(headers, "Accept");
                  normalizeHeaderName(headers, "Content-Type");
                  if (
                    utils.isFormData(data) ||
                    utils.isArrayBuffer(data) ||
                    utils.isBuffer(data) ||
                    utils.isStream(data) ||
                    utils.isFile(data) ||
                    utils.isBlob(data)
                  ) {
                    return data;
                  }
                  if (utils.isArrayBufferView(data)) {
                    return data.buffer;
                  }
                  if (utils.isURLSearchParams(data)) {
                    setContentTypeIfUnset(
                      headers,
                      "application/x-www-form-urlencoded;charset=utf-8"
                    );
                    return data.toString();
                  }
                  if (utils.isObject(data)) {
                    setContentTypeIfUnset(
                      headers,
                      "application/json;charset=utf-8"
                    );
                    return JSON.stringify(data);
                  }
                  return data;
                },
              ],

              transformResponse: [
                function transformResponse(data) {
                  /*eslint no-param-reassign:0*/
                  if (typeof data === "string") {
                    try {
                      data = JSON.parse(data);
                    } catch (e) {
                      /* Ignore */
                    }
                  }
                  return data;
                },
              ],

              /**
               * A timeout in milliseconds to abort a request. If set to 0 (default) a
               * timeout is not created.
               */
              timeout: 0,

              xsrfCookieName: "XSRF-TOKEN",
              xsrfHeaderName: "X-XSRF-TOKEN",

              maxContentLength: -1,
              maxBodyLength: -1,

              validateStatus: function validateStatus(status) {
                return status >= 200 && status < 300;
              },
            };

            defaults.headers = {
              common: {
                Accept: "application/json, text/plain, */*",
              },
            };

            utils.forEach(
              ["delete", "get", "head"],
              function forEachMethodNoData(method) {
                defaults.headers[method] = {};
              }
            );

            utils.forEach(
              ["post", "put", "patch"],
              function forEachMethodWithData(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
              }
            );

            module.exports = defaults;
          }).call(this);
        }).call(this, require("_process"));
      },
      {
        "./adapters/http": 210,
        "./adapters/xhr": 210,
        "./helpers/normalizeHeaderName": 232,
        "./utils": 235,
        _process: 425,
      },
    ],
    225: [
      function (require, module, exports) {
        "use strict";

        module.exports = function bind(fn, thisArg) {
          return function wrap() {
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }
            return fn.apply(thisArg, args);
          };
        };
      },
      {},
    ],
    226: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        function encode(val) {
          return encodeURIComponent(val)
            .replace(/%3A/gi, ":")
            .replace(/%24/g, "$")
            .replace(/%2C/gi, ",")
            .replace(/%20/g, "+")
            .replace(/%5B/gi, "[")
            .replace(/%5D/gi, "]");
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          var serializedParams;
          if (paramsSerializer) {
            serializedParams = paramsSerializer(params);
          } else if (utils.isURLSearchParams(params)) {
            serializedParams = params.toString();
          } else {
            var parts = [];

            utils.forEach(params, function serialize(val, key) {
              if (val === null || typeof val === "undefined") {
                return;
              }

              if (utils.isArray(val)) {
                key = key + "[]";
              } else {
                val = [val];
              }

              utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) {
                  v = v.toISOString();
                } else if (utils.isObject(v)) {
                  v = JSON.stringify(v);
                }
                parts.push(encode(key) + "=" + encode(v));
              });
            });

            serializedParams = parts.join("&");
          }

          if (serializedParams) {
            var hashmarkIndex = url.indexOf("#");
            if (hashmarkIndex !== -1) {
              url = url.slice(0, hashmarkIndex);
            }

            url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
          }

          return url;
        };
      },
      { "./../utils": 235 },
    ],
    227: [
      function (require, module, exports) {
        "use strict";

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
          return relativeURL
            ? baseURL.replace(/\/+$/, "") +
                "/" +
                relativeURL.replace(/^\/+/, "")
            : baseURL;
        };
      },
      {},
    ],
    228: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        module.exports = utils.isStandardBrowserEnv()
          ? // Standard browser envs support document.cookie
            (function standardBrowserEnv() {
              return {
                write: function write(
                  name,
                  value,
                  expires,
                  path,
                  domain,
                  secure
                ) {
                  var cookie = [];
                  cookie.push(name + "=" + encodeURIComponent(value));

                  if (utils.isNumber(expires)) {
                    cookie.push("expires=" + new Date(expires).toGMTString());
                  }

                  if (utils.isString(path)) {
                    cookie.push("path=" + path);
                  }

                  if (utils.isString(domain)) {
                    cookie.push("domain=" + domain);
                  }

                  if (secure === true) {
                    cookie.push("secure");
                  }

                  document.cookie = cookie.join("; ");
                },

                read: function read(name) {
                  var match = document.cookie.match(
                    new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
                  );
                  return match ? decodeURIComponent(match[3]) : null;
                },

                remove: function remove(name) {
                  this.write(name, "", Date.now() - 86400000);
                },
              };
            })()
          : // Non standard browser env (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return {
                write: function write() {},
                read: function read() {
                  return null;
                },
                remove: function remove() {},
              };
            })();
      },
      { "./../utils": 235 },
    ],
    229: [
      function (require, module, exports) {
        "use strict";

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };
      },
      {},
    ],
    230: [
      function (require, module, exports) {
        "use strict";

        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        module.exports = function isAxiosError(payload) {
          return typeof payload === "object" && payload.isAxiosError === true;
        };
      },
      {},
    ],
    231: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        module.exports = utils.isStandardBrowserEnv()
          ? // Standard browser envs have full support of the APIs needed to test
            // whether the request URL is of the same origin as current location.
            (function standardBrowserEnv() {
              var msie = /(msie|trident)/i.test(navigator.userAgent);
              var urlParsingNode = document.createElement("a");
              var originURL;

              /**
               * Parse a URL to discover it's components
               *
               * @param {String} url The URL to be parsed
               * @returns {Object}
               */
              function resolveURL(url) {
                var href = url;

                if (msie) {
                  // IE needs attribute set twice to normalize properties
                  urlParsingNode.setAttribute("href", href);
                  href = urlParsingNode.href;
                }

                urlParsingNode.setAttribute("href", href);

                // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                return {
                  href: urlParsingNode.href,
                  protocol: urlParsingNode.protocol
                    ? urlParsingNode.protocol.replace(/:$/, "")
                    : "",
                  host: urlParsingNode.host,
                  search: urlParsingNode.search
                    ? urlParsingNode.search.replace(/^\?/, "")
                    : "",
                  hash: urlParsingNode.hash
                    ? urlParsingNode.hash.replace(/^#/, "")
                    : "",
                  hostname: urlParsingNode.hostname,
                  port: urlParsingNode.port,
                  pathname:
                    urlParsingNode.pathname.charAt(0) === "/"
                      ? urlParsingNode.pathname
                      : "/" + urlParsingNode.pathname,
                };
              }

              originURL = resolveURL(window.location.href);

              /**
               * Determine if a URL shares the same origin as the current location
               *
               * @param {String} requestURL The URL to test
               * @returns {boolean} True if URL shares the same origin, otherwise false
               */
              return function isURLSameOrigin(requestURL) {
                var parsed = utils.isString(requestURL)
                  ? resolveURL(requestURL)
                  : requestURL;
                return (
                  parsed.protocol === originURL.protocol &&
                  parsed.host === originURL.host
                );
              };
            })()
          : // Non standard browser envs (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return function isURLSameOrigin() {
                return true;
              };
            })();
      },
      { "./../utils": 235 },
    ],
    232: [
      function (require, module, exports) {
        "use strict";

        var utils = require("../utils");

        module.exports = function normalizeHeaderName(headers, normalizedName) {
          utils.forEach(headers, function processHeader(value, name) {
            if (
              name !== normalizedName &&
              name.toUpperCase() === normalizedName.toUpperCase()
            ) {
              headers[normalizedName] = value;
              delete headers[name];
            }
          });
        };
      },
      { "../utils": 235 },
    ],
    233: [
      function (require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        // Headers whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
          "age",
          "authorization",
          "content-length",
          "content-type",
          "etag",
          "expires",
          "from",
          "host",
          "if-modified-since",
          "if-unmodified-since",
          "last-modified",
          "location",
          "max-forwards",
          "proxy-authorization",
          "referer",
          "retry-after",
          "user-agent",
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
          var parsed = {};
          var key;
          var val;
          var i;

          if (!headers) {
            return parsed;
          }

          utils.forEach(headers.split("\n"), function parser(line) {
            i = line.indexOf(":");
            key = utils.trim(line.substr(0, i)).toLowerCase();
            val = utils.trim(line.substr(i + 1));

            if (key) {
              if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                return;
              }
              if (key === "set-cookie") {
                parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            }
          });

          return parsed;
        };
      },
      { "./../utils": 235 },
    ],
    234: [
      function (require, module, exports) {
        "use strict";

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        };
      },
      {},
    ],
    235: [
      function (require, module, exports) {
        "use strict";

        var bind = require("./helpers/bind");

        /*global toString:true*/

        // utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
          return toString.call(val) === "[object Array]";
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
          return typeof val === "undefined";
        }

        /**
         * Determine if a value is a Buffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
          return (
            val !== null &&
            !isUndefined(val) &&
            val.constructor !== null &&
            !isUndefined(val.constructor) &&
            typeof val.constructor.isBuffer === "function" &&
            val.constructor.isBuffer(val)
          );
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
          return toString.call(val) === "[object ArrayBuffer]";
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
          return typeof FormData !== "undefined" && val instanceof FormData;
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          var result;
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && val.buffer instanceof ArrayBuffer;
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
          return typeof val === "string";
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
          return typeof val === "number";
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
          return val !== null && typeof val === "object";
        }

        /**
         * Determine if a value is a plain Object
         *
         * @param {Object} val The value to test
         * @return {boolean} True if value is a plain Object, otherwise false
         */
        function isPlainObject(val) {
          if (toString.call(val) !== "[object Object]") {
            return false;
          }

          var prototype = Object.getPrototypeOf(val);
          return prototype === null || prototype === Object.prototype;
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
          return toString.call(val) === "[object Date]";
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
          return toString.call(val) === "[object File]";
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
          return toString.call(val) === "[object Blob]";
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
          return toString.call(val) === "[object Function]";
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
          return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
          return (
            typeof URLSearchParams !== "undefined" &&
            val instanceof URLSearchParams
          );
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
          return str.replace(/^\s*/, "").replace(/\s*$/, "");
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         */
        function isStandardBrowserEnv() {
          if (
            typeof navigator !== "undefined" &&
            (navigator.product === "ReactNative" ||
              navigator.product === "NativeScript" ||
              navigator.product === "NS")
          ) {
            return false;
          }
          return (
            typeof window !== "undefined" && typeof document !== "undefined"
          );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === "undefined") {
            return;
          }

          // Force an array if not already something iterable
          if (typeof obj !== "object") {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }

          if (isArray(obj)) {
            // Iterate over array values
            for (var i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                fn.call(null, obj[key], key, obj);
              }
            }
          }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
          var result = {};
          function assignValue(val, key) {
            if (isPlainObject(result[key]) && isPlainObject(val)) {
              result[key] = merge(result[key], val);
            } else if (isPlainObject(val)) {
              result[key] = merge({}, val);
            } else if (isArray(val)) {
              result[key] = val.slice();
            } else {
              result[key] = val;
            }
          }

          for (var i = 0, l = arguments.length; i < l; i++) {
            forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
          forEach(b, function assignValue(val, key) {
            if (thisArg && typeof val === "function") {
              a[key] = bind(val, thisArg);
            } else {
              a[key] = val;
            }
          });
          return a;
        }

        /**
         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
         *
         * @param {string} content with BOM
         * @return {string} content value without BOM
         */
        function stripBOM(content) {
          if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
          }
          return content;
        }

        module.exports = {
          isArray: isArray,
          isArrayBuffer: isArrayBuffer,
          isBuffer: isBuffer,
          isFormData: isFormData,
          isArrayBufferView: isArrayBufferView,
          isString: isString,
          isNumber: isNumber,
          isObject: isObject,
          isPlainObject: isPlainObject,
          isUndefined: isUndefined,
          isDate: isDate,
          isFile: isFile,
          isBlob: isBlob,
          isFunction: isFunction,
          isStream: isStream,
          isURLSearchParams: isURLSearchParams,
          isStandardBrowserEnv: isStandardBrowserEnv,
          forEach: forEach,
          merge: merge,
          extend: extend,
          trim: trim,
          stripBOM: stripBOM,
        };
      },
      { "./helpers/bind": 225 },
    ],
    236: [
      function (require, module, exports) {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;

        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function getLens(b64) {
          var len = b64.length;

          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf("=");
          if (validLen === -1) validLen = len;

          var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

          return [validLen, placeHoldersLen];
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];

          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

          var curByte = 0;

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

          var i;
          for (i = 0; i < len; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[curByte++] = (tmp >> 16) & 0xff;
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xff0000) +
              ((uint8[i + 1] << 8) & 0xff00) +
              (uint8[i + 2] & 0xff);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(
              lookup[tmp >> 10] +
                lookup[(tmp >> 4) & 0x3f] +
                lookup[(tmp << 2) & 0x3f] +
                "="
            );
          }

          return parts.join("");
        }
      },
      {},
    ],
    237: [
      function (require, module, exports) {
        arguments[4][126][0].apply(exports, arguments);
      },
      { dup: 126 },
    ],
    238: [
      function (require, module, exports) {
        arguments[4][126][0].apply(exports, arguments);
      },
      { dup: 126 },
    ],
    239: [
      function (require, module, exports) {
        (function (Buffer) {
          (function () {
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <https://feross.org>
             * @license  MIT
             */
            /* eslint-disable no-proto */

            "use strict";

            var base64 = require("base64-js");
            var ieee754 = require("ieee754");

            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;

            var K_MAX_LENGTH = 0x7fffffff;
            exports.kMaxLength = K_MAX_LENGTH;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

            if (
              !Buffer.TYPED_ARRAY_SUPPORT &&
              typeof console !== "undefined" &&
              typeof console.error === "function"
            ) {
              console.error(
                "This browser lacks typed array (Uint8Array) support which is required by " +
                  "`buffer` v5.x. Use `buffer` v4.x if you require old browser support."
              );
            }

            function typedArraySupport() {
              // Can typed array instances can be augmented?
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = {
                  __proto__: Uint8Array.prototype,
                  foo: function () {
                    return 42;
                  },
                };
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }

            Object.defineProperty(Buffer.prototype, "parent", {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.buffer;
              },
            });

            Object.defineProperty(Buffer.prototype, "offset", {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.byteOffset;
              },
            });

            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError(
                  'The value "' + length + '" is invalid for option "size"'
                );
              }
              // Return an augmented `Uint8Array` instance
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer.prototype;
              return buf;
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
              // Common case.
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new TypeError(
                    'The "string" argument must be of type string. Received type number'
                  );
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }

            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (
              typeof Symbol !== "undefined" &&
              Symbol.species != null &&
              Buffer[Symbol.species] === Buffer
            ) {
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false,
              });
            }

            Buffer.poolSize = 8192; // not used by this implementation

            function from(value, encodingOrOffset, length) {
              if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
              }

              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }

              if (value == null) {
                throw TypeError(
                  "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                    "or Array-like Object. Received type " +
                    typeof value
                );
              }

              if (
                isInstance(value, ArrayBuffer) ||
                (value && isInstance(value.buffer, ArrayBuffer))
              ) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }

              if (typeof value === "number") {
                throw new TypeError(
                  'The "value" argument must not be of type number. Received type number'
                );
              }

              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer.from(valueOf, encodingOrOffset, length);
              }

              var b = fromObject(value);
              if (b) return b;

              if (
                typeof Symbol !== "undefined" &&
                Symbol.toPrimitive != null &&
                typeof value[Symbol.toPrimitive] === "function"
              ) {
                return Buffer.from(
                  value[Symbol.toPrimitive]("string"),
                  encodingOrOffset,
                  length
                );
              }

              throw new TypeError(
                "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                  "or Array-like Object. Received type " +
                  typeof value
              );
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };

            // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
            // https://github.com/feross/buffer/pull/148
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;

            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be of type number');
              } else if (size < 0) {
                throw new RangeError(
                  'The value "' + size + '" is invalid for option "size"'
                );
              }
            }

            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === "string"
                  ? createBuffer(size).fill(fill, encoding)
                  : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(size, fill, encoding);
            };

            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(size);
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(size);
            };

            function fromString(string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError("Unknown encoding: " + encoding);
              }

              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);

              var actual = buf.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                buf = buf.slice(0, actual);
              }

              return buf;
            }

            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }

            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }

              var buf;
              if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array);
              } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }

              // Return an augmented `Uint8Array` instance
              buf.__proto__ = Buffer.prototype;
              return buf;
            }

            function fromObject(obj) {
              if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);

                if (buf.length === 0) {
                  return buf;
                }

                obj.copy(buf, 0, 0, len);
                return buf;
              }

              if (obj.length !== undefined) {
                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }

              if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }

            function checked(length) {
              // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= K_MAX_LENGTH) {
                throw new RangeError(
                  "Attempt to allocate Buffer larger than maximum " +
                    "size: 0x" +
                    K_MAX_LENGTH.toString(16) +
                    " bytes"
                );
              }
              return length | 0;
            }

            function SlowBuffer(length) {
              if (+length != length) {
                // eslint-disable-line eqeqeq
                length = 0;
              }
              return Buffer.alloc(+length);
            }

            Buffer.isBuffer = function isBuffer(b) {
              return (
                b != null && b._isBuffer === true && b !== Buffer.prototype
              ); // so Buffer.isBuffer(Buffer.prototype) will be false
            };

            Buffer.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array))
                a = Buffer.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array))
                b = Buffer.from(b, b.offset, b.byteLength);
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError(
                  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                );
              }

              if (a === b) return 0;

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };

            Buffer.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }

              if (list.length === 0) {
                return Buffer.alloc(0);
              }

              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer.from(buf);
                }
                if (!Buffer.isBuffer(buf)) {
                  throw new TypeError(
                    '"list" argument must be an Array of Buffers'
                  );
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };

            function byteLength(string, encoding) {
              if (Buffer.isBuffer(string)) {
                return string.length;
              }
              if (
                ArrayBuffer.isView(string) ||
                isInstance(string, ArrayBuffer)
              ) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                throw new TypeError(
                  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                    "Received type " +
                    typeof string
                );
              }

              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0) return 0;

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                    }
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;

            function slowToString(encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return "";
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return "";
              }

              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return "";
              }

              if (!encoding) encoding = "utf8";

              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);

                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);

                  case "ascii":
                    return asciiSlice(this, start, end);

                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);

                  case "base64":
                    return base64Slice(this, start, end);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
            // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
            // reliably in a browserify context because there could be multiple different
            // copies of the 'buffer' package in use. This method works even for Buffer
            // instances that were created from another copy of the `buffer` package.
            // See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true;

            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 16-bits"
                );
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };

            Buffer.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 32-bits"
                );
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };

            Buffer.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError(
                  "Buffer size must be a multiple of 64-bits"
                );
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };

            Buffer.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0) return "";
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };

            Buffer.prototype.toLocaleString = Buffer.prototype.toString;

            Buffer.prototype.equals = function equals(b) {
              if (!Buffer.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b) return true;
              return Buffer.compare(this, b) === 0;
            };

            Buffer.prototype.inspect = function inspect() {
              var str = "";
              var max = exports.INSPECT_MAX_BYTES;
              str = this.toString("hex", 0, max)
                .replace(/(.{2})/g, "$1 ")
                .trim();
              if (this.length > max) str += " ... ";
              return "<Buffer " + str + ">";
            };

            Buffer.prototype.compare = function compare(
              target,
              start,
              end,
              thisStart,
              thisEnd
            ) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer.from(target, target.offset, target.byteLength);
              }
              if (!Buffer.isBuffer(target)) {
                throw new TypeError(
                  'The "target" argument must be one of type Buffer or Uint8Array. ' +
                    "Received type " +
                    typeof target
                );
              }

              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (
                start < 0 ||
                end > target.length ||
                thisStart < 0 ||
                thisEnd > this.length
              ) {
                throw new RangeError("out of range index");
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;

              if (this === target) return 0;

              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);

              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(
              buffer,
              val,
              byteOffset,
              encoding,
              dir
            ) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1;

              // Normalize byteOffset
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset; // Coerce to Number.
              if (numberIsNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : buffer.length - 1;
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1;
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1;
              }

              // Normalize val
              if (typeof val === "string") {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (Buffer.isBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 0xff; // Search for a byte value [0-255]
                if (typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(
                      buffer,
                      val,
                      byteOffset
                    );
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(
                      buffer,
                      val,
                      byteOffset
                    );
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }

              throw new TypeError("val must be string, number or Buffer");
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (
                  encoding === "ucs2" ||
                  encoding === "ucs-2" ||
                  encoding === "utf16le" ||
                  encoding === "utf-16le"
                ) {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }

              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (
                    read(arr, i) ===
                    read(val, foundIndex === -1 ? 0 : i - foundIndex)
                  ) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found) return i;
                }
              }

              return -1;
            }

            Buffer.prototype.includes = function includes(
              val,
              byteOffset,
              encoding
            ) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };

            Buffer.prototype.indexOf = function indexOf(
              val,
              byteOffset,
              encoding
            ) {
              return bidirectionalIndexOf(
                this,
                val,
                byteOffset,
                encoding,
                true
              );
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf(
              val,
              byteOffset,
              encoding
            ) {
              return bidirectionalIndexOf(
                this,
                val,
                byteOffset,
                encoding,
                false
              );
            };

            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }

              var strLen = string.length;

              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }
              return i;
            }

            function utf8Write(buf, string, offset, length) {
              return blitBuffer(
                utf8ToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }

            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }

            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }

            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(
                utf16leToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            Buffer.prototype.write = function write(
              string,
              offset,
              length,
              encoding
            ) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
                // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
                // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === undefined) encoding = "utf8";
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining)
                length = remaining;

              if (
                (string.length > 0 && (length < 0 || offset < 0)) ||
                offset > this.length
              ) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }

              if (!encoding) encoding = "utf8";

              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);

                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);

                  case "ascii":
                    return asciiWrite(this, string, offset, length);

                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);

                  case "base64":
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length);

                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0),
              };
            };

            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }

            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];

              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence =
                  firstByte > 0xef
                    ? 4
                    : firstByte > 0xdf
                    ? 3
                    : firstByte > 0xbf
                    ? 2
                    : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint =
                          ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                        if (tempCodePoint > 0x7f) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if (
                        (secondByte & 0xc0) === 0x80 &&
                        (thirdByte & 0xc0) === 0x80
                      ) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0xc) |
                          ((secondByte & 0x3f) << 0x6) |
                          (thirdByte & 0x3f);
                        if (
                          tempCodePoint > 0x7ff &&
                          (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                        ) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if (
                        (secondByte & 0xc0) === 0x80 &&
                        (thirdByte & 0xc0) === 0x80 &&
                        (fourthByte & 0xc0) === 0x80
                      ) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0x12) |
                          ((secondByte & 0x3f) << 0xc) |
                          ((thirdByte & 0x3f) << 0x6) |
                          (fourthByte & 0x3f);
                        if (
                          tempCodePoint > 0xffff &&
                          tempCodePoint < 0x110000
                        ) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xfffd;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xffff) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                  codePoint = 0xdc00 | (codePoint & 0x3ff);
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res);
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
                );
              }
              return res;
            }

            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7f);
              }
              return ret;
            }

            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }

            function hexSlice(buf, start, end) {
              var len = buf.length;

              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;

              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }

            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }

            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;

              var newBuf = this.subarray(start, end);
              // Return an augmented `Uint8Array` instance
              newBuf.__proto__ = Buffer.prototype;
              return newBuf;
            };

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }

            Buffer.prototype.readUIntLE = function readUIntLE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val;
            };

            Buffer.prototype.readUIntBE = function readUIntBE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val;
            };

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8);
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1];
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                (this[offset] |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16)) +
                this[offset + 3] * 0x1000000
              );
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                this[offset] * 0x1000000 +
                ((this[offset + 1] << 16) |
                  (this[offset + 2] << 8) |
                  this[offset + 3])
              );
            };

            Buffer.prototype.readIntLE = function readIntLE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val;
            };

            Buffer.prototype.readIntBE = function readIntBE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val;
            };

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };

            Buffer.prototype.readInt16LE = function readInt16LE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt16BE = function readInt16BE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt32LE = function readInt32LE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
              );
            };

            Buffer.prototype.readInt32BE = function readInt32BE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3]
              );
            };

            Buffer.prototype.readFloatLE = function readFloatLE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };

            Buffer.prototype.readFloatBE = function readFloatBE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE(
              offset,
              noAssert
            ) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };

            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf))
                throw new TypeError(
                  '"buffer" argument must be a Buffer instance'
                );
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xff;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xff;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUInt8 = function writeUInt8(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
              return offset + 4;
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };

            Buffer.prototype.writeIntLE = function writeIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xff;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeIntBE = function writeIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xff;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeInt8 = function writeInt8(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };

            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0) throw new RangeError("Index out of range");
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  4,
                  3.4028234663852886e38,
                  -3.4028234663852886e38
                );
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(
              value,
              offset,
              noAssert
            ) {
              return writeFloat(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE(
              value,
              offset,
              noAssert
            ) {
              return writeFloat(this, value, offset, false, noAssert);
            };

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  8,
                  1.7976931348623157e308,
                  -1.7976931348623157e308
                );
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, false, noAssert);
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(
              target,
              targetStart,
              start,
              end
            ) {
              if (!Buffer.isBuffer(target))
                throw new TypeError("argument should be a Buffer");
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0;

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length)
                throw new RangeError("Index out of range");
              if (end < 0) throw new RangeError("sourceEnd out of bounds");

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;

              if (
                this === target &&
                typeof Uint8Array.prototype.copyWithin === "function"
              ) {
                // Use built-in when available, missing from IE11
                this.copyWithin(targetStart, start, end);
              } else if (
                this === target &&
                start < targetStart &&
                targetStart < end
              ) {
                // descending copy from end
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, end),
                  targetStart
                );
              }

              return len;
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== undefined && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (
                  typeof encoding === "string" &&
                  !Buffer.isEncoding(encoding)
                ) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (
                    (encoding === "utf8" && code < 128) ||
                    encoding === "latin1"
                  ) {
                    // Fast path: If `val` fits into a single byte, use that numeric value.
                    val = code;
                  }
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }

              if (end <= start) {
                return this;
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;

              if (!val) val = 0;

              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer.isBuffer(val)
                  ? val
                  : Buffer.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError(
                    'The value "' + val + '" is invalid for argument "value"'
                  );
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this;
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

            function base64clean(str) {
              // Node takes equal signs as end of the Base64 encoding
              str = str.split("=")[0];
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = str.trim().replace(INVALID_BASE64_RE, "");
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return "";
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + "=";
              }
              return str;
            }

            function toHex(n) {
              if (n < 16) return "0" + n.toString(16);
              return n.toString(16);
            }

            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xd7ff && codePoint < 0xe000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xdbff) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    }

                    // valid lead
                    leadSurrogate = codePoint;

                    continue;
                  }

                  // 2 leads in a row
                  if (codePoint < 0xdc00) {
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    leadSurrogate = codePoint;
                    continue;
                  }

                  // valid surrogate pair
                  codePoint =
                    (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                    0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                }

                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push(
                    (codePoint >> 0x6) | 0xc0,
                    (codePoint & 0x3f) | 0x80
                  );
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(
                    (codePoint >> 0xc) | 0xe0,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(
                    (codePoint >> 0x12) | 0xf0,
                    ((codePoint >> 0xc) & 0x3f) | 0x80,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else {
                  throw new Error("Invalid code point");
                }
              }

              return bytes;
            }

            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xff);
              }
              return byteArray;
            }

            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;

                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray;
            }

            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }

            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }
              return i;
            }

            // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
            // the `instanceof` check but they should be treated as of that type.
            // See: https://github.com/feross/buffer/issues/166
            function isInstance(obj, type) {
              return (
                obj instanceof type ||
                (obj != null &&
                  obj.constructor != null &&
                  obj.constructor.name != null &&
                  obj.constructor.name === type.name)
              );
            }
            function numberIsNaN(obj) {
              // For IE11 support
              return obj !== obj; // eslint-disable-line no-self-compare
            }
          }).call(this);
        }).call(this, require("buffer").Buffer);
      },
      { "base64-js": 236, buffer: 239, ieee754: 251 },
    ],
    240: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";
            const escapeStringRegexp = require("escape-string-regexp");
            const ansiStyles = require("ansi-styles");
            const stdoutColor = require("supports-color").stdout;

            const template = require("./templates.js");

            const isSimpleWindowsTerm =
              process.platform === "win32" &&
              !(process.env.TERM || "").toLowerCase().startsWith("xterm");

            // `supportsColor.level` → `ansiStyles.color[name]` mapping
            const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];

            // `color-convert` models to exclude from the Chalk API due to conflicts and such
            const skipModels = new Set(["gray"]);

            const styles = Object.create(null);

            function applyOptions(obj, options) {
              options = options || {};

              // Detect level if not set manually
              const scLevel = stdoutColor ? stdoutColor.level : 0;
              obj.level = options.level === undefined ? scLevel : options.level;
              obj.enabled =
                "enabled" in options ? options.enabled : obj.level > 0;
            }

            function Chalk(options) {
              // We check for this.template here since calling `chalk.constructor()`
              // by itself will have a `this` of a previously constructed chalk object
              if (!this || !(this instanceof Chalk) || this.template) {
                const chalk = {};
                applyOptions(chalk, options);

                chalk.template = function () {
                  const args = [].slice.call(arguments);
                  return chalkTag.apply(null, [chalk.template].concat(args));
                };

                Object.setPrototypeOf(chalk, Chalk.prototype);
                Object.setPrototypeOf(chalk.template, chalk);

                chalk.template.constructor = Chalk;

                return chalk.template;
              }

              applyOptions(this, options);
            }

            // Use bright blue on Windows as the normal blue color is illegible
            if (isSimpleWindowsTerm) {
              ansiStyles.blue.open = "\u001B[94m";
            }

            for (const key of Object.keys(ansiStyles)) {
              ansiStyles[key].closeRe = new RegExp(
                escapeStringRegexp(ansiStyles[key].close),
                "g"
              );

              styles[key] = {
                get() {
                  const codes = ansiStyles[key];
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    key
                  );
                },
              };
            }

            styles.visible = {
              get() {
                return build.call(this, this._styles || [], true, "visible");
              },
            };

            ansiStyles.color.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.color.close),
              "g"
            );
            for (const model of Object.keys(ansiStyles.color.ansi)) {
              if (skipModels.has(model)) {
                continue;
              }

              styles[model] = {
                get() {
                  const level = this.level;
                  return function () {
                    const open = ansiStyles.color[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    const codes = {
                      open,
                      close: ansiStyles.color.close,
                      closeRe: ansiStyles.color.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            }

            ansiStyles.bgColor.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.bgColor.close),
              "g"
            );
            for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
              if (skipModels.has(model)) {
                continue;
              }

              const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
              styles[bgModel] = {
                get() {
                  const level = this.level;
                  return function () {
                    const open = ansiStyles.bgColor[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    const codes = {
                      open,
                      close: ansiStyles.bgColor.close,
                      closeRe: ansiStyles.bgColor.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            }

            const proto = Object.defineProperties(() => {}, styles);

            function build(_styles, _empty, key) {
              const builder = function () {
                return applyStyle.apply(builder, arguments);
              };

              builder._styles = _styles;
              builder._empty = _empty;

              const self = this;

              Object.defineProperty(builder, "level", {
                enumerable: true,
                get() {
                  return self.level;
                },
                set(level) {
                  self.level = level;
                },
              });

              Object.defineProperty(builder, "enabled", {
                enumerable: true,
                get() {
                  return self.enabled;
                },
                set(enabled) {
                  self.enabled = enabled;
                },
              });

              // See below for fix regarding invisible grey/dim combination on Windows
              builder.hasGrey =
                this.hasGrey || key === "gray" || key === "grey";

              // `__proto__` is used because we must return a function, but there is
              // no way to create a function with a different prototype
              builder.__proto__ = proto; // eslint-disable-line no-proto

              return builder;
            }

            function applyStyle() {
              // Support varags, but simply cast to string in case there's only one arg
              const args = arguments;
              const argsLen = args.length;
              let str = String(arguments[0]);

              if (argsLen === 0) {
                return "";
              }

              if (argsLen > 1) {
                // Don't slice `arguments`, it prevents V8 optimizations
                for (let a = 1; a < argsLen; a++) {
                  str += " " + args[a];
                }
              }

              if (!this.enabled || this.level <= 0 || !str) {
                return this._empty ? "" : str;
              }

              // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
              // see https://github.com/chalk/chalk/issues/58
              // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
              const originalDim = ansiStyles.dim.open;
              if (isSimpleWindowsTerm && this.hasGrey) {
                ansiStyles.dim.open = "";
              }

              for (const code of this._styles.slice().reverse()) {
                // Replace any instances already present with a re-opening code
                // otherwise only the part of the string until said closing code
                // will be colored, and the rest will simply be 'plain'.
                str =
                  code.open + str.replace(code.closeRe, code.open) + code.close;

                // Close the styling before a linebreak and reopen
                // after next line to fix a bleed issue on macOS
                // https://github.com/chalk/chalk/pull/92
                str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
              }

              // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
              ansiStyles.dim.open = originalDim;

              return str;
            }

            function chalkTag(chalk, strings) {
              if (!Array.isArray(strings)) {
                // If chalk() was called by itself or with a string,
                // return the string itself as a string.
                return [].slice.call(arguments, 1).join(" ");
              }

              const args = [].slice.call(arguments, 2);
              const parts = [strings.raw[0]];

              for (let i = 1; i < strings.length; i++) {
                parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                parts.push(String(strings.raw[i]));
              }

              return template(chalk, parts.join(""));
            }

            Object.defineProperties(Chalk.prototype, styles);

            module.exports = Chalk(); // eslint-disable-line new-cap
            module.exports.supportsColor = stdoutColor;
            module.exports.default = module.exports; // For TypeScript
          }).call(this);
        }).call(this, require("_process"));
      },
      {
        "./templates.js": 241,
        _process: 425,
        "ansi-styles": 204,
        "escape-string-regexp": 247,
        "supports-color": 440,
      },
    ],
    241: [
      function (require, module, exports) {
        "use strict";
        const TEMPLATE_REGEX =
          /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;

        const ESCAPES = new Map([
          ["n", "\n"],
          ["r", "\r"],
          ["t", "\t"],
          ["b", "\b"],
          ["f", "\f"],
          ["v", "\v"],
          ["0", "\0"],
          ["\\", "\\"],
          ["e", "\u001B"],
          ["a", "\u0007"],
        ]);

        function unescape(c) {
          if (
            (c[0] === "u" && c.length === 5) ||
            (c[0] === "x" && c.length === 3)
          ) {
            return String.fromCharCode(parseInt(c.slice(1), 16));
          }

          return ESCAPES.get(c) || c;
        }

        function parseArguments(name, args) {
          const results = [];
          const chunks = args.trim().split(/\s*,\s*/g);
          let matches;

          for (const chunk of chunks) {
            if (!isNaN(chunk)) {
              results.push(Number(chunk));
            } else if ((matches = chunk.match(STRING_REGEX))) {
              results.push(
                matches[2].replace(ESCAPE_REGEX, (m, escape, chr) =>
                  escape ? unescape(escape) : chr
                )
              );
            } else {
              throw new Error(
                `Invalid Chalk template style argument: ${chunk} (in style '${name}')`
              );
            }
          }

          return results;
        }

        function parseStyle(style) {
          STYLE_REGEX.lastIndex = 0;

          const results = [];
          let matches;

          while ((matches = STYLE_REGEX.exec(style)) !== null) {
            const name = matches[1];

            if (matches[2]) {
              const args = parseArguments(name, matches[2]);
              results.push([name].concat(args));
            } else {
              results.push([name]);
            }
          }

          return results;
        }

        function buildStyle(chalk, styles) {
          const enabled = {};

          for (const layer of styles) {
            for (const style of layer.styles) {
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          }

          let current = chalk;
          for (const styleName of Object.keys(enabled)) {
            if (Array.isArray(enabled[styleName])) {
              if (!(styleName in current)) {
                throw new Error(`Unknown Chalk style: ${styleName}`);
              }

              if (enabled[styleName].length > 0) {
                current = current[styleName].apply(current, enabled[styleName]);
              } else {
                current = current[styleName];
              }
            }
          }

          return current;
        }

        module.exports = (chalk, tmp) => {
          const styles = [];
          const chunks = [];
          let chunk = [];

          // eslint-disable-next-line max-params
          tmp.replace(
            TEMPLATE_REGEX,
            (m, escapeChar, inverse, style, close, chr) => {
              if (escapeChar) {
                chunk.push(unescape(escapeChar));
              } else if (style) {
                const str = chunk.join("");
                chunk = [];
                chunks.push(
                  styles.length === 0 ? str : buildStyle(chalk, styles)(str)
                );
                styles.push({ inverse, styles: parseStyle(style) });
              } else if (close) {
                if (styles.length === 0) {
                  throw new Error(
                    "Found extraneous } in Chalk template literal"
                  );
                }

                chunks.push(buildStyle(chalk, styles)(chunk.join("")));
                chunk = [];
                styles.pop();
              } else {
                chunk.push(chr);
              }
            }
          );

          chunks.push(chunk.join(""));

          if (styles.length > 0) {
            const errMsg = `Chalk template literal is missing ${
              styles.length
            } closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
            throw new Error(errMsg);
          }

          return chunks.join("");
        };
      },
      {},
    ],
    242: [
      function (require, module, exports) {
        /* MIT license */
        var cssKeywords = require("color-name");

        // NOTE: conversions should only return primitive values (i.e. arrays, or
        //       values that give correct `typeof` results).
        //       do not use box values types (i.e. Number(), String(), etc.)

        var reverseKeywords = {};
        for (var key in cssKeywords) {
          if (cssKeywords.hasOwnProperty(key)) {
            reverseKeywords[cssKeywords[key]] = key;
          }
        }

        var convert = (module.exports = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] },
        });

        // hide .channels and .labels properties
        for (var model in convert) {
          if (convert.hasOwnProperty(model)) {
            if (!("channels" in convert[model])) {
              throw new Error("missing channels property: " + model);
            }

            if (!("labels" in convert[model])) {
              throw new Error("missing channel labels property: " + model);
            }

            if (convert[model].labels.length !== convert[model].channels) {
              throw new Error("channel and label counts mismatch: " + model);
            }

            var channels = convert[model].channels;
            var labels = convert[model].labels;
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], "channels", {
              value: channels,
            });
            Object.defineProperty(convert[model], "labels", { value: labels });
          }
        }

        convert.rgb.hsl = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var min = Math.min(r, g, b);
          var max = Math.max(r, g, b);
          var delta = max - min;
          var h;
          var s;
          var l;

          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }

          h = Math.min(h * 60, 360);

          if (h < 0) {
            h += 360;
          }

          l = (min + max) / 2;

          if (max === min) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max + min);
          } else {
            s = delta / (2 - max - min);
          }

          return [h, s * 100, l * 100];
        };

        convert.rgb.hsv = function (rgb) {
          var rdif;
          var gdif;
          var bdif;
          var h;
          var s;

          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var v = Math.max(r, g, b);
          var diff = v - Math.min(r, g, b);
          var diffc = function (c) {
            return (v - c) / 6 / diff + 1 / 2;
          };

          if (diff === 0) {
            h = s = 0;
          } else {
            s = diff / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);

            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }
            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }

          return [h * 360, s * 100, v * 100];
        };

        convert.rgb.hwb = function (rgb) {
          var r = rgb[0];
          var g = rgb[1];
          var b = rgb[2];
          var h = convert.rgb.hsl(rgb)[0];
          var w = (1 / 255) * Math.min(r, Math.min(g, b));

          b = 1 - (1 / 255) * Math.max(r, Math.max(g, b));

          return [h, w * 100, b * 100];
        };

        convert.rgb.cmyk = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var c;
          var m;
          var y;
          var k;

          k = Math.min(1 - r, 1 - g, 1 - b);
          c = (1 - r - k) / (1 - k) || 0;
          m = (1 - g - k) / (1 - k) || 0;
          y = (1 - b - k) / (1 - k) || 0;

          return [c * 100, m * 100, y * 100, k * 100];
        };

        /**
         * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
         * */
        function comparativeDistance(x, y) {
          return (
            Math.pow(x[0] - y[0], 2) +
            Math.pow(x[1] - y[1], 2) +
            Math.pow(x[2] - y[2], 2)
          );
        }

        convert.rgb.keyword = function (rgb) {
          var reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }

          var currentClosestDistance = Infinity;
          var currentClosestKeyword;

          for (var keyword in cssKeywords) {
            if (cssKeywords.hasOwnProperty(keyword)) {
              var value = cssKeywords[keyword];

              // Compute comparative distance
              var distance = comparativeDistance(rgb, value);

              // Check if its less, if so set as closest
              if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword;
              }
            }
          }

          return currentClosestKeyword;
        };

        convert.keyword.rgb = function (keyword) {
          return cssKeywords[keyword];
        };

        convert.rgb.xyz = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;

          // assume sRGB
          r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
          g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
          b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

          var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          var z = r * 0.0193 + g * 0.1192 + b * 0.9505;

          return [x * 100, y * 100, z * 100];
        };

        convert.rgb.lab = function (rgb) {
          var xyz = convert.rgb.xyz(rgb);
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;

          x /= 95.047;
          y /= 100;
          z /= 108.883;

          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);

          return [l, a, b];
        };

        convert.hsl.rgb = function (hsl) {
          var h = hsl[0] / 360;
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var t1;
          var t2;
          var t3;
          var rgb;
          var val;

          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }

          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }

          t1 = 2 * l - t2;

          rgb = [0, 0, 0];
          for (var i = 0; i < 3; i++) {
            t3 = h + (1 / 3) * -(i - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }

            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }

            rgb[i] = val * 255;
          }

          return rgb;
        };

        convert.hsl.hsv = function (hsl) {
          var h = hsl[0];
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var smin = s;
          var lmin = Math.max(l, 0.01);
          var sv;
          var v;

          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          v = (l + s) / 2;
          sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

          return [h, sv * 100, v * 100];
        };

        convert.hsv.rgb = function (hsv) {
          var h = hsv[0] / 60;
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var hi = Math.floor(h) % 6;

          var f = h - Math.floor(h);
          var p = 255 * v * (1 - s);
          var q = 255 * v * (1 - s * f);
          var t = 255 * v * (1 - s * (1 - f));
          v *= 255;

          switch (hi) {
            case 0:
              return [v, t, p];
            case 1:
              return [q, v, p];
            case 2:
              return [p, v, t];
            case 3:
              return [p, q, v];
            case 4:
              return [t, p, v];
            case 5:
              return [v, p, q];
          }
        };

        convert.hsv.hsl = function (hsv) {
          var h = hsv[0];
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var vmin = Math.max(v, 0.01);
          var lmin;
          var sl;
          var l;

          l = (2 - s) * v;
          lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;

          return [h, sl * 100, l * 100];
        };

        // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
        convert.hwb.rgb = function (hwb) {
          var h = hwb[0] / 360;
          var wh = hwb[1] / 100;
          var bl = hwb[2] / 100;
          var ratio = wh + bl;
          var i;
          var v;
          var f;
          var n;

          // wh + bl cant be > 1
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }

          i = Math.floor(6 * h);
          v = 1 - bl;
          f = 6 * h - i;

          if ((i & 0x01) !== 0) {
            f = 1 - f;
          }

          n = wh + f * (v - wh); // linear interpolation

          var r;
          var g;
          var b;
          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;
            case 1:
              r = n;
              g = v;
              b = wh;
              break;
            case 2:
              r = wh;
              g = v;
              b = n;
              break;
            case 3:
              r = wh;
              g = n;
              b = v;
              break;
            case 4:
              r = n;
              g = wh;
              b = v;
              break;
            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }

          return [r * 255, g * 255, b * 255];
        };

        convert.cmyk.rgb = function (cmyk) {
          var c = cmyk[0] / 100;
          var m = cmyk[1] / 100;
          var y = cmyk[2] / 100;
          var k = cmyk[3] / 100;
          var r;
          var g;
          var b;

          r = 1 - Math.min(1, c * (1 - k) + k);
          g = 1 - Math.min(1, m * (1 - k) + k);
          b = 1 - Math.min(1, y * (1 - k) + k);

          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.rgb = function (xyz) {
          var x = xyz[0] / 100;
          var y = xyz[1] / 100;
          var z = xyz[2] / 100;
          var r;
          var g;
          var b;

          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;

          // assume sRGB
          r =
            r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;

          g =
            g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;

          b =
            b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;

          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);

          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.lab = function (xyz) {
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;

          x /= 95.047;
          y /= 100;
          z /= 108.883;

          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);

          return [l, a, b];
        };

        convert.lab.xyz = function (lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var x;
          var y;
          var z;

          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;

          var y2 = Math.pow(y, 3);
          var x2 = Math.pow(x, 3);
          var z2 = Math.pow(z, 3);
          y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

          x *= 95.047;
          y *= 100;
          z *= 108.883;

          return [x, y, z];
        };

        convert.lab.lch = function (lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var hr;
          var h;
          var c;

          hr = Math.atan2(b, a);
          h = (hr * 360) / 2 / Math.PI;

          if (h < 0) {
            h += 360;
          }

          c = Math.sqrt(a * a + b * b);

          return [l, c, h];
        };

        convert.lch.lab = function (lch) {
          var l = lch[0];
          var c = lch[1];
          var h = lch[2];
          var a;
          var b;
          var hr;

          hr = (h / 360) * 2 * Math.PI;
          a = c * Math.cos(hr);
          b = c * Math.sin(hr);

          return [l, a, b];
        };

        convert.rgb.ansi16 = function (args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];
          var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

          value = Math.round(value / 50);

          if (value === 0) {
            return 30;
          }

          var ansi =
            30 +
            ((Math.round(b / 255) << 2) |
              (Math.round(g / 255) << 1) |
              Math.round(r / 255));

          if (value === 2) {
            ansi += 60;
          }

          return ansi;
        };

        convert.hsv.ansi16 = function (args) {
          // optimization here; we already know the value and don't need to get
          // it converted for us.
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };

        convert.rgb.ansi256 = function (args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];

          // we use the extended greyscale palette here, with the exception of
          // black and white. normal palette only has 4 greyscale shades.
          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }

            if (r > 248) {
              return 231;
            }

            return Math.round(((r - 8) / 247) * 24) + 232;
          }

          var ansi =
            16 +
            36 * Math.round((r / 255) * 5) +
            6 * Math.round((g / 255) * 5) +
            Math.round((b / 255) * 5);

          return ansi;
        };

        convert.ansi16.rgb = function (args) {
          var color = args % 10;

          // handle greyscale
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }

            color = (color / 10.5) * 255;

            return [color, color, color];
          }

          var mult = (~~(args > 50) + 1) * 0.5;
          var r = (color & 1) * mult * 255;
          var g = ((color >> 1) & 1) * mult * 255;
          var b = ((color >> 2) & 1) * mult * 255;

          return [r, g, b];
        };

        convert.ansi256.rgb = function (args) {
          // handle greyscale
          if (args >= 232) {
            var c = (args - 232) * 10 + 8;
            return [c, c, c];
          }

          args -= 16;

          var rem;
          var r = (Math.floor(args / 36) / 5) * 255;
          var g = (Math.floor((rem = args % 36) / 6) / 5) * 255;
          var b = ((rem % 6) / 5) * 255;

          return [r, g, b];
        };

        convert.rgb.hex = function (args) {
          var integer =
            ((Math.round(args[0]) & 0xff) << 16) +
            ((Math.round(args[1]) & 0xff) << 8) +
            (Math.round(args[2]) & 0xff);

          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };

        convert.hex.rgb = function (args) {
          var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }

          var colorString = match[0];

          if (match[0].length === 3) {
            colorString = colorString
              .split("")
              .map(function (char) {
                return char + char;
              })
              .join("");
          }

          var integer = parseInt(colorString, 16);
          var r = (integer >> 16) & 0xff;
          var g = (integer >> 8) & 0xff;
          var b = integer & 0xff;

          return [r, g, b];
        };

        convert.rgb.hcg = function (rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var max = Math.max(Math.max(r, g), b);
          var min = Math.min(Math.min(r, g), b);
          var chroma = max - min;
          var grayscale;
          var hue;

          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }

          if (chroma <= 0) {
            hue = 0;
          } else if (max === r) {
            hue = ((g - b) / chroma) % 6;
          } else if (max === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma + 4;
          }

          hue /= 6;
          hue %= 1;

          return [hue * 360, chroma * 100, grayscale * 100];
        };

        convert.hsl.hcg = function (hsl) {
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var c = 1;
          var f = 0;

          if (l < 0.5) {
            c = 2.0 * s * l;
          } else {
            c = 2.0 * s * (1.0 - l);
          }

          if (c < 1.0) {
            f = (l - 0.5 * c) / (1.0 - c);
          }

          return [hsl[0], c * 100, f * 100];
        };

        convert.hsv.hcg = function (hsv) {
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;

          var c = s * v;
          var f = 0;

          if (c < 1.0) {
            f = (v - c) / (1 - c);
          }

          return [hsv[0], c * 100, f * 100];
        };

        convert.hcg.rgb = function (hcg) {
          var h = hcg[0] / 360;
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;

          if (c === 0.0) {
            return [g * 255, g * 255, g * 255];
          }

          var pure = [0, 0, 0];
          var hi = (h % 1) * 6;
          var v = hi % 1;
          var w = 1 - v;
          var mg = 0;

          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }

          mg = (1.0 - c) * g;

          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255,
          ];
        };

        convert.hcg.hsv = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;

          var v = c + g * (1.0 - c);
          var f = 0;

          if (v > 0.0) {
            f = c / v;
          }

          return [hcg[0], f * 100, v * 100];
        };

        convert.hcg.hsl = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;

          var l = g * (1.0 - c) + 0.5 * c;
          var s = 0;

          if (l > 0.0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1.0) {
            s = c / (2 * (1 - l));
          }

          return [hcg[0], s * 100, l * 100];
        };

        convert.hcg.hwb = function (hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1.0 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };

        convert.hwb.hcg = function (hwb) {
          var w = hwb[1] / 100;
          var b = hwb[2] / 100;
          var v = 1 - b;
          var c = v - w;
          var g = 0;

          if (c < 1) {
            g = (v - c) / (1 - c);
          }

          return [hwb[0], c * 100, g * 100];
        };

        convert.apple.rgb = function (apple) {
          return [
            (apple[0] / 65535) * 255,
            (apple[1] / 65535) * 255,
            (apple[2] / 65535) * 255,
          ];
        };

        convert.rgb.apple = function (rgb) {
          return [
            (rgb[0] / 255) * 65535,
            (rgb[1] / 255) * 65535,
            (rgb[2] / 255) * 65535,
          ];
        };

        convert.gray.rgb = function (args) {
          return [
            (args[0] / 100) * 255,
            (args[0] / 100) * 255,
            (args[0] / 100) * 255,
          ];
        };

        convert.gray.hsl = convert.gray.hsv = function (args) {
          return [0, 0, args[0]];
        };

        convert.gray.hwb = function (gray) {
          return [0, 100, gray[0]];
        };

        convert.gray.cmyk = function (gray) {
          return [0, 0, 0, gray[0]];
        };

        convert.gray.lab = function (gray) {
          return [gray[0], 0, 0];
        };

        convert.gray.hex = function (gray) {
          var val = Math.round((gray[0] / 100) * 255) & 0xff;
          var integer = (val << 16) + (val << 8) + val;

          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };

        convert.rgb.gray = function (rgb) {
          var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [(val / 255) * 100];
        };
      },
      { "color-name": 245 },
    ],
    243: [
      function (require, module, exports) {
        var conversions = require("./conversions");
        var route = require("./route");

        var convert = {};

        var models = Object.keys(conversions);

        function wrapRaw(fn) {
          var wrappedFn = function (args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            return fn(args);
          };

          // preserve .conversion property if there is one
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        function wrapRounded(fn) {
          var wrappedFn = function (args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            var result = fn(args);

            // we're assuming the result is an array here.
            // see notice in conversions.js; don't use box types
            // in conversion functions.
            if (typeof result === "object") {
              for (var len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }

            return result;
          };

          // preserve .conversion property if there is one
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        models.forEach(function (fromModel) {
          convert[fromModel] = {};

          Object.defineProperty(convert[fromModel], "channels", {
            value: conversions[fromModel].channels,
          });
          Object.defineProperty(convert[fromModel], "labels", {
            value: conversions[fromModel].labels,
          });

          var routes = route(fromModel);
          var routeModels = Object.keys(routes);

          routeModels.forEach(function (toModel) {
            var fn = routes[toModel];

            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });

        module.exports = convert;
      },
      { "./conversions": 242, "./route": 244 },
    ],
    244: [
      function (require, module, exports) {
        var conversions = require("./conversions");

        /*
    this function routes a model to all other models.
  
    all functions that are routed have a property `.conversion` attached
    to the returned synthetic function. This property is an array
    of strings, each with the steps in between the 'from' and 'to'
    color models (inclusive).
  
    conversions that are not possible simply are not included.
  */

        function buildGraph() {
          var graph = {};
          // https://jsperf.com/object-keys-vs-for-in-with-closure/3
          var models = Object.keys(conversions);

          for (var len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              // http://jsperf.com/1-vs-infinity
              // micro-opt, but this is simple.
              distance: -1,
              parent: null,
            };
          }

          return graph;
        }

        // https://en.wikipedia.org/wiki/Breadth-first_search
        function deriveBFS(fromModel) {
          var graph = buildGraph();
          var queue = [fromModel]; // unshift -> queue -> pop

          graph[fromModel].distance = 0;

          while (queue.length) {
            var current = queue.pop();
            var adjacents = Object.keys(conversions[current]);

            for (var len = adjacents.length, i = 0; i < len; i++) {
              var adjacent = adjacents[i];
              var node = graph[adjacent];

              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }

          return graph;
        }

        function link(from, to) {
          return function (args) {
            return to(from(args));
          };
        }

        function wrapConversion(toModel, graph) {
          var path = [graph[toModel].parent, toModel];
          var fn = conversions[graph[toModel].parent][toModel];

          var cur = graph[toModel].parent;
          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }

          fn.conversion = path;
          return fn;
        }

        module.exports = function (fromModel) {
          var graph = deriveBFS(fromModel);
          var conversion = {};

          var models = Object.keys(graph);
          for (var len = models.length, i = 0; i < len; i++) {
            var toModel = models[i];
            var node = graph[toModel];

            if (node.parent === null) {
              // no possible conversion, or this node is the source model.
              continue;
            }

            conversion[toModel] = wrapConversion(toModel, graph);
          }

          return conversion;
        };
      },
      { "./conversions": 242 },
    ],
    245: [
      function (require, module, exports) {
        "use strict";

        module.exports = {
          aliceblue: [240, 248, 255],
          antiquewhite: [250, 235, 215],
          aqua: [0, 255, 255],
          aquamarine: [127, 255, 212],
          azure: [240, 255, 255],
          beige: [245, 245, 220],
          bisque: [255, 228, 196],
          black: [0, 0, 0],
          blanchedalmond: [255, 235, 205],
          blue: [0, 0, 255],
          blueviolet: [138, 43, 226],
          brown: [165, 42, 42],
          burlywood: [222, 184, 135],
          cadetblue: [95, 158, 160],
          chartreuse: [127, 255, 0],
          chocolate: [210, 105, 30],
          coral: [255, 127, 80],
          cornflowerblue: [100, 149, 237],
          cornsilk: [255, 248, 220],
          crimson: [220, 20, 60],
          cyan: [0, 255, 255],
          darkblue: [0, 0, 139],
          darkcyan: [0, 139, 139],
          darkgoldenrod: [184, 134, 11],
          darkgray: [169, 169, 169],
          darkgreen: [0, 100, 0],
          darkgrey: [169, 169, 169],
          darkkhaki: [189, 183, 107],
          darkmagenta: [139, 0, 139],
          darkolivegreen: [85, 107, 47],
          darkorange: [255, 140, 0],
          darkorchid: [153, 50, 204],
          darkred: [139, 0, 0],
          darksalmon: [233, 150, 122],
          darkseagreen: [143, 188, 143],
          darkslateblue: [72, 61, 139],
          darkslategray: [47, 79, 79],
          darkslategrey: [47, 79, 79],
          darkturquoise: [0, 206, 209],
          darkviolet: [148, 0, 211],
          deeppink: [255, 20, 147],
          deepskyblue: [0, 191, 255],
          dimgray: [105, 105, 105],
          dimgrey: [105, 105, 105],
          dodgerblue: [30, 144, 255],
          firebrick: [178, 34, 34],
          floralwhite: [255, 250, 240],
          forestgreen: [34, 139, 34],
          fuchsia: [255, 0, 255],
          gainsboro: [220, 220, 220],
          ghostwhite: [248, 248, 255],
          gold: [255, 215, 0],
          goldenrod: [218, 165, 32],
          gray: [128, 128, 128],
          green: [0, 128, 0],
          greenyellow: [173, 255, 47],
          grey: [128, 128, 128],
          honeydew: [240, 255, 240],
          hotpink: [255, 105, 180],
          indianred: [205, 92, 92],
          indigo: [75, 0, 130],
          ivory: [255, 255, 240],
          khaki: [240, 230, 140],
          lavender: [230, 230, 250],
          lavenderblush: [255, 240, 245],
          lawngreen: [124, 252, 0],
          lemonchiffon: [255, 250, 205],
          lightblue: [173, 216, 230],
          lightcoral: [240, 128, 128],
          lightcyan: [224, 255, 255],
          lightgoldenrodyellow: [250, 250, 210],
          lightgray: [211, 211, 211],
          lightgreen: [144, 238, 144],
          lightgrey: [211, 211, 211],
          lightpink: [255, 182, 193],
          lightsalmon: [255, 160, 122],
          lightseagreen: [32, 178, 170],
          lightskyblue: [135, 206, 250],
          lightslategray: [119, 136, 153],
          lightslategrey: [119, 136, 153],
          lightsteelblue: [176, 196, 222],
          lightyellow: [255, 255, 224],
          lime: [0, 255, 0],
          limegreen: [50, 205, 50],
          linen: [250, 240, 230],
          magenta: [255, 0, 255],
          maroon: [128, 0, 0],
          mediumaquamarine: [102, 205, 170],
          mediumblue: [0, 0, 205],
          mediumorchid: [186, 85, 211],
          mediumpurple: [147, 112, 219],
          mediumseagreen: [60, 179, 113],
          mediumslateblue: [123, 104, 238],
          mediumspringgreen: [0, 250, 154],
          mediumturquoise: [72, 209, 204],
          mediumvioletred: [199, 21, 133],
          midnightblue: [25, 25, 112],
          mintcream: [245, 255, 250],
          mistyrose: [255, 228, 225],
          moccasin: [255, 228, 181],
          navajowhite: [255, 222, 173],
          navy: [0, 0, 128],
          oldlace: [253, 245, 230],
          olive: [128, 128, 0],
          olivedrab: [107, 142, 35],
          orange: [255, 165, 0],
          orangered: [255, 69, 0],
          orchid: [218, 112, 214],
          palegoldenrod: [238, 232, 170],
          palegreen: [152, 251, 152],
          paleturquoise: [175, 238, 238],
          palevioletred: [219, 112, 147],
          papayawhip: [255, 239, 213],
          peachpuff: [255, 218, 185],
          peru: [205, 133, 63],
          pink: [255, 192, 203],
          plum: [221, 160, 221],
          powderblue: [176, 224, 230],
          purple: [128, 0, 128],
          rebeccapurple: [102, 51, 153],
          red: [255, 0, 0],
          rosybrown: [188, 143, 143],
          royalblue: [65, 105, 225],
          saddlebrown: [139, 69, 19],
          salmon: [250, 128, 114],
          sandybrown: [244, 164, 96],
          seagreen: [46, 139, 87],
          seashell: [255, 245, 238],
          sienna: [160, 82, 45],
          silver: [192, 192, 192],
          skyblue: [135, 206, 235],
          slateblue: [106, 90, 205],
          slategray: [112, 128, 144],
          slategrey: [112, 128, 144],
          snow: [255, 250, 250],
          springgreen: [0, 255, 127],
          steelblue: [70, 130, 180],
          tan: [210, 180, 140],
          teal: [0, 128, 128],
          thistle: [216, 191, 216],
          tomato: [255, 99, 71],
          turquoise: [64, 224, 208],
          violet: [238, 130, 238],
          wheat: [245, 222, 179],
          white: [255, 255, 255],
          whitesmoke: [245, 245, 245],
          yellow: [255, 255, 0],
          yellowgreen: [154, 205, 50],
        };
      },
      {},
    ],
    246: [
      function (require, module, exports) {
        "use strict";
        var fs = require("fs");
        var path = require("path");
        var SafeBuffer = require("safe-buffer");

        Object.defineProperty(exports, "commentRegex", {
          get: function getCommentRegex() {
            return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
          },
        });

        Object.defineProperty(exports, "mapFileCommentRegex", {
          get: function getMapFileCommentRegex() {
            // Matches sourceMappingURL in either // or /* comment styles.
            return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
          },
        });

        function decodeBase64(base64) {
          return (SafeBuffer.Buffer.from(base64, "base64") || "").toString();
        }

        function stripComment(sm) {
          return sm.split(",").pop();
        }

        function readFromFileMap(sm, dir) {
          // NOTE: this will only work on the server since it attempts to read the map file

          var r = exports.mapFileCommentRegex.exec(sm);

          // for some odd reason //# .. captures in 1 and /* .. */ in 2
          var filename = r[1] || r[2];
          var filepath = path.resolve(dir, filename);

          try {
            return fs.readFileSync(filepath, "utf8");
          } catch (e) {
            throw new Error(
              "An error occurred while trying to read the map file at " +
                filepath +
                "\n" +
                e
            );
          }
        }

        function Converter(sm, opts) {
          opts = opts || {};

          if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
          if (opts.hasComment) sm = stripComment(sm);
          if (opts.isEncoded) sm = decodeBase64(sm);
          if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

          this.sourcemap = sm;
        }

        Converter.prototype.toJSON = function (space) {
          return JSON.stringify(this.sourcemap, null, space);
        };

        Converter.prototype.toBase64 = function () {
          var json = this.toJSON();
          return (SafeBuffer.Buffer.from(json, "utf8") || "").toString(
            "base64"
          );
        };

        Converter.prototype.toComment = function (options) {
          var base64 = this.toBase64();
          var data =
            "sourceMappingURL=data:application/json;charset=utf-8;base64," +
            base64;
          return options && options.multiline
            ? "/*# " + data + " */"
            : "//# " + data;
        };

        // returns copy instead of original
        Converter.prototype.toObject = function () {
          return JSON.parse(this.toJSON());
        };

        Converter.prototype.addProperty = function (key, value) {
          if (this.sourcemap.hasOwnProperty(key))
            throw new Error(
              'property "' +
                key +
                '" already exists on the sourcemap, use set property instead'
            );
          return this.setProperty(key, value);
        };

        Converter.prototype.setProperty = function (key, value) {
          this.sourcemap[key] = value;
          return this;
        };

        Converter.prototype.getProperty = function (key) {
          return this.sourcemap[key];
        };

        exports.fromObject = function (obj) {
          return new Converter(obj);
        };

        exports.fromJSON = function (json) {
          return new Converter(json, { isJSON: true });
        };

        exports.fromBase64 = function (base64) {
          return new Converter(base64, { isEncoded: true });
        };

        exports.fromComment = function (comment) {
          comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");

          return new Converter(comment, { isEncoded: true, hasComment: true });
        };

        exports.fromMapFileComment = function (comment, dir) {
          return new Converter(comment, {
            commentFileDir: dir,
            isFileComment: true,
            isJSON: true,
          });
        };

        // Finds last sourcemap comment in file or returns null if none was found
        exports.fromSource = function (content) {
          var m = content.match(exports.commentRegex);
          return m ? exports.fromComment(m.pop()) : null;
        };

        // Finds last sourcemap comment in file or returns null if none was found
        exports.fromMapFileSource = function (content, dir) {
          var m = content.match(exports.mapFileCommentRegex);
          return m ? exports.fromMapFileComment(m.pop(), dir) : null;
        };

        exports.removeComments = function (src) {
          return src.replace(exports.commentRegex, "");
        };

        exports.removeMapFileComments = function (src) {
          return src.replace(exports.mapFileCommentRegex, "");
        };

        exports.generateMapFileComment = function (file, options) {
          var data = "sourceMappingURL=" + file;
          return options && options.multiline
            ? "/*# " + data + " */"
            : "//# " + data;
        };
      },
      { fs: 237, path: 424, "safe-buffer": 427 },
    ],
    247: [
      function (require, module, exports) {
        "use strict";

        var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

        module.exports = function (str) {
          if (typeof str !== "string") {
            throw new TypeError("Expected a string");
          }

          return str.replace(matchOperatorsRe, "\\$&");
        };
      },
      {},
    ],
    248: [
      function (require, module, exports) {
        "use strict";

        // These use the global symbol registry so that multiple copies of this
        // library can work together in case they are not deduped.
        const GENSYNC_START = Symbol.for("gensync:v1:start");
        const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");

        const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
        const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
        const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
        const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
        const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";

        module.exports = Object.assign(
          function gensync(optsOrFn) {
            let genFn = optsOrFn;
            if (typeof optsOrFn !== "function") {
              genFn = newGenerator(optsOrFn);
            } else {
              genFn = wrapGenerator(optsOrFn);
            }

            return Object.assign(genFn, makeFunctionAPI(genFn));
          },
          {
            all: buildOperation({
              name: "all",
              arity: 1,
              sync: function (args) {
                const items = Array.from(args[0]);
                return items.map((item) => evaluateSync(item));
              },
              async: function (args, resolve, reject) {
                const items = Array.from(args[0]);

                if (items.length === 0) {
                  Promise.resolve().then(() => resolve([]));
                  return;
                }

                let count = 0;
                const results = items.map(() => undefined);
                items.forEach((item, i) => {
                  evaluateAsync(
                    item,
                    (val) => {
                      results[i] = val;
                      count += 1;

                      if (count === results.length) resolve(results);
                    },
                    reject
                  );
                });
              },
            }),
            race: buildOperation({
              name: "race",
              arity: 1,
              sync: function (args) {
                const items = Array.from(args[0]);
                if (items.length === 0) {
                  throw makeError(
                    "Must race at least 1 item",
                    GENSYNC_RACE_NONEMPTY
                  );
                }

                return evaluateSync(items[0]);
              },
              async: function (args, resolve, reject) {
                const items = Array.from(args[0]);
                if (items.length === 0) {
                  throw makeError(
                    "Must race at least 1 item",
                    GENSYNC_RACE_NONEMPTY
                  );
                }

                for (const item of items) {
                  evaluateAsync(item, resolve, reject);
                }
              },
            }),
          }
        );

        /**
         * Given a generator function, return the standard API object that executes
         * the generator and calls the callbacks.
         */
        function makeFunctionAPI(genFn) {
          const fns = {
            sync: function (...args) {
              return evaluateSync(genFn.apply(this, args));
            },
            async: function (...args) {
              return new Promise((resolve, reject) => {
                evaluateAsync(genFn.apply(this, args), resolve, reject);
              });
            },
            errback: function (...args) {
              const cb = args.pop();
              if (typeof cb !== "function") {
                throw makeError(
                  "Asynchronous function called without callback",
                  GENSYNC_ERRBACK_NO_CALLBACK
                );
              }

              let gen;
              try {
                gen = genFn.apply(this, args);
              } catch (err) {
                cb(err);
                return;
              }

              evaluateAsync(
                gen,
                (val) => cb(undefined, val),
                (err) => cb(err)
              );
            },
          };
          return fns;
        }

        function assertTypeof(type, name, value, allowUndefined) {
          if (
            typeof value === type ||
            (allowUndefined && typeof value === "undefined")
          ) {
            return;
          }

          let msg;
          if (allowUndefined) {
            msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
          } else {
            msg = `Expected opts.${name} to be a ${type}.`;
          }

          throw makeError(msg, GENSYNC_OPTIONS_ERROR);
        }
        function makeError(msg, code) {
          return Object.assign(new Error(msg), { code });
        }

        /**
         * Given an options object, return a new generator that dispatches the
         * correct handler based on sync or async execution.
         */
        function newGenerator({ name, arity, sync, async, errback }) {
          assertTypeof("string", "name", name, true /* allowUndefined */);
          assertTypeof("number", "arity", arity, true /* allowUndefined */);
          assertTypeof("function", "sync", sync);
          assertTypeof("function", "async", async, true /* allowUndefined */);
          assertTypeof(
            "function",
            "errback",
            errback,
            true /* allowUndefined */
          );
          if (async && errback) {
            throw makeError(
              "Expected one of either opts.async or opts.errback, but got _both_.",
              GENSYNC_OPTIONS_ERROR
            );
          }

          if (typeof name !== "string") {
            let fnName;
            if (errback && errback.name && errback.name !== "errback") {
              fnName = errback.name;
            }
            if (async && async.name && async.name !== "async") {
              fnName = async.name.replace(/Async$/, "");
            }
            if (sync && sync.name && sync.name !== "sync") {
              fnName = sync.name.replace(/Sync$/, "");
            }

            if (typeof fnName === "string") {
              name = fnName;
            }
          }

          if (typeof arity !== "number") {
            arity = sync.length;
          }

          return buildOperation({
            name,
            arity,
            sync: function (args) {
              return sync.apply(this, args);
            },
            async: function (args, resolve, reject) {
              if (async) {
                async.apply(this, args).then(resolve, reject);
              } else if (errback) {
                errback.call(this, ...args, (err, value) => {
                  if (err == null) resolve(value);
                  else reject(err);
                });
              } else {
                resolve(sync.apply(this, args));
              }
            },
          });
        }

        function wrapGenerator(genFn) {
          return setFunctionMetadata(
            genFn.name,
            genFn.length,
            function (...args) {
              return genFn.apply(this, args);
            }
          );
        }

        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.
              const res = sync.call(this, args);
              return res;
            }

            let result;
            try {
              async.call(
                this,
                args,
                (value) => {
                  if (result) return;

                  result = { value };
                  resume();
                },
                (err) => {
                  if (result) return;

                  result = { err };
                  resume();
                }
              );
            } catch (err) {
              result = { err };
              resume();
            }

            // Suspend until the callbacks run. Will resume synchronously if the
            // callback was already called.
            yield GENSYNC_SUSPEND;

            if (result.hasOwnProperty("err")) {
              throw result.err;
            }

            return result.value;
          });
        }

        function evaluateSync(gen) {
          let value;
          while (!({ value } = gen.next()).done) {
            assertStart(value, gen);
          }
          return value;
        }

        function evaluateAsync(gen, resolve, reject) {
          (function step() {
            try {
              let value;
              while (!({ value } = gen.next()).done) {
                assertStart(value, gen);

                // If this throws, it is considered to have broken the contract
                // established for async handlers. If these handlers are called
                // synchronously, it is also considered bad behavior.
                let sync = true;
                let didSyncResume = false;
                const out = gen.next(() => {
                  if (sync) {
                    didSyncResume = true;
                  } else {
                    step();
                  }
                });
                sync = false;

                assertSuspend(out, gen);

                if (!didSyncResume) {
                  // Callback wasn't called synchronously, so break out of the loop
                  // and let it call 'step' later.
                  return;
                }
              }

              return resolve(value);
            } catch (err) {
              return reject(err);
            }
          })();
        }

        function assertStart(value, gen) {
          if (value === GENSYNC_START) return;

          throwError(
            gen,
            makeError(
              `Got unexpected yielded value in gensync generator: ${JSON.stringify(
                value
              )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
              GENSYNC_EXPECTED_START
            )
          );
        }
        function assertSuspend({ value, done }, gen) {
          if (!done && value === GENSYNC_SUSPEND) return;

          throwError(
            gen,
            makeError(
              done
                ? "Unexpected generator completion. If you get this, it is probably a gensync bug."
                : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
                    value
                  )}. If you get this, it is probably a gensync bug.`,
              GENSYNC_EXPECTED_SUSPEND
            )
          );
        }

        function throwError(gen, err) {
          // Call `.throw` so that users can step in a debugger to easily see which
          // 'yield' passed an unexpected value. If the `.throw` call didn't throw
          // back to the generator, we explicitly do it to stop the error
          // from being swallowed by user code try/catches.
          if (gen.throw) gen.throw(err);
          throw err;
        }

        function isIterable(value) {
          return (
            !!value &&
            (typeof value === "object" || typeof value === "function") &&
            !value[Symbol.iterator]
          );
        }

        function setFunctionMetadata(name, arity, fn) {
          if (typeof name === "string") {
            // This should always work on the supported Node versions, but for the
            // sake of users that are compiling to older versions, we check for
            // configurability so we don't throw.
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            if (!nameDesc || nameDesc.configurable) {
              Object.defineProperty(
                fn,
                "name",
                Object.assign(nameDesc || {}, {
                  configurable: true,
                  value: name,
                })
              );
            }
          }

          if (typeof arity === "number") {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            if (!lengthDesc || lengthDesc.configurable) {
              Object.defineProperty(
                fn,
                "length",
                Object.assign(lengthDesc || {}, {
                  configurable: true,
                  value: arity,
                })
              );
            }
          }

          return fn;
        }
      },
      {},
    ],
    249: [
      function (require, module, exports) {
        module.exports = {
          builtin: {
            Array: false,
            ArrayBuffer: false,
            Atomics: false,
            BigInt: false,
            BigInt64Array: false,
            BigUint64Array: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            globalThis: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            SharedArrayBuffer: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false,
          },
          es5: {
            Array: false,
            Boolean: false,
            constructor: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            propertyIsEnumerable: false,
            RangeError: false,
            ReferenceError: false,
            RegExp: false,
            String: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
          },
          es2015: {
            Array: false,
            ArrayBuffer: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false,
          },
          es2017: {
            Array: false,
            ArrayBuffer: false,
            Atomics: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            SharedArrayBuffer: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false,
          },
          browser: {
            AbortController: false,
            AbortSignal: false,
            addEventListener: false,
            alert: false,
            AnalyserNode: false,
            Animation: false,
            AnimationEffectReadOnly: false,
            AnimationEffectTiming: false,
            AnimationEffectTimingReadOnly: false,
            AnimationEvent: false,
            AnimationPlaybackEvent: false,
            AnimationTimeline: false,
            applicationCache: false,
            ApplicationCache: false,
            ApplicationCacheErrorEvent: false,
            atob: false,
            Attr: false,
            Audio: false,
            AudioBuffer: false,
            AudioBufferSourceNode: false,
            AudioContext: false,
            AudioDestinationNode: false,
            AudioListener: false,
            AudioNode: false,
            AudioParam: false,
            AudioProcessingEvent: false,
            AudioScheduledSourceNode: false,
            "AudioWorkletGlobalScope ": false,
            AudioWorkletNode: false,
            AudioWorkletProcessor: false,
            BarProp: false,
            BaseAudioContext: false,
            BatteryManager: false,
            BeforeUnloadEvent: false,
            BiquadFilterNode: false,
            Blob: false,
            BlobEvent: false,
            blur: false,
            BroadcastChannel: false,
            btoa: false,
            BudgetService: false,
            ByteLengthQueuingStrategy: false,
            Cache: false,
            caches: false,
            CacheStorage: false,
            cancelAnimationFrame: false,
            cancelIdleCallback: false,
            CanvasCaptureMediaStreamTrack: false,
            CanvasGradient: false,
            CanvasPattern: false,
            CanvasRenderingContext2D: false,
            ChannelMergerNode: false,
            ChannelSplitterNode: false,
            CharacterData: false,
            clearInterval: false,
            clearTimeout: false,
            clientInformation: false,
            ClipboardEvent: false,
            close: false,
            closed: false,
            CloseEvent: false,
            Comment: false,
            CompositionEvent: false,
            confirm: false,
            console: false,
            ConstantSourceNode: false,
            ConvolverNode: false,
            CountQueuingStrategy: false,
            createImageBitmap: false,
            Credential: false,
            CredentialsContainer: false,
            crypto: false,
            Crypto: false,
            CryptoKey: false,
            CSS: false,
            CSSConditionRule: false,
            CSSFontFaceRule: false,
            CSSGroupingRule: false,
            CSSImportRule: false,
            CSSKeyframeRule: false,
            CSSKeyframesRule: false,
            CSSMediaRule: false,
            CSSNamespaceRule: false,
            CSSPageRule: false,
            CSSRule: false,
            CSSRuleList: false,
            CSSStyleDeclaration: false,
            CSSStyleRule: false,
            CSSStyleSheet: false,
            CSSSupportsRule: false,
            CustomElementRegistry: false,
            customElements: false,
            CustomEvent: false,
            DataTransfer: false,
            DataTransferItem: false,
            DataTransferItemList: false,
            defaultstatus: false,
            defaultStatus: false,
            DelayNode: false,
            DeviceMotionEvent: false,
            DeviceOrientationEvent: false,
            devicePixelRatio: false,
            dispatchEvent: false,
            document: false,
            Document: false,
            DocumentFragment: false,
            DocumentType: false,
            DOMError: false,
            DOMException: false,
            DOMImplementation: false,
            DOMMatrix: false,
            DOMMatrixReadOnly: false,
            DOMParser: false,
            DOMPoint: false,
            DOMPointReadOnly: false,
            DOMQuad: false,
            DOMRect: false,
            DOMRectReadOnly: false,
            DOMStringList: false,
            DOMStringMap: false,
            DOMTokenList: false,
            DragEvent: false,
            DynamicsCompressorNode: false,
            Element: false,
            ErrorEvent: false,
            event: false,
            Event: false,
            EventSource: false,
            EventTarget: false,
            external: false,
            fetch: false,
            File: false,
            FileList: false,
            FileReader: false,
            find: false,
            focus: false,
            FocusEvent: false,
            FontFace: false,
            FontFaceSetLoadEvent: false,
            FormData: false,
            frameElement: false,
            frames: false,
            GainNode: false,
            Gamepad: false,
            GamepadButton: false,
            GamepadEvent: false,
            getComputedStyle: false,
            getSelection: false,
            HashChangeEvent: false,
            Headers: false,
            history: false,
            History: false,
            HTMLAllCollection: false,
            HTMLAnchorElement: false,
            HTMLAreaElement: false,
            HTMLAudioElement: false,
            HTMLBaseElement: false,
            HTMLBodyElement: false,
            HTMLBRElement: false,
            HTMLButtonElement: false,
            HTMLCanvasElement: false,
            HTMLCollection: false,
            HTMLContentElement: false,
            HTMLDataElement: false,
            HTMLDataListElement: false,
            HTMLDetailsElement: false,
            HTMLDialogElement: false,
            HTMLDirectoryElement: false,
            HTMLDivElement: false,
            HTMLDListElement: false,
            HTMLDocument: false,
            HTMLElement: false,
            HTMLEmbedElement: false,
            HTMLFieldSetElement: false,
            HTMLFontElement: false,
            HTMLFormControlsCollection: false,
            HTMLFormElement: false,
            HTMLFrameElement: false,
            HTMLFrameSetElement: false,
            HTMLHeadElement: false,
            HTMLHeadingElement: false,
            HTMLHRElement: false,
            HTMLHtmlElement: false,
            HTMLIFrameElement: false,
            HTMLImageElement: false,
            HTMLInputElement: false,
            HTMLLabelElement: false,
            HTMLLegendElement: false,
            HTMLLIElement: false,
            HTMLLinkElement: false,
            HTMLMapElement: false,
            HTMLMarqueeElement: false,
            HTMLMediaElement: false,
            HTMLMenuElement: false,
            HTMLMetaElement: false,
            HTMLMeterElement: false,
            HTMLModElement: false,
            HTMLObjectElement: false,
            HTMLOListElement: false,
            HTMLOptGroupElement: false,
            HTMLOptionElement: false,
            HTMLOptionsCollection: false,
            HTMLOutputElement: false,
            HTMLParagraphElement: false,
            HTMLParamElement: false,
            HTMLPictureElement: false,
            HTMLPreElement: false,
            HTMLProgressElement: false,
            HTMLQuoteElement: false,
            HTMLScriptElement: false,
            HTMLSelectElement: false,
            HTMLShadowElement: false,
            HTMLSlotElement: false,
            HTMLSourceElement: false,
            HTMLSpanElement: false,
            HTMLStyleElement: false,
            HTMLTableCaptionElement: false,
            HTMLTableCellElement: false,
            HTMLTableColElement: false,
            HTMLTableElement: false,
            HTMLTableRowElement: false,
            HTMLTableSectionElement: false,
            HTMLTemplateElement: false,
            HTMLTextAreaElement: false,
            HTMLTimeElement: false,
            HTMLTitleElement: false,
            HTMLTrackElement: false,
            HTMLUListElement: false,
            HTMLUnknownElement: false,
            HTMLVideoElement: false,
            IDBCursor: false,
            IDBCursorWithValue: false,
            IDBDatabase: false,
            IDBFactory: false,
            IDBIndex: false,
            IDBKeyRange: false,
            IDBObjectStore: false,
            IDBOpenDBRequest: false,
            IDBRequest: false,
            IDBTransaction: false,
            IDBVersionChangeEvent: false,
            IdleDeadline: false,
            IIRFilterNode: false,
            Image: false,
            ImageBitmap: false,
            ImageBitmapRenderingContext: false,
            ImageCapture: false,
            ImageData: false,
            indexedDB: false,
            innerHeight: false,
            innerWidth: false,
            InputEvent: false,
            IntersectionObserver: false,
            IntersectionObserverEntry: false,
            Intl: false,
            isSecureContext: false,
            KeyboardEvent: false,
            KeyframeEffect: false,
            KeyframeEffectReadOnly: false,
            length: false,
            localStorage: false,
            location: true,
            Location: false,
            locationbar: false,
            matchMedia: false,
            MediaDeviceInfo: false,
            MediaDevices: false,
            MediaElementAudioSourceNode: false,
            MediaEncryptedEvent: false,
            MediaError: false,
            MediaKeyMessageEvent: false,
            MediaKeySession: false,
            MediaKeyStatusMap: false,
            MediaKeySystemAccess: false,
            MediaList: false,
            MediaQueryList: false,
            MediaQueryListEvent: false,
            MediaRecorder: false,
            MediaSettingsRange: false,
            MediaSource: false,
            MediaStream: false,
            MediaStreamAudioDestinationNode: false,
            MediaStreamAudioSourceNode: false,
            MediaStreamEvent: false,
            MediaStreamTrack: false,
            MediaStreamTrackEvent: false,
            menubar: false,
            MessageChannel: false,
            MessageEvent: false,
            MessagePort: false,
            MIDIAccess: false,
            MIDIConnectionEvent: false,
            MIDIInput: false,
            MIDIInputMap: false,
            MIDIMessageEvent: false,
            MIDIOutput: false,
            MIDIOutputMap: false,
            MIDIPort: false,
            MimeType: false,
            MimeTypeArray: false,
            MouseEvent: false,
            moveBy: false,
            moveTo: false,
            MutationEvent: false,
            MutationObserver: false,
            MutationRecord: false,
            name: false,
            NamedNodeMap: false,
            NavigationPreloadManager: false,
            navigator: false,
            Navigator: false,
            NetworkInformation: false,
            Node: false,
            NodeFilter: false,
            NodeIterator: false,
            NodeList: false,
            Notification: false,
            OfflineAudioCompletionEvent: false,
            OfflineAudioContext: false,
            offscreenBuffering: false,
            OffscreenCanvas: true,
            onabort: true,
            onafterprint: true,
            onanimationend: true,
            onanimationiteration: true,
            onanimationstart: true,
            onappinstalled: true,
            onauxclick: true,
            onbeforeinstallprompt: true,
            onbeforeprint: true,
            onbeforeunload: true,
            onblur: true,
            oncancel: true,
            oncanplay: true,
            oncanplaythrough: true,
            onchange: true,
            onclick: true,
            onclose: true,
            oncontextmenu: true,
            oncuechange: true,
            ondblclick: true,
            ondevicemotion: true,
            ondeviceorientation: true,
            ondeviceorientationabsolute: true,
            ondrag: true,
            ondragend: true,
            ondragenter: true,
            ondragleave: true,
            ondragover: true,
            ondragstart: true,
            ondrop: true,
            ondurationchange: true,
            onemptied: true,
            onended: true,
            onerror: true,
            onfocus: true,
            ongotpointercapture: true,
            onhashchange: true,
            oninput: true,
            oninvalid: true,
            onkeydown: true,
            onkeypress: true,
            onkeyup: true,
            onlanguagechange: true,
            onload: true,
            onloadeddata: true,
            onloadedmetadata: true,
            onloadstart: true,
            onlostpointercapture: true,
            onmessage: true,
            onmessageerror: true,
            onmousedown: true,
            onmouseenter: true,
            onmouseleave: true,
            onmousemove: true,
            onmouseout: true,
            onmouseover: true,
            onmouseup: true,
            onmousewheel: true,
            onoffline: true,
            ononline: true,
            onpagehide: true,
            onpageshow: true,
            onpause: true,
            onplay: true,
            onplaying: true,
            onpointercancel: true,
            onpointerdown: true,
            onpointerenter: true,
            onpointerleave: true,
            onpointermove: true,
            onpointerout: true,
            onpointerover: true,
            onpointerup: true,
            onpopstate: true,
            onprogress: true,
            onratechange: true,
            onrejectionhandled: true,
            onreset: true,
            onresize: true,
            onscroll: true,
            onsearch: true,
            onseeked: true,
            onseeking: true,
            onselect: true,
            onstalled: true,
            onstorage: true,
            onsubmit: true,
            onsuspend: true,
            ontimeupdate: true,
            ontoggle: true,
            ontransitionend: true,
            onunhandledrejection: true,
            onunload: true,
            onvolumechange: true,
            onwaiting: true,
            onwheel: true,
            open: false,
            openDatabase: false,
            opener: false,
            Option: false,
            origin: false,
            OscillatorNode: false,
            outerHeight: false,
            outerWidth: false,
            PageTransitionEvent: false,
            pageXOffset: false,
            pageYOffset: false,
            PannerNode: false,
            parent: false,
            Path2D: false,
            PaymentAddress: false,
            PaymentRequest: false,
            PaymentRequestUpdateEvent: false,
            PaymentResponse: false,
            performance: false,
            Performance: false,
            PerformanceEntry: false,
            PerformanceLongTaskTiming: false,
            PerformanceMark: false,
            PerformanceMeasure: false,
            PerformanceNavigation: false,
            PerformanceNavigationTiming: false,
            PerformanceObserver: false,
            PerformanceObserverEntryList: false,
            PerformancePaintTiming: false,
            PerformanceResourceTiming: false,
            PerformanceTiming: false,
            PeriodicWave: false,
            Permissions: false,
            PermissionStatus: false,
            personalbar: false,
            PhotoCapabilities: false,
            Plugin: false,
            PluginArray: false,
            PointerEvent: false,
            PopStateEvent: false,
            postMessage: false,
            Presentation: false,
            PresentationAvailability: false,
            PresentationConnection: false,
            PresentationConnectionAvailableEvent: false,
            PresentationConnectionCloseEvent: false,
            PresentationConnectionList: false,
            PresentationReceiver: false,
            PresentationRequest: false,
            print: false,
            ProcessingInstruction: false,
            ProgressEvent: false,
            PromiseRejectionEvent: false,
            prompt: false,
            PushManager: false,
            PushSubscription: false,
            PushSubscriptionOptions: false,
            queueMicrotask: false,
            RadioNodeList: false,
            Range: false,
            ReadableStream: false,
            registerProcessor: false,
            RemotePlayback: false,
            removeEventListener: false,
            Request: false,
            requestAnimationFrame: false,
            requestIdleCallback: false,
            resizeBy: false,
            ResizeObserver: false,
            ResizeObserverEntry: false,
            resizeTo: false,
            Response: false,
            RTCCertificate: false,
            RTCDataChannel: false,
            RTCDataChannelEvent: false,
            RTCDtlsTransport: false,
            RTCIceCandidate: false,
            RTCIceGatherer: false,
            RTCIceTransport: false,
            RTCPeerConnection: false,
            RTCPeerConnectionIceEvent: false,
            RTCRtpContributingSource: false,
            RTCRtpReceiver: false,
            RTCRtpSender: false,
            RTCSctpTransport: false,
            RTCSessionDescription: false,
            RTCStatsReport: false,
            RTCTrackEvent: false,
            screen: false,
            Screen: false,
            screenLeft: false,
            ScreenOrientation: false,
            screenTop: false,
            screenX: false,
            screenY: false,
            ScriptProcessorNode: false,
            scroll: false,
            scrollbars: false,
            scrollBy: false,
            scrollTo: false,
            scrollX: false,
            scrollY: false,
            SecurityPolicyViolationEvent: false,
            Selection: false,
            self: false,
            ServiceWorker: false,
            ServiceWorkerContainer: false,
            ServiceWorkerRegistration: false,
            sessionStorage: false,
            setInterval: false,
            setTimeout: false,
            ShadowRoot: false,
            SharedWorker: false,
            SourceBuffer: false,
            SourceBufferList: false,
            speechSynthesis: false,
            SpeechSynthesisEvent: false,
            SpeechSynthesisUtterance: false,
            StaticRange: false,
            status: false,
            statusbar: false,
            StereoPannerNode: false,
            stop: false,
            Storage: false,
            StorageEvent: false,
            StorageManager: false,
            styleMedia: false,
            StyleSheet: false,
            StyleSheetList: false,
            SubtleCrypto: false,
            SVGAElement: false,
            SVGAngle: false,
            SVGAnimatedAngle: false,
            SVGAnimatedBoolean: false,
            SVGAnimatedEnumeration: false,
            SVGAnimatedInteger: false,
            SVGAnimatedLength: false,
            SVGAnimatedLengthList: false,
            SVGAnimatedNumber: false,
            SVGAnimatedNumberList: false,
            SVGAnimatedPreserveAspectRatio: false,
            SVGAnimatedRect: false,
            SVGAnimatedString: false,
            SVGAnimatedTransformList: false,
            SVGAnimateElement: false,
            SVGAnimateMotionElement: false,
            SVGAnimateTransformElement: false,
            SVGAnimationElement: false,
            SVGCircleElement: false,
            SVGClipPathElement: false,
            SVGComponentTransferFunctionElement: false,
            SVGDefsElement: false,
            SVGDescElement: false,
            SVGDiscardElement: false,
            SVGElement: false,
            SVGEllipseElement: false,
            SVGFEBlendElement: false,
            SVGFEColorMatrixElement: false,
            SVGFEComponentTransferElement: false,
            SVGFECompositeElement: false,
            SVGFEConvolveMatrixElement: false,
            SVGFEDiffuseLightingElement: false,
            SVGFEDisplacementMapElement: false,
            SVGFEDistantLightElement: false,
            SVGFEDropShadowElement: false,
            SVGFEFloodElement: false,
            SVGFEFuncAElement: false,
            SVGFEFuncBElement: false,
            SVGFEFuncGElement: false,
            SVGFEFuncRElement: false,
            SVGFEGaussianBlurElement: false,
            SVGFEImageElement: false,
            SVGFEMergeElement: false,
            SVGFEMergeNodeElement: false,
            SVGFEMorphologyElement: false,
            SVGFEOffsetElement: false,
            SVGFEPointLightElement: false,
            SVGFESpecularLightingElement: false,
            SVGFESpotLightElement: false,
            SVGFETileElement: false,
            SVGFETurbulenceElement: false,
            SVGFilterElement: false,
            SVGForeignObjectElement: false,
            SVGGElement: false,
            SVGGeometryElement: false,
            SVGGradientElement: false,
            SVGGraphicsElement: false,
            SVGImageElement: false,
            SVGLength: false,
            SVGLengthList: false,
            SVGLinearGradientElement: false,
            SVGLineElement: false,
            SVGMarkerElement: false,
            SVGMaskElement: false,
            SVGMatrix: false,
            SVGMetadataElement: false,
            SVGMPathElement: false,
            SVGNumber: false,
            SVGNumberList: false,
            SVGPathElement: false,
            SVGPatternElement: false,
            SVGPoint: false,
            SVGPointList: false,
            SVGPolygonElement: false,
            SVGPolylineElement: false,
            SVGPreserveAspectRatio: false,
            SVGRadialGradientElement: false,
            SVGRect: false,
            SVGRectElement: false,
            SVGScriptElement: false,
            SVGSetElement: false,
            SVGStopElement: false,
            SVGStringList: false,
            SVGStyleElement: false,
            SVGSVGElement: false,
            SVGSwitchElement: false,
            SVGSymbolElement: false,
            SVGTextContentElement: false,
            SVGTextElement: false,
            SVGTextPathElement: false,
            SVGTextPositioningElement: false,
            SVGTitleElement: false,
            SVGTransform: false,
            SVGTransformList: false,
            SVGTSpanElement: false,
            SVGUnitTypes: false,
            SVGUseElement: false,
            SVGViewElement: false,
            TaskAttributionTiming: false,
            Text: false,
            TextDecoder: false,
            TextEncoder: false,
            TextEvent: false,
            TextMetrics: false,
            TextTrack: false,
            TextTrackCue: false,
            TextTrackCueList: false,
            TextTrackList: false,
            TimeRanges: false,
            toolbar: false,
            top: false,
            Touch: false,
            TouchEvent: false,
            TouchList: false,
            TrackEvent: false,
            TransitionEvent: false,
            TreeWalker: false,
            UIEvent: false,
            URL: false,
            URLSearchParams: false,
            ValidityState: false,
            visualViewport: false,
            VisualViewport: false,
            VTTCue: false,
            WaveShaperNode: false,
            WebAssembly: false,
            WebGL2RenderingContext: false,
            WebGLActiveInfo: false,
            WebGLBuffer: false,
            WebGLContextEvent: false,
            WebGLFramebuffer: false,
            WebGLProgram: false,
            WebGLQuery: false,
            WebGLRenderbuffer: false,
            WebGLRenderingContext: false,
            WebGLSampler: false,
            WebGLShader: false,
            WebGLShaderPrecisionFormat: false,
            WebGLSync: false,
            WebGLTexture: false,
            WebGLTransformFeedback: false,
            WebGLUniformLocation: false,
            WebGLVertexArrayObject: false,
            WebSocket: false,
            WheelEvent: false,
            window: false,
            Window: false,
            Worker: false,
            WritableStream: false,
            XMLDocument: false,
            XMLHttpRequest: false,
            XMLHttpRequestEventTarget: false,
            XMLHttpRequestUpload: false,
            XMLSerializer: false,
            XPathEvaluator: false,
            XPathExpression: false,
            XPathResult: false,
            XSLTProcessor: false,
          },
          worker: {
            addEventListener: false,
            applicationCache: false,
            atob: false,
            Blob: false,
            BroadcastChannel: false,
            btoa: false,
            Cache: false,
            caches: false,
            clearInterval: false,
            clearTimeout: false,
            close: true,
            console: false,
            fetch: false,
            FileReaderSync: false,
            FormData: false,
            Headers: false,
            IDBCursor: false,
            IDBCursorWithValue: false,
            IDBDatabase: false,
            IDBFactory: false,
            IDBIndex: false,
            IDBKeyRange: false,
            IDBObjectStore: false,
            IDBOpenDBRequest: false,
            IDBRequest: false,
            IDBTransaction: false,
            IDBVersionChangeEvent: false,
            ImageData: false,
            importScripts: true,
            indexedDB: false,
            location: false,
            MessageChannel: false,
            MessagePort: false,
            name: false,
            navigator: false,
            Notification: false,
            onclose: true,
            onconnect: true,
            onerror: true,
            onlanguagechange: true,
            onmessage: true,
            onoffline: true,
            ononline: true,
            onrejectionhandled: true,
            onunhandledrejection: true,
            performance: false,
            Performance: false,
            PerformanceEntry: false,
            PerformanceMark: false,
            PerformanceMeasure: false,
            PerformanceNavigation: false,
            PerformanceResourceTiming: false,
            PerformanceTiming: false,
            postMessage: true,
            Promise: false,
            queueMicrotask: false,
            removeEventListener: false,
            Request: false,
            Response: false,
            self: true,
            ServiceWorkerRegistration: false,
            setInterval: false,
            setTimeout: false,
            TextDecoder: false,
            TextEncoder: false,
            URL: false,
            URLSearchParams: false,
            WebSocket: false,
            Worker: false,
            WorkerGlobalScope: false,
            XMLHttpRequest: false,
          },
          node: {
            __dirname: false,
            __filename: false,
            Buffer: false,
            clearImmediate: false,
            clearInterval: false,
            clearTimeout: false,
            console: false,
            exports: true,
            global: false,
            Intl: false,
            module: false,
            process: false,
            queueMicrotask: false,
            require: false,
            setImmediate: false,
            setInterval: false,
            setTimeout: false,
            TextDecoder: false,
            TextEncoder: false,
            URL: false,
            URLSearchParams: false,
          },
          commonjs: {
            exports: true,
            global: false,
            module: false,
            require: false,
          },
          amd: {
            define: false,
            require: false,
          },
          mocha: {
            after: false,
            afterEach: false,
            before: false,
            beforeEach: false,
            context: false,
            describe: false,
            it: false,
            mocha: false,
            run: false,
            setup: false,
            specify: false,
            suite: false,
            suiteSetup: false,
            suiteTeardown: false,
            teardown: false,
            test: false,
            xcontext: false,
            xdescribe: false,
            xit: false,
            xspecify: false,
          },
          jasmine: {
            afterAll: false,
            afterEach: false,
            beforeAll: false,
            beforeEach: false,
            describe: false,
            expect: false,
            fail: false,
            fdescribe: false,
            fit: false,
            it: false,
            jasmine: false,
            pending: false,
            runs: false,
            spyOn: false,
            spyOnProperty: false,
            waits: false,
            waitsFor: false,
            xdescribe: false,
            xit: false,
          },
          jest: {
            afterAll: false,
            afterEach: false,
            beforeAll: false,
            beforeEach: false,
            describe: false,
            expect: false,
            fdescribe: false,
            fit: false,
            it: false,
            jest: false,
            pit: false,
            require: false,
            test: false,
            xdescribe: false,
            xit: false,
            xtest: false,
          },
          qunit: {
            asyncTest: false,
            deepEqual: false,
            equal: false,
            expect: false,
            module: false,
            notDeepEqual: false,
            notEqual: false,
            notOk: false,
            notPropEqual: false,
            notStrictEqual: false,
            ok: false,
            propEqual: false,
            QUnit: false,
            raises: false,
            start: false,
            stop: false,
            strictEqual: false,
            test: false,
            throws: false,
          },
          phantomjs: {
            console: true,
            exports: true,
            phantom: true,
            require: true,
            WebPage: true,
          },
          couch: {
            emit: false,
            exports: false,
            getRow: false,
            log: false,
            module: false,
            provides: false,
            require: false,
            respond: false,
            send: false,
            start: false,
            sum: false,
          },
          rhino: {
            defineClass: false,
            deserialize: false,
            gc: false,
            help: false,
            importClass: false,
            importPackage: false,
            java: false,
            load: false,
            loadClass: false,
            Packages: false,
            print: false,
            quit: false,
            readFile: false,
            readUrl: false,
            runCommand: false,
            seal: false,
            serialize: false,
            spawn: false,
            sync: false,
            toint32: false,
            version: false,
          },
          nashorn: {
            __DIR__: false,
            __FILE__: false,
            __LINE__: false,
            com: false,
            edu: false,
            exit: false,
            java: false,
            Java: false,
            javafx: false,
            JavaImporter: false,
            javax: false,
            JSAdapter: false,
            load: false,
            loadWithNewGlobal: false,
            org: false,
            Packages: false,
            print: false,
            quit: false,
          },
          wsh: {
            ActiveXObject: true,
            Enumerator: true,
            GetObject: true,
            ScriptEngine: true,
            ScriptEngineBuildVersion: true,
            ScriptEngineMajorVersion: true,
            ScriptEngineMinorVersion: true,
            VBArray: true,
            WScript: true,
            WSH: true,
            XDomainRequest: true,
          },
          jquery: {
            $: false,
            jQuery: false,
          },
          yui: {
            YAHOO: false,
            YAHOO_config: false,
            YUI: false,
            YUI_config: false,
          },
          shelljs: {
            cat: false,
            cd: false,
            chmod: false,
            config: false,
            cp: false,
            dirs: false,
            echo: false,
            env: false,
            error: false,
            exec: false,
            exit: false,
            find: false,
            grep: false,
            ln: false,
            ls: false,
            mkdir: false,
            mv: false,
            popd: false,
            pushd: false,
            pwd: false,
            rm: false,
            sed: false,
            set: false,
            target: false,
            tempdir: false,
            test: false,
            touch: false,
            which: false,
          },
          prototypejs: {
            $: false,
            $$: false,
            $A: false,
            $break: false,
            $continue: false,
            $F: false,
            $H: false,
            $R: false,
            $w: false,
            Abstract: false,
            Ajax: false,
            Autocompleter: false,
            Builder: false,
            Class: false,
            Control: false,
            Draggable: false,
            Draggables: false,
            Droppables: false,
            Effect: false,
            Element: false,
            Enumerable: false,
            Event: false,
            Field: false,
            Form: false,
            Hash: false,
            Insertion: false,
            ObjectRange: false,
            PeriodicalExecuter: false,
            Position: false,
            Prototype: false,
            Scriptaculous: false,
            Selector: false,
            Sortable: false,
            SortableObserver: false,
            Sound: false,
            Template: false,
            Toggle: false,
            Try: false,
          },
          meteor: {
            _: false,
            $: false,
            Accounts: false,
            AccountsClient: false,
            AccountsCommon: false,
            AccountsServer: false,
            App: false,
            Assets: false,
            Blaze: false,
            check: false,
            Cordova: false,
            DDP: false,
            DDPRateLimiter: false,
            DDPServer: false,
            Deps: false,
            EJSON: false,
            Email: false,
            HTTP: false,
            Log: false,
            Match: false,
            Meteor: false,
            Mongo: false,
            MongoInternals: false,
            Npm: false,
            Package: false,
            Plugin: false,
            process: false,
            Random: false,
            ReactiveDict: false,
            ReactiveVar: false,
            Router: false,
            ServiceConfiguration: false,
            Session: false,
            share: false,
            Spacebars: false,
            Template: false,
            Tinytest: false,
            Tracker: false,
            UI: false,
            Utils: false,
            WebApp: false,
            WebAppInternals: false,
          },
          mongo: {
            _isWindows: false,
            _rand: false,
            BulkWriteResult: false,
            cat: false,
            cd: false,
            connect: false,
            db: false,
            getHostName: false,
            getMemInfo: false,
            hostname: false,
            ISODate: false,
            listFiles: false,
            load: false,
            ls: false,
            md5sumFile: false,
            mkdir: false,
            Mongo: false,
            NumberInt: false,
            NumberLong: false,
            ObjectId: false,
            PlanCache: false,
            print: false,
            printjson: false,
            pwd: false,
            quit: false,
            removeFile: false,
            rs: false,
            sh: false,
            UUID: false,
            version: false,
            WriteResult: false,
          },
          applescript: {
            $: false,
            Application: false,
            Automation: false,
            console: false,
            delay: false,
            Library: false,
            ObjC: false,
            ObjectSpecifier: false,
            Path: false,
            Progress: false,
            Ref: false,
          },
          serviceworker: {
            addEventListener: false,
            applicationCache: false,
            atob: false,
            Blob: false,
            BroadcastChannel: false,
            btoa: false,
            Cache: false,
            caches: false,
            CacheStorage: false,
            clearInterval: false,
            clearTimeout: false,
            Client: false,
            clients: false,
            Clients: false,
            close: true,
            console: false,
            ExtendableEvent: false,
            ExtendableMessageEvent: false,
            fetch: false,
            FetchEvent: false,
            FileReaderSync: false,
            FormData: false,
            Headers: false,
            IDBCursor: false,
            IDBCursorWithValue: false,
            IDBDatabase: false,
            IDBFactory: false,
            IDBIndex: false,
            IDBKeyRange: false,
            IDBObjectStore: false,
            IDBOpenDBRequest: false,
            IDBRequest: false,
            IDBTransaction: false,
            IDBVersionChangeEvent: false,
            ImageData: false,
            importScripts: false,
            indexedDB: false,
            location: false,
            MessageChannel: false,
            MessagePort: false,
            name: false,
            navigator: false,
            Notification: false,
            onclose: true,
            onconnect: true,
            onerror: true,
            onfetch: true,
            oninstall: true,
            onlanguagechange: true,
            onmessage: true,
            onmessageerror: true,
            onnotificationclick: true,
            onnotificationclose: true,
            onoffline: true,
            ononline: true,
            onpush: true,
            onpushsubscriptionchange: true,
            onrejectionhandled: true,
            onsync: true,
            onunhandledrejection: true,
            performance: false,
            Performance: false,
            PerformanceEntry: false,
            PerformanceMark: false,
            PerformanceMeasure: false,
            PerformanceNavigation: false,
            PerformanceResourceTiming: false,
            PerformanceTiming: false,
            postMessage: true,
            Promise: false,
            queueMicrotask: false,
            registration: false,
            removeEventListener: false,
            Request: false,
            Response: false,
            self: false,
            ServiceWorker: false,
            ServiceWorkerContainer: false,
            ServiceWorkerGlobalScope: false,
            ServiceWorkerMessageEvent: false,
            ServiceWorkerRegistration: false,
            setInterval: false,
            setTimeout: false,
            skipWaiting: false,
            TextDecoder: false,
            TextEncoder: false,
            URL: false,
            URLSearchParams: false,
            WebSocket: false,
            WindowClient: false,
            Worker: false,
            WorkerGlobalScope: false,
            XMLHttpRequest: false,
          },
          atomtest: {
            advanceClock: false,
            fakeClearInterval: false,
            fakeClearTimeout: false,
            fakeSetInterval: false,
            fakeSetTimeout: false,
            resetTimeouts: false,
            waitsForPromise: false,
          },
          embertest: {
            andThen: false,
            click: false,
            currentPath: false,
            currentRouteName: false,
            currentURL: false,
            fillIn: false,
            find: false,
            findAll: false,
            findWithAssert: false,
            keyEvent: false,
            pauseTest: false,
            resumeTest: false,
            triggerEvent: false,
            visit: false,
            wait: false,
          },
          protractor: {
            $: false,
            $$: false,
            browser: false,
            by: false,
            By: false,
            DartObject: false,
            element: false,
            protractor: false,
          },
          "shared-node-browser": {
            clearInterval: false,
            clearTimeout: false,
            console: false,
            setInterval: false,
            setTimeout: false,
            URL: false,
            URLSearchParams: false,
          },
          webextensions: {
            browser: false,
            chrome: false,
            opr: false,
          },
          greasemonkey: {
            cloneInto: false,
            createObjectIn: false,
            exportFunction: false,
            GM: false,
            GM_addStyle: false,
            GM_deleteValue: false,
            GM_getResourceText: false,
            GM_getResourceURL: false,
            GM_getValue: false,
            GM_info: false,
            GM_listValues: false,
            GM_log: false,
            GM_openInTab: false,
            GM_registerMenuCommand: false,
            GM_setClipboard: false,
            GM_setValue: false,
            GM_xmlhttpRequest: false,
            unsafeWindow: false,
          },
          devtools: {
            $: false,
            $_: false,
            $$: false,
            $0: false,
            $1: false,
            $2: false,
            $3: false,
            $4: false,
            $x: false,
            chrome: false,
            clear: false,
            copy: false,
            debug: false,
            dir: false,
            dirxml: false,
            getEventListeners: false,
            inspect: false,
            keys: false,
            monitor: false,
            monitorEvents: false,
            profile: false,
            profileEnd: false,
            queryObjects: false,
            table: false,
            undebug: false,
            unmonitor: false,
            unmonitorEvents: false,
            values: false,
          },
        };
      },
      {},
    ],
    250: [
      function (require, module, exports) {
        "use strict";
        module.exports = require("./globals.json");
      },
      { "./globals.json": 249 },
    ],
    251: [
      function (require, module, exports) {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];

          i += d;

          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;
          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;
          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) {}

          e = (e << mLen) | m;
          eLen += mLen;
          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) {}

          buffer[offset + i - d] |= s * 128;
        };
      },
      {},
    ],
    252: [
      function (require, module, exports) {
        /*!
         * Determine if an object is a Buffer
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */

        // The _isBuffer check is for Safari 5-7 support, because it's missing
        // Object.prototype.constructor. Remove this eventually
        module.exports = function (obj) {
          return (
            obj != null &&
            (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
          );
        };

        function isBuffer(obj) {
          return (
            !!obj.constructor &&
            typeof obj.constructor.isBuffer === "function" &&
            obj.constructor.isBuffer(obj)
          );
        }

        // For Node v0.10 support. Remove this eventually.
        function isSlowBuffer(obj) {
          return (
            typeof obj.readFloatLE === "function" &&
            typeof obj.slice === "function" &&
            isBuffer(obj.slice(0, 0))
          );
        }
      },
      {},
    ],
    253: [
      function (require, module, exports) {
        // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
        // License: MIT. (See LICENSE.)

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });

        // This regex comes from regex.coffee, and is inserted here by generate-index.js
        // (run `npm run build`).
        exports.default =
          /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

        exports.matchToToken = function (match) {
          var token = { type: "invalid", value: match[0], closed: undefined };
          if (match[1])
            (token.type = "string"), (token.closed = !!(match[3] || match[4]));
          else if (match[5]) token.type = "comment";
          else if (match[6])
            (token.type = "comment"), (token.closed = !!match[7]);
          else if (match[8]) token.type = "regex";
          else if (match[9]) token.type = "number";
          else if (match[10]) token.type = "name";
          else if (match[11]) token.type = "punctuator";
          else if (match[12]) token.type = "whitespace";
          return token;
        };
      },
      {},
    ],
    254: [
      function (require, module, exports) {
        (function (Buffer) {
          (function () {
            "use strict";

            const object = {};
            const hasOwnProperty = object.hasOwnProperty;
            const forOwn = (object, callback) => {
              for (const key in object) {
                if (hasOwnProperty.call(object, key)) {
                  callback(key, object[key]);
                }
              }
            };

            const extend = (destination, source) => {
              if (!source) {
                return destination;
              }
              forOwn(source, (key, value) => {
                destination[key] = value;
              });
              return destination;
            };

            const forEach = (array, callback) => {
              const length = array.length;
              let index = -1;
              while (++index < length) {
                callback(array[index]);
              }
            };

            const toString = object.toString;
            const isArray = Array.isArray;
            const isBuffer = Buffer.isBuffer;
            const isObject = (value) => {
              // This is a very simple check, but it’s good enough for what we need.
              return toString.call(value) == "[object Object]";
            };
            const isString = (value) => {
              return (
                typeof value == "string" ||
                toString.call(value) == "[object String]"
              );
            };
            const isNumber = (value) => {
              return (
                typeof value == "number" ||
                toString.call(value) == "[object Number]"
              );
            };
            const isFunction = (value) => {
              return typeof value == "function";
            };
            const isMap = (value) => {
              return toString.call(value) == "[object Map]";
            };
            const isSet = (value) => {
              return toString.call(value) == "[object Set]";
            };

            /*--------------------------------------------------------------------------*/

            // https://mathiasbynens.be/notes/javascript-escapes#single
            const singleEscapes = {
              '"': '\\"',
              "'": "\\'",
              "\\": "\\\\",
              "\b": "\\b",
              "\f": "\\f",
              "\n": "\\n",
              "\r": "\\r",
              "\t": "\\t",
              // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
              // '\v': '\\x0B'
            };
            const regexSingleEscape = /["'\\\b\f\n\r\t]/;

            const regexDigit = /[0-9]/;
            const regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;

            const jsesc = (argument, options) => {
              const increaseIndentation = () => {
                oldIndent = indent;
                ++options.indentLevel;
                indent = options.indent.repeat(options.indentLevel);
              };
              // Handle options
              const defaults = {
                escapeEverything: false,
                minimal: false,
                isScriptContext: false,
                quotes: "single",
                wrap: false,
                es6: false,
                json: false,
                compact: true,
                lowercaseHex: false,
                numbers: "decimal",
                indent: "\t",
                indentLevel: 0,
                __inline1__: false,
                __inline2__: false,
              };
              const json = options && options.json;
              if (json) {
                defaults.quotes = "double";
                defaults.wrap = true;
              }
              options = extend(defaults, options);
              if (
                options.quotes != "single" &&
                options.quotes != "double" &&
                options.quotes != "backtick"
              ) {
                options.quotes = "single";
              }
              const quote =
                options.quotes == "double"
                  ? '"'
                  : options.quotes == "backtick"
                  ? "`"
                  : "'";
              const compact = options.compact;
              const lowercaseHex = options.lowercaseHex;
              let indent = options.indent.repeat(options.indentLevel);
              let oldIndent = "";
              const inline1 = options.__inline1__;
              const inline2 = options.__inline2__;
              const newLine = compact ? "" : "\n";
              let result;
              let isEmpty = true;
              const useBinNumbers = options.numbers == "binary";
              const useOctNumbers = options.numbers == "octal";
              const useDecNumbers = options.numbers == "decimal";
              const useHexNumbers = options.numbers == "hexadecimal";

              if (json && argument && isFunction(argument.toJSON)) {
                argument = argument.toJSON();
              }

              if (!isString(argument)) {
                if (isMap(argument)) {
                  if (argument.size == 0) {
                    return "new Map()";
                  }
                  if (!compact) {
                    options.__inline1__ = true;
                    options.__inline2__ = false;
                  }
                  return (
                    "new Map(" + jsesc(Array.from(argument), options) + ")"
                  );
                }
                if (isSet(argument)) {
                  if (argument.size == 0) {
                    return "new Set()";
                  }
                  return (
                    "new Set(" + jsesc(Array.from(argument), options) + ")"
                  );
                }
                if (isBuffer(argument)) {
                  if (argument.length == 0) {
                    return "Buffer.from([])";
                  }
                  return (
                    "Buffer.from(" + jsesc(Array.from(argument), options) + ")"
                  );
                }
                if (isArray(argument)) {
                  result = [];
                  options.wrap = true;
                  if (inline1) {
                    options.__inline1__ = false;
                    options.__inline2__ = true;
                  }
                  if (!inline2) {
                    increaseIndentation();
                  }
                  forEach(argument, (value) => {
                    isEmpty = false;
                    if (inline2) {
                      options.__inline2__ = false;
                    }
                    result.push(
                      (compact || inline2 ? "" : indent) + jsesc(value, options)
                    );
                  });
                  if (isEmpty) {
                    return "[]";
                  }
                  if (inline2) {
                    return "[" + result.join(", ") + "]";
                  }
                  return (
                    "[" +
                    newLine +
                    result.join("," + newLine) +
                    newLine +
                    (compact ? "" : oldIndent) +
                    "]"
                  );
                } else if (isNumber(argument)) {
                  if (json) {
                    // Some number values (e.g. `Infinity`) cannot be represented in JSON.
                    return JSON.stringify(argument);
                  }
                  if (useDecNumbers) {
                    return String(argument);
                  }
                  if (useHexNumbers) {
                    let hexadecimal = argument.toString(16);
                    if (!lowercaseHex) {
                      hexadecimal = hexadecimal.toUpperCase();
                    }
                    return "0x" + hexadecimal;
                  }
                  if (useBinNumbers) {
                    return "0b" + argument.toString(2);
                  }
                  if (useOctNumbers) {
                    return "0o" + argument.toString(8);
                  }
                } else if (!isObject(argument)) {
                  if (json) {
                    // For some values (e.g. `undefined`, `function` objects),
                    // `JSON.stringify(value)` returns `undefined` (which isn’t valid
                    // JSON) instead of `'null'`.
                    return JSON.stringify(argument) || "null";
                  }
                  return String(argument);
                } else {
                  // it’s an object
                  result = [];
                  options.wrap = true;
                  increaseIndentation();
                  forOwn(argument, (key, value) => {
                    isEmpty = false;
                    result.push(
                      (compact ? "" : indent) +
                        jsesc(key, options) +
                        ":" +
                        (compact ? "" : " ") +
                        jsesc(value, options)
                    );
                  });
                  if (isEmpty) {
                    return "{}";
                  }
                  return (
                    "{" +
                    newLine +
                    result.join("," + newLine) +
                    newLine +
                    (compact ? "" : oldIndent) +
                    "}"
                  );
                }
              }

              const string = argument;
              // Loop over each code unit in the string and escape it
              let index = -1;
              const length = string.length;
              result = "";
              while (++index < length) {
                const character = string.charAt(index);
                if (options.es6) {
                  const first = string.charCodeAt(index);
                  if (
                    // check if it’s the start of a surrogate pair
                    first >= 0xd800 &&
                    first <= 0xdbff && // high surrogate
                    length > index + 1 // there is a next code unit
                  ) {
                    const second = string.charCodeAt(index + 1);
                    if (second >= 0xdc00 && second <= 0xdfff) {
                      // low surrogate
                      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                      const codePoint =
                        (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                      let hexadecimal = codePoint.toString(16);
                      if (!lowercaseHex) {
                        hexadecimal = hexadecimal.toUpperCase();
                      }
                      result += "\\u{" + hexadecimal + "}";
                      ++index;
                      continue;
                    }
                  }
                }
                if (!options.escapeEverything) {
                  if (regexWhitelist.test(character)) {
                    // It’s a printable ASCII character that is not `"`, `'` or `\`,
                    // so don’t escape it.
                    result += character;
                    continue;
                  }
                  if (character == '"') {
                    result += quote == character ? '\\"' : character;
                    continue;
                  }
                  if (character == "`") {
                    result += quote == character ? "\\`" : character;
                    continue;
                  }
                  if (character == "'") {
                    result += quote == character ? "\\'" : character;
                    continue;
                  }
                }
                if (
                  character == "\0" &&
                  !json &&
                  !regexDigit.test(string.charAt(index + 1))
                ) {
                  result += "\\0";
                  continue;
                }
                if (regexSingleEscape.test(character)) {
                  // no need for a `hasOwnProperty` check here
                  result += singleEscapes[character];
                  continue;
                }
                const charCode = character.charCodeAt(0);
                if (
                  options.minimal &&
                  charCode != 0x2028 &&
                  charCode != 0x2029
                ) {
                  result += character;
                  continue;
                }
                let hexadecimal = charCode.toString(16);
                if (!lowercaseHex) {
                  hexadecimal = hexadecimal.toUpperCase();
                }
                const longhand = hexadecimal.length > 2 || json;
                const escaped =
                  "\\" +
                  (longhand ? "u" : "x") +
                  ("0000" + hexadecimal).slice(longhand ? -4 : -2);
                result += escaped;
                continue;
              }
              if (options.wrap) {
                result = quote + result + quote;
              }
              if (quote == "`") {
                result = result.replace(/\$\{/g, "\\${");
              }
              if (options.isScriptContext) {
                // https://mathiasbynens.be/notes/etago
                return result
                  .replace(/<\/(script|style)/gi, "<\\/$1")
                  .replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
              }
              return result;
            };

            jsesc.version = "2.5.2";

            module.exports = jsesc;
          }).call(this);
        }).call(this, { isBuffer: require("../is-buffer/index.js") });
      },
      { "../is-buffer/index.js": 252 },
    ],
    255: [
      function (require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root, "DataView");

        module.exports = DataView;
      },
      { "./_getNative": 338, "./_root": 382 },
    ],
    256: [
      function (require, module, exports) {
        var hashClear = require("./_hashClear"),
          hashDelete = require("./_hashDelete"),
          hashGet = require("./_hashGet"),
          hashHas = require("./_hashHas"),
          hashSet = require("./_hashSet");

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;
      },
      {
        "./_hashClear": 346,
        "./_hashDelete": 347,
        "./_hashGet": 348,
        "./_hashHas": 349,
        "./_hashSet": 350,
      },
    ],
    257: [
      function (require, module, exports) {
        var listCacheClear = require("./_listCacheClear"),
          listCacheDelete = require("./_listCacheDelete"),
          listCacheGet = require("./_listCacheGet"),
          listCacheHas = require("./_listCacheHas"),
          listCacheSet = require("./_listCacheSet");

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;
      },
      {
        "./_listCacheClear": 362,
        "./_listCacheDelete": 363,
        "./_listCacheGet": 364,
        "./_listCacheHas": 365,
        "./_listCacheSet": 366,
      },
    ],
    258: [
      function (require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Map = getNative(root, "Map");

        module.exports = Map;
      },
      { "./_getNative": 338, "./_root": 382 },
    ],
    259: [
      function (require, module, exports) {
        var mapCacheClear = require("./_mapCacheClear"),
          mapCacheDelete = require("./_mapCacheDelete"),
          mapCacheGet = require("./_mapCacheGet"),
          mapCacheHas = require("./_mapCacheHas"),
          mapCacheSet = require("./_mapCacheSet");

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;
      },
      {
        "./_mapCacheClear": 367,
        "./_mapCacheDelete": 368,
        "./_mapCacheGet": 369,
        "./_mapCacheHas": 370,
        "./_mapCacheSet": 371,
      },
    ],
    260: [
      function (require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Promise = getNative(root, "Promise");

        module.exports = Promise;
      },
      { "./_getNative": 338, "./_root": 382 },
    ],
    261: [
      function (require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Set = getNative(root, "Set");

        module.exports = Set;
      },
      { "./_getNative": 338, "./_root": 382 },
    ],
    262: [
      function (require, module, exports) {
        var MapCache = require("./_MapCache"),
          setCacheAdd = require("./_setCacheAdd"),
          setCacheHas = require("./_setCacheHas");

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
            length = values == null ? 0 : values.length;

          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values[index]);
          }
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;
      },
      { "./_MapCache": 259, "./_setCacheAdd": 383, "./_setCacheHas": 384 },
    ],
    263: [
      function (require, module, exports) {
        var ListCache = require("./_ListCache"),
          stackClear = require("./_stackClear"),
          stackDelete = require("./_stackDelete"),
          stackGet = require("./_stackGet"),
          stackHas = require("./_stackHas"),
          stackSet = require("./_stackSet");

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;
      },
      {
        "./_ListCache": 257,
        "./_stackClear": 388,
        "./_stackDelete": 389,
        "./_stackGet": 390,
        "./_stackHas": 391,
        "./_stackSet": 392,
      },
    ],
    264: [
      function (require, module, exports) {
        var root = require("./_root");

        /** Built-in value references. */
        var Symbol = root.Symbol;

        module.exports = Symbol;
      },
      { "./_root": 382 },
    ],
    265: [
      function (require, module, exports) {
        var root = require("./_root");

        /** Built-in value references. */
        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;
      },
      { "./_root": 382 },
    ],
    266: [
      function (require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var WeakMap = getNative(root, "WeakMap");

        module.exports = WeakMap;
      },
      { "./_getNative": 338, "./_root": 382 },
    ],
    267: [
      function (require, module, exports) {
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }

        module.exports = apply;
      },
      {},
    ],
    268: [
      function (require, module, exports) {
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }

        module.exports = arrayEach;
      },
      {},
    ],
    269: [
      function (require, module, exports) {
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        module.exports = arrayFilter;
      },
      {},
    ],
    270: [
      function (require, module, exports) {
        var baseTimes = require("./_baseTimes"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isIndex = require("./_isIndex"),
          isTypedArray = require("./isTypedArray");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

          for (var key in value) {
            if (
              (inherited || hasOwnProperty.call(value, key)) &&
              !(
                skipIndexes &&
                // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == "length" ||
                  // Node.js 0.10 has enumerable non-index properties on buffers.
                  (isBuff && (key == "offset" || key == "parent")) ||
                  // PhantomJS 2 has enumerable non-index properties on typed arrays.
                  (isType &&
                    (key == "buffer" ||
                      key == "byteLength" ||
                      key == "byteOffset")) ||
                  // Skip index properties.
                  isIndex(key, length))
              )
            ) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = arrayLikeKeys;
      },
      {
        "./_baseTimes": 309,
        "./_isIndex": 355,
        "./isArguments": 403,
        "./isArray": 404,
        "./isBuffer": 406,
        "./isTypedArray": 414,
      },
    ],
    271: [
      function (require, module, exports) {
        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }

        module.exports = arrayMap;
      },
      {},
    ],
    272: [
      function (require, module, exports) {
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }

        module.exports = arrayPush;
      },
      {},
    ],
    273: [
      function (require, module, exports) {
        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }

        module.exports = arraySome;
      },
      {},
    ],
    274: [
      function (require, module, exports) {
        var baseAssignValue = require("./_baseAssignValue"),
          eq = require("./eq");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (
            !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }

        module.exports = assignValue;
      },
      { "./_baseAssignValue": 278, "./eq": 398 },
    ],
    275: [
      function (require, module, exports) {
        var eq = require("./eq");

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        module.exports = assocIndexOf;
      },
      { "./eq": 398 },
    ],
    276: [
      function (require, module, exports) {
        var copyObject = require("./_copyObject"),
          keys = require("./keys");

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        module.exports = baseAssign;
      },
      { "./_copyObject": 323, "./keys": 415 },
    ],
    277: [
      function (require, module, exports) {
        var copyObject = require("./_copyObject"),
          keysIn = require("./keysIn");

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        module.exports = baseAssignIn;
      },
      { "./_copyObject": 323, "./keysIn": 416 },
    ],
    278: [
      function (require, module, exports) {
        var defineProperty = require("./_defineProperty");

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true,
            });
          } else {
            object[key] = value;
          }
        }

        module.exports = baseAssignValue;
      },
      { "./_defineProperty": 329 },
    ],
    279: [
      function (require, module, exports) {
        var Stack = require("./_Stack"),
          arrayEach = require("./_arrayEach"),
          assignValue = require("./_assignValue"),
          baseAssign = require("./_baseAssign"),
          baseAssignIn = require("./_baseAssignIn"),
          cloneBuffer = require("./_cloneBuffer"),
          copyArray = require("./_copyArray"),
          copySymbols = require("./_copySymbols"),
          copySymbolsIn = require("./_copySymbolsIn"),
          getAllKeys = require("./_getAllKeys"),
          getAllKeysIn = require("./_getAllKeysIn"),
          getTag = require("./_getTag"),
          initCloneArray = require("./_initCloneArray"),
          initCloneByTag = require("./_initCloneByTag"),
          initCloneObject = require("./_initCloneObject"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isMap = require("./isMap"),
          isObject = require("./isObject"),
          isSet = require("./isSet"),
          keys = require("./keys"),
          keysIn = require("./keysIn");

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]",
          weakMapTag = "[object WeakMap]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] =
          cloneableTags[arrayTag] =
          cloneableTags[arrayBufferTag] =
          cloneableTags[dataViewTag] =
          cloneableTags[boolTag] =
          cloneableTags[dateTag] =
          cloneableTags[float32Tag] =
          cloneableTags[float64Tag] =
          cloneableTags[int8Tag] =
          cloneableTags[int16Tag] =
          cloneableTags[int32Tag] =
          cloneableTags[mapTag] =
          cloneableTags[numberTag] =
          cloneableTags[objectTag] =
          cloneableTags[regexpTag] =
          cloneableTags[setTag] =
          cloneableTags[stringTag] =
          cloneableTags[symbolTag] =
          cloneableTags[uint8Tag] =
          cloneableTags[uint8ClampedTag] =
          cloneableTags[uint16Tag] =
          cloneableTags[uint32Tag] =
            true;
        cloneableTags[errorTag] =
          cloneableTags[funcTag] =
          cloneableTags[weakMapTag] =
            false;

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object
              ? customizer(value, key, object, stack)
              : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function (subValue) {
              result.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });
          } else if (isMap(value)) {
            value.forEach(function (subValue, key) {
              result.set(
                key,
                baseClone(subValue, bitmask, customizer, key, value, stack)
              );
            });
          }

          var keysFunc = isFull
            ? isFlat
              ? getAllKeysIn
              : getAllKeys
            : isFlat
            ? keysIn
            : keys;

          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function (subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(
              result,
              key,
              baseClone(subValue, bitmask, customizer, key, value, stack)
            );
          });
          return result;
        }

        module.exports = baseClone;
      },
      {
        "./_Stack": 263,
        "./_arrayEach": 268,
        "./_assignValue": 274,
        "./_baseAssign": 276,
        "./_baseAssignIn": 277,
        "./_cloneBuffer": 315,
        "./_copyArray": 322,
        "./_copySymbols": 324,
        "./_copySymbolsIn": 325,
        "./_getAllKeys": 334,
        "./_getAllKeysIn": 335,
        "./_getTag": 343,
        "./_initCloneArray": 351,
        "./_initCloneByTag": 352,
        "./_initCloneObject": 353,
        "./isArray": 404,
        "./isBuffer": 406,
        "./isMap": 409,
        "./isObject": 410,
        "./isSet": 412,
        "./keys": 415,
        "./keysIn": 416,
      },
    ],
    280: [
      function (require, module, exports) {
        var isObject = require("./isObject");

        /** Built-in value references. */
        var objectCreate = Object.create;

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function () {
          function object() {}
          return function (proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
          };
        })();

        module.exports = baseCreate;
      },
      { "./isObject": 410 },
    ],
    281: [
      function (require, module, exports) {
        var baseForOwn = require("./_baseForOwn"),
          createBaseEach = require("./_createBaseEach");

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        module.exports = baseEach;
      },
      { "./_baseForOwn": 284, "./_createBaseEach": 327 },
    ],
    282: [
      function (require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          isFlattenable = require("./_isFlattenable");

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
            length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        module.exports = baseFlatten;
      },
      { "./_arrayPush": 272, "./_isFlattenable": 354 },
    ],
    283: [
      function (require, module, exports) {
        var createBaseFor = require("./_createBaseFor");

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        module.exports = baseFor;
      },
      { "./_createBaseFor": 328 },
    ],
    284: [
      function (require, module, exports) {
        var baseFor = require("./_baseFor"),
          keys = require("./keys");

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        module.exports = baseForOwn;
      },
      { "./_baseFor": 283, "./keys": 415 },
    ],
    285: [
      function (require, module, exports) {
        var castPath = require("./_castPath"),
          toKey = require("./_toKey");

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
            length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined;
        }

        module.exports = baseGet;
      },
      { "./_castPath": 313, "./_toKey": 394 },
    ],
    286: [
      function (require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          isArray = require("./isArray");

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object)
            ? result
            : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;
      },
      { "./_arrayPush": 272, "./isArray": 404 },
    ],
    287: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol"),
          getRawTag = require("./_getRawTag"),
          objectToString = require("./_objectToString");

        /** `Object#toString` result references. */
        var nullTag = "[object Null]",
          undefinedTag = "[object Undefined]";

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value)
            ? getRawTag(value)
            : objectToString(value);
        }

        module.exports = baseGetTag;
      },
      { "./_Symbol": 264, "./_getRawTag": 340, "./_objectToString": 379 },
    ],
    288: [
      function (require, module, exports) {
        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        module.exports = baseHasIn;
      },
      {},
    ],
    289: [
      function (require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]";

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;
      },
      { "./_baseGetTag": 287, "./isObjectLike": 411 },
    ],
    290: [
      function (require, module, exports) {
        var baseIsEqualDeep = require("./_baseIsEqualDeep"),
          isObjectLike = require("./isObjectLike");

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }

        module.exports = baseIsEqual;
      },
      { "./_baseIsEqualDeep": 291, "./isObjectLike": 411 },
    ],
    291: [
      function (require, module, exports) {
        var Stack = require("./_Stack"),
          equalArrays = require("./_equalArrays"),
          equalByTag = require("./_equalByTag"),
          equalObjects = require("./_equalObjects"),
          getTag = require("./_getTag"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isTypedArray = require("./isTypedArray");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          objectTag = "[object Object]";

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object)
              ? equalArrays(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty.call(object, "__wrapped__"),
              othIsWrapped =
                othIsObj && hasOwnProperty.call(other, "__wrapped__");

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }

        module.exports = baseIsEqualDeep;
      },
      {
        "./_Stack": 263,
        "./_equalArrays": 330,
        "./_equalByTag": 331,
        "./_equalObjects": 332,
        "./_getTag": 343,
        "./isArray": 404,
        "./isBuffer": 406,
        "./isTypedArray": 414,
      },
    ],
    292: [
      function (require, module, exports) {
        var getTag = require("./_getTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var mapTag = "[object Map]";

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        module.exports = baseIsMap;
      },
      { "./_getTag": 343, "./isObjectLike": 411 },
    ],
    293: [
      function (require, module, exports) {
        var Stack = require("./_Stack"),
          baseIsEqual = require("./_baseIsEqual");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if (
              noCustomizer && data[2]
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result = customizer(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                );
              }
              if (
                !(result === undefined
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result)
              ) {
                return false;
              }
            }
          }
          return true;
        }

        module.exports = baseIsMatch;
      },
      { "./_Stack": 263, "./_baseIsEqual": 290 },
    ],
    294: [
      function (require, module, exports) {
        var isFunction = require("./isFunction"),
          isMasked = require("./_isMasked"),
          isObject = require("./isObject"),
          toSource = require("./_toSource");

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp(
          "^" +
            funcToString
              .call(hasOwnProperty)
              .replace(reRegExpChar, "\\$&")
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                "$1.*?"
              ) +
            "$"
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;
      },
      {
        "./_isMasked": 359,
        "./_toSource": 395,
        "./isFunction": 407,
        "./isObject": 410,
      },
    ],
    295: [
      function (require, module, exports) {
        var getTag = require("./_getTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var setTag = "[object Set]";

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        module.exports = baseIsSet;
      },
      { "./_getTag": 343, "./isObjectLike": 411 },
    ],
    296: [
      function (require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isLength = require("./isLength"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          weakMapTag = "[object WeakMap]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] =
          typedArrayTags[float64Tag] =
          typedArrayTags[int8Tag] =
          typedArrayTags[int16Tag] =
          typedArrayTags[int32Tag] =
          typedArrayTags[uint8Tag] =
          typedArrayTags[uint8ClampedTag] =
          typedArrayTags[uint16Tag] =
          typedArrayTags[uint32Tag] =
            true;
        typedArrayTags[argsTag] =
          typedArrayTags[arrayTag] =
          typedArrayTags[arrayBufferTag] =
          typedArrayTags[boolTag] =
          typedArrayTags[dataViewTag] =
          typedArrayTags[dateTag] =
          typedArrayTags[errorTag] =
          typedArrayTags[funcTag] =
          typedArrayTags[mapTag] =
          typedArrayTags[numberTag] =
          typedArrayTags[objectTag] =
          typedArrayTags[regexpTag] =
          typedArrayTags[setTag] =
          typedArrayTags[stringTag] =
          typedArrayTags[weakMapTag] =
            false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }

        module.exports = baseIsTypedArray;
      },
      { "./_baseGetTag": 287, "./isLength": 408, "./isObjectLike": 411 },
    ],
    297: [
      function (require, module, exports) {
        var baseMatches = require("./_baseMatches"),
          baseMatchesProperty = require("./_baseMatchesProperty"),
          identity = require("./identity"),
          isArray = require("./isArray"),
          property = require("./property");

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        module.exports = baseIteratee;
      },
      {
        "./_baseMatches": 301,
        "./_baseMatchesProperty": 302,
        "./identity": 402,
        "./isArray": 404,
        "./property": 418,
      },
    ],
    298: [
      function (require, module, exports) {
        var isPrototype = require("./_isPrototype"),
          nativeKeys = require("./_nativeKeys");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeys;
      },
      { "./_isPrototype": 360, "./_nativeKeys": 376 },
    ],
    299: [
      function (require, module, exports) {
        var isObject = require("./isObject"),
          isPrototype = require("./_isPrototype"),
          nativeKeysIn = require("./_nativeKeysIn");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result = [];

          for (var key in object) {
            if (
              !(
                key == "constructor" &&
                (isProto || !hasOwnProperty.call(object, key))
              )
            ) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeysIn;
      },
      { "./_isPrototype": 360, "./_nativeKeysIn": 377, "./isObject": 410 },
    ],
    300: [
      function (require, module, exports) {
        var baseEach = require("./_baseEach"),
          isArrayLike = require("./isArrayLike");

        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function (value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        module.exports = baseMap;
      },
      { "./_baseEach": 281, "./isArrayLike": 405 },
    ],
    301: [
      function (require, module, exports) {
        var baseIsMatch = require("./_baseIsMatch"),
          getMatchData = require("./_getMatchData"),
          matchesStrictComparable = require("./_matchesStrictComparable");

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function (object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        module.exports = baseMatches;
      },
      {
        "./_baseIsMatch": 293,
        "./_getMatchData": 337,
        "./_matchesStrictComparable": 373,
      },
    ],
    302: [
      function (require, module, exports) {
        var baseIsEqual = require("./_baseIsEqual"),
          get = require("./get"),
          hasIn = require("./hasIn"),
          isKey = require("./_isKey"),
          isStrictComparable = require("./_isStrictComparable"),
          matchesStrictComparable = require("./_matchesStrictComparable"),
          toKey = require("./_toKey");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function (object) {
            var objValue = get(object, path);
            return objValue === undefined && objValue === srcValue
              ? hasIn(object, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }

        module.exports = baseMatchesProperty;
      },
      {
        "./_baseIsEqual": 290,
        "./_isKey": 357,
        "./_isStrictComparable": 361,
        "./_matchesStrictComparable": 373,
        "./_toKey": 394,
        "./get": 400,
        "./hasIn": 401,
      },
    ],
    303: [
      function (require, module, exports) {
        var arrayMap = require("./_arrayMap"),
          baseGet = require("./_baseGet"),
          baseIteratee = require("./_baseIteratee"),
          baseMap = require("./_baseMap"),
          baseSortBy = require("./_baseSortBy"),
          baseUnary = require("./_baseUnary"),
          compareMultiple = require("./_compareMultiple"),
          identity = require("./identity"),
          isArray = require("./isArray");

        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function (iteratee) {
              if (isArray(iteratee)) {
                return function (value) {
                  return baseGet(
                    value,
                    iteratee.length === 1 ? iteratee[0] : iteratee
                  );
                };
              }
              return iteratee;
            });
          } else {
            iteratees = [identity];
          }

          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

          var result = baseMap(collection, function (value, key, collection) {
            var criteria = arrayMap(iteratees, function (iteratee) {
              return iteratee(value);
            });
            return { criteria: criteria, index: ++index, value: value };
          });

          return baseSortBy(result, function (object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        module.exports = baseOrderBy;
      },
      {
        "./_arrayMap": 271,
        "./_baseGet": 285,
        "./_baseIteratee": 297,
        "./_baseMap": 300,
        "./_baseSortBy": 308,
        "./_baseUnary": 311,
        "./_compareMultiple": 321,
        "./identity": 402,
        "./isArray": 404,
      },
    ],
    304: [
      function (require, module, exports) {
        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
          return function (object) {
            return object == null ? undefined : object[key];
          };
        }

        module.exports = baseProperty;
      },
      {},
    ],
    305: [
      function (require, module, exports) {
        var baseGet = require("./_baseGet");

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function (object) {
            return baseGet(object, path);
          };
        }

        module.exports = basePropertyDeep;
      },
      { "./_baseGet": 285 },
    ],
    306: [
      function (require, module, exports) {
        var identity = require("./identity"),
          overRest = require("./_overRest"),
          setToString = require("./_setToString");

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }

        module.exports = baseRest;
      },
      { "./_overRest": 381, "./_setToString": 386, "./identity": 402 },
    ],
    307: [
      function (require, module, exports) {
        var constant = require("./constant"),
          defineProperty = require("./_defineProperty"),
          identity = require("./identity");

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty
          ? identity
          : function (func, string) {
              return defineProperty(func, "toString", {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true,
              });
            };

        module.exports = baseSetToString;
      },
      { "./_defineProperty": 329, "./constant": 397, "./identity": 402 },
    ],
    308: [
      function (require, module, exports) {
        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
          var length = array.length;

          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }

        module.exports = baseSortBy;
      },
      {},
    ],
    309: [
      function (require, module, exports) {
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }

        module.exports = baseTimes;
      },
      {},
    ],
    310: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol"),
          arrayMap = require("./_arrayMap"),
          isArray = require("./isArray"),
          isSymbol = require("./isSymbol");

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = baseToString;
      },
      {
        "./_Symbol": 264,
        "./_arrayMap": 271,
        "./isArray": 404,
        "./isSymbol": 413,
      },
    ],
    311: [
      function (require, module, exports) {
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }

        module.exports = baseUnary;
      },
      {},
    ],
    312: [
      function (require, module, exports) {
        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
          return cache.has(key);
        }

        module.exports = cacheHas;
      },
      {},
    ],
    313: [
      function (require, module, exports) {
        var isArray = require("./isArray"),
          isKey = require("./_isKey"),
          stringToPath = require("./_stringToPath"),
          toString = require("./toString");

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;
      },
      {
        "./_isKey": 357,
        "./_stringToPath": 393,
        "./isArray": 404,
        "./toString": 422,
      },
    ],
    314: [
      function (require, module, exports) {
        var Uint8Array = require("./_Uint8Array");

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        module.exports = cloneArrayBuffer;
      },
      { "./_Uint8Array": 265 },
    ],
    315: [
      function (require, module, exports) {
        var root = require("./_root");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result = allocUnsafe
              ? allocUnsafe(length)
              : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        module.exports = cloneBuffer;
      },
      { "./_root": 382 },
    ],
    316: [
      function (require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer");

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }

        module.exports = cloneDataView;
      },
      { "./_cloneArrayBuffer": 314 },
    ],
    317: [
      function (require, module, exports) {
        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        module.exports = cloneRegExp;
      },
      {},
    ],
    318: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol");

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        module.exports = cloneSymbol;
      },
      { "./_Symbol": 264 },
    ],
    319: [
      function (require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer");

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }

        module.exports = cloneTypedArray;
      },
      { "./_cloneArrayBuffer": 314 },
    ],
    320: [
      function (require, module, exports) {
        var isSymbol = require("./isSymbol");

        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

            var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

            if (
              (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol &&
                othIsDefined &&
                othIsReflexive &&
                !othIsNull &&
                !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive
            ) {
              return 1;
            }
            if (
              (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol &&
                valIsDefined &&
                valIsReflexive &&
                !valIsNull &&
                !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive
            ) {
              return -1;
            }
          }
          return 0;
        }

        module.exports = compareAscending;
      },
      { "./isSymbol": 413 },
    ],
    321: [
      function (require, module, exports) {
        var compareAscending = require("./_compareAscending");

        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

          while (++index < length) {
            var result = compareAscending(
              objCriteria[index],
              othCriteria[index]
            );
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == "desc" ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }

        module.exports = compareMultiple;
      },
      { "./_compareAscending": 320 },
    ],
    322: [
      function (require, module, exports) {
        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
            length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        module.exports = copyArray;
      },
      {},
    ],
    323: [
      function (require, module, exports) {
        var assignValue = require("./_assignValue"),
          baseAssignValue = require("./_baseAssignValue");

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
            length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;

            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        module.exports = copyObject;
      },
      { "./_assignValue": 274, "./_baseAssignValue": 278 },
    ],
    324: [
      function (require, module, exports) {
        var copyObject = require("./_copyObject"),
          getSymbols = require("./_getSymbols");

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        module.exports = copySymbols;
      },
      { "./_copyObject": 323, "./_getSymbols": 341 },
    ],
    325: [
      function (require, module, exports) {
        var copyObject = require("./_copyObject"),
          getSymbolsIn = require("./_getSymbolsIn");

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        module.exports = copySymbolsIn;
      },
      { "./_copyObject": 323, "./_getSymbolsIn": 342 },
    ],
    326: [
      function (require, module, exports) {
        var root = require("./_root");

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root["__core-js_shared__"];

        module.exports = coreJsData;
      },
      { "./_root": 382 },
    ],
    327: [
      function (require, module, exports) {
        var isArrayLike = require("./isArrayLike");

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function (collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

            while (fromRight ? index-- : ++index < length) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        module.exports = createBaseEach;
      },
      { "./isArrayLike": 405 },
    ],
    328: [
      function (require, module, exports) {
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function (object, iteratee, keysFunc) {
            var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        module.exports = createBaseFor;
      },
      {},
    ],
    329: [
      function (require, module, exports) {
        var getNative = require("./_getNative");

        var defineProperty = (function () {
          try {
            var func = getNative(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {}
        })();

        module.exports = defineProperty;
      },
      { "./_getNative": 338 },
    ],
    330: [
      function (require, module, exports) {
        var SetCache = require("./_SetCache"),
          arraySome = require("./_arraySome"),
          cacheHas = require("./_cacheHas");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Check that cyclic values are equal.
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
            result = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (
                !arraySome(other, function (othValue, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue ||
                      equalFunc(arrValue, othValue, bitmask, customizer, stack))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result;
        }

        module.exports = equalArrays;
      },
      { "./_SetCache": 262, "./_arraySome": 273, "./_cacheHas": 312 },
    ],
    331: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol"),
          Uint8Array = require("./_Uint8Array"),
          eq = require("./eq"),
          equalArrays = require("./_equalArrays"),
          mapToArray = require("./_mapToArray"),
          setToArray = require("./_setToArray");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /** `Object#toString` result references. */
        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]";

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(
          object,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object.byteLength != other.byteLength ||
                object.byteOffset != other.byteOffset
              ) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if (
                object.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))
              ) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return (
                object.name == other.name && object.message == other.message
              );

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == other + "";

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(
                convert(object),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack["delete"](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        module.exports = equalByTag;
      },
      {
        "./_Symbol": 264,
        "./_Uint8Array": 265,
        "./_equalArrays": 330,
        "./_mapToArray": 372,
        "./_setToArray": 385,
        "./eq": 398,
      },
    ],
    332: [
      function (require, module, exports) {
        var getAllKeys = require("./_getAllKeys");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Check that cyclic values are equal.
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (
              !(compared === undefined
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (
              objCtor != othCtor &&
              "constructor" in object &&
              "constructor" in other &&
              !(
                typeof objCtor == "function" &&
                objCtor instanceof objCtor &&
                typeof othCtor == "function" &&
                othCtor instanceof othCtor
              )
            ) {
              result = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result;
        }

        module.exports = equalObjects;
      },
      { "./_getAllKeys": 334 },
    ],
    333: [
      function (require, module, exports) {
        (function (global) {
          (function () {
            /** Detect free variable `global` from Node.js. */
            var freeGlobal =
              typeof global == "object" &&
              global &&
              global.Object === Object &&
              global;

            module.exports = freeGlobal;
          }).call(this);
        }).call(
          this,
          typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
            ? window
            : {}
        );
      },
      {},
    ],
    334: [
      function (require, module, exports) {
        var baseGetAllKeys = require("./_baseGetAllKeys"),
          getSymbols = require("./_getSymbols"),
          keys = require("./keys");

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;
      },
      { "./_baseGetAllKeys": 286, "./_getSymbols": 341, "./keys": 415 },
    ],
    335: [
      function (require, module, exports) {
        var baseGetAllKeys = require("./_baseGetAllKeys"),
          getSymbolsIn = require("./_getSymbolsIn"),
          keysIn = require("./keysIn");

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        module.exports = getAllKeysIn;
      },
      { "./_baseGetAllKeys": 286, "./_getSymbolsIn": 342, "./keysIn": 416 },
    ],
    336: [
      function (require, module, exports) {
        var isKeyable = require("./_isKeyable");

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == "string" ? "string" : "hash"]
            : data.map;
        }

        module.exports = getMapData;
      },
      { "./_isKeyable": 358 },
    ],
    337: [
      function (require, module, exports) {
        var isStrictComparable = require("./_isStrictComparable"),
          keys = require("./keys");

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
            length = result.length;

          while (length--) {
            var key = result[length],
              value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        module.exports = getMatchData;
      },
      { "./_isStrictComparable": 361, "./keys": 415 },
    ],
    338: [
      function (require, module, exports) {
        var baseIsNative = require("./_baseIsNative"),
          getValue = require("./_getValue");

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;
      },
      { "./_baseIsNative": 294, "./_getValue": 344 },
    ],
    339: [
      function (require, module, exports) {
        var overArg = require("./_overArg");

        /** Built-in value references. */
        var getPrototype = overArg(Object.getPrototypeOf, Object);

        module.exports = getPrototype;
      },
      { "./_overArg": 380 },
    ],
    340: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        module.exports = getRawTag;
      },
      { "./_Symbol": 264 },
    ],
    341: [
      function (require, module, exports) {
        var arrayFilter = require("./_arrayFilter"),
          stubArray = require("./stubArray");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function (object) {
              if (object == null) {
                return [];
              }
              object = Object(object);
              return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };

        module.exports = getSymbols;
      },
      { "./_arrayFilter": 269, "./stubArray": 420 },
    ],
    342: [
      function (require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          getPrototype = require("./_getPrototype"),
          getSymbols = require("./_getSymbols"),
          stubArray = require("./stubArray");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function (object) {
              var result = [];
              while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
              }
              return result;
            };

        module.exports = getSymbolsIn;
      },
      {
        "./_arrayPush": 272,
        "./_getPrototype": 339,
        "./_getSymbols": 341,
        "./stubArray": 420,
      },
    ],
    343: [
      function (require, module, exports) {
        var DataView = require("./_DataView"),
          Map = require("./_Map"),
          Promise = require("./_Promise"),
          Set = require("./_Set"),
          WeakMap = require("./_WeakMap"),
          baseGetTag = require("./_baseGetTag"),
          toSource = require("./_toSource");

        /** `Object#toString` result references. */
        var mapTag = "[object Map]",
          objectTag = "[object Object]",
          promiseTag = "[object Promise]",
          setTag = "[object Set]",
          weakMapTag = "[object WeakMap]";

        var dataViewTag = "[object DataView]";

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (
          (DataView &&
            getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map()) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set()) != setTag) ||
          (WeakMap && getTag(new WeakMap()) != weakMapTag)
        ) {
          getTag = function (value) {
            var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : "";

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result;
          };
        }

        module.exports = getTag;
      },
      {
        "./_DataView": 255,
        "./_Map": 258,
        "./_Promise": 260,
        "./_Set": 261,
        "./_WeakMap": 266,
        "./_baseGetTag": 287,
        "./_toSource": 395,
      },
    ],
    344: [
      function (require, module, exports) {
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }

        module.exports = getValue;
      },
      {},
    ],
    345: [
      function (require, module, exports) {
        var castPath = require("./_castPath"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray"),
          isIndex = require("./_isIndex"),
          isLength = require("./isLength"),
          toKey = require("./_toKey");

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
            length = path.length,
            result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray(object) || isArguments(object))
          );
        }

        module.exports = hasPath;
      },
      {
        "./_castPath": 313,
        "./_isIndex": 355,
        "./_toKey": 394,
        "./isArguments": 403,
        "./isArray": 404,
        "./isLength": 408,
      },
    ],
    346: [
      function (require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        module.exports = hashClear;
      },
      { "./_nativeCreate": 375 },
    ],
    347: [
      function (require, module, exports) {
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = hashDelete;
      },
      {},
    ],
    348: [
      function (require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;
      },
      { "./_nativeCreate": 375 },
    ],
    349: [
      function (require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate
            ? data[key] !== undefined
            : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;
      },
      { "./_nativeCreate": 375 },
    ],
    350: [
      function (require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate && value === undefined ? HASH_UNDEFINED : value;
          return this;
        }

        module.exports = hashSet;
      },
      { "./_nativeCreate": 375 },
    ],
    351: [
      function (require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (
            length &&
            typeof array[0] == "string" &&
            hasOwnProperty.call(array, "index")
          ) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        module.exports = initCloneArray;
      },
      {},
    ],
    352: [
      function (require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer"),
          cloneDataView = require("./_cloneDataView"),
          cloneRegExp = require("./_cloneRegExp"),
          cloneSymbol = require("./_cloneSymbol"),
          cloneTypedArray = require("./_cloneTypedArray");

        /** `Object#toString` result references. */
        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor();

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor();

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        module.exports = initCloneByTag;
      },
      {
        "./_cloneArrayBuffer": 314,
        "./_cloneDataView": 316,
        "./_cloneRegExp": 317,
        "./_cloneSymbol": 318,
        "./_cloneTypedArray": 319,
      },
    ],
    353: [
      function (require, module, exports) {
        var baseCreate = require("./_baseCreate"),
          getPrototype = require("./_getPrototype"),
          isPrototype = require("./_isPrototype");

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
        }

        module.exports = initCloneObject;
      },
      { "./_baseCreate": 280, "./_getPrototype": 339, "./_isPrototype": 360 },
    ],
    354: [
      function (require, module, exports) {
        var Symbol = require("./_Symbol"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray");

        /** Built-in value references. */
        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return (
            isArray(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }

        module.exports = isFlattenable;
      },
      { "./_Symbol": 264, "./isArguments": 403, "./isArray": 404 },
    ],
    355: [
      function (require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return (
            !!length &&
            (type == "number" || (type != "symbol" && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
          );
        }

        module.exports = isIndex;
      },
      {},
    ],
    356: [
      function (require, module, exports) {
        var eq = require("./eq"),
          isArrayLike = require("./isArrayLike"),
          isIndex = require("./_isIndex"),
          isObject = require("./isObject");

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (
            type == "number"
              ? isArrayLike(object) && isIndex(index, object.length)
              : type == "string" && index in object
          ) {
            return eq(object[index], value);
          }
          return false;
        }

        module.exports = isIterateeCall;
      },
      {
        "./_isIndex": 355,
        "./eq": 398,
        "./isArrayLike": 405,
        "./isObject": 410,
      },
    ],
    357: [
      function (require, module, exports) {
        var isArray = require("./isArray"),
          isSymbol = require("./isSymbol");

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (
            type == "number" ||
            type == "symbol" ||
            type == "boolean" ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }
          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object != null && value in Object(object))
          );
        }

        module.exports = isKey;
      },
      { "./isArray": 404, "./isSymbol": 413 },
    ],
    358: [
      function (require, module, exports) {
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" ||
            type == "number" ||
            type == "symbol" ||
            type == "boolean"
            ? value !== "__proto__"
            : value === null;
        }

        module.exports = isKeyable;
      },
      {},
    ],
    359: [
      function (require, module, exports) {
        var coreJsData = require("./_coreJsData");

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function () {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
          );
          return uid ? "Symbol(src)_1." + uid : "";
        })();

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }

        module.exports = isMasked;
      },
      { "./_coreJsData": 326 },
    ],
    360: [
      function (require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == "function" && Ctor.prototype) || objectProto;

          return value === proto;
        }

        module.exports = isPrototype;
      },
      {},
    ],
    361: [
      function (require, module, exports) {
        var isObject = require("./isObject");

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;
      },
      { "./isObject": 410 },
    ],
    362: [
      function (require, module, exports) {
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        module.exports = listCacheClear;
      },
      {},
    ],
    363: [
      function (require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        module.exports = listCacheDelete;
      },
      { "./_assocIndexOf": 275 },
    ],
    364: [
      function (require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;
      },
      { "./_assocIndexOf": 275 },
    ],
    365: [
      function (require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;
      },
      { "./_assocIndexOf": 275 },
    ],
    366: [
      function (require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        module.exports = listCacheSet;
      },
      { "./_assocIndexOf": 275 },
    ],
    367: [
      function (require, module, exports) {
        var Hash = require("./_Hash"),
          ListCache = require("./_ListCache"),
          Map = require("./_Map");

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash(),
          };
        }

        module.exports = mapCacheClear;
      },
      { "./_Hash": 256, "./_ListCache": 257, "./_Map": 258 },
    ],
    368: [
      function (require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = mapCacheDelete;
      },
      { "./_getMapData": 336 },
    ],
    369: [
      function (require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;
      },
      { "./_getMapData": 336 },
    ],
    370: [
      function (require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;
      },
      { "./_getMapData": 336 },
    ],
    371: [
      function (require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        module.exports = mapCacheSet;
      },
      { "./_getMapData": 336 },
    ],
    372: [
      function (require, module, exports) {
        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size);

          map.forEach(function (value, key) {
            result[++index] = [key, value];
          });
          return result;
        }

        module.exports = mapToArray;
      },
      {},
    ],
    373: [
      function (require, module, exports) {
        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function (object) {
            if (object == null) {
              return false;
            }
            return (
              object[key] === srcValue &&
              (srcValue !== undefined || key in Object(object))
            );
          };
        }

        module.exports = matchesStrictComparable;
      },
      {},
    ],
    374: [
      function (require, module, exports) {
        var memoize = require("./memoize");

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        module.exports = memoizeCapped;
      },
      { "./memoize": 417 },
    ],
    375: [
      function (require, module, exports) {
        var getNative = require("./_getNative");

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, "create");

        module.exports = nativeCreate;
      },
      { "./_getNative": 338 },
    ],
    376: [
      function (require, module, exports) {
        var overArg = require("./_overArg");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);

        module.exports = nativeKeys;
      },
      { "./_overArg": 380 },
    ],
    377: [
      function (require, module, exports) {
        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = nativeKeysIn;
      },
      {},
    ],
    378: [
      function (require, module, exports) {
        var freeGlobal = require("./_freeGlobal");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types =
              freeModule &&
              freeModule.require &&
              freeModule.require("util").types;

            if (types) {
              return types;
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return (
              freeProcess && freeProcess.binding && freeProcess.binding("util")
            );
          } catch (e) {}
        })();

        module.exports = nodeUtil;
      },
      { "./_freeGlobal": 333 },
    ],
    379: [
      function (require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        module.exports = objectToString;
      },
      {},
    ],
    380: [
      function (require, module, exports) {
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }

        module.exports = overArg;
      },
      {},
    ],
    381: [
      function (require, module, exports) {
        var apply = require("./_apply");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        module.exports = overRest;
      },
      { "./_apply": 267 },
    ],
    382: [
      function (require, module, exports) {
        var freeGlobal = require("./_freeGlobal");

        /** Detect free variable `self`. */
        var freeSelf =
          typeof self == "object" && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function("return this")();

        module.exports = root;
      },
      { "./_freeGlobal": 333 },
    ],
    383: [
      function (require, module, exports) {
        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        module.exports = setCacheAdd;
      },
      {},
    ],
    384: [
      function (require, module, exports) {
        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        module.exports = setCacheHas;
      },
      {},
    ],
    385: [
      function (require, module, exports) {
        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
          var index = -1,
            result = Array(set.size);

          set.forEach(function (value) {
            result[++index] = value;
          });
          return result;
        }

        module.exports = setToArray;
      },
      {},
    ],
    386: [
      function (require, module, exports) {
        var baseSetToString = require("./_baseSetToString"),
          shortOut = require("./_shortOut");

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        module.exports = setToString;
      },
      { "./_baseSetToString": 307, "./_shortOut": 387 },
    ],
    387: [
      function (require, module, exports) {
        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
          HOT_SPAN = 16;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeNow = Date.now;

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;

          return function () {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }

        module.exports = shortOut;
      },
      {},
    ],
    388: [
      function (require, module, exports) {
        var ListCache = require("./_ListCache");

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }

        module.exports = stackClear;
      },
      { "./_ListCache": 257 },
    ],
    389: [
      function (require, module, exports) {
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
            result = data["delete"](key);

          this.size = data.size;
          return result;
        }

        module.exports = stackDelete;
      },
      {},
    ],
    390: [
      function (require, module, exports) {
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        module.exports = stackGet;
      },
      {},
    ],
    391: [
      function (require, module, exports) {
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        module.exports = stackHas;
      },
      {},
    ],
    392: [
      function (require, module, exports) {
        var ListCache = require("./_ListCache"),
          Map = require("./_Map"),
          MapCache = require("./_MapCache");

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        module.exports = stackSet;
      },
      { "./_ListCache": 257, "./_Map": 258, "./_MapCache": 259 },
    ],
    393: [
      function (require, module, exports) {
        var memoizeCapped = require("./_memoizeCapped");

        /** Used to match property names within property paths. */
        var rePropName =
          /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function (string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push("");
          }
          string.replace(
            rePropName,
            function (match, number, quote, subString) {
              result.push(
                quote ? subString.replace(reEscapeChar, "$1") : number || match
              );
            }
          );
          return result;
        });

        module.exports = stringToPath;
      },
      { "./_memoizeCapped": 374 },
    ],
    394: [
      function (require, module, exports) {
        var isSymbol = require("./isSymbol");

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = toKey;
      },
      { "./isSymbol": 413 },
    ],
    395: [
      function (require, module, exports) {
        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return func + "";
            } catch (e) {}
          }
          return "";
        }

        module.exports = toSource;
      },
      {},
    ],
    396: [
      function (require, module, exports) {
        var baseClone = require("./_baseClone");

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_SYMBOLS_FLAG = 4;

        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }

        module.exports = cloneDeep;
      },
      { "./_baseClone": 279 },
    ],
    397: [
      function (require, module, exports) {
        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function () {
            return value;
          };
        }

        module.exports = constant;
      },
      {},
    ],
    398: [
      function (require, module, exports) {
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        module.exports = eq;
      },
      {},
    ],
    399: [
      function (require, module, exports) {
        var toString = require("./toString");

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);

        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string)
            ? string.replace(reRegExpChar, "\\$&")
            : string;
        }

        module.exports = escapeRegExp;
      },
      { "./toString": 422 },
    ],
    400: [
      function (require, module, exports) {
        var baseGet = require("./_baseGet");

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }

        module.exports = get;
      },
      { "./_baseGet": 285 },
    ],
    401: [
      function (require, module, exports) {
        var baseHasIn = require("./_baseHasIn"),
          hasPath = require("./_hasPath");

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;
      },
      { "./_baseHasIn": 288, "./_hasPath": 345 },
    ],
    402: [
      function (require, module, exports) {
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        module.exports = identity;
      },
      {},
    ],
    403: [
      function (require, module, exports) {
        var baseIsArguments = require("./_baseIsArguments"),
          isObjectLike = require("./isObjectLike");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(
          (function () {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function (value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty.call(value, "callee") &&
                !propertyIsEnumerable.call(value, "callee")
              );
            };

        module.exports = isArguments;
      },
      { "./_baseIsArguments": 289, "./isObjectLike": 411 },
    ],
    404: [
      function (require, module, exports) {
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        module.exports = isArray;
      },
      {},
    ],
    405: [
      function (require, module, exports) {
        var isFunction = require("./isFunction"),
          isLength = require("./isLength");

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;
      },
      { "./isFunction": 407, "./isLength": 408 },
    ],
    406: [
      function (require, module, exports) {
        var root = require("./_root"),
          stubFalse = require("./stubFalse");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        module.exports = isBuffer;
      },
      { "./_root": 382, "./stubFalse": 421 },
    ],
    407: [
      function (require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObject = require("./isObject");

        /** `Object#toString` result references. */
        var asyncTag = "[object AsyncFunction]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          proxyTag = "[object Proxy]";

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }

        module.exports = isFunction;
      },
      { "./_baseGetTag": 287, "./isObject": 410 },
    ],
    408: [
      function (require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return (
            typeof value == "number" &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }

        module.exports = isLength;
      },
      {},
    ],
    409: [
      function (require, module, exports) {
        var baseIsMap = require("./_baseIsMap"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsMap = nodeUtil && nodeUtil.isMap;

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        module.exports = isMap;
      },
      { "./_baseIsMap": 292, "./_baseUnary": 311, "./_nodeUtil": 378 },
    ],
    410: [
      function (require, module, exports) {
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }

        module.exports = isObject;
      },
      {},
    ],
    411: [
      function (require, module, exports) {
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }

        module.exports = isObjectLike;
      },
      {},
    ],
    412: [
      function (require, module, exports) {
        var baseIsSet = require("./_baseIsSet"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsSet = nodeUtil && nodeUtil.isSet;

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        module.exports = isSet;
      },
      { "./_baseIsSet": 295, "./_baseUnary": 311, "./_nodeUtil": 378 },
    ],
    413: [
      function (require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var symbolTag = "[object Symbol]";

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return (
            typeof value == "symbol" ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }

        module.exports = isSymbol;
      },
      { "./_baseGetTag": 287, "./isObjectLike": 411 },
    ],
    414: [
      function (require, module, exports) {
        var baseIsTypedArray = require("./_baseIsTypedArray"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;

        module.exports = isTypedArray;
      },
      { "./_baseIsTypedArray": 296, "./_baseUnary": 311, "./_nodeUtil": 378 },
    ],
    415: [
      function (require, module, exports) {
        var arrayLikeKeys = require("./_arrayLikeKeys"),
          baseKeys = require("./_baseKeys"),
          isArrayLike = require("./isArrayLike");

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;
      },
      { "./_arrayLikeKeys": 270, "./_baseKeys": 298, "./isArrayLike": 405 },
    ],
    416: [
      function (require, module, exports) {
        var arrayLikeKeys = require("./_arrayLikeKeys"),
          baseKeysIn = require("./_baseKeysIn"),
          isArrayLike = require("./isArrayLike");

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object)
            ? arrayLikeKeys(object, true)
            : baseKeysIn(object);
        }

        module.exports = keysIn;
      },
      { "./_arrayLikeKeys": 270, "./_baseKeysIn": 299, "./isArrayLike": 405 },
    ],
    417: [
      function (require, module, exports) {
        var MapCache = require("./_MapCache");

        /** Error message constants. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (
            typeof func != "function" ||
            (resolver != null && typeof resolver != "function")
          ) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function () {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        module.exports = memoize;
      },
      { "./_MapCache": 259 },
    ],
    418: [
      function (require, module, exports) {
        var baseProperty = require("./_baseProperty"),
          basePropertyDeep = require("./_basePropertyDeep"),
          isKey = require("./_isKey"),
          toKey = require("./_toKey");

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }

        module.exports = property;
      },
      {
        "./_baseProperty": 304,
        "./_basePropertyDeep": 305,
        "./_isKey": 357,
        "./_toKey": 394,
      },
    ],
    419: [
      function (require, module, exports) {
        var baseFlatten = require("./_baseFlatten"),
          baseOrderBy = require("./_baseOrderBy"),
          baseRest = require("./_baseRest"),
          isIterateeCall = require("./_isIterateeCall");

        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 30 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
         */
        var sortBy = baseRest(function (collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (
            length > 1 &&
            isIterateeCall(collection, iteratees[0], iteratees[1])
          ) {
            iteratees = [];
          } else if (
            length > 2 &&
            isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
          ) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });

        module.exports = sortBy;
      },
      {
        "./_baseFlatten": 282,
        "./_baseOrderBy": 303,
        "./_baseRest": 306,
        "./_isIterateeCall": 356,
      },
    ],
    420: [
      function (require, module, exports) {
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        module.exports = stubArray;
      },
      {},
    ],
    421: [
      function (require, module, exports) {
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        module.exports = stubFalse;
      },
      {},
    ],
    422: [
      function (require, module, exports) {
        var baseToString = require("./_baseToString");

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }

        module.exports = toString;
      },
      { "./_baseToString": 310 },
    ],
    423: [
      function (require, module, exports) {
        /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */

        "use strict";
        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError(
              "Object.assign cannot be called with null or undefined"
            );
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
              return test2[n];
            });
            if (order2.join("") !== "0123456789") {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function (letter) {
              test3[letter] = letter;
            });
            if (
              Object.keys(Object.assign({}, test3)).join("") !==
              "abcdefghijklmnopqrst"
            ) {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative()
          ? Object.assign
          : function (target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                  }
                }

                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                      to[symbols[i]] = from[symbols[i]];
                    }
                  }
                }
              }

              return to;
            };
      },
      {},
    ],
    424: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
            // backported and transplited with Babel, with backwards-compat fixes

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // resolves . and .. elements in a path array with directory names there
            // must be no slashes, empty elements, or device names (c:\) in the array
            // (so also no leading and trailing slashes - it does not distinguish
            // relative and absolute paths)
            function normalizeArray(parts, allowAboveRoot) {
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === ".") {
                  parts.splice(i, 1);
                } else if (last === "..") {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }

              // if the path is allowed to go above the root, restore leading ..s
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift("..");
                }
              }

              return parts;
            }

            // path.resolve([from ...], to)
            // posix version
            exports.resolve = function () {
              var resolvedPath = "",
                resolvedAbsolute = false;

              for (
                var i = arguments.length - 1;
                i >= -1 && !resolvedAbsolute;
                i--
              ) {
                var path = i >= 0 ? arguments[i] : process.cwd();

                // Skip empty and invalid entries
                if (typeof path !== "string") {
                  throw new TypeError(
                    "Arguments to path.resolve must be strings"
                  );
                } else if (!path) {
                  continue;
                }

                resolvedPath = path + "/" + resolvedPath;
                resolvedAbsolute = path.charAt(0) === "/";
              }

              // At this point the path should be resolved to a full absolute path, but
              // handle relative paths to be safe (might happen when process.cwd() fails)

              // Normalize the path
              resolvedPath = normalizeArray(
                filter(resolvedPath.split("/"), function (p) {
                  return !!p;
                }),
                !resolvedAbsolute
              ).join("/");

              return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
            };

            // path.normalize(path)
            // posix version
            exports.normalize = function (path) {
              var isAbsolute = exports.isAbsolute(path),
                trailingSlash = substr(path, -1) === "/";

              // Normalize the path
              path = normalizeArray(
                filter(path.split("/"), function (p) {
                  return !!p;
                }),
                !isAbsolute
              ).join("/");

              if (!path && !isAbsolute) {
                path = ".";
              }
              if (path && trailingSlash) {
                path += "/";
              }

              return (isAbsolute ? "/" : "") + path;
            };

            // posix version
            exports.isAbsolute = function (path) {
              return path.charAt(0) === "/";
            };

            // posix version
            exports.join = function () {
              var paths = Array.prototype.slice.call(arguments, 0);
              return exports.normalize(
                filter(paths, function (p, index) {
                  if (typeof p !== "string") {
                    throw new TypeError(
                      "Arguments to path.join must be strings"
                    );
                  }
                  return p;
                }).join("/")
              );
            };

            // path.relative(from, to)
            // posix version
            exports.relative = function (from, to) {
              from = exports.resolve(from).substr(1);
              to = exports.resolve(to).substr(1);

              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== "") break;
                }

                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== "") break;
                }

                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }

              var fromParts = trim(from.split("/"));
              var toParts = trim(to.split("/"));

              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }

              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push("..");
              }

              outputParts = outputParts.concat(toParts.slice(samePartsLength));

              return outputParts.join("/");
            };

            exports.sep = "/";
            exports.delimiter = ":";

            exports.dirname = function (path) {
              if (typeof path !== "string") path = path + "";
              if (path.length === 0) return ".";
              var code = path.charCodeAt(0);
              var hasRoot = code === 47; /*/*/
              var end = -1;
              var matchedSlash = true;
              for (var i = path.length - 1; i >= 1; --i) {
                code = path.charCodeAt(i);
                if (code === 47 /*/*/) {
                  if (!matchedSlash) {
                    end = i;
                    break;
                  }
                } else {
                  // We saw the first non-path separator
                  matchedSlash = false;
                }
              }

              if (end === -1) return hasRoot ? "/" : ".";
              if (hasRoot && end === 1) {
                // return '//';
                // Backwards-compat fix:
                return "/";
              }
              return path.slice(0, end);
            };

            function basename(path) {
              if (typeof path !== "string") path = path + "";

              var start = 0;
              var end = -1;
              var matchedSlash = true;
              var i;

              for (i = path.length - 1; i >= 0; --i) {
                if (path.charCodeAt(i) === 47 /*/*/) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    start = i + 1;
                    break;
                  }
                } else if (end === -1) {
                  // We saw the first non-path separator, mark this as the end of our
                  // path component
                  matchedSlash = false;
                  end = i + 1;
                }
              }

              if (end === -1) return "";
              return path.slice(start, end);
            }

            // Uses a mixed approach for backwards-compatibility, as ext behavior changed
            // in new Node.js versions, so only basename() above is backported here
            exports.basename = function (path, ext) {
              var f = basename(path);
              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }
              return f;
            };

            exports.extname = function (path) {
              if (typeof path !== "string") path = path + "";
              var startDot = -1;
              var startPart = 0;
              var end = -1;
              var matchedSlash = true;
              // Track the state of characters (if any) we see before our first dot and
              // after any path separator we find
              var preDotState = 0;
              for (var i = path.length - 1; i >= 0; --i) {
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                  }
                  continue;
                }
                if (end === -1) {
                  // We saw the first non-path separator, mark this as the end of our
                  // extension
                  matchedSlash = false;
                  end = i + 1;
                }
                if (code === 46 /*.*/) {
                  // If this is our first dot, mark it as the start of our extension
                  if (startDot === -1) startDot = i;
                  else if (preDotState !== 1) preDotState = 1;
                } else if (startDot !== -1) {
                  // We saw a non-dot and non-path separator before our dot, so we should
                  // have a good chance at having a non-empty extension
                  preDotState = -1;
                }
              }

              if (
                startDot === -1 ||
                end === -1 ||
                // We saw a non-dot character immediately before the dot
                preDotState === 0 ||
                // The (right-most) trimmed path component is exactly '..'
                (preDotState === 1 &&
                  startDot === end - 1 &&
                  startDot === startPart + 1)
              ) {
                return "";
              }
              return path.slice(startDot, end);
            };

            function filter(xs, f) {
              if (xs.filter) return xs.filter(f);
              var res = [];
              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i]);
              }
              return res;
            }

            // String.prototype.substr - negative index don't work in IE8
            var substr =
              "ab".substr(-1) === "b"
                ? function (str, start, len) {
                    return str.substr(start, len);
                  }
                : function (str, start, len) {
                    if (start < 0) start = str.length + start;
                    return str.substr(start, len);
                  };
          }).call(this);
        }).call(this, require("_process"));
      },
      { _process: 425 },
    ],
    425: [
      function (require, module, exports) {
        // shim for using process in browser
        var process = (module.exports = {});

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function () {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ""; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
          return [];
        };

        process.binding = function (name) {
          throw new Error("process.binding is not supported");
        };

        process.cwd = function () {
          return "/";
        };
        process.chdir = function (dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function () {
          return 0;
        };
      },
      {},
    ],
    426: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var runtime = (function (exports) {
          "use strict";

          var Op = Object.prototype;
          var hasOwn = Op.hasOwnProperty;
          var undefined; // More compressible than void 0.
          var $Symbol = typeof Symbol === "function" ? Symbol : {};
          var iteratorSymbol = $Symbol.iterator || "@@iterator";
          var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
          var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

          function define(obj, key, value) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
            return obj[key];
          }
          try {
            // IE 8 has a broken Object.defineProperty that only works on DOM objects.
            define({}, "");
          } catch (err) {
            define = function (obj, key, value) {
              return (obj[key] = value);
            };
          }

          function wrap(innerFn, outerFn, self, tryLocsList) {
            // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
            var protoGenerator =
              outerFn && outerFn.prototype instanceof Generator
                ? outerFn
                : Generator;
            var generator = Object.create(protoGenerator.prototype);
            var context = new Context(tryLocsList || []);

            // The ._invoke method unifies the implementations of the .next,
            // .throw, and .return methods.
            generator._invoke = makeInvokeMethod(innerFn, self, context);

            return generator;
          }
          exports.wrap = wrap;

          // Try/catch helper to minimize deoptimizations. Returns a completion
          // record like context.tryEntries[i].completion. This interface could
          // have been (and was previously) designed to take a closure to be
          // invoked without arguments, but in all the cases we care about we
          // already have an existing method we want to call, so there's no need
          // to create a new function object. We can even get away with assuming
          // the method takes exactly one argument, since that happens to be true
          // in every case, so we don't have to touch the arguments object. The
          // only additional allocation required is the completion record, which
          // has a stable shape and so hopefully should be cheap to allocate.
          function tryCatch(fn, obj, arg) {
            try {
              return { type: "normal", arg: fn.call(obj, arg) };
            } catch (err) {
              return { type: "throw", arg: err };
            }
          }

          var GenStateSuspendedStart = "suspendedStart";
          var GenStateSuspendedYield = "suspendedYield";
          var GenStateExecuting = "executing";
          var GenStateCompleted = "completed";

          // Returning this object from the innerFn has the same effect as
          // breaking out of the dispatch switch statement.
          var ContinueSentinel = {};

          // Dummy constructor functions that we use as the .constructor and
          // .constructor.prototype properties for functions that return Generator
          // objects. For full spec compliance, you may wish to configure your
          // minifier not to mangle the names of these two functions.
          function Generator() {}
          function GeneratorFunction() {}
          function GeneratorFunctionPrototype() {}

          // This is a polyfill for %IteratorPrototype% for environments that
          // don't natively support it.
          var IteratorPrototype = {};
          define(IteratorPrototype, iteratorSymbol, function () {
            return this;
          });

          var getProto = Object.getPrototypeOf;
          var NativeIteratorPrototype =
            getProto && getProto(getProto(values([])));
          if (
            NativeIteratorPrototype &&
            NativeIteratorPrototype !== Op &&
            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)
          ) {
            // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype = NativeIteratorPrototype;
          }

          var Gp =
            (GeneratorFunctionPrototype.prototype =
            Generator.prototype =
              Object.create(IteratorPrototype));
          GeneratorFunction.prototype = GeneratorFunctionPrototype;
          define(Gp, "constructor", GeneratorFunctionPrototype);
          define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
          GeneratorFunction.displayName = define(
            GeneratorFunctionPrototype,
            toStringTagSymbol,
            "GeneratorFunction"
          );

          // Helper for defining the .next, .throw, and .return methods of the
          // Iterator interface in terms of a single ._invoke method.
          function defineIteratorMethods(prototype) {
            ["next", "throw", "return"].forEach(function (method) {
              define(prototype, method, function (arg) {
                return this._invoke(method, arg);
              });
            });
          }

          exports.isGeneratorFunction = function (genFun) {
            var ctor = typeof genFun === "function" && genFun.constructor;
            return ctor
              ? ctor === GeneratorFunction ||
                  // For the native GeneratorFunction constructor, the best we can
                  // do is to check its .name property.
                  (ctor.displayName || ctor.name) === "GeneratorFunction"
              : false;
          };

          exports.mark = function (genFun) {
            if (Object.setPrototypeOf) {
              Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
            } else {
              genFun.__proto__ = GeneratorFunctionPrototype;
              define(genFun, toStringTagSymbol, "GeneratorFunction");
            }
            genFun.prototype = Object.create(Gp);
            return genFun;
          };

          // Within the body of any async function, `await x` is transformed to
          // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
          // `hasOwn.call(value, "__await")` to determine if the yielded value is
          // meant to be awaited.
          exports.awrap = function (arg) {
            return { __await: arg };
          };

          function AsyncIterator(generator, PromiseImpl) {
            function invoke(method, arg, resolve, reject) {
              var record = tryCatch(generator[method], generator, arg);
              if (record.type === "throw") {
                reject(record.arg);
              } else {
                var result = record.arg;
                var value = result.value;
                if (
                  value &&
                  typeof value === "object" &&
                  hasOwn.call(value, "__await")
                ) {
                  return PromiseImpl.resolve(value.__await).then(
                    function (value) {
                      invoke("next", value, resolve, reject);
                    },
                    function (err) {
                      invoke("throw", err, resolve, reject);
                    }
                  );
                }

                return PromiseImpl.resolve(value).then(
                  function (unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                  },
                  function (error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                  }
                );
              }
            }

            var previousPromise;

            function enqueue(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function (resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }

              return (previousPromise =
                // If enqueue has been called before, then we want to wait until
                // all previous Promises have been resolved before calling invoke,
                // so that results are always delivered in the correct order. If
                // enqueue has not been called before, then it is important to
                // call invoke immediately, without waiting on a callback to fire,
                // so that the async generator function has the opportunity to do
                // any necessary setup in a predictable way. This predictability
                // is why the Promise constructor synchronously invokes its
                // executor callback, and why async functions synchronously
                // execute code before the first await. Since we implement simple
                // async functions in terms of async generators, it is especially
                // important to get this right, even though it requires care.
                previousPromise
                  ? previousPromise.then(
                      callInvokeWithMethodAndArg,
                      // Avoid propagating failures to Promises returned by later
                      // invocations of the iterator.
                      callInvokeWithMethodAndArg
                    )
                  : callInvokeWithMethodAndArg());
            }

            // Define the unified helper method that is used to implement .next,
            // .throw, and .return (see defineIteratorMethods).
            this._invoke = enqueue;
          }

          defineIteratorMethods(AsyncIterator.prototype);
          define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
            return this;
          });
          exports.AsyncIterator = AsyncIterator;

          // Note that simple async functions are implemented on top of
          // AsyncIterator objects; they just return a Promise for the value of
          // the final result produced by the iterator.
          exports.async = function (
            innerFn,
            outerFn,
            self,
            tryLocsList,
            PromiseImpl
          ) {
            if (PromiseImpl === void 0) PromiseImpl = Promise;

            var iter = new AsyncIterator(
              wrap(innerFn, outerFn, self, tryLocsList),
              PromiseImpl
            );

            return exports.isGeneratorFunction(outerFn)
              ? iter // If outerFn is a generator, return the full iterator.
              : iter.next().then(function (result) {
                  return result.done ? result.value : iter.next();
                });
          };

          function makeInvokeMethod(innerFn, self, context) {
            var state = GenStateSuspendedStart;

            return function invoke(method, arg) {
              if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
              }

              if (state === GenStateCompleted) {
                if (method === "throw") {
                  throw arg;
                }

                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
              }

              context.method = method;
              context.arg = arg;

              while (true) {
                var delegate = context.delegate;
                if (delegate) {
                  var delegateResult = maybeInvokeDelegate(delegate, context);
                  if (delegateResult) {
                    if (delegateResult === ContinueSentinel) continue;
                    return delegateResult;
                  }
                }

                if (context.method === "next") {
                  // Setting context._sent for legacy support of Babel's
                  // function.sent implementation.
                  context.sent = context._sent = context.arg;
                } else if (context.method === "throw") {
                  if (state === GenStateSuspendedStart) {
                    state = GenStateCompleted;
                    throw context.arg;
                  }

                  context.dispatchException(context.arg);
                } else if (context.method === "return") {
                  context.abrupt("return", context.arg);
                }

                state = GenStateExecuting;

                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                  // If an exception is thrown from innerFn, we leave state ===
                  // GenStateExecuting and loop back for another invocation.
                  state = context.done
                    ? GenStateCompleted
                    : GenStateSuspendedYield;

                  if (record.arg === ContinueSentinel) {
                    continue;
                  }

                  return {
                    value: record.arg,
                    done: context.done,
                  };
                } else if (record.type === "throw") {
                  state = GenStateCompleted;
                  // Dispatch the exception by looping back around to the
                  // context.dispatchException(context.arg) call above.
                  context.method = "throw";
                  context.arg = record.arg;
                }
              }
            };
          }

          // Call delegate.iterator[context.method](context.arg) and handle the
          // result, either by returning a { value, done } result from the
          // delegate iterator, or by modifying context.method and context.arg,
          // setting context.delegate to null, and returning the ContinueSentinel.
          function maybeInvokeDelegate(delegate, context) {
            var method = delegate.iterator[context.method];
            if (method === undefined) {
              // A .throw or .return when the delegate iterator has no .throw
              // method always terminates the yield* loop.
              context.delegate = null;

              if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                  // If the delegate iterator has a return method, give it a
                  // chance to clean up.
                  context.method = "return";
                  context.arg = undefined;
                  maybeInvokeDelegate(delegate, context);

                  if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                  }
                }

                context.method = "throw";
                context.arg = new TypeError(
                  "The iterator does not provide a 'throw' method"
                );
              }

              return ContinueSentinel;
            }

            var record = tryCatch(method, delegate.iterator, context.arg);

            if (record.type === "throw") {
              context.method = "throw";
              context.arg = record.arg;
              context.delegate = null;
              return ContinueSentinel;
            }

            var info = record.arg;

            if (!info) {
              context.method = "throw";
              context.arg = new TypeError("iterator result is not an object");
              context.delegate = null;
              return ContinueSentinel;
            }

            if (info.done) {
              // Assign the result of the finished delegate to the temporary
              // variable specified by delegate.resultName (see delegateYield).
              context[delegate.resultName] = info.value;

              // Resume execution at the desired location (see delegateYield).
              context.next = delegate.nextLoc;

              // If context.method was "throw" but the delegate handled the
              // exception, let the outer generator proceed normally. If
              // context.method was "next", forget context.arg since it has been
              // "consumed" by the delegate iterator. If context.method was
              // "return", allow the original .return call to continue in the
              // outer generator.
              if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
              }
            } else {
              // Re-yield the result returned by the delegate method.
              return info;
            }

            // The delegate iterator is finished, so forget it and continue with
            // the outer generator.
            context.delegate = null;
            return ContinueSentinel;
          }

          // Define Generator.prototype.{next,throw,return} in terms of the
          // unified ._invoke helper method.
          defineIteratorMethods(Gp);

          define(Gp, toStringTagSymbol, "Generator");

          // A Generator should always return itself as the iterator object when the
          // @@iterator function is called on it. Some browsers' implementations of the
          // iterator prototype chain incorrectly implement this, causing the Generator
          // object to not be returned from this call. This ensures that doesn't happen.
          // See https://github.com/facebook/regenerator/issues/274 for more details.
          define(Gp, iteratorSymbol, function () {
            return this;
          });

          define(Gp, "toString", function () {
            return "[object Generator]";
          });

          function pushTryEntry(locs) {
            var entry = { tryLoc: locs[0] };

            if (1 in locs) {
              entry.catchLoc = locs[1];
            }

            if (2 in locs) {
              entry.finallyLoc = locs[2];
              entry.afterLoc = locs[3];
            }

            this.tryEntries.push(entry);
          }

          function resetTryEntry(entry) {
            var record = entry.completion || {};
            record.type = "normal";
            delete record.arg;
            entry.completion = record;
          }

          function Context(tryLocsList) {
            // The root entry object (effectively a try statement without a catch
            // or a finally block) gives us a place to store values thrown from
            // locations where there is no enclosing try statement.
            this.tryEntries = [{ tryLoc: "root" }];
            tryLocsList.forEach(pushTryEntry, this);
            this.reset(true);
          }

          exports.keys = function (object) {
            var keys = [];
            for (var key in object) {
              keys.push(key);
            }
            keys.reverse();

            // Rather than returning an object with a next method, we keep
            // things simple and return the next function itself.
            return function next() {
              while (keys.length) {
                var key = keys.pop();
                if (key in object) {
                  next.value = key;
                  next.done = false;
                  return next;
                }
              }

              // To avoid creating an additional object, we just hang the .value
              // and .done properties off the next function object itself. This
              // also ensures that the minifier will not anonymize the function.
              next.done = true;
              return next;
            };
          };

          function values(iterable) {
            if (iterable) {
              var iteratorMethod = iterable[iteratorSymbol];
              if (iteratorMethod) {
                return iteratorMethod.call(iterable);
              }

              if (typeof iterable.next === "function") {
                return iterable;
              }

              if (!isNaN(iterable.length)) {
                var i = -1,
                  next = function next() {
                    while (++i < iterable.length) {
                      if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                      }
                    }

                    next.value = undefined;
                    next.done = true;

                    return next;
                  };

                return (next.next = next);
              }
            }

            // Return an iterator with no values.
            return { next: doneResult };
          }
          exports.values = values;

          function doneResult() {
            return { value: undefined, done: true };
          }

          Context.prototype = {
            constructor: Context,

            reset: function (skipTempReset) {
              this.prev = 0;
              this.next = 0;
              // Resetting context._sent for legacy support of Babel's
              // function.sent implementation.
              this.sent = this._sent = undefined;
              this.done = false;
              this.delegate = null;

              this.method = "next";
              this.arg = undefined;

              this.tryEntries.forEach(resetTryEntry);

              if (!skipTempReset) {
                for (var name in this) {
                  // Not sure about the optimal order of these conditions:
                  if (
                    name.charAt(0) === "t" &&
                    hasOwn.call(this, name) &&
                    !isNaN(+name.slice(1))
                  ) {
                    this[name] = undefined;
                  }
                }
              }
            },

            stop: function () {
              this.done = true;

              var rootEntry = this.tryEntries[0];
              var rootRecord = rootEntry.completion;
              if (rootRecord.type === "throw") {
                throw rootRecord.arg;
              }

              return this.rval;
            },

            dispatchException: function (exception) {
              if (this.done) {
                throw exception;
              }

              var context = this;
              function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;

                if (caught) {
                  // If the dispatched exception was caught by a catch block,
                  // then let that catch block handle the exception normally.
                  context.method = "next";
                  context.arg = undefined;
                }

                return !!caught;
              }

              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                var record = entry.completion;

                if (entry.tryLoc === "root") {
                  // Exception thrown outside of any try block that could handle
                  // it, so set the completion value of the entire function to
                  // throw the exception.
                  return handle("end");
                }

                if (entry.tryLoc <= this.prev) {
                  var hasCatch = hasOwn.call(entry, "catchLoc");
                  var hasFinally = hasOwn.call(entry, "finallyLoc");

                  if (hasCatch && hasFinally) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    } else if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }
                  } else if (hasCatch) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    }
                  } else if (hasFinally) {
                    if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }
                  } else {
                    throw new Error("try statement without catch or finally");
                  }
                }
              }
            },

            abrupt: function (type, arg) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (
                  entry.tryLoc <= this.prev &&
                  hasOwn.call(entry, "finallyLoc") &&
                  this.prev < entry.finallyLoc
                ) {
                  var finallyEntry = entry;
                  break;
                }
              }

              if (
                finallyEntry &&
                (type === "break" || type === "continue") &&
                finallyEntry.tryLoc <= arg &&
                arg <= finallyEntry.finallyLoc
              ) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
              }

              var record = finallyEntry ? finallyEntry.completion : {};
              record.type = type;
              record.arg = arg;

              if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
              }

              return this.complete(record);
            },

            complete: function (record, afterLoc) {
              if (record.type === "throw") {
                throw record.arg;
              }

              if (record.type === "break" || record.type === "continue") {
                this.next = record.arg;
              } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
              } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
              }

              return ContinueSentinel;
            },

            finish: function (finallyLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                  this.complete(entry.completion, entry.afterLoc);
                  resetTryEntry(entry);
                  return ContinueSentinel;
                }
              }
            },

            catch: function (tryLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                  var record = entry.completion;
                  if (record.type === "throw") {
                    var thrown = record.arg;
                    resetTryEntry(entry);
                  }
                  return thrown;
                }
              }

              // The context.catch method must only be called with a location
              // argument that corresponds to a known catch block.
              throw new Error("illegal catch attempt");
            },

            delegateYield: function (iterable, resultName, nextLoc) {
              this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc,
              };

              if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
              }

              return ContinueSentinel;
            },
          };

          // Regardless of whether this script is executing as a CommonJS module
          // or not, return the runtime object so that we can declare the variable
          // regeneratorRuntime in the outer scope, which allows this module to be
          // injected easily by `bin/regenerator --include-runtime script.js`.
          return exports;
        })(
          // If this script is executing as a CommonJS module, use module.exports
          // as the regeneratorRuntime namespace. Otherwise create a new empty
          // object. Either way, the resulting object will be used to initialize
          // the regeneratorRuntime variable at the top of this file.
          typeof module === "object" ? module.exports : {}
        );

        try {
          regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
          // This module should not be running in strict mode, so the above
          // assignment should always work unless something is misconfigured. Just
          // in case runtime.js accidentally runs in strict mode, in modern engines
          // we can explicitly access globalThis. In older engines we can escape
          // strict mode using a global Function call. This could conceivably fail
          // if a Content Security Policy forbids using Function, but in that case
          // the proper solution is to fix the accidental strict mode problem. If
          // you've misconfigured your bundler to force strict mode and applied a
          // CSP to forbid Function, and you're not willing to fix either of those
          // problems, please detail your unique predicament in a GitHub issue.
          if (typeof globalThis === "object") {
            globalThis.regeneratorRuntime = runtime;
          } else {
            Function("r", "regeneratorRuntime = r")(runtime);
          }
        }
      },
      {},
    ],
    427: [
      function (require, module, exports) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = require("buffer");
        var Buffer = buffer.Buffer;

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (
          Buffer.from &&
          Buffer.alloc &&
          Buffer.allocUnsafe &&
          Buffer.allocUnsafeSlow
        ) {
          module.exports = buffer;
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports);
          exports.Buffer = SafeBuffer;
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length);
        }

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer);

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer(arg, encodingOrOffset, length);
        };

        SafeBuffer.alloc = function (size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer(size);
          if (fill !== undefined) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };

        SafeBuffer.allocUnsafe = function (size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer(size);
        };

        SafeBuffer.allocUnsafeSlow = function (size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };
      },
      { buffer: 239 },
    ],
    428: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            exports = module.exports = SemVer;

            var debug;
            /* istanbul ignore next */
            if (
              typeof process === "object" &&
              process.env &&
              process.env.NODE_DEBUG &&
              /\bsemver\b/i.test(process.env.NODE_DEBUG)
            ) {
              debug = function () {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift("SEMVER");
                console.log.apply(console, args);
              };
            } else {
              debug = function () {};
            }

            // Note: this is the semver.org version of the spec that it implements
            // Not necessarily the package version of this code.
            exports.SEMVER_SPEC_VERSION = "2.0.0";

            var MAX_LENGTH = 256;
            var MAX_SAFE_INTEGER =
              Number.MAX_SAFE_INTEGER ||
              /* istanbul ignore next */ 9007199254740991;

            // Max safe segment length for coercion.
            var MAX_SAFE_COMPONENT_LENGTH = 16;

            // The actual regexps go on exports.re
            var re = (exports.re = []);
            var src = (exports.src = []);
            var R = 0;

            // The following Regular Expressions can be used for tokenizing,
            // validating, and parsing SemVer version strings.

            // ## Numeric Identifier
            // A single `0`, or a non-zero digit followed by zero or more digits.

            var NUMERICIDENTIFIER = R++;
            src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
            var NUMERICIDENTIFIERLOOSE = R++;
            src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";

            // ## Non-numeric Identifier
            // Zero or more digits, followed by a letter or hyphen, and then zero or
            // more letters, digits, or hyphens.

            var NONNUMERICIDENTIFIER = R++;
            src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";

            // ## Main Version
            // Three dot-separated numeric identifiers.

            var MAINVERSION = R++;
            src[MAINVERSION] =
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")";

            var MAINVERSIONLOOSE = R++;
            src[MAINVERSIONLOOSE] =
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")";

            // ## Pre-release Version Identifier
            // A numeric identifier, or a non-numeric identifier.

            var PRERELEASEIDENTIFIER = R++;
            src[PRERELEASEIDENTIFIER] =
              "(?:" +
              src[NUMERICIDENTIFIER] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")";

            var PRERELEASEIDENTIFIERLOOSE = R++;
            src[PRERELEASEIDENTIFIERLOOSE] =
              "(?:" +
              src[NUMERICIDENTIFIERLOOSE] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")";

            // ## Pre-release Version
            // Hyphen, followed by one or more dot-separated pre-release version
            // identifiers.

            var PRERELEASE = R++;
            src[PRERELEASE] =
              "(?:-(" +
              src[PRERELEASEIDENTIFIER] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIER] +
              ")*))";

            var PRERELEASELOOSE = R++;
            src[PRERELEASELOOSE] =
              "(?:-?(" +
              src[PRERELEASEIDENTIFIERLOOSE] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIERLOOSE] +
              ")*))";

            // ## Build Metadata Identifier
            // Any combination of digits, letters, or hyphens.

            var BUILDIDENTIFIER = R++;
            src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";

            // ## Build Metadata
            // Plus sign, followed by one or more period-separated build metadata
            // identifiers.

            var BUILD = R++;
            src[BUILD] =
              "(?:\\+(" +
              src[BUILDIDENTIFIER] +
              "(?:\\." +
              src[BUILDIDENTIFIER] +
              ")*))";

            // ## Full Version String
            // A main version, followed optionally by a pre-release version and
            // build metadata.

            // Note that the only major, minor, patch, and pre-release sections of
            // the version string are capturing groups.  The build metadata is not a
            // capturing group, because it should not ever be used in version
            // comparison.

            var FULL = R++;
            var FULLPLAIN =
              "v?" +
              src[MAINVERSION] +
              src[PRERELEASE] +
              "?" +
              src[BUILD] +
              "?";

            src[FULL] = "^" + FULLPLAIN + "$";

            // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
            // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
            // common in the npm registry.
            var LOOSEPLAIN =
              "[v=\\s]*" +
              src[MAINVERSIONLOOSE] +
              src[PRERELEASELOOSE] +
              "?" +
              src[BUILD] +
              "?";

            var LOOSE = R++;
            src[LOOSE] = "^" + LOOSEPLAIN + "$";

            var GTLT = R++;
            src[GTLT] = "((?:<|>)?=?)";

            // Something like "2.*" or "1.2.x".
            // Note that "x.x" is a valid xRange identifer, meaning "any version"
            // Only the first item is strictly required.
            var XRANGEIDENTIFIERLOOSE = R++;
            src[XRANGEIDENTIFIERLOOSE] =
              src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
            var XRANGEIDENTIFIER = R++;
            src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";

            var XRANGEPLAIN = R++;
            src[XRANGEPLAIN] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:" +
              src[PRERELEASE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";

            var XRANGEPLAINLOOSE = R++;
            src[XRANGEPLAINLOOSE] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:" +
              src[PRERELEASELOOSE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";

            var XRANGE = R++;
            src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
            var XRANGELOOSE = R++;
            src[XRANGELOOSE] =
              "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";

            // Coercion.
            // Extract anything that could conceivably be a part of a valid semver
            var COERCE = R++;
            src[COERCE] =
              "(?:^|[^\\d])" +
              "(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "})" +
              "(?:\\.(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "}))?" +
              "(?:\\.(\\d{1," +
              MAX_SAFE_COMPONENT_LENGTH +
              "}))?" +
              "(?:$|[^\\d])";

            // Tilde ranges.
            // Meaning is "reasonably at or greater than"
            var LONETILDE = R++;
            src[LONETILDE] = "(?:~>?)";

            var TILDETRIM = R++;
            src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
            re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
            var tildeTrimReplace = "$1~";

            var TILDE = R++;
            src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
            var TILDELOOSE = R++;
            src[TILDELOOSE] =
              "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";

            // Caret ranges.
            // Meaning is "at least and backwards compatible with"
            var LONECARET = R++;
            src[LONECARET] = "(?:\\^)";

            var CARETTRIM = R++;
            src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
            re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
            var caretTrimReplace = "$1^";

            var CARET = R++;
            src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
            var CARETLOOSE = R++;
            src[CARETLOOSE] =
              "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";

            // A simple gt/lt/eq thing, or just "" to indicate "any version"
            var COMPARATORLOOSE = R++;
            src[COMPARATORLOOSE] =
              "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
            var COMPARATOR = R++;
            src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";

            // An expression to strip any whitespace between the gtlt and the thing
            // it modifies, so that `> 1.2.3` ==> `>1.2.3`
            var COMPARATORTRIM = R++;
            src[COMPARATORTRIM] =
              "(\\s*)" +
              src[GTLT] +
              "\\s*(" +
              LOOSEPLAIN +
              "|" +
              src[XRANGEPLAIN] +
              ")";

            // this one has to use the /g flag
            re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
            var comparatorTrimReplace = "$1$2$3";

            // Something like `1.2.3 - 1.2.4`
            // Note that these all use the loose form, because they'll be
            // checked against either the strict or loose comparator form
            // later.
            var HYPHENRANGE = R++;
            src[HYPHENRANGE] =
              "^\\s*(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s*$";

            var HYPHENRANGELOOSE = R++;
            src[HYPHENRANGELOOSE] =
              "^\\s*(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s*$";

            // Star ranges basically just allow anything at all.
            var STAR = R++;
            src[STAR] = "(<|>)?=?\\s*\\*";

            // Compile to actual regexp objects.
            // All are flag-free, unless they were created above with a flag.
            for (var i = 0; i < R; i++) {
              debug(i, src[i]);
              if (!re[i]) {
                re[i] = new RegExp(src[i]);
              }
            }

            exports.parse = parse;
            function parse(version, options) {
              if (!options || typeof options !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              }

              if (version instanceof SemVer) {
                return version;
              }

              if (typeof version !== "string") {
                return null;
              }

              if (version.length > MAX_LENGTH) {
                return null;
              }

              var r = options.loose ? re[LOOSE] : re[FULL];
              if (!r.test(version)) {
                return null;
              }

              try {
                return new SemVer(version, options);
              } catch (er) {
                return null;
              }
            }

            exports.valid = valid;
            function valid(version, options) {
              var v = parse(version, options);
              return v ? v.version : null;
            }

            exports.clean = clean;
            function clean(version, options) {
              var s = parse(version.trim().replace(/^[=v]+/, ""), options);
              return s ? s.version : null;
            }

            exports.SemVer = SemVer;

            function SemVer(version, options) {
              if (!options || typeof options !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              }
              if (version instanceof SemVer) {
                if (version.loose === options.loose) {
                  return version;
                } else {
                  version = version.version;
                }
              } else if (typeof version !== "string") {
                throw new TypeError("Invalid Version: " + version);
              }

              if (version.length > MAX_LENGTH) {
                throw new TypeError(
                  "version is longer than " + MAX_LENGTH + " characters"
                );
              }

              if (!(this instanceof SemVer)) {
                return new SemVer(version, options);
              }

              debug("SemVer", version, options);
              this.options = options;
              this.loose = !!options.loose;

              var m = version
                .trim()
                .match(options.loose ? re[LOOSE] : re[FULL]);

              if (!m) {
                throw new TypeError("Invalid Version: " + version);
              }

              this.raw = version;

              // these are actually numbers
              this.major = +m[1];
              this.minor = +m[2];
              this.patch = +m[3];

              if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
                throw new TypeError("Invalid major version");
              }

              if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
                throw new TypeError("Invalid minor version");
              }

              if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
                throw new TypeError("Invalid patch version");
              }

              // numberify any prerelease numeric ids
              if (!m[4]) {
                this.prerelease = [];
              } else {
                this.prerelease = m[4].split(".").map(function (id) {
                  if (/^[0-9]+$/.test(id)) {
                    var num = +id;
                    if (num >= 0 && num < MAX_SAFE_INTEGER) {
                      return num;
                    }
                  }
                  return id;
                });
              }

              this.build = m[5] ? m[5].split(".") : [];
              this.format();
            }

            SemVer.prototype.format = function () {
              this.version = this.major + "." + this.minor + "." + this.patch;
              if (this.prerelease.length) {
                this.version += "-" + this.prerelease.join(".");
              }
              return this.version;
            };

            SemVer.prototype.toString = function () {
              return this.version;
            };

            SemVer.prototype.compare = function (other) {
              debug("SemVer.compare", this.version, this.options, other);
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }

              return this.compareMain(other) || this.comparePre(other);
            };

            SemVer.prototype.compareMain = function (other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }

              return (
                compareIdentifiers(this.major, other.major) ||
                compareIdentifiers(this.minor, other.minor) ||
                compareIdentifiers(this.patch, other.patch)
              );
            };

            SemVer.prototype.comparePre = function (other) {
              if (!(other instanceof SemVer)) {
                other = new SemVer(other, this.options);
              }

              // NOT having a prerelease is > having one
              if (this.prerelease.length && !other.prerelease.length) {
                return -1;
              } else if (!this.prerelease.length && other.prerelease.length) {
                return 1;
              } else if (!this.prerelease.length && !other.prerelease.length) {
                return 0;
              }

              var i = 0;
              do {
                var a = this.prerelease[i];
                var b = other.prerelease[i];
                debug("prerelease compare", i, a, b);
                if (a === undefined && b === undefined) {
                  return 0;
                } else if (b === undefined) {
                  return 1;
                } else if (a === undefined) {
                  return -1;
                } else if (a === b) {
                  continue;
                } else {
                  return compareIdentifiers(a, b);
                }
              } while (++i);
            };

            // preminor will bump the version up to the next minor release, and immediately
            // down to pre-release. premajor and prepatch work the same way.
            SemVer.prototype.inc = function (release, identifier) {
              switch (release) {
                case "premajor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor = 0;
                  this.major++;
                  this.inc("pre", identifier);
                  break;
                case "preminor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor++;
                  this.inc("pre", identifier);
                  break;
                case "prepatch":
                  // If this is already a prerelease, it will bump to the next version
                  // drop any prereleases that might already exist, since they are not
                  // relevant at this point.
                  this.prerelease.length = 0;
                  this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;
                // If the input is a non-prerelease version, this acts the same as
                // prepatch.
                case "prerelease":
                  if (this.prerelease.length === 0) {
                    this.inc("patch", identifier);
                  }
                  this.inc("pre", identifier);
                  break;

                case "major":
                  // If this is a pre-major version, bump up to the same major version.
                  // Otherwise increment major.
                  // 1.0.0-5 bumps to 1.0.0
                  // 1.1.0 bumps to 2.0.0
                  if (
                    this.minor !== 0 ||
                    this.patch !== 0 ||
                    this.prerelease.length === 0
                  ) {
                    this.major++;
                  }
                  this.minor = 0;
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "minor":
                  // If this is a pre-minor version, bump up to the same minor version.
                  // Otherwise increment minor.
                  // 1.2.0-5 bumps to 1.2.0
                  // 1.2.1 bumps to 1.3.0
                  if (this.patch !== 0 || this.prerelease.length === 0) {
                    this.minor++;
                  }
                  this.patch = 0;
                  this.prerelease = [];
                  break;
                case "patch":
                  // If this is not a pre-release version, it will increment the patch.
                  // If it is a pre-release it will bump up to the same patch version.
                  // 1.2.0-5 patches to 1.2.0
                  // 1.2.0 patches to 1.2.1
                  if (this.prerelease.length === 0) {
                    this.patch++;
                  }
                  this.prerelease = [];
                  break;
                // This probably shouldn't be used publicly.
                // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
                case "pre":
                  if (this.prerelease.length === 0) {
                    this.prerelease = [0];
                  } else {
                    var i = this.prerelease.length;
                    while (--i >= 0) {
                      if (typeof this.prerelease[i] === "number") {
                        this.prerelease[i]++;
                        i = -2;
                      }
                    }
                    if (i === -1) {
                      // didn't increment anything
                      this.prerelease.push(0);
                    }
                  }
                  if (identifier) {
                    // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                    // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                    if (this.prerelease[0] === identifier) {
                      if (isNaN(this.prerelease[1])) {
                        this.prerelease = [identifier, 0];
                      }
                    } else {
                      this.prerelease = [identifier, 0];
                    }
                  }
                  break;

                default:
                  throw new Error("invalid increment argument: " + release);
              }
              this.format();
              this.raw = this.version;
              return this;
            };

            exports.inc = inc;
            function inc(version, release, loose, identifier) {
              if (typeof loose === "string") {
                identifier = loose;
                loose = undefined;
              }

              try {
                return new SemVer(version, loose).inc(release, identifier)
                  .version;
              } catch (er) {
                return null;
              }
            }

            exports.diff = diff;
            function diff(version1, version2) {
              if (eq(version1, version2)) {
                return null;
              } else {
                var v1 = parse(version1);
                var v2 = parse(version2);
                var prefix = "";
                if (v1.prerelease.length || v2.prerelease.length) {
                  prefix = "pre";
                  var defaultResult = "prerelease";
                }
                for (var key in v1) {
                  if (key === "major" || key === "minor" || key === "patch") {
                    if (v1[key] !== v2[key]) {
                      return prefix + key;
                    }
                  }
                }
                return defaultResult; // may be undefined
              }
            }

            exports.compareIdentifiers = compareIdentifiers;

            var numeric = /^[0-9]+$/;
            function compareIdentifiers(a, b) {
              var anum = numeric.test(a);
              var bnum = numeric.test(b);

              if (anum && bnum) {
                a = +a;
                b = +b;
              }

              return a === b
                ? 0
                : anum && !bnum
                ? -1
                : bnum && !anum
                ? 1
                : a < b
                ? -1
                : 1;
            }

            exports.rcompareIdentifiers = rcompareIdentifiers;
            function rcompareIdentifiers(a, b) {
              return compareIdentifiers(b, a);
            }

            exports.major = major;
            function major(a, loose) {
              return new SemVer(a, loose).major;
            }

            exports.minor = minor;
            function minor(a, loose) {
              return new SemVer(a, loose).minor;
            }

            exports.patch = patch;
            function patch(a, loose) {
              return new SemVer(a, loose).patch;
            }

            exports.compare = compare;
            function compare(a, b, loose) {
              return new SemVer(a, loose).compare(new SemVer(b, loose));
            }

            exports.compareLoose = compareLoose;
            function compareLoose(a, b) {
              return compare(a, b, true);
            }

            exports.rcompare = rcompare;
            function rcompare(a, b, loose) {
              return compare(b, a, loose);
            }

            exports.sort = sort;
            function sort(list, loose) {
              return list.sort(function (a, b) {
                return exports.compare(a, b, loose);
              });
            }

            exports.rsort = rsort;
            function rsort(list, loose) {
              return list.sort(function (a, b) {
                return exports.rcompare(a, b, loose);
              });
            }

            exports.gt = gt;
            function gt(a, b, loose) {
              return compare(a, b, loose) > 0;
            }

            exports.lt = lt;
            function lt(a, b, loose) {
              return compare(a, b, loose) < 0;
            }

            exports.eq = eq;
            function eq(a, b, loose) {
              return compare(a, b, loose) === 0;
            }

            exports.neq = neq;
            function neq(a, b, loose) {
              return compare(a, b, loose) !== 0;
            }

            exports.gte = gte;
            function gte(a, b, loose) {
              return compare(a, b, loose) >= 0;
            }

            exports.lte = lte;
            function lte(a, b, loose) {
              return compare(a, b, loose) <= 0;
            }

            exports.cmp = cmp;
            function cmp(a, op, b, loose) {
              switch (op) {
                case "===":
                  if (typeof a === "object") a = a.version;
                  if (typeof b === "object") b = b.version;
                  return a === b;

                case "!==":
                  if (typeof a === "object") a = a.version;
                  if (typeof b === "object") b = b.version;
                  return a !== b;

                case "":
                case "=":
                case "==":
                  return eq(a, b, loose);

                case "!=":
                  return neq(a, b, loose);

                case ">":
                  return gt(a, b, loose);

                case ">=":
                  return gte(a, b, loose);

                case "<":
                  return lt(a, b, loose);

                case "<=":
                  return lte(a, b, loose);

                default:
                  throw new TypeError("Invalid operator: " + op);
              }
            }

            exports.Comparator = Comparator;
            function Comparator(comp, options) {
              if (!options || typeof options !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              }

              if (comp instanceof Comparator) {
                if (comp.loose === !!options.loose) {
                  return comp;
                } else {
                  comp = comp.value;
                }
              }

              if (!(this instanceof Comparator)) {
                return new Comparator(comp, options);
              }

              debug("comparator", comp, options);
              this.options = options;
              this.loose = !!options.loose;
              this.parse(comp);

              if (this.semver === ANY) {
                this.value = "";
              } else {
                this.value = this.operator + this.semver.version;
              }

              debug("comp", this);
            }

            var ANY = {};
            Comparator.prototype.parse = function (comp) {
              var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var m = comp.match(r);

              if (!m) {
                throw new TypeError("Invalid comparator: " + comp);
              }

              this.operator = m[1];
              if (this.operator === "=") {
                this.operator = "";
              }

              // if it literally is just '>' or '' then allow anything.
              if (!m[2]) {
                this.semver = ANY;
              } else {
                this.semver = new SemVer(m[2], this.options.loose);
              }
            };

            Comparator.prototype.toString = function () {
              return this.value;
            };

            Comparator.prototype.test = function (version) {
              debug("Comparator.test", version, this.options.loose);

              if (this.semver === ANY) {
                return true;
              }

              if (typeof version === "string") {
                version = new SemVer(version, this.options);
              }

              return cmp(version, this.operator, this.semver, this.options);
            };

            Comparator.prototype.intersects = function (comp, options) {
              if (!(comp instanceof Comparator)) {
                throw new TypeError("a Comparator is required");
              }

              if (!options || typeof options !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              }

              var rangeTmp;

              if (this.operator === "") {
                rangeTmp = new Range(comp.value, options);
                return satisfies(this.value, rangeTmp, options);
              } else if (comp.operator === "") {
                rangeTmp = new Range(this.value, options);
                return satisfies(comp.semver, rangeTmp, options);
              }

              var sameDirectionIncreasing =
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === ">=" || comp.operator === ">");
              var sameDirectionDecreasing =
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === "<=" || comp.operator === "<");
              var sameSemVer = this.semver.version === comp.semver.version;
              var differentDirectionsInclusive =
                (this.operator === ">=" || this.operator === "<=") &&
                (comp.operator === ">=" || comp.operator === "<=");
              var oppositeDirectionsLessThan =
                cmp(this.semver, "<", comp.semver, options) &&
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === "<=" || comp.operator === "<");
              var oppositeDirectionsGreaterThan =
                cmp(this.semver, ">", comp.semver, options) &&
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === ">=" || comp.operator === ">");

              return (
                sameDirectionIncreasing ||
                sameDirectionDecreasing ||
                (sameSemVer && differentDirectionsInclusive) ||
                oppositeDirectionsLessThan ||
                oppositeDirectionsGreaterThan
              );
            };

            exports.Range = Range;
            function Range(range, options) {
              if (!options || typeof options !== "object") {
                options = {
                  loose: !!options,
                  includePrerelease: false,
                };
              }

              if (range instanceof Range) {
                if (
                  range.loose === !!options.loose &&
                  range.includePrerelease === !!options.includePrerelease
                ) {
                  return range;
                } else {
                  return new Range(range.raw, options);
                }
              }

              if (range instanceof Comparator) {
                return new Range(range.value, options);
              }

              if (!(this instanceof Range)) {
                return new Range(range, options);
              }

              this.options = options;
              this.loose = !!options.loose;
              this.includePrerelease = !!options.includePrerelease;

              // First, split based on boolean or ||
              this.raw = range;
              this.set = range
                .split(/\s*\|\|\s*/)
                .map(function (range) {
                  return this.parseRange(range.trim());
                }, this)
                .filter(function (c) {
                  // throw out any that are not relevant for whatever reason
                  return c.length;
                });

              if (!this.set.length) {
                throw new TypeError("Invalid SemVer Range: " + range);
              }

              this.format();
            }

            Range.prototype.format = function () {
              this.range = this.set
                .map(function (comps) {
                  return comps.join(" ").trim();
                })
                .join("||")
                .trim();
              return this.range;
            };

            Range.prototype.toString = function () {
              return this.range;
            };

            Range.prototype.parseRange = function (range) {
              var loose = this.options.loose;
              range = range.trim();
              // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
              var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
              range = range.replace(hr, hyphenReplace);
              debug("hyphen replace", range);
              // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
              range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
              debug("comparator trim", range, re[COMPARATORTRIM]);

              // `~ 1.2.3` => `~1.2.3`
              range = range.replace(re[TILDETRIM], tildeTrimReplace);

              // `^ 1.2.3` => `^1.2.3`
              range = range.replace(re[CARETTRIM], caretTrimReplace);

              // normalize spaces
              range = range.split(/\s+/).join(" ");

              // At this point, the range is completely trimmed and
              // ready to be split into comparators.

              var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var set = range
                .split(" ")
                .map(function (comp) {
                  return parseComparator(comp, this.options);
                }, this)
                .join(" ")
                .split(/\s+/);
              if (this.options.loose) {
                // in loose mode, throw out any that are not valid comparators
                set = set.filter(function (comp) {
                  return !!comp.match(compRe);
                });
              }
              set = set.map(function (comp) {
                return new Comparator(comp, this.options);
              }, this);

              return set;
            };

            Range.prototype.intersects = function (range, options) {
              if (!(range instanceof Range)) {
                throw new TypeError("a Range is required");
              }

              return this.set.some(function (thisComparators) {
                return thisComparators.every(function (thisComparator) {
                  return range.set.some(function (rangeComparators) {
                    return rangeComparators.every(function (rangeComparator) {
                      return thisComparator.intersects(
                        rangeComparator,
                        options
                      );
                    });
                  });
                });
              });
            };

            // Mostly just for testing and legacy API reasons
            exports.toComparators = toComparators;
            function toComparators(range, options) {
              return new Range(range, options).set.map(function (comp) {
                return comp
                  .map(function (c) {
                    return c.value;
                  })
                  .join(" ")
                  .trim()
                  .split(" ");
              });
            }

            // comprised of xranges, tildes, stars, and gtlt's at this point.
            // already replaced the hyphen ranges
            // turn into a set of JUST comparators.
            function parseComparator(comp, options) {
              debug("comp", comp, options);
              comp = replaceCarets(comp, options);
              debug("caret", comp);
              comp = replaceTildes(comp, options);
              debug("tildes", comp);
              comp = replaceXRanges(comp, options);
              debug("xrange", comp);
              comp = replaceStars(comp, options);
              debug("stars", comp);
              return comp;
            }

            function isX(id) {
              return !id || id.toLowerCase() === "x" || id === "*";
            }

            // ~, ~> --> * (any, kinda silly)
            // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
            // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
            // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
            // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
            // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
            function replaceTildes(comp, options) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function (comp) {
                  return replaceTilde(comp, options);
                })
                .join(" ");
            }

            function replaceTilde(comp, options) {
              var r = options.loose ? re[TILDELOOSE] : re[TILDE];
              return comp.replace(r, function (_, M, m, p, pr) {
                debug("tilde", comp, _, M, m, p, pr);
                var ret;

                if (isX(M)) {
                  ret = "";
                } else if (isX(m)) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (isX(p)) {
                  // ~1.2 == >=1.2.0 <1.3.0
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                } else if (pr) {
                  debug("replaceTilde pr", pr);
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    "-" +
                    pr +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                } else {
                  // ~1.2.3 == >=1.2.3 <1.3.0
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                }

                debug("tilde return", ret);
                return ret;
              });
            }

            // ^ --> * (any, kinda silly)
            // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
            // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
            // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
            // ^1.2.3 --> >=1.2.3 <2.0.0
            // ^1.2.0 --> >=1.2.0 <2.0.0
            function replaceCarets(comp, options) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function (comp) {
                  return replaceCaret(comp, options);
                })
                .join(" ");
            }

            function replaceCaret(comp, options) {
              debug("caret", comp, options);
              var r = options.loose ? re[CARETLOOSE] : re[CARET];
              return comp.replace(r, function (_, M, m, p, pr) {
                debug("caret", comp, _, M, m, p, pr);
                var ret;

                if (isX(M)) {
                  ret = "";
                } else if (isX(m)) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (isX(p)) {
                  if (M === "0") {
                    ret =
                      ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                  } else {
                    ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
                  }
                } else if (pr) {
                  debug("replaceCaret pr", pr);
                  if (M === "0") {
                    if (m === "0") {
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        "-" +
                        pr +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    } else {
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        "-" +
                        pr +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                    }
                  } else {
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      "-" +
                      pr +
                      " <" +
                      (+M + 1) +
                      ".0.0";
                  }
                } else {
                  debug("no pr");
                  if (M === "0") {
                    if (m === "0") {
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    } else {
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                    }
                  } else {
                    ret =
                      ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
                  }
                }

                debug("caret return", ret);
                return ret;
              });
            }

            function replaceXRanges(comp, options) {
              debug("replaceXRanges", comp, options);
              return comp
                .split(/\s+/)
                .map(function (comp) {
                  return replaceXRange(comp, options);
                })
                .join(" ");
            }

            function replaceXRange(comp, options) {
              comp = comp.trim();
              var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
              return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
                debug("xRange", comp, ret, gtlt, M, m, p, pr);
                var xM = isX(M);
                var xm = xM || isX(m);
                var xp = xm || isX(p);
                var anyX = xp;

                if (gtlt === "=" && anyX) {
                  gtlt = "";
                }

                if (xM) {
                  if (gtlt === ">" || gtlt === "<") {
                    // nothing is allowed
                    ret = "<0.0.0";
                  } else {
                    // nothing is forbidden
                    ret = "*";
                  }
                } else if (gtlt && anyX) {
                  // we know patch is an x, because we have any x at all.
                  // replace X with 0
                  if (xm) {
                    m = 0;
                  }
                  p = 0;

                  if (gtlt === ">") {
                    // >1 => >=2.0.0
                    // >1.2 => >=1.3.0
                    // >1.2.3 => >= 1.2.4
                    gtlt = ">=";
                    if (xm) {
                      M = +M + 1;
                      m = 0;
                      p = 0;
                    } else {
                      m = +m + 1;
                      p = 0;
                    }
                  } else if (gtlt === "<=") {
                    // <=0.7.x is actually <0.8.0, since any 0.7.x should
                    // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                    gtlt = "<";
                    if (xm) {
                      M = +M + 1;
                    } else {
                      m = +m + 1;
                    }
                  }

                  ret = gtlt + M + "." + m + "." + p;
                } else if (xm) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (xp) {
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                }

                debug("xRange return", ret);

                return ret;
              });
            }

            // Because * is AND-ed with everything else in the comparator,
            // and '' means "any version", just remove the *s entirely.
            function replaceStars(comp, options) {
              debug("replaceStars", comp, options);
              // Looseness is ignored here.  star is always as loose as it gets!
              return comp.trim().replace(re[STAR], "");
            }

            // This function is passed to string.replace(re[HYPHENRANGE])
            // M, m, patch, prerelease, build
            // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
            // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
            // 1.2 - 3.4 => >=1.2.0 <3.5.0
            function hyphenReplace(
              $0,
              from,
              fM,
              fm,
              fp,
              fpr,
              fb,
              to,
              tM,
              tm,
              tp,
              tpr,
              tb
            ) {
              if (isX(fM)) {
                from = "";
              } else if (isX(fm)) {
                from = ">=" + fM + ".0.0";
              } else if (isX(fp)) {
                from = ">=" + fM + "." + fm + ".0";
              } else {
                from = ">=" + from;
              }

              if (isX(tM)) {
                to = "";
              } else if (isX(tm)) {
                to = "<" + (+tM + 1) + ".0.0";
              } else if (isX(tp)) {
                to = "<" + tM + "." + (+tm + 1) + ".0";
              } else if (tpr) {
                to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
              } else {
                to = "<=" + to;
              }

              return (from + " " + to).trim();
            }

            // if ANY of the sets match ALL of its comparators, then pass
            Range.prototype.test = function (version) {
              if (!version) {
                return false;
              }

              if (typeof version === "string") {
                version = new SemVer(version, this.options);
              }

              for (var i = 0; i < this.set.length; i++) {
                if (testSet(this.set[i], version, this.options)) {
                  return true;
                }
              }
              return false;
            };

            function testSet(set, version, options) {
              for (var i = 0; i < set.length; i++) {
                if (!set[i].test(version)) {
                  return false;
                }
              }

              if (version.prerelease.length && !options.includePrerelease) {
                // Find the set of versions that are allowed to have prereleases
                // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
                // That should allow `1.2.3-pr.2` to pass.
                // However, `1.2.4-alpha.notready` should NOT be allowed,
                // even though it's within the range set by the comparators.
                for (i = 0; i < set.length; i++) {
                  debug(set[i].semver);
                  if (set[i].semver === ANY) {
                    continue;
                  }

                  if (set[i].semver.prerelease.length > 0) {
                    var allowed = set[i].semver;
                    if (
                      allowed.major === version.major &&
                      allowed.minor === version.minor &&
                      allowed.patch === version.patch
                    ) {
                      return true;
                    }
                  }
                }

                // Version has a -pre, but it's not one of the ones we like.
                return false;
              }

              return true;
            }

            exports.satisfies = satisfies;
            function satisfies(version, range, options) {
              try {
                range = new Range(range, options);
              } catch (er) {
                return false;
              }
              return range.test(version);
            }

            exports.maxSatisfying = maxSatisfying;
            function maxSatisfying(versions, range, options) {
              var max = null;
              var maxSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function (v) {
                if (rangeObj.test(v)) {
                  // satisfies(v, range, options)
                  if (!max || maxSV.compare(v) === -1) {
                    // compare(max, v, true)
                    max = v;
                    maxSV = new SemVer(max, options);
                  }
                }
              });
              return max;
            }

            exports.minSatisfying = minSatisfying;
            function minSatisfying(versions, range, options) {
              var min = null;
              var minSV = null;
              try {
                var rangeObj = new Range(range, options);
              } catch (er) {
                return null;
              }
              versions.forEach(function (v) {
                if (rangeObj.test(v)) {
                  // satisfies(v, range, options)
                  if (!min || minSV.compare(v) === 1) {
                    // compare(min, v, true)
                    min = v;
                    minSV = new SemVer(min, options);
                  }
                }
              });
              return min;
            }

            exports.minVersion = minVersion;
            function minVersion(range, loose) {
              range = new Range(range, loose);

              var minver = new SemVer("0.0.0");
              if (range.test(minver)) {
                return minver;
              }

              minver = new SemVer("0.0.0-0");
              if (range.test(minver)) {
                return minver;
              }

              minver = null;
              for (var i = 0; i < range.set.length; ++i) {
                var comparators = range.set[i];

                comparators.forEach(function (comparator) {
                  // Clone to avoid manipulating the comparator's semver object.
                  var compver = new SemVer(comparator.semver.version);
                  switch (comparator.operator) {
                    case ">":
                      if (compver.prerelease.length === 0) {
                        compver.patch++;
                      } else {
                        compver.prerelease.push(0);
                      }
                      compver.raw = compver.format();
                    /* fallthrough */
                    case "":
                    case ">=":
                      if (!minver || gt(minver, compver)) {
                        minver = compver;
                      }
                      break;
                    case "<":
                    case "<=":
                      /* Ignore maximum versions */
                      break;
                    /* istanbul ignore next */
                    default:
                      throw new Error(
                        "Unexpected operation: " + comparator.operator
                      );
                  }
                });
              }

              if (minver && range.test(minver)) {
                return minver;
              }

              return null;
            }

            exports.validRange = validRange;
            function validRange(range, options) {
              try {
                // Return '*' instead of '' so that truthiness works.
                // This will throw if it's invalid anyway
                return new Range(range, options).range || "*";
              } catch (er) {
                return null;
              }
            }

            // Determine if version is less than all the versions possible in the range
            exports.ltr = ltr;
            function ltr(version, range, options) {
              return outside(version, range, "<", options);
            }

            // Determine if version is greater than all the versions possible in the range.
            exports.gtr = gtr;
            function gtr(version, range, options) {
              return outside(version, range, ">", options);
            }

            exports.outside = outside;
            function outside(version, range, hilo, options) {
              version = new SemVer(version, options);
              range = new Range(range, options);

              var gtfn, ltefn, ltfn, comp, ecomp;
              switch (hilo) {
                case ">":
                  gtfn = gt;
                  ltefn = lte;
                  ltfn = lt;
                  comp = ">";
                  ecomp = ">=";
                  break;
                case "<":
                  gtfn = lt;
                  ltefn = gte;
                  ltfn = gt;
                  comp = "<";
                  ecomp = "<=";
                  break;
                default:
                  throw new TypeError('Must provide a hilo val of "<" or ">"');
              }

              // If it satisifes the range it is not outside
              if (satisfies(version, range, options)) {
                return false;
              }

              // From now on, variable terms are as if we're in "gtr" mode.
              // but note that everything is flipped for the "ltr" function.

              for (var i = 0; i < range.set.length; ++i) {
                var comparators = range.set[i];

                var high = null;
                var low = null;

                comparators.forEach(function (comparator) {
                  if (comparator.semver === ANY) {
                    comparator = new Comparator(">=0.0.0");
                  }
                  high = high || comparator;
                  low = low || comparator;
                  if (gtfn(comparator.semver, high.semver, options)) {
                    high = comparator;
                  } else if (ltfn(comparator.semver, low.semver, options)) {
                    low = comparator;
                  }
                });

                // If the edge version comparator has a operator then our version
                // isn't outside it
                if (high.operator === comp || high.operator === ecomp) {
                  return false;
                }

                // If the lowest version comparator has an operator and our version
                // is less than it then it isn't higher than the range
                if (
                  (!low.operator || low.operator === comp) &&
                  ltefn(version, low.semver)
                ) {
                  return false;
                } else if (
                  low.operator === ecomp &&
                  ltfn(version, low.semver)
                ) {
                  return false;
                }
              }
              return true;
            }

            exports.prerelease = prerelease;
            function prerelease(version, options) {
              var parsed = parse(version, options);
              return parsed && parsed.prerelease.length
                ? parsed.prerelease
                : null;
            }

            exports.intersects = intersects;
            function intersects(r1, r2, options) {
              r1 = new Range(r1, options);
              r2 = new Range(r2, options);
              return r1.intersects(r2);
            }

            exports.coerce = coerce;
            function coerce(version) {
              if (version instanceof SemVer) {
                return version;
              }

              if (typeof version !== "string") {
                return null;
              }

              var match = version.match(re[COERCE]);

              if (match == null) {
                return null;
              }

              return parse(
                match[1] + "." + (match[2] || "0") + "." + (match[3] || "0")
              );
            }
          }).call(this);
        }).call(this, require("_process"));
      },
      { _process: 425 },
    ],
    429: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var util = require("./util");
        var has = Object.prototype.hasOwnProperty;
        var hasNativeMap = typeof Map !== "undefined";

        /**
         * A data structure which is a combination of an array and a set. Adding a new
         * member is O(1), testing for membership is O(1), and finding the index of an
         * element is O(1). Removing elements from the set is not supported. Only
         * strings are supported for membership.
         */
        function ArraySet() {
          this._array = [];
          this._set = hasNativeMap ? new Map() : Object.create(null);
        }

        /**
         * Static method for creating ArraySet instances from an existing array.
         */
        ArraySet.fromArray = function ArraySet_fromArray(
          aArray,
          aAllowDuplicates
        ) {
          var set = new ArraySet();
          for (var i = 0, len = aArray.length; i < len; i++) {
            set.add(aArray[i], aAllowDuplicates);
          }
          return set;
        };

        /**
         * Return how many unique items are in this ArraySet. If duplicates have been
         * added, than those do not count towards the size.
         *
         * @returns Number
         */
        ArraySet.prototype.size = function ArraySet_size() {
          return hasNativeMap
            ? this._set.size
            : Object.getOwnPropertyNames(this._set).length;
        };

        /**
         * Add the given string to this set.
         *
         * @param String aStr
         */
        ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
          var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
          var isDuplicate = hasNativeMap
            ? this.has(aStr)
            : has.call(this._set, sStr);
          var idx = this._array.length;
          if (!isDuplicate || aAllowDuplicates) {
            this._array.push(aStr);
          }
          if (!isDuplicate) {
            if (hasNativeMap) {
              this._set.set(aStr, idx);
            } else {
              this._set[sStr] = idx;
            }
          }
        };

        /**
         * Is the given string a member of this set?
         *
         * @param String aStr
         */
        ArraySet.prototype.has = function ArraySet_has(aStr) {
          if (hasNativeMap) {
            return this._set.has(aStr);
          } else {
            var sStr = util.toSetString(aStr);
            return has.call(this._set, sStr);
          }
        };

        /**
         * What is the index of the given string in the array?
         *
         * @param String aStr
         */
        ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
          if (hasNativeMap) {
            var idx = this._set.get(aStr);
            if (idx >= 0) {
              return idx;
            }
          } else {
            var sStr = util.toSetString(aStr);
            if (has.call(this._set, sStr)) {
              return this._set[sStr];
            }
          }

          throw new Error('"' + aStr + '" is not in the set.');
        };

        /**
         * What is the element at the given index?
         *
         * @param Number aIdx
         */
        ArraySet.prototype.at = function ArraySet_at(aIdx) {
          if (aIdx >= 0 && aIdx < this._array.length) {
            return this._array[aIdx];
          }
          throw new Error("No element indexed by " + aIdx);
        };

        /**
         * Returns the array representation of this set (which has the proper indices
         * indicated by indexOf). Note that this is a copy of the internal array used
         * for storing the members so that no one can mess with internal state.
         */
        ArraySet.prototype.toArray = function ArraySet_toArray() {
          return this._array.slice();
        };

        exports.ArraySet = ArraySet;
      },
      { "./util": 438 },
    ],
    430: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         *
         * Based on the Base 64 VLQ implementation in Closure Compiler:
         * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
         *
         * Copyright 2011 The Closure Compiler Authors. All rights reserved.
         * Redistribution and use in source and binary forms, with or without
         * modification, are permitted provided that the following conditions are
         * met:
         *
         *  * Redistributions of source code must retain the above copyright
         *    notice, this list of conditions and the following disclaimer.
         *  * Redistributions in binary form must reproduce the above
         *    copyright notice, this list of conditions and the following
         *    disclaimer in the documentation and/or other materials provided
         *    with the distribution.
         *  * Neither the name of Google Inc. nor the names of its
         *    contributors may be used to endorse or promote products derived
         *    from this software without specific prior written permission.
         *
         * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
         * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
         * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
         * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
         * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
         * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
         * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
         * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
         * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
         * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
         * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         */

        var base64 = require("./base64");

        // A single base 64 digit can contain 6 bits of data. For the base 64 variable
        // length quantities we use in the source map spec, the first bit is the sign,
        // the next four bits are the actual value, and the 6th bit is the
        // continuation bit. The continuation bit tells us whether there are more
        // digits in this value following this digit.
        //
        //   Continuation
        //   |    Sign
        //   |    |
        //   V    V
        //   101011

        var VLQ_BASE_SHIFT = 5;

        // binary: 100000
        var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

        // binary: 011111
        var VLQ_BASE_MASK = VLQ_BASE - 1;

        // binary: 100000
        var VLQ_CONTINUATION_BIT = VLQ_BASE;

        /**
         * Converts from a two-complement value to a value where the sign bit is
         * placed in the least significant bit.  For example, as decimals:
         *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
         *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
         */
        function toVLQSigned(aValue) {
          return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
        }

        /**
         * Converts to a two-complement value from a value where the sign bit is
         * placed in the least significant bit.  For example, as decimals:
         *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
         *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
         */
        function fromVLQSigned(aValue) {
          var isNegative = (aValue & 1) === 1;
          var shifted = aValue >> 1;
          return isNegative ? -shifted : shifted;
        }

        /**
         * Returns the base 64 VLQ encoded value.
         */
        exports.encode = function base64VLQ_encode(aValue) {
          var encoded = "";
          var digit;

          var vlq = toVLQSigned(aValue);

          do {
            digit = vlq & VLQ_BASE_MASK;
            vlq >>>= VLQ_BASE_SHIFT;
            if (vlq > 0) {
              // There are still more digits in this value, so we must make sure the
              // continuation bit is marked.
              digit |= VLQ_CONTINUATION_BIT;
            }
            encoded += base64.encode(digit);
          } while (vlq > 0);

          return encoded;
        };

        /**
         * Decodes the next base 64 VLQ value from the given string and returns the
         * value and the rest of the string via the out parameter.
         */
        exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
          var strLen = aStr.length;
          var result = 0;
          var shift = 0;
          var continuation, digit;

          do {
            if (aIndex >= strLen) {
              throw new Error("Expected more digits in base 64 VLQ value.");
            }

            digit = base64.decode(aStr.charCodeAt(aIndex++));
            if (digit === -1) {
              throw new Error(
                "Invalid base64 digit: " + aStr.charAt(aIndex - 1)
              );
            }

            continuation = !!(digit & VLQ_CONTINUATION_BIT);
            digit &= VLQ_BASE_MASK;
            result = result + (digit << shift);
            shift += VLQ_BASE_SHIFT;
          } while (continuation);

          aOutParam.value = fromVLQSigned(result);
          aOutParam.rest = aIndex;
        };
      },
      { "./base64": 431 },
    ],
    431: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var intToCharMap =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(
            ""
          );

        /**
         * Encode an integer in the range of 0 to 63 to a single base 64 digit.
         */
        exports.encode = function (number) {
          if (0 <= number && number < intToCharMap.length) {
            return intToCharMap[number];
          }
          throw new TypeError("Must be between 0 and 63: " + number);
        };

        /**
         * Decode a single base 64 character code digit to an integer. Returns -1 on
         * failure.
         */
        exports.decode = function (charCode) {
          var bigA = 65; // 'A'
          var bigZ = 90; // 'Z'

          var littleA = 97; // 'a'
          var littleZ = 122; // 'z'

          var zero = 48; // '0'
          var nine = 57; // '9'

          var plus = 43; // '+'
          var slash = 47; // '/'

          var littleOffset = 26;
          var numberOffset = 52;

          // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
          if (bigA <= charCode && charCode <= bigZ) {
            return charCode - bigA;
          }

          // 26 - 51: abcdefghijklmnopqrstuvwxyz
          if (littleA <= charCode && charCode <= littleZ) {
            return charCode - littleA + littleOffset;
          }

          // 52 - 61: 0123456789
          if (zero <= charCode && charCode <= nine) {
            return charCode - zero + numberOffset;
          }

          // 62: +
          if (charCode == plus) {
            return 62;
          }

          // 63: /
          if (charCode == slash) {
            return 63;
          }

          // Invalid base64 digit.
          return -1;
        };
      },
      {},
    ],
    432: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        exports.GREATEST_LOWER_BOUND = 1;
        exports.LEAST_UPPER_BOUND = 2;

        /**
         * Recursive implementation of binary search.
         *
         * @param aLow Indices here and lower do not contain the needle.
         * @param aHigh Indices here and higher do not contain the needle.
         * @param aNeedle The element being searched for.
         * @param aHaystack The non-empty array being searched.
         * @param aCompare Function which takes two elements and returns -1, 0, or 1.
         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         */
        function recursiveSearch(
          aLow,
          aHigh,
          aNeedle,
          aHaystack,
          aCompare,
          aBias
        ) {
          // This function terminates when one of the following is true:
          //
          //   1. We find the exact element we are looking for.
          //
          //   2. We did not find the exact element, but we can return the index of
          //      the next-closest element.
          //
          //   3. We did not find the exact element, and there is no next-closest
          //      element than the one we are searching for, so we return -1.
          var mid = Math.floor((aHigh - aLow) / 2) + aLow;
          var cmp = aCompare(aNeedle, aHaystack[mid], true);
          if (cmp === 0) {
            // Found the element we are looking for.
            return mid;
          } else if (cmp > 0) {
            // Our needle is greater than aHaystack[mid].
            if (aHigh - mid > 1) {
              // The element is in the upper half.
              return recursiveSearch(
                mid,
                aHigh,
                aNeedle,
                aHaystack,
                aCompare,
                aBias
              );
            }

            // The exact needle element was not found in this haystack. Determine if
            // we are in termination case (3) or (2) and return the appropriate thing.
            if (aBias == exports.LEAST_UPPER_BOUND) {
              return aHigh < aHaystack.length ? aHigh : -1;
            } else {
              return mid;
            }
          } else {
            // Our needle is less than aHaystack[mid].
            if (mid - aLow > 1) {
              // The element is in the lower half.
              return recursiveSearch(
                aLow,
                mid,
                aNeedle,
                aHaystack,
                aCompare,
                aBias
              );
            }

            // we are in termination case (3) or (2) and return the appropriate thing.
            if (aBias == exports.LEAST_UPPER_BOUND) {
              return mid;
            } else {
              return aLow < 0 ? -1 : aLow;
            }
          }
        }

        /**
         * This is an implementation of binary search which will always try and return
         * the index of the closest element if there is no exact hit. This is because
         * mappings between original and generated line/col pairs are single points,
         * and there is an implicit region between each of them, so a miss just means
         * that you aren't on the very start of a region.
         *
         * @param aNeedle The element you are looking for.
         * @param aHaystack The array that is being searched.
         * @param aCompare A function which takes the needle and an element in the
         *     array and returns -1, 0, or 1 depending on whether the needle is less
         *     than, equal to, or greater than the element, respectively.
         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
         */
        exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
          if (aHaystack.length === 0) {
            return -1;
          }

          var index = recursiveSearch(
            -1,
            aHaystack.length,
            aNeedle,
            aHaystack,
            aCompare,
            aBias || exports.GREATEST_LOWER_BOUND
          );
          if (index < 0) {
            return -1;
          }

          // We have found either the exact element, or the next-closest element than
          // the one we are searching for. However, there may be more than one such
          // element. Make sure we always return the smallest of these.
          while (index - 1 >= 0) {
            if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
              break;
            }
            --index;
          }

          return index;
        };
      },
      {},
    ],
    433: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2014 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var util = require("./util");

        /**
         * Determine whether mappingB is after mappingA with respect to generated
         * position.
         */
        function generatedPositionAfter(mappingA, mappingB) {
          // Optimized for most common case
          var lineA = mappingA.generatedLine;
          var lineB = mappingB.generatedLine;
          var columnA = mappingA.generatedColumn;
          var columnB = mappingB.generatedColumn;
          return (
            lineB > lineA ||
            (lineB == lineA && columnB >= columnA) ||
            util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0
          );
        }

        /**
         * A data structure to provide a sorted view of accumulated mappings in a
         * performance conscious manner. It trades a neglibable overhead in general
         * case for a large speedup in case of mappings being added in order.
         */
        function MappingList() {
          this._array = [];
          this._sorted = true;
          // Serves as infimum
          this._last = { generatedLine: -1, generatedColumn: 0 };
        }

        /**
         * Iterate through internal items. This method takes the same arguments that
         * `Array.prototype.forEach` takes.
         *
         * NOTE: The order of the mappings is NOT guaranteed.
         */
        MappingList.prototype.unsortedForEach = function MappingList_forEach(
          aCallback,
          aThisArg
        ) {
          this._array.forEach(aCallback, aThisArg);
        };

        /**
         * Add the given source mapping.
         *
         * @param Object aMapping
         */
        MappingList.prototype.add = function MappingList_add(aMapping) {
          if (generatedPositionAfter(this._last, aMapping)) {
            this._last = aMapping;
            this._array.push(aMapping);
          } else {
            this._sorted = false;
            this._array.push(aMapping);
          }
        };

        /**
         * Returns the flat, sorted array of mappings. The mappings are sorted by
         * generated position.
         *
         * WARNING: This method returns internal data without copying, for
         * performance. The return value must NOT be mutated, and should be treated as
         * an immutable borrow. If you want to take ownership, you must make your own
         * copy.
         */
        MappingList.prototype.toArray = function MappingList_toArray() {
          if (!this._sorted) {
            this._array.sort(util.compareByGeneratedPositionsInflated);
            this._sorted = true;
          }
          return this._array;
        };

        exports.MappingList = MappingList;
      },
      { "./util": 438 },
    ],
    434: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        // It turns out that some (most?) JavaScript engines don't self-host
        // `Array.prototype.sort`. This makes sense because C++ will likely remain
        // faster than JS when doing raw CPU-intensive sorting. However, when using a
        // custom comparator function, calling back and forth between the VM's C++ and
        // JIT'd JS is rather slow *and* loses JIT type information, resulting in
        // worse generated code for the comparator function than would be optimal. In
        // fact, when sorting with a comparator, these costs outweigh the benefits of
        // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
        // a ~3500ms mean speed-up in `bench/bench.html`.

        /**
         * Swap the elements indexed by `x` and `y` in the array `ary`.
         *
         * @param {Array} ary
         *        The array.
         * @param {Number} x
         *        The index of the first item.
         * @param {Number} y
         *        The index of the second item.
         */
        function swap(ary, x, y) {
          var temp = ary[x];
          ary[x] = ary[y];
          ary[y] = temp;
        }

        /**
         * Returns a random integer within the range `low .. high` inclusive.
         *
         * @param {Number} low
         *        The lower bound on the range.
         * @param {Number} high
         *        The upper bound on the range.
         */
        function randomIntInRange(low, high) {
          return Math.round(low + Math.random() * (high - low));
        }

        /**
         * The Quick Sort algorithm.
         *
         * @param {Array} ary
         *        An array to sort.
         * @param {function} comparator
         *        Function to use to compare two items.
         * @param {Number} p
         *        Start index of the array
         * @param {Number} r
         *        End index of the array
         */
        function doQuickSort(ary, comparator, p, r) {
          // If our lower bound is less than our upper bound, we (1) partition the
          // array into two pieces and (2) recurse on each half. If it is not, this is
          // the empty array and our base case.

          if (p < r) {
            // (1) Partitioning.
            //
            // The partitioning chooses a pivot between `p` and `r` and moves all
            // elements that are less than or equal to the pivot to the before it, and
            // all the elements that are greater than it after it. The effect is that
            // once partition is done, the pivot is in the exact place it will be when
            // the array is put in sorted order, and it will not need to be moved
            // again. This runs in O(n) time.

            // Always choose a random pivot so that an input array which is reverse
            // sorted does not cause O(n^2) running time.
            var pivotIndex = randomIntInRange(p, r);
            var i = p - 1;

            swap(ary, pivotIndex, r);
            var pivot = ary[r];

            // Immediately after `j` is incremented in this loop, the following hold
            // true:
            //
            //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
            //
            //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
            for (var j = p; j < r; j++) {
              if (comparator(ary[j], pivot) <= 0) {
                i += 1;
                swap(ary, i, j);
              }
            }

            swap(ary, i + 1, j);
            var q = i + 1;

            // (2) Recurse on each half.

            doQuickSort(ary, comparator, p, q - 1);
            doQuickSort(ary, comparator, q + 1, r);
          }
        }

        /**
         * Sort the given array in-place with the given comparator function.
         *
         * @param {Array} ary
         *        An array to sort.
         * @param {function} comparator
         *        Function to use to compare two items.
         */
        exports.quickSort = function (ary, comparator) {
          doQuickSort(ary, comparator, 0, ary.length - 1);
        };
      },
      {},
    ],
    435: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var util = require("./util");
        var binarySearch = require("./binary-search");
        var ArraySet = require("./array-set").ArraySet;
        var base64VLQ = require("./base64-vlq");
        var quickSort = require("./quick-sort").quickSort;

        function SourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;
          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          return sourceMap.sections != null
            ? new IndexedSourceMapConsumer(sourceMap)
            : new BasicSourceMapConsumer(sourceMap);
        }

        SourceMapConsumer.fromSourceMap = function (aSourceMap) {
          return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
        };

        /**
         * The version of the source mapping spec that we are consuming.
         */
        SourceMapConsumer.prototype._version = 3;

        // `__generatedMappings` and `__originalMappings` are arrays that hold the
        // parsed mapping coordinates from the source map's "mappings" attribute. They
        // are lazily instantiated, accessed via the `_generatedMappings` and
        // `_originalMappings` getters respectively, and we only parse the mappings
        // and create these arrays once queried for a source location. We jump through
        // these hoops because there can be many thousands of mappings, and parsing
        // them is expensive, so we only want to do it if we must.
        //
        // Each object in the arrays is of the form:
        //
        //     {
        //       generatedLine: The line number in the generated code,
        //       generatedColumn: The column number in the generated code,
        //       source: The path to the original source file that generated this
        //               chunk of code,
        //       originalLine: The line number in the original source that
        //                     corresponds to this chunk of generated code,
        //       originalColumn: The column number in the original source that
        //                       corresponds to this chunk of generated code,
        //       name: The name of the original symbol which generated this chunk of
        //             code.
        //     }
        //
        // All properties except for `generatedLine` and `generatedColumn` can be
        // `null`.
        //
        // `_generatedMappings` is ordered by the generated positions.
        //
        // `_originalMappings` is ordered by the original positions.

        SourceMapConsumer.prototype.__generatedMappings = null;
        Object.defineProperty(
          SourceMapConsumer.prototype,
          "_generatedMappings",
          {
            get: function () {
              if (!this.__generatedMappings) {
                this._parseMappings(this._mappings, this.sourceRoot);
              }

              return this.__generatedMappings;
            },
          }
        );

        SourceMapConsumer.prototype.__originalMappings = null;
        Object.defineProperty(
          SourceMapConsumer.prototype,
          "_originalMappings",
          {
            get: function () {
              if (!this.__originalMappings) {
                this._parseMappings(this._mappings, this.sourceRoot);
              }

              return this.__originalMappings;
            },
          }
        );

        SourceMapConsumer.prototype._charIsMappingSeparator =
          function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
            var c = aStr.charAt(index);
            return c === ";" || c === ",";
          };

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        SourceMapConsumer.prototype._parseMappings =
          function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
            throw new Error("Subclasses must implement _parseMappings");
          };

        SourceMapConsumer.GENERATED_ORDER = 1;
        SourceMapConsumer.ORIGINAL_ORDER = 2;

        SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
        SourceMapConsumer.LEAST_UPPER_BOUND = 2;

        /**
         * Iterate over each mapping between an original source/line/column and a
         * generated line/column in this source map.
         *
         * @param Function aCallback
         *        The function that is called with each mapping.
         * @param Object aContext
         *        Optional. If specified, this object will be the value of `this` every
         *        time that `aCallback` is called.
         * @param aOrder
         *        Either `SourceMapConsumer.GENERATED_ORDER` or
         *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
         *        iterate over the mappings sorted by the generated file's line/column
         *        order or the original's source/line/column order, respectively. Defaults to
         *        `SourceMapConsumer.GENERATED_ORDER`.
         */
        SourceMapConsumer.prototype.eachMapping =
          function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
            var context = aContext || null;
            var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

            var mappings;
            switch (order) {
              case SourceMapConsumer.GENERATED_ORDER:
                mappings = this._generatedMappings;
                break;
              case SourceMapConsumer.ORIGINAL_ORDER:
                mappings = this._originalMappings;
                break;
              default:
                throw new Error("Unknown order of iteration.");
            }

            var sourceRoot = this.sourceRoot;
            mappings
              .map(function (mapping) {
                var source =
                  mapping.source === null
                    ? null
                    : this._sources.at(mapping.source);
                if (source != null && sourceRoot != null) {
                  source = util.join(sourceRoot, source);
                }
                return {
                  source: source,
                  generatedLine: mapping.generatedLine,
                  generatedColumn: mapping.generatedColumn,
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name:
                    mapping.name === null ? null : this._names.at(mapping.name),
                };
              }, this)
              .forEach(aCallback, context);
          };

        /**
         * Returns all generated line and column information for the original source,
         * line, and column provided. If no column is provided, returns all mappings
         * corresponding to a either the line we are searching for or the next
         * closest line that has any mappings. Otherwise, returns all mappings
         * corresponding to the given line and either the column we are searching for
         * or the next closest column that has any offsets.
         *
         * The only argument is an object with the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: Optional. the column number in the original source.
         *
         * and an array of objects is returned, each with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        SourceMapConsumer.prototype.allGeneratedPositionsFor =
          function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
            var line = util.getArg(aArgs, "line");

            // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
            // returns the index of the closest mapping less than the needle. By
            // setting needle.originalColumn to 0, we thus find the last mapping for
            // the given line, provided such a mapping exists.
            var needle = {
              source: util.getArg(aArgs, "source"),
              originalLine: line,
              originalColumn: util.getArg(aArgs, "column", 0),
            };

            if (this.sourceRoot != null) {
              needle.source = util.relative(this.sourceRoot, needle.source);
            }
            if (!this._sources.has(needle.source)) {
              return [];
            }
            needle.source = this._sources.indexOf(needle.source);

            var mappings = [];

            var index = this._findMapping(
              needle,
              this._originalMappings,
              "originalLine",
              "originalColumn",
              util.compareByOriginalPositions,
              binarySearch.LEAST_UPPER_BOUND
            );
            if (index >= 0) {
              var mapping = this._originalMappings[index];

              if (aArgs.column === undefined) {
                var originalLine = mapping.originalLine;

                // Iterate until either we run out of mappings, or we run into
                // a mapping for a different line than the one we found. Since
                // mappings are sorted, this is guaranteed to find all mappings for
                // the line we found.
                while (mapping && mapping.originalLine === originalLine) {
                  mappings.push({
                    line: util.getArg(mapping, "generatedLine", null),
                    column: util.getArg(mapping, "generatedColumn", null),
                    lastColumn: util.getArg(
                      mapping,
                      "lastGeneratedColumn",
                      null
                    ),
                  });

                  mapping = this._originalMappings[++index];
                }
              } else {
                var originalColumn = mapping.originalColumn;

                // Iterate until either we run out of mappings, or we run into
                // a mapping for a different line than the one we were searching for.
                // Since mappings are sorted, this is guaranteed to find all mappings for
                // the line we are searching for.
                while (
                  mapping &&
                  mapping.originalLine === line &&
                  mapping.originalColumn == originalColumn
                ) {
                  mappings.push({
                    line: util.getArg(mapping, "generatedLine", null),
                    column: util.getArg(mapping, "generatedColumn", null),
                    lastColumn: util.getArg(
                      mapping,
                      "lastGeneratedColumn",
                      null
                    ),
                  });

                  mapping = this._originalMappings[++index];
                }
              }
            }

            return mappings;
          };

        exports.SourceMapConsumer = SourceMapConsumer;

        /**
         * A BasicSourceMapConsumer instance represents a parsed source map which we can
         * query for information about the original file positions by giving it a file
         * position in the generated source.
         *
         * The only parameter is the raw source map (either as a JSON string, or
         * already parsed to an object). According to the spec, source maps have the
         * following attributes:
         *
         *   - version: Which version of the source map spec this map is following.
         *   - sources: An array of URLs to the original source files.
         *   - names: An array of identifiers which can be referrenced by individual mappings.
         *   - sourceRoot: Optional. The URL root from which all sources are relative.
         *   - sourcesContent: Optional. An array of contents of the original source files.
         *   - mappings: A string of base64 VLQs which contain the actual mappings.
         *   - file: Optional. The generated file this source map is associated with.
         *
         * Here is an example source map, taken from the source map spec[0]:
         *
         *     {
         *       version : 3,
         *       file: "out.js",
         *       sourceRoot : "",
         *       sources: ["foo.js", "bar.js"],
         *       names: ["src", "maps", "are", "fun"],
         *       mappings: "AA,AB;;ABCDE;"
         *     }
         *
         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
         */
        function BasicSourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;
          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          var version = util.getArg(sourceMap, "version");
          var sources = util.getArg(sourceMap, "sources");
          // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
          // requires the array) to play nice here.
          var names = util.getArg(sourceMap, "names", []);
          var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
          var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
          var mappings = util.getArg(sourceMap, "mappings");
          var file = util.getArg(sourceMap, "file", null);

          // Once again, Sass deviates from the spec and supplies the version as a
          // string rather than a number, so we use loose equality checking here.
          if (version != this._version) {
            throw new Error("Unsupported version: " + version);
          }

          sources = sources
            .map(String)
            // Some source maps produce relative source paths like "./foo.js" instead of
            // "foo.js".  Normalize these first so that future comparisons will succeed.
            // See bugzil.la/1090768.
            .map(util.normalize)
            // Always ensure that absolute sources are internally stored relative to
            // the source root, if the source root is absolute. Not doing this would
            // be particularly problematic when the source root is a prefix of the
            // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
            .map(function (source) {
              return sourceRoot &&
                util.isAbsolute(sourceRoot) &&
                util.isAbsolute(source)
                ? util.relative(sourceRoot, source)
                : source;
            });

          // Pass `true` below to allow duplicate names and sources. While source maps
          // are intended to be compressed and deduplicated, the TypeScript compiler
          // sometimes generates source maps with duplicates in them. See Github issue
          // #72 and bugzil.la/889492.
          this._names = ArraySet.fromArray(names.map(String), true);
          this._sources = ArraySet.fromArray(sources, true);

          this.sourceRoot = sourceRoot;
          this.sourcesContent = sourcesContent;
          this._mappings = mappings;
          this.file = file;
        }

        BasicSourceMapConsumer.prototype = Object.create(
          SourceMapConsumer.prototype
        );
        BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

        /**
         * Create a BasicSourceMapConsumer from a SourceMapGenerator.
         *
         * @param SourceMapGenerator aSourceMap
         *        The source map that will be consumed.
         * @returns BasicSourceMapConsumer
         */
        BasicSourceMapConsumer.fromSourceMap =
          function SourceMapConsumer_fromSourceMap(aSourceMap) {
            var smc = Object.create(BasicSourceMapConsumer.prototype);

            var names = (smc._names = ArraySet.fromArray(
              aSourceMap._names.toArray(),
              true
            ));
            var sources = (smc._sources = ArraySet.fromArray(
              aSourceMap._sources.toArray(),
              true
            ));
            smc.sourceRoot = aSourceMap._sourceRoot;
            smc.sourcesContent = aSourceMap._generateSourcesContent(
              smc._sources.toArray(),
              smc.sourceRoot
            );
            smc.file = aSourceMap._file;

            // Because we are modifying the entries (by converting string sources and
            // names to indices into the sources and names ArraySets), we have to make
            // a copy of the entry or else bad things happen. Shared mutable state
            // strikes again! See github issue #191.

            var generatedMappings = aSourceMap._mappings.toArray().slice();
            var destGeneratedMappings = (smc.__generatedMappings = []);
            var destOriginalMappings = (smc.__originalMappings = []);

            for (
              var i = 0, length = generatedMappings.length;
              i < length;
              i++
            ) {
              var srcMapping = generatedMappings[i];
              var destMapping = new Mapping();
              destMapping.generatedLine = srcMapping.generatedLine;
              destMapping.generatedColumn = srcMapping.generatedColumn;

              if (srcMapping.source) {
                destMapping.source = sources.indexOf(srcMapping.source);
                destMapping.originalLine = srcMapping.originalLine;
                destMapping.originalColumn = srcMapping.originalColumn;

                if (srcMapping.name) {
                  destMapping.name = names.indexOf(srcMapping.name);
                }

                destOriginalMappings.push(destMapping);
              }

              destGeneratedMappings.push(destMapping);
            }

            quickSort(smc.__originalMappings, util.compareByOriginalPositions);

            return smc;
          };

        /**
         * The version of the source mapping spec that we are consuming.
         */
        BasicSourceMapConsumer.prototype._version = 3;

        /**
         * The list of original sources.
         */
        Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
          get: function () {
            return this._sources.toArray().map(function (s) {
              return this.sourceRoot != null
                ? util.join(this.sourceRoot, s)
                : s;
            }, this);
          },
        });

        /**
         * Provide the JIT with a nice shape / hidden class.
         */
        function Mapping() {
          this.generatedLine = 0;
          this.generatedColumn = 0;
          this.source = null;
          this.originalLine = null;
          this.originalColumn = null;
          this.name = null;
        }

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        BasicSourceMapConsumer.prototype._parseMappings =
          function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
            var generatedLine = 1;
            var previousGeneratedColumn = 0;
            var previousOriginalLine = 0;
            var previousOriginalColumn = 0;
            var previousSource = 0;
            var previousName = 0;
            var length = aStr.length;
            var index = 0;
            var cachedSegments = {};
            var temp = {};
            var originalMappings = [];
            var generatedMappings = [];
            var mapping, str, segment, end, value;

            while (index < length) {
              if (aStr.charAt(index) === ";") {
                generatedLine++;
                index++;
                previousGeneratedColumn = 0;
              } else if (aStr.charAt(index) === ",") {
                index++;
              } else {
                mapping = new Mapping();
                mapping.generatedLine = generatedLine;

                // Because each offset is encoded relative to the previous one,
                // many segments often have the same encoding. We can exploit this
                // fact by caching the parsed variable length fields of each segment,
                // allowing us to avoid a second parse if we encounter the same
                // segment again.
                for (end = index; end < length; end++) {
                  if (this._charIsMappingSeparator(aStr, end)) {
                    break;
                  }
                }
                str = aStr.slice(index, end);

                segment = cachedSegments[str];
                if (segment) {
                  index += str.length;
                } else {
                  segment = [];
                  while (index < end) {
                    base64VLQ.decode(aStr, index, temp);
                    value = temp.value;
                    index = temp.rest;
                    segment.push(value);
                  }

                  if (segment.length === 2) {
                    throw new Error("Found a source, but no line and column");
                  }

                  if (segment.length === 3) {
                    throw new Error("Found a source and line, but no column");
                  }

                  cachedSegments[str] = segment;
                }

                // Generated column.
                mapping.generatedColumn = previousGeneratedColumn + segment[0];
                previousGeneratedColumn = mapping.generatedColumn;

                if (segment.length > 1) {
                  // Original source.
                  mapping.source = previousSource + segment[1];
                  previousSource += segment[1];

                  // Original line.
                  mapping.originalLine = previousOriginalLine + segment[2];
                  previousOriginalLine = mapping.originalLine;
                  // Lines are stored 0-based
                  mapping.originalLine += 1;

                  // Original column.
                  mapping.originalColumn = previousOriginalColumn + segment[3];
                  previousOriginalColumn = mapping.originalColumn;

                  if (segment.length > 4) {
                    // Original name.
                    mapping.name = previousName + segment[4];
                    previousName += segment[4];
                  }
                }

                generatedMappings.push(mapping);
                if (typeof mapping.originalLine === "number") {
                  originalMappings.push(mapping);
                }
              }
            }

            quickSort(
              generatedMappings,
              util.compareByGeneratedPositionsDeflated
            );
            this.__generatedMappings = generatedMappings;

            quickSort(originalMappings, util.compareByOriginalPositions);
            this.__originalMappings = originalMappings;
          };

        /**
         * Find the mapping that best matches the hypothetical "needle" mapping that
         * we are searching for in the given "haystack" of mappings.
         */
        BasicSourceMapConsumer.prototype._findMapping =
          function SourceMapConsumer_findMapping(
            aNeedle,
            aMappings,
            aLineName,
            aColumnName,
            aComparator,
            aBias
          ) {
            // To return the position we are searching for, we must first find the
            // mapping for the given position and then return the opposite position it
            // points to. Because the mappings are sorted, we can use binary search to
            // find the best mapping.

            if (aNeedle[aLineName] <= 0) {
              throw new TypeError(
                "Line must be greater than or equal to 1, got " +
                  aNeedle[aLineName]
              );
            }
            if (aNeedle[aColumnName] < 0) {
              throw new TypeError(
                "Column must be greater than or equal to 0, got " +
                  aNeedle[aColumnName]
              );
            }

            return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
          };

        /**
         * Compute the last column for each generated mapping. The last column is
         * inclusive.
         */
        BasicSourceMapConsumer.prototype.computeColumnSpans =
          function SourceMapConsumer_computeColumnSpans() {
            for (
              var index = 0;
              index < this._generatedMappings.length;
              ++index
            ) {
              var mapping = this._generatedMappings[index];

              // Mappings do not contain a field for the last generated columnt. We
              // can come up with an optimistic estimate, however, by assuming that
              // mappings are contiguous (i.e. given two consecutive mappings, the
              // first mapping ends where the second one starts).
              if (index + 1 < this._generatedMappings.length) {
                var nextMapping = this._generatedMappings[index + 1];

                if (mapping.generatedLine === nextMapping.generatedLine) {
                  mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                  continue;
                }
              }

              // The last mapping for each line spans the entire line.
              mapping.lastGeneratedColumn = Infinity;
            }
          };

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
        BasicSourceMapConsumer.prototype.originalPositionFor =
          function SourceMapConsumer_originalPositionFor(aArgs) {
            var needle = {
              generatedLine: util.getArg(aArgs, "line"),
              generatedColumn: util.getArg(aArgs, "column"),
            };

            var index = this._findMapping(
              needle,
              this._generatedMappings,
              "generatedLine",
              "generatedColumn",
              util.compareByGeneratedPositionsDeflated,
              util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
            );

            if (index >= 0) {
              var mapping = this._generatedMappings[index];

              if (mapping.generatedLine === needle.generatedLine) {
                var source = util.getArg(mapping, "source", null);
                if (source !== null) {
                  source = this._sources.at(source);
                  if (this.sourceRoot != null) {
                    source = util.join(this.sourceRoot, source);
                  }
                }
                var name = util.getArg(mapping, "name", null);
                if (name !== null) {
                  name = this._names.at(name);
                }
                return {
                  source: source,
                  line: util.getArg(mapping, "originalLine", null),
                  column: util.getArg(mapping, "originalColumn", null),
                  name: name,
                };
              }
            }

            return {
              source: null,
              line: null,
              column: null,
              name: null,
            };
          };

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
          function BasicSourceMapConsumer_hasContentsOfAllSources() {
            if (!this.sourcesContent) {
              return false;
            }
            return (
              this.sourcesContent.length >= this._sources.size() &&
              !this.sourcesContent.some(function (sc) {
                return sc == null;
              })
            );
          };

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * available.
         */
        BasicSourceMapConsumer.prototype.sourceContentFor =
          function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
            if (!this.sourcesContent) {
              return null;
            }

            if (this.sourceRoot != null) {
              aSource = util.relative(this.sourceRoot, aSource);
            }

            if (this._sources.has(aSource)) {
              return this.sourcesContent[this._sources.indexOf(aSource)];
            }

            var url;
            if (
              this.sourceRoot != null &&
              (url = util.urlParse(this.sourceRoot))
            ) {
              // XXX: file:// URIs and absolute paths lead to unexpected behavior for
              // many users. We can help them out when they expect file:// URIs to
              // behave like it would if they were running a local HTTP server. See
              // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
              var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
              if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
                return this.sourcesContent[
                  this._sources.indexOf(fileUriAbsPath)
                ];
              }

              if (
                (!url.path || url.path == "/") &&
                this._sources.has("/" + aSource)
              ) {
                return this.sourcesContent[
                  this._sources.indexOf("/" + aSource)
                ];
              }
            }

            // This function is used recursively from
            // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
            // don't want to throw if we can't find the source - we just want to
            // return null, so we provide a flag to exit gracefully.
            if (nullOnMissing) {
              return null;
            } else {
              throw new Error('"' + aSource + '" is not in the SourceMap.');
            }
          };

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: The column number in the original source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        BasicSourceMapConsumer.prototype.generatedPositionFor =
          function SourceMapConsumer_generatedPositionFor(aArgs) {
            var source = util.getArg(aArgs, "source");
            if (this.sourceRoot != null) {
              source = util.relative(this.sourceRoot, source);
            }
            if (!this._sources.has(source)) {
              return {
                line: null,
                column: null,
                lastColumn: null,
              };
            }
            source = this._sources.indexOf(source);

            var needle = {
              source: source,
              originalLine: util.getArg(aArgs, "line"),
              originalColumn: util.getArg(aArgs, "column"),
            };

            var index = this._findMapping(
              needle,
              this._originalMappings,
              "originalLine",
              "originalColumn",
              util.compareByOriginalPositions,
              util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
            );

            if (index >= 0) {
              var mapping = this._originalMappings[index];

              if (mapping.source === needle.source) {
                return {
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn: util.getArg(mapping, "lastGeneratedColumn", null),
                };
              }
            }

            return {
              line: null,
              column: null,
              lastColumn: null,
            };
          };

        exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

        /**
         * An IndexedSourceMapConsumer instance represents a parsed source map which
         * we can query for information. It differs from BasicSourceMapConsumer in
         * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
         * input.
         *
         * The only parameter is a raw source map (either as a JSON string, or already
         * parsed to an object). According to the spec for indexed source maps, they
         * have the following attributes:
         *
         *   - version: Which version of the source map spec this map is following.
         *   - file: Optional. The generated file this source map is associated with.
         *   - sections: A list of section definitions.
         *
         * Each value under the "sections" field has two fields:
         *   - offset: The offset into the original specified at which this section
         *       begins to apply, defined as an object with a "line" and "column"
         *       field.
         *   - map: A source map definition. This source map could also be indexed,
         *       but doesn't have to be.
         *
         * Instead of the "map" field, it's also possible to have a "url" field
         * specifying a URL to retrieve a source map from, but that's currently
         * unsupported.
         *
         * Here's an example source map, taken from the source map spec[0], but
         * modified to omit a section which uses the "url" field.
         *
         *  {
         *    version : 3,
         *    file: "app.js",
         *    sections: [{
         *      offset: {line:100, column:10},
         *      map: {
         *        version : 3,
         *        file: "section.js",
         *        sources: ["foo.js", "bar.js"],
         *        names: ["src", "maps", "are", "fun"],
         *        mappings: "AAAA,E;;ABCDE;"
         *      }
         *    }],
         *  }
         *
         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
         */
        function IndexedSourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;
          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          var version = util.getArg(sourceMap, "version");
          var sections = util.getArg(sourceMap, "sections");

          if (version != this._version) {
            throw new Error("Unsupported version: " + version);
          }

          this._sources = new ArraySet();
          this._names = new ArraySet();

          var lastOffset = {
            line: -1,
            column: 0,
          };
          this._sections = sections.map(function (s) {
            if (s.url) {
              // The url field will require support for asynchronicity.
              // See https://github.com/mozilla/source-map/issues/16
              throw new Error(
                "Support for url field in sections not implemented."
              );
            }
            var offset = util.getArg(s, "offset");
            var offsetLine = util.getArg(offset, "line");
            var offsetColumn = util.getArg(offset, "column");

            if (
              offsetLine < lastOffset.line ||
              (offsetLine === lastOffset.line &&
                offsetColumn < lastOffset.column)
            ) {
              throw new Error(
                "Section offsets must be ordered and non-overlapping."
              );
            }
            lastOffset = offset;

            return {
              generatedOffset: {
                // The offset fields are 0-based, but we use 1-based indices when
                // encoding/decoding from VLQ.
                generatedLine: offsetLine + 1,
                generatedColumn: offsetColumn + 1,
              },
              consumer: new SourceMapConsumer(util.getArg(s, "map")),
            };
          });
        }

        IndexedSourceMapConsumer.prototype = Object.create(
          SourceMapConsumer.prototype
        );
        IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

        /**
         * The version of the source mapping spec that we are consuming.
         */
        IndexedSourceMapConsumer.prototype._version = 3;

        /**
         * The list of original sources.
         */
        Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
          get: function () {
            var sources = [];
            for (var i = 0; i < this._sections.length; i++) {
              for (
                var j = 0;
                j < this._sections[i].consumer.sources.length;
                j++
              ) {
                sources.push(this._sections[i].consumer.sources[j]);
              }
            }
            return sources;
          },
        });

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
        IndexedSourceMapConsumer.prototype.originalPositionFor =
          function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
            var needle = {
              generatedLine: util.getArg(aArgs, "line"),
              generatedColumn: util.getArg(aArgs, "column"),
            };

            // Find the section containing the generated position we're trying to map
            // to an original position.
            var sectionIndex = binarySearch.search(
              needle,
              this._sections,
              function (needle, section) {
                var cmp =
                  needle.generatedLine - section.generatedOffset.generatedLine;
                if (cmp) {
                  return cmp;
                }

                return (
                  needle.generatedColumn -
                  section.generatedOffset.generatedColumn
                );
              }
            );
            var section = this._sections[sectionIndex];

            if (!section) {
              return {
                source: null,
                line: null,
                column: null,
                name: null,
              };
            }

            return section.consumer.originalPositionFor({
              line:
                needle.generatedLine -
                (section.generatedOffset.generatedLine - 1),
              column:
                needle.generatedColumn -
                (section.generatedOffset.generatedLine === needle.generatedLine
                  ? section.generatedOffset.generatedColumn - 1
                  : 0),
              bias: aArgs.bias,
            });
          };

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
          function IndexedSourceMapConsumer_hasContentsOfAllSources() {
            return this._sections.every(function (s) {
              return s.consumer.hasContentsOfAllSources();
            });
          };

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * available.
         */
        IndexedSourceMapConsumer.prototype.sourceContentFor =
          function IndexedSourceMapConsumer_sourceContentFor(
            aSource,
            nullOnMissing
          ) {
            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];

              var content = section.consumer.sourceContentFor(aSource, true);
              if (content) {
                return content;
              }
            }
            if (nullOnMissing) {
              return null;
            } else {
              throw new Error('"' + aSource + '" is not in the SourceMap.');
            }
          };

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: The column number in the original source.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        IndexedSourceMapConsumer.prototype.generatedPositionFor =
          function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];

              // Only consider this section if the requested source is in the list of
              // sources of the consumer.
              if (
                section.consumer.sources.indexOf(
                  util.getArg(aArgs, "source")
                ) === -1
              ) {
                continue;
              }
              var generatedPosition =
                section.consumer.generatedPositionFor(aArgs);
              if (generatedPosition) {
                var ret = {
                  line:
                    generatedPosition.line +
                    (section.generatedOffset.generatedLine - 1),
                  column:
                    generatedPosition.column +
                    (section.generatedOffset.generatedLine ===
                    generatedPosition.line
                      ? section.generatedOffset.generatedColumn - 1
                      : 0),
                };
                return ret;
              }
            }

            return {
              line: null,
              column: null,
            };
          };

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        IndexedSourceMapConsumer.prototype._parseMappings =
          function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
            this.__generatedMappings = [];
            this.__originalMappings = [];
            for (var i = 0; i < this._sections.length; i++) {
              var section = this._sections[i];
              var sectionMappings = section.consumer._generatedMappings;
              for (var j = 0; j < sectionMappings.length; j++) {
                var mapping = sectionMappings[j];

                var source = section.consumer._sources.at(mapping.source);
                if (section.consumer.sourceRoot !== null) {
                  source = util.join(section.consumer.sourceRoot, source);
                }
                this._sources.add(source);
                source = this._sources.indexOf(source);

                var name = section.consumer._names.at(mapping.name);
                this._names.add(name);
                name = this._names.indexOf(name);

                // The mappings coming from the consumer for the section have
                // generated positions relative to the start of the section, so we
                // need to offset them to be relative to the start of the concatenated
                // generated file.
                var adjustedMapping = {
                  source: source,
                  generatedLine:
                    mapping.generatedLine +
                    (section.generatedOffset.generatedLine - 1),
                  generatedColumn:
                    mapping.generatedColumn +
                    (section.generatedOffset.generatedLine ===
                    mapping.generatedLine
                      ? section.generatedOffset.generatedColumn - 1
                      : 0),
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name: name,
                };

                this.__generatedMappings.push(adjustedMapping);
                if (typeof adjustedMapping.originalLine === "number") {
                  this.__originalMappings.push(adjustedMapping);
                }
              }
            }

            quickSort(
              this.__generatedMappings,
              util.compareByGeneratedPositionsDeflated
            );
            quickSort(this.__originalMappings, util.compareByOriginalPositions);
          };

        exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
      },
      {
        "./array-set": 429,
        "./base64-vlq": 430,
        "./binary-search": 432,
        "./quick-sort": 434,
        "./util": 438,
      },
    ],
    436: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var base64VLQ = require("./base64-vlq");
        var util = require("./util");
        var ArraySet = require("./array-set").ArraySet;
        var MappingList = require("./mapping-list").MappingList;

        /**
         * An instance of the SourceMapGenerator represents a source map which is
         * being built incrementally. You may pass an object with the following
         * properties:
         *
         *   - file: The filename of the generated source.
         *   - sourceRoot: A root for all relative URLs in this source map.
         */
        function SourceMapGenerator(aArgs) {
          if (!aArgs) {
            aArgs = {};
          }
          this._file = util.getArg(aArgs, "file", null);
          this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
          this._skipValidation = util.getArg(aArgs, "skipValidation", false);
          this._sources = new ArraySet();
          this._names = new ArraySet();
          this._mappings = new MappingList();
          this._sourcesContents = null;
        }

        SourceMapGenerator.prototype._version = 3;

        /**
         * Creates a new SourceMapGenerator based on a SourceMapConsumer
         *
         * @param aSourceMapConsumer The SourceMap.
         */
        SourceMapGenerator.fromSourceMap =
          function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
            var sourceRoot = aSourceMapConsumer.sourceRoot;
            var generator = new SourceMapGenerator({
              file: aSourceMapConsumer.file,
              sourceRoot: sourceRoot,
            });
            aSourceMapConsumer.eachMapping(function (mapping) {
              var newMapping = {
                generated: {
                  line: mapping.generatedLine,
                  column: mapping.generatedColumn,
                },
              };

              if (mapping.source != null) {
                newMapping.source = mapping.source;
                if (sourceRoot != null) {
                  newMapping.source = util.relative(
                    sourceRoot,
                    newMapping.source
                  );
                }

                newMapping.original = {
                  line: mapping.originalLine,
                  column: mapping.originalColumn,
                };

                if (mapping.name != null) {
                  newMapping.name = mapping.name;
                }
              }

              generator.addMapping(newMapping);
            });
            aSourceMapConsumer.sources.forEach(function (sourceFile) {
              var content = aSourceMapConsumer.sourceContentFor(sourceFile);
              if (content != null) {
                generator.setSourceContent(sourceFile, content);
              }
            });
            return generator;
          };

        /**
         * Add a single mapping from original source line and column to the generated
         * source's line and column for this source map being created. The mapping
         * object should have the following properties:
         *
         *   - generated: An object with the generated line and column positions.
         *   - original: An object with the original line and column positions.
         *   - source: The original source file (relative to the sourceRoot).
         *   - name: An optional original token name for this mapping.
         */
        SourceMapGenerator.prototype.addMapping =
          function SourceMapGenerator_addMapping(aArgs) {
            var generated = util.getArg(aArgs, "generated");
            var original = util.getArg(aArgs, "original", null);
            var source = util.getArg(aArgs, "source", null);
            var name = util.getArg(aArgs, "name", null);

            if (!this._skipValidation) {
              this._validateMapping(generated, original, source, name);
            }

            if (source != null) {
              source = String(source);
              if (!this._sources.has(source)) {
                this._sources.add(source);
              }
            }

            if (name != null) {
              name = String(name);
              if (!this._names.has(name)) {
                this._names.add(name);
              }
            }

            this._mappings.add({
              generatedLine: generated.line,
              generatedColumn: generated.column,
              originalLine: original != null && original.line,
              originalColumn: original != null && original.column,
              source: source,
              name: name,
            });
          };

        /**
         * Set the source content for a source file.
         */
        SourceMapGenerator.prototype.setSourceContent =
          function SourceMapGenerator_setSourceContent(
            aSourceFile,
            aSourceContent
          ) {
            var source = aSourceFile;
            if (this._sourceRoot != null) {
              source = util.relative(this._sourceRoot, source);
            }

            if (aSourceContent != null) {
              // Add the source content to the _sourcesContents map.
              // Create a new _sourcesContents map if the property is null.
              if (!this._sourcesContents) {
                this._sourcesContents = Object.create(null);
              }
              this._sourcesContents[util.toSetString(source)] = aSourceContent;
            } else if (this._sourcesContents) {
              // Remove the source file from the _sourcesContents map.
              // If the _sourcesContents map is empty, set the property to null.
              delete this._sourcesContents[util.toSetString(source)];
              if (Object.keys(this._sourcesContents).length === 0) {
                this._sourcesContents = null;
              }
            }
          };

        /**
         * Applies the mappings of a sub-source-map for a specific source file to the
         * source map being generated. Each mapping to the supplied source file is
         * rewritten using the supplied source map. Note: The resolution for the
         * resulting mappings is the minimium of this map and the supplied map.
         *
         * @param aSourceMapConsumer The source map to be applied.
         * @param aSourceFile Optional. The filename of the source file.
         *        If omitted, SourceMapConsumer's file property will be used.
         * @param aSourceMapPath Optional. The dirname of the path to the source map
         *        to be applied. If relative, it is relative to the SourceMapConsumer.
         *        This parameter is needed when the two source maps aren't in the same
         *        directory, and the source map to be applied contains relative source
         *        paths. If so, those relative source paths need to be rewritten
         *        relative to the SourceMapGenerator.
         */
        SourceMapGenerator.prototype.applySourceMap =
          function SourceMapGenerator_applySourceMap(
            aSourceMapConsumer,
            aSourceFile,
            aSourceMapPath
          ) {
            var sourceFile = aSourceFile;
            // If aSourceFile is omitted, we will use the file property of the SourceMap
            if (aSourceFile == null) {
              if (aSourceMapConsumer.file == null) {
                throw new Error(
                  "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
                    'or the source map\'s "file" property. Both were omitted.'
                );
              }
              sourceFile = aSourceMapConsumer.file;
            }
            var sourceRoot = this._sourceRoot;
            // Make "sourceFile" relative if an absolute Url is passed.
            if (sourceRoot != null) {
              sourceFile = util.relative(sourceRoot, sourceFile);
            }
            // Applying the SourceMap can add and remove items from the sources and
            // the names array.
            var newSources = new ArraySet();
            var newNames = new ArraySet();

            // Find mappings for the "sourceFile"
            this._mappings.unsortedForEach(function (mapping) {
              if (
                mapping.source === sourceFile &&
                mapping.originalLine != null
              ) {
                // Check if it can be mapped by the source map, then update the mapping.
                var original = aSourceMapConsumer.originalPositionFor({
                  line: mapping.originalLine,
                  column: mapping.originalColumn,
                });
                if (original.source != null) {
                  // Copy mapping
                  mapping.source = original.source;
                  if (aSourceMapPath != null) {
                    mapping.source = util.join(aSourceMapPath, mapping.source);
                  }
                  if (sourceRoot != null) {
                    mapping.source = util.relative(sourceRoot, mapping.source);
                  }
                  mapping.originalLine = original.line;
                  mapping.originalColumn = original.column;
                  if (original.name != null) {
                    mapping.name = original.name;
                  }
                }
              }

              var source = mapping.source;
              if (source != null && !newSources.has(source)) {
                newSources.add(source);
              }

              var name = mapping.name;
              if (name != null && !newNames.has(name)) {
                newNames.add(name);
              }
            }, this);
            this._sources = newSources;
            this._names = newNames;

            // Copy sourcesContents of applied map.
            aSourceMapConsumer.sources.forEach(function (sourceFile) {
              var content = aSourceMapConsumer.sourceContentFor(sourceFile);
              if (content != null) {
                if (aSourceMapPath != null) {
                  sourceFile = util.join(aSourceMapPath, sourceFile);
                }
                if (sourceRoot != null) {
                  sourceFile = util.relative(sourceRoot, sourceFile);
                }
                this.setSourceContent(sourceFile, content);
              }
            }, this);
          };

        /**
         * A mapping can have one of the three levels of data:
         *
         *   1. Just the generated position.
         *   2. The Generated position, original position, and original source.
         *   3. Generated and original position, original source, as well as a name
         *      token.
         *
         * To maintain consistency, we validate that any new mapping being added falls
         * in to one of these categories.
         */
        SourceMapGenerator.prototype._validateMapping =
          function SourceMapGenerator_validateMapping(
            aGenerated,
            aOriginal,
            aSource,
            aName
          ) {
            // When aOriginal is truthy but has empty values for .line and .column,
            // it is most likely a programmer error. In this case we throw a very
            // specific error message to try to guide them the right way.
            // For example: https://github.com/Polymer/polymer-bundler/pull/519
            if (
              aOriginal &&
              typeof aOriginal.line !== "number" &&
              typeof aOriginal.column !== "number"
            ) {
              throw new Error(
                "original.line and original.column are not numbers -- you probably meant to omit " +
                  "the original mapping entirely and only map the generated position. If so, pass " +
                  "null for the original mapping instead of an object with empty or null values."
              );
            }

            if (
              aGenerated &&
              "line" in aGenerated &&
              "column" in aGenerated &&
              aGenerated.line > 0 &&
              aGenerated.column >= 0 &&
              !aOriginal &&
              !aSource &&
              !aName
            ) {
              // Case 1.
              return;
            } else if (
              aGenerated &&
              "line" in aGenerated &&
              "column" in aGenerated &&
              aOriginal &&
              "line" in aOriginal &&
              "column" in aOriginal &&
              aGenerated.line > 0 &&
              aGenerated.column >= 0 &&
              aOriginal.line > 0 &&
              aOriginal.column >= 0 &&
              aSource
            ) {
              // Cases 2 and 3.
              return;
            } else {
              throw new Error(
                "Invalid mapping: " +
                  JSON.stringify({
                    generated: aGenerated,
                    source: aSource,
                    original: aOriginal,
                    name: aName,
                  })
              );
            }
          };

        /**
         * Serialize the accumulated mappings in to the stream of base 64 VLQs
         * specified by the source map format.
         */
        SourceMapGenerator.prototype._serializeMappings =
          function SourceMapGenerator_serializeMappings() {
            var previousGeneratedColumn = 0;
            var previousGeneratedLine = 1;
            var previousOriginalColumn = 0;
            var previousOriginalLine = 0;
            var previousName = 0;
            var previousSource = 0;
            var result = "";
            var next;
            var mapping;
            var nameIdx;
            var sourceIdx;

            var mappings = this._mappings.toArray();
            for (var i = 0, len = mappings.length; i < len; i++) {
              mapping = mappings[i];
              next = "";

              if (mapping.generatedLine !== previousGeneratedLine) {
                previousGeneratedColumn = 0;
                while (mapping.generatedLine !== previousGeneratedLine) {
                  next += ";";
                  previousGeneratedLine++;
                }
              } else {
                if (i > 0) {
                  if (
                    !util.compareByGeneratedPositionsInflated(
                      mapping,
                      mappings[i - 1]
                    )
                  ) {
                    continue;
                  }
                  next += ",";
                }
              }

              next += base64VLQ.encode(
                mapping.generatedColumn - previousGeneratedColumn
              );
              previousGeneratedColumn = mapping.generatedColumn;

              if (mapping.source != null) {
                sourceIdx = this._sources.indexOf(mapping.source);
                next += base64VLQ.encode(sourceIdx - previousSource);
                previousSource = sourceIdx;

                // lines are stored 0-based in SourceMap spec version 3
                next += base64VLQ.encode(
                  mapping.originalLine - 1 - previousOriginalLine
                );
                previousOriginalLine = mapping.originalLine - 1;

                next += base64VLQ.encode(
                  mapping.originalColumn - previousOriginalColumn
                );
                previousOriginalColumn = mapping.originalColumn;

                if (mapping.name != null) {
                  nameIdx = this._names.indexOf(mapping.name);
                  next += base64VLQ.encode(nameIdx - previousName);
                  previousName = nameIdx;
                }
              }

              result += next;
            }

            return result;
          };

        SourceMapGenerator.prototype._generateSourcesContent =
          function SourceMapGenerator_generateSourcesContent(
            aSources,
            aSourceRoot
          ) {
            return aSources.map(function (source) {
              if (!this._sourcesContents) {
                return null;
              }
              if (aSourceRoot != null) {
                source = util.relative(aSourceRoot, source);
              }
              var key = util.toSetString(source);
              return Object.prototype.hasOwnProperty.call(
                this._sourcesContents,
                key
              )
                ? this._sourcesContents[key]
                : null;
            }, this);
          };

        /**
         * Externalize the source map.
         */
        SourceMapGenerator.prototype.toJSON =
          function SourceMapGenerator_toJSON() {
            var map = {
              version: this._version,
              sources: this._sources.toArray(),
              names: this._names.toArray(),
              mappings: this._serializeMappings(),
            };
            if (this._file != null) {
              map.file = this._file;
            }
            if (this._sourceRoot != null) {
              map.sourceRoot = this._sourceRoot;
            }
            if (this._sourcesContents) {
              map.sourcesContent = this._generateSourcesContent(
                map.sources,
                map.sourceRoot
              );
            }

            return map;
          };

        /**
         * Render the source map being generated to a string.
         */
        SourceMapGenerator.prototype.toString =
          function SourceMapGenerator_toString() {
            return JSON.stringify(this.toJSON());
          };

        exports.SourceMapGenerator = SourceMapGenerator;
      },
      {
        "./array-set": 429,
        "./base64-vlq": 430,
        "./mapping-list": 433,
        "./util": 438,
      },
    ],
    437: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        var SourceMapGenerator =
          require("./source-map-generator").SourceMapGenerator;
        var util = require("./util");

        // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
        // operating systems these days (capturing the result).
        var REGEX_NEWLINE = /(\r?\n)/;

        // Newline character code for charCodeAt() comparisons
        var NEWLINE_CODE = 10;

        // Private symbol for identifying `SourceNode`s when multiple versions of
        // the source-map library are loaded. This MUST NOT CHANGE across
        // versions!
        var isSourceNode = "$$$isSourceNode$$$";

        /**
         * SourceNodes provide a way to abstract over interpolating/concatenating
         * snippets of generated JavaScript source code while maintaining the line and
         * column information associated with the original source code.
         *
         * @param aLine The original line number.
         * @param aColumn The original column number.
         * @param aSource The original source's filename.
         * @param aChunks Optional. An array of strings which are snippets of
         *        generated JS, or other SourceNodes.
         * @param aName The original identifier.
         */
        function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
          this.children = [];
          this.sourceContents = {};
          this.line = aLine == null ? null : aLine;
          this.column = aColumn == null ? null : aColumn;
          this.source = aSource == null ? null : aSource;
          this.name = aName == null ? null : aName;
          this[isSourceNode] = true;
          if (aChunks != null) this.add(aChunks);
        }

        /**
         * Creates a SourceNode from generated code and a SourceMapConsumer.
         *
         * @param aGeneratedCode The generated code
         * @param aSourceMapConsumer The SourceMap for the generated code
         * @param aRelativePath Optional. The path that relative sources in the
         *        SourceMapConsumer should be relative to.
         */
        SourceNode.fromStringWithSourceMap =
          function SourceNode_fromStringWithSourceMap(
            aGeneratedCode,
            aSourceMapConsumer,
            aRelativePath
          ) {
            // The SourceNode we want to fill with the generated code
            // and the SourceMap
            var node = new SourceNode();

            // All even indices of this array are one line of the generated code,
            // while all odd indices are the newlines between two adjacent lines
            // (since `REGEX_NEWLINE` captures its match).
            // Processed fragments are accessed by calling `shiftNextLine`.
            var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
            var remainingLinesIndex = 0;
            var shiftNextLine = function () {
              var lineContents = getNextLine();
              // The last line of a file might not have a newline.
              var newLine = getNextLine() || "";
              return lineContents + newLine;

              function getNextLine() {
                return remainingLinesIndex < remainingLines.length
                  ? remainingLines[remainingLinesIndex++]
                  : undefined;
              }
            };

            // We need to remember the position of "remainingLines"
            var lastGeneratedLine = 1,
              lastGeneratedColumn = 0;

            // The generate SourceNodes we need a code range.
            // To extract it current and last mapping is used.
            // Here we store the last mapping.
            var lastMapping = null;

            aSourceMapConsumer.eachMapping(function (mapping) {
              if (lastMapping !== null) {
                // We add the code from "lastMapping" to "mapping":
                // First check if there is a new line in between.
                if (lastGeneratedLine < mapping.generatedLine) {
                  // Associate first line with "lastMapping"
                  addMappingWithCode(lastMapping, shiftNextLine());
                  lastGeneratedLine++;
                  lastGeneratedColumn = 0;
                  // The remaining code is added without mapping
                } else {
                  // There is no new line in between.
                  // Associate the code between "lastGeneratedColumn" and
                  // "mapping.generatedColumn" with "lastMapping"
                  var nextLine = remainingLines[remainingLinesIndex];
                  var code = nextLine.substr(
                    0,
                    mapping.generatedColumn - lastGeneratedColumn
                  );
                  remainingLines[remainingLinesIndex] = nextLine.substr(
                    mapping.generatedColumn - lastGeneratedColumn
                  );
                  lastGeneratedColumn = mapping.generatedColumn;
                  addMappingWithCode(lastMapping, code);
                  // No more remaining code, continue
                  lastMapping = mapping;
                  return;
                }
              }
              // We add the generated code until the first mapping
              // to the SourceNode without any mapping.
              // Each line is added as separate string.
              while (lastGeneratedLine < mapping.generatedLine) {
                node.add(shiftNextLine());
                lastGeneratedLine++;
              }
              if (lastGeneratedColumn < mapping.generatedColumn) {
                var nextLine = remainingLines[remainingLinesIndex];
                node.add(nextLine.substr(0, mapping.generatedColumn));
                remainingLines[remainingLinesIndex] = nextLine.substr(
                  mapping.generatedColumn
                );
                lastGeneratedColumn = mapping.generatedColumn;
              }
              lastMapping = mapping;
            }, this);
            // We have processed all mappings.
            if (remainingLinesIndex < remainingLines.length) {
              if (lastMapping) {
                // Associate the remaining code in the current line with "lastMapping"
                addMappingWithCode(lastMapping, shiftNextLine());
              }
              // and add the remaining lines without any mapping
              node.add(remainingLines.splice(remainingLinesIndex).join(""));
            }

            // Copy sourcesContent into SourceNode
            aSourceMapConsumer.sources.forEach(function (sourceFile) {
              var content = aSourceMapConsumer.sourceContentFor(sourceFile);
              if (content != null) {
                if (aRelativePath != null) {
                  sourceFile = util.join(aRelativePath, sourceFile);
                }
                node.setSourceContent(sourceFile, content);
              }
            });

            return node;

            function addMappingWithCode(mapping, code) {
              if (mapping === null || mapping.source === undefined) {
                node.add(code);
              } else {
                var source = aRelativePath
                  ? util.join(aRelativePath, mapping.source)
                  : mapping.source;
                node.add(
                  new SourceNode(
                    mapping.originalLine,
                    mapping.originalColumn,
                    source,
                    code,
                    mapping.name
                  )
                );
              }
            }
          };

        /**
         * Add a chunk of generated JS to this source node.
         *
         * @param aChunk A string snippet of generated JS code, another instance of
         *        SourceNode, or an array where each member is one of those things.
         */
        SourceNode.prototype.add = function SourceNode_add(aChunk) {
          if (Array.isArray(aChunk)) {
            aChunk.forEach(function (chunk) {
              this.add(chunk);
            }, this);
          } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            if (aChunk) {
              this.children.push(aChunk);
            }
          } else {
            throw new TypeError(
              "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                aChunk
            );
          }
          return this;
        };

        /**
         * Add a chunk of generated JS to the beginning of this source node.
         *
         * @param aChunk A string snippet of generated JS code, another instance of
         *        SourceNode, or an array where each member is one of those things.
         */
        SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
          if (Array.isArray(aChunk)) {
            for (var i = aChunk.length - 1; i >= 0; i--) {
              this.prepend(aChunk[i]);
            }
          } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            this.children.unshift(aChunk);
          } else {
            throw new TypeError(
              "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                aChunk
            );
          }
          return this;
        };

        /**
         * Walk over the tree of JS snippets in this node and its children. The
         * walking function is called once for each snippet of JS and is passed that
         * snippet and the its original associated source's line/column location.
         *
         * @param aFn The traversal function.
         */
        SourceNode.prototype.walk = function SourceNode_walk(aFn) {
          var chunk;
          for (var i = 0, len = this.children.length; i < len; i++) {
            chunk = this.children[i];
            if (chunk[isSourceNode]) {
              chunk.walk(aFn);
            } else {
              if (chunk !== "") {
                aFn(chunk, {
                  source: this.source,
                  line: this.line,
                  column: this.column,
                  name: this.name,
                });
              }
            }
          }
        };

        /**
         * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
         * each of `this.children`.
         *
         * @param aSep The separator.
         */
        SourceNode.prototype.join = function SourceNode_join(aSep) {
          var newChildren;
          var i;
          var len = this.children.length;
          if (len > 0) {
            newChildren = [];
            for (i = 0; i < len - 1; i++) {
              newChildren.push(this.children[i]);
              newChildren.push(aSep);
            }
            newChildren.push(this.children[i]);
            this.children = newChildren;
          }
          return this;
        };

        /**
         * Call String.prototype.replace on the very right-most source snippet. Useful
         * for trimming whitespace from the end of a source node, etc.
         *
         * @param aPattern The pattern to replace.
         * @param aReplacement The thing to replace the pattern with.
         */
        SourceNode.prototype.replaceRight = function SourceNode_replaceRight(
          aPattern,
          aReplacement
        ) {
          var lastChild = this.children[this.children.length - 1];
          if (lastChild[isSourceNode]) {
            lastChild.replaceRight(aPattern, aReplacement);
          } else if (typeof lastChild === "string") {
            this.children[this.children.length - 1] = lastChild.replace(
              aPattern,
              aReplacement
            );
          } else {
            this.children.push("".replace(aPattern, aReplacement));
          }
          return this;
        };

        /**
         * Set the source content for a source file. This will be added to the SourceMapGenerator
         * in the sourcesContent field.
         *
         * @param aSourceFile The filename of the source file
         * @param aSourceContent The content of the source file
         */
        SourceNode.prototype.setSourceContent =
          function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
            this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
          };

        /**
         * Walk over the tree of SourceNodes. The walking function is called for each
         * source file content and is passed the filename and source content.
         *
         * @param aFn The traversal function.
         */
        SourceNode.prototype.walkSourceContents =
          function SourceNode_walkSourceContents(aFn) {
            for (var i = 0, len = this.children.length; i < len; i++) {
              if (this.children[i][isSourceNode]) {
                this.children[i].walkSourceContents(aFn);
              }
            }

            var sources = Object.keys(this.sourceContents);
            for (var i = 0, len = sources.length; i < len; i++) {
              aFn(
                util.fromSetString(sources[i]),
                this.sourceContents[sources[i]]
              );
            }
          };

        /**
         * Return the string representation of this source node. Walks over the tree
         * and concatenates all the various snippets together to one string.
         */
        SourceNode.prototype.toString = function SourceNode_toString() {
          var str = "";
          this.walk(function (chunk) {
            str += chunk;
          });
          return str;
        };

        /**
         * Returns the string representation of this source node along with a source
         * map.
         */
        SourceNode.prototype.toStringWithSourceMap =
          function SourceNode_toStringWithSourceMap(aArgs) {
            var generated = {
              code: "",
              line: 1,
              column: 0,
            };
            var map = new SourceMapGenerator(aArgs);
            var sourceMappingActive = false;
            var lastOriginalSource = null;
            var lastOriginalLine = null;
            var lastOriginalColumn = null;
            var lastOriginalName = null;
            this.walk(function (chunk, original) {
              generated.code += chunk;
              if (
                original.source !== null &&
                original.line !== null &&
                original.column !== null
              ) {
                if (
                  lastOriginalSource !== original.source ||
                  lastOriginalLine !== original.line ||
                  lastOriginalColumn !== original.column ||
                  lastOriginalName !== original.name
                ) {
                  map.addMapping({
                    source: original.source,
                    original: {
                      line: original.line,
                      column: original.column,
                    },
                    generated: {
                      line: generated.line,
                      column: generated.column,
                    },
                    name: original.name,
                  });
                }
                lastOriginalSource = original.source;
                lastOriginalLine = original.line;
                lastOriginalColumn = original.column;
                lastOriginalName = original.name;
                sourceMappingActive = true;
              } else if (sourceMappingActive) {
                map.addMapping({
                  generated: {
                    line: generated.line,
                    column: generated.column,
                  },
                });
                lastOriginalSource = null;
                sourceMappingActive = false;
              }
              for (var idx = 0, length = chunk.length; idx < length; idx++) {
                if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                  generated.line++;
                  generated.column = 0;
                  // Mappings end at eol
                  if (idx + 1 === length) {
                    lastOriginalSource = null;
                    sourceMappingActive = false;
                  } else if (sourceMappingActive) {
                    map.addMapping({
                      source: original.source,
                      original: {
                        line: original.line,
                        column: original.column,
                      },
                      generated: {
                        line: generated.line,
                        column: generated.column,
                      },
                      name: original.name,
                    });
                  }
                } else {
                  generated.column++;
                }
              }
            });
            this.walkSourceContents(function (sourceFile, sourceContent) {
              map.setSourceContent(sourceFile, sourceContent);
            });

            return { code: generated.code, map: map };
          };

        exports.SourceNode = SourceNode;
      },
      { "./source-map-generator": 436, "./util": 438 },
    ],
    438: [
      function (require, module, exports) {
        /* -*- Mode: js; js-indent-level: 2; -*- */
        /*
         * Copyright 2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE or:
         * http://opensource.org/licenses/BSD-3-Clause
         */

        /**
         * This is a helper function for getting values from parameter/options
         * objects.
         *
         * @param args The object we are extracting values from
         * @param name The name of the property we are getting.
         * @param defaultValue An optional value to return if the property is missing
         * from the object. If this is not specified and the property is missing, an
         * error will be thrown.
         */
        function getArg(aArgs, aName, aDefaultValue) {
          if (aName in aArgs) {
            return aArgs[aName];
          } else if (arguments.length === 3) {
            return aDefaultValue;
          } else {
            throw new Error('"' + aName + '" is a required argument.');
          }
        }
        exports.getArg = getArg;

        var urlRegexp =
          /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
        var dataUrlRegexp = /^data:.+\,.+$/;

        function urlParse(aUrl) {
          var match = aUrl.match(urlRegexp);
          if (!match) {
            return null;
          }
          return {
            scheme: match[1],
            auth: match[2],
            host: match[3],
            port: match[4],
            path: match[5],
          };
        }
        exports.urlParse = urlParse;

        function urlGenerate(aParsedUrl) {
          var url = "";
          if (aParsedUrl.scheme) {
            url += aParsedUrl.scheme + ":";
          }
          url += "//";
          if (aParsedUrl.auth) {
            url += aParsedUrl.auth + "@";
          }
          if (aParsedUrl.host) {
            url += aParsedUrl.host;
          }
          if (aParsedUrl.port) {
            url += ":" + aParsedUrl.port;
          }
          if (aParsedUrl.path) {
            url += aParsedUrl.path;
          }
          return url;
        }
        exports.urlGenerate = urlGenerate;

        /**
         * Normalizes a path, or the path portion of a URL:
         *
         * - Replaces consecutive slashes with one slash.
         * - Removes unnecessary '.' parts.
         * - Removes unnecessary '<dir>/..' parts.
         *
         * Based on code in the Node.js 'path' core module.
         *
         * @param aPath The path or url to normalize.
         */
        function normalize(aPath) {
          var path = aPath;
          var url = urlParse(aPath);
          if (url) {
            if (!url.path) {
              return aPath;
            }
            path = url.path;
          }
          var isAbsolute = exports.isAbsolute(path);

          var parts = path.split(/\/+/);
          for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
            part = parts[i];
            if (part === ".") {
              parts.splice(i, 1);
            } else if (part === "..") {
              up++;
            } else if (up > 0) {
              if (part === "") {
                // The first part is blank if the path is absolute. Trying to go
                // above the root is a no-op. Therefore we can remove all '..' parts
                // directly after the root.
                parts.splice(i + 1, up);
                up = 0;
              } else {
                parts.splice(i, 2);
                up--;
              }
            }
          }
          path = parts.join("/");

          if (path === "") {
            path = isAbsolute ? "/" : ".";
          }

          if (url) {
            url.path = path;
            return urlGenerate(url);
          }
          return path;
        }
        exports.normalize = normalize;

        /**
         * Joins two paths/URLs.
         *
         * @param aRoot The root path or URL.
         * @param aPath The path or URL to be joined with the root.
         *
         * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
         *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
         *   first.
         * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
         *   is updated with the result and aRoot is returned. Otherwise the result
         *   is returned.
         *   - If aPath is absolute, the result is aPath.
         *   - Otherwise the two paths are joined with a slash.
         * - Joining for example 'http://' and 'www.example.com' is also supported.
         */
        function join(aRoot, aPath) {
          if (aRoot === "") {
            aRoot = ".";
          }
          if (aPath === "") {
            aPath = ".";
          }
          var aPathUrl = urlParse(aPath);
          var aRootUrl = urlParse(aRoot);
          if (aRootUrl) {
            aRoot = aRootUrl.path || "/";
          }

          // `join(foo, '//www.example.org')`
          if (aPathUrl && !aPathUrl.scheme) {
            if (aRootUrl) {
              aPathUrl.scheme = aRootUrl.scheme;
            }
            return urlGenerate(aPathUrl);
          }

          if (aPathUrl || aPath.match(dataUrlRegexp)) {
            return aPath;
          }

          // `join('http://', 'www.example.com')`
          if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
            aRootUrl.host = aPath;
            return urlGenerate(aRootUrl);
          }

          var joined =
            aPath.charAt(0) === "/"
              ? aPath
              : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

          if (aRootUrl) {
            aRootUrl.path = joined;
            return urlGenerate(aRootUrl);
          }
          return joined;
        }
        exports.join = join;

        exports.isAbsolute = function (aPath) {
          return aPath.charAt(0) === "/" || !!aPath.match(urlRegexp);
        };

        /**
         * Make a path relative to a URL or another path.
         *
         * @param aRoot The root path or URL.
         * @param aPath The path or URL to be made relative to aRoot.
         */
        function relative(aRoot, aPath) {
          if (aRoot === "") {
            aRoot = ".";
          }

          aRoot = aRoot.replace(/\/$/, "");

          // It is possible for the path to be above the root. In this case, simply
          // checking whether the root is a prefix of the path won't work. Instead, we
          // need to remove components from the root one by one, until either we find
          // a prefix that fits, or we run out of components to remove.
          var level = 0;
          while (aPath.indexOf(aRoot + "/") !== 0) {
            var index = aRoot.lastIndexOf("/");
            if (index < 0) {
              return aPath;
            }

            // If the only part of the root that is left is the scheme (i.e. http://,
            // file:///, etc.), one or more slashes (/), or simply nothing at all, we
            // have exhausted all components, so the path is not relative to the root.
            aRoot = aRoot.slice(0, index);
            if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
              return aPath;
            }

            ++level;
          }

          // Make sure we add a "../" for each component we removed from the root.
          return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
        }
        exports.relative = relative;

        var supportsNullProto = (function () {
          var obj = Object.create(null);
          return !("__proto__" in obj);
        })();

        function identity(s) {
          return s;
        }

        /**
         * Because behavior goes wacky when you set `__proto__` on objects, we
         * have to prefix all the strings in our set with an arbitrary character.
         *
         * See https://github.com/mozilla/source-map/pull/31 and
         * https://github.com/mozilla/source-map/issues/30
         *
         * @param String aStr
         */
        function toSetString(aStr) {
          if (isProtoString(aStr)) {
            return "$" + aStr;
          }

          return aStr;
        }
        exports.toSetString = supportsNullProto ? identity : toSetString;

        function fromSetString(aStr) {
          if (isProtoString(aStr)) {
            return aStr.slice(1);
          }

          return aStr;
        }
        exports.fromSetString = supportsNullProto ? identity : fromSetString;

        function isProtoString(s) {
          if (!s) {
            return false;
          }

          var length = s.length;

          if (length < 9 /* "__proto__".length */) {
            return false;
          }

          if (
            s.charCodeAt(length - 1) !== 95 /* '_' */ ||
            s.charCodeAt(length - 2) !== 95 /* '_' */ ||
            s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
            s.charCodeAt(length - 4) !== 116 /* 't' */ ||
            s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
            s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
            s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
            s.charCodeAt(length - 8) !== 95 /* '_' */ ||
            s.charCodeAt(length - 9) !== 95 /* '_' */
          ) {
            return false;
          }

          for (var i = length - 10; i >= 0; i--) {
            if (s.charCodeAt(i) !== 36 /* '$' */) {
              return false;
            }
          }

          return true;
        }

        /**
         * Comparator between two mappings where the original positions are compared.
         *
         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
         * mappings with the same original source/line/column, but different generated
         * line and column the same. Useful when searching for a mapping with a
         * stubbed out mapping.
         */
        function compareByOriginalPositions(
          mappingA,
          mappingB,
          onlyCompareOriginal
        ) {
          var cmp = mappingA.source - mappingB.source;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;
          if (cmp !== 0 || onlyCompareOriginal) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedLine - mappingB.generatedLine;
          if (cmp !== 0) {
            return cmp;
          }

          return mappingA.name - mappingB.name;
        }
        exports.compareByOriginalPositions = compareByOriginalPositions;

        /**
         * Comparator between two mappings with deflated source and name indices where
         * the generated positions are compared.
         *
         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
         * mappings with the same generated line and column, but different
         * source/name/original line and column the same. Useful when searching for a
         * mapping with a stubbed out mapping.
         */
        function compareByGeneratedPositionsDeflated(
          mappingA,
          mappingB,
          onlyCompareGenerated
        ) {
          var cmp = mappingA.generatedLine - mappingB.generatedLine;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;
          if (cmp !== 0 || onlyCompareGenerated) {
            return cmp;
          }

          cmp = mappingA.source - mappingB.source;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;
          if (cmp !== 0) {
            return cmp;
          }

          return mappingA.name - mappingB.name;
        }
        exports.compareByGeneratedPositionsDeflated =
          compareByGeneratedPositionsDeflated;

        function strcmp(aStr1, aStr2) {
          if (aStr1 === aStr2) {
            return 0;
          }

          if (aStr1 > aStr2) {
            return 1;
          }

          return -1;
        }

        /**
         * Comparator between two mappings with inflated source and name strings where
         * the generated positions are compared.
         */
        function compareByGeneratedPositionsInflated(mappingA, mappingB) {
          var cmp = mappingA.generatedLine - mappingB.generatedLine;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = strcmp(mappingA.source, mappingB.source);
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;
          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;
          if (cmp !== 0) {
            return cmp;
          }

          return strcmp(mappingA.name, mappingB.name);
        }
        exports.compareByGeneratedPositionsInflated =
          compareByGeneratedPositionsInflated;
      },
      {},
    ],
    439: [
      function (require, module, exports) {
        /*
         * Copyright 2009-2011 Mozilla Foundation and contributors
         * Licensed under the New BSD license. See LICENSE.txt or:
         * http://opensource.org/licenses/BSD-3-Clause
         */
        exports.SourceMapGenerator =
          require("./lib/source-map-generator").SourceMapGenerator;
        exports.SourceMapConsumer =
          require("./lib/source-map-consumer").SourceMapConsumer;
        exports.SourceNode = require("./lib/source-node").SourceNode;
      },
      {
        "./lib/source-map-consumer": 435,
        "./lib/source-map-generator": 436,
        "./lib/source-node": 437,
      },
    ],
    440: [
      function (require, module, exports) {
        "use strict";
        module.exports = {
          stdout: false,
          stderr: false,
        };
      },
      {},
    ],
    441: [
      function (require, module, exports) {
        "use strict";

        let fastProto = null;

        // Creates an object with permanently fast properties in V8. See Toon Verwaest's
        // post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62
        // for more details. Use %HasFastProperties(object) and the Node.js flag
        // --allow-natives-syntax to check whether an object has fast properties.
        function FastObject(o) {
          // A prototype object will have "fast properties" enabled once it is checked
          // against the inline property cache of a function, e.g. fastProto.property:
          // https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63
          if (fastProto !== null && typeof fastProto.property) {
            const result = fastProto;
            fastProto = FastObject.prototype = null;
            return result;
          }
          fastProto = FastObject.prototype =
            o == null ? Object.create(null) : o;
          return new FastObject();
        }

        // Initialize the inline property cache of FastObject
        FastObject();

        module.exports = function toFastproperties(o) {
          return FastObject(o);
        };
      },
      {},
    ],
    442: [
      function (require, module, exports) {
        (function (process) {
          (function () {
            "use strict";

            function asyncGeneratorStep(
              gen,
              resolve,
              reject,
              _next,
              _throw,
              key,
              arg
            ) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }

            function _asyncToGenerator(fn) {
              return function () {
                var self = this,
                  args = arguments;
                return new Promise(function (resolve, reject) {
                  var gen = fn.apply(self, args);
                  function _next(value) {
                    asyncGeneratorStep(
                      gen,
                      resolve,
                      reject,
                      _next,
                      _throw,
                      "next",
                      value
                    );
                  }
                  function _throw(err) {
                    asyncGeneratorStep(
                      gen,
                      resolve,
                      reject,
                      _next,
                      _throw,
                      "throw",
                      err
                    );
                  }
                  _next(undefined);
                });
              };
            }

            require("@babel/core");

            require("@babel/register");

            var readline = require("readline");

            var _require = require("./language_spoken.js"),
              capitalize = _require.capitalize,
              getAlpha2Code = _require.getAlpha2Code,
              countryListLookup = _require.countryListLookup,
              getResponse = _require.getResponse;

            var rl = readline.createInterface({
              input: process.stdin,
              output: process.stdout,
            });
            rl.question(
              "Type a language to to see in how many countries it is spoken: ",
              /*#__PURE__*/ (function () {
                var _ref = _asyncToGenerator(
                  /*#__PURE__*/ regeneratorRuntime.mark(function _callee(
                    language
                  ) {
                    var alpha2Code, languageList, response;
                    return regeneratorRuntime.wrap(
                      function _callee$(_context) {
                        while (1) {
                          switch ((_context.prev = _context.next)) {
                            case 0:
                              _context.prev = 0;
                              alpha2Code = getAlpha2Code(capitalize(language));
                              _context.next = 4;
                              return countryListLookup(alpha2Code);

                            case 4:
                              languageList = _context.sent;
                              response = getResponse(language, languageList);
                              console.log(response);
                              _context.next = 12;
                              break;

                            case 9:
                              _context.prev = 9;
                              _context.t0 = _context["catch"](0);
                              console.log(
                                "We could not find ".concat(
                                  language,
                                  ", please check your spelling and try again!"
                                )
                              );

                            case 12:
                              process.exit(0);

                            case 13:
                            case "end":
                              return _context.stop();
                          }
                        }
                      },
                      _callee,
                      null,
                      [[0, 9]]
                    );
                  })
                );

                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              })()
            );
          }).call(this);
        }).call(this, require("_process"));
      },
      {
        "./language_spoken.js": 443,
        "@babel/core": 22,
        "@babel/register": 87,
        _process: 425,
        readline: 238,
      },
    ],
    443: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.getResponse =
          exports.countryListLookup =
          exports.countryExtractor =
          exports.getAlpha2Code =
          exports.capitalize =
            void 0;

        var _languageCodes = _interopRequireDefault(
          require("./utils/languageCodes.js")
        );

        var _httpRequest = _interopRequireDefault(
          require("./utils/http-request.js")
        );

        require("regenerator-runtime/runtime");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function asyncGeneratorStep(
          gen,
          resolve,
          reject,
          _next,
          _throw,
          key,
          arg
        ) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }
          if (info.done) {
            resolve(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }

        function _asyncToGenerator(fn) {
          return function () {
            var self = this,
              args = arguments;
            return new Promise(function (resolve, reject) {
              var gen = fn.apply(self, args);
              function _next(value) {
                asyncGeneratorStep(
                  gen,
                  resolve,
                  reject,
                  _next,
                  _throw,
                  "next",
                  value
                );
              }
              function _throw(err) {
                asyncGeneratorStep(
                  gen,
                  resolve,
                  reject,
                  _next,
                  _throw,
                  "throw",
                  err
                );
              }
              _next(undefined);
            });
          };
        }

        var languageInEnglish = _languageCodes["default"].languageInEnglish,
          alpha2Codes = _languageCodes["default"].alpha2Codes;

        var capitalize = function capitalize(language) {
          return (
            language.charAt(0).toUpperCase() + language.toLowerCase().slice(1)
          );
        };

        exports.capitalize = capitalize;

        var getAlpha2Code = function getAlpha2Code(language) {
          var codeIndex = languageInEnglish.indexOf(language);
          var alpha2Code = codeIndex && alpha2Codes[codeIndex];
          return alpha2Code;
        };

        exports.getAlpha2Code = getAlpha2Code;

        var countryExtractor = function countryExtractor(countriesObject) {
          var countriesArray = [];

          for (var country in countriesObject) {
            countriesArray.push(countriesObject[country].name);
          }

          return countriesArray;
        };

        exports.countryExtractor = countryExtractor;

        var countryListLookup = /*#__PURE__*/ (function () {
          var _ref = _asyncToGenerator(
            /*#__PURE__*/ regeneratorRuntime.mark(function _callee(alpha2Code) {
              var res;
              return regeneratorRuntime.wrap(
                function _callee$(_context) {
                  while (1) {
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return (0, _httpRequest["default"])(alpha2Code);

                      case 3:
                        res = _context.sent;
                        return _context.abrupt(
                          "return",
                          countryExtractor(res.data)
                        );

                      case 7:
                        _context.prev = 7;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", undefined);

                      case 10:
                      case "end":
                        return _context.stop();
                    }
                  }
                },
                _callee,
                null,
                [[0, 7]]
              );
            })
          );

          return function countryListLookup(_x) {
            return _ref.apply(this, arguments);
          };
        })();

        exports.countryListLookup = countryListLookup;

        var getResponse = function getResponse(language, listOfPlaces) {
          return ""
            .concat(capitalize(language), " is spoken in ")
            .concat(listOfPlaces.length, " countries around the world");
        };

        exports.getResponse = getResponse;
      },
      {
        "./utils/http-request.js": 444,
        "./utils/languageCodes.js": 445,
        "regenerator-runtime/runtime": 426,
      },
    ],
    444: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports["default"] = void 0;

        var _axios = _interopRequireDefault(require("axios"));

        require("regenerator-runtime/runtime.js");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function asyncGeneratorStep(
          gen,
          resolve,
          reject,
          _next,
          _throw,
          key,
          arg
        ) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }
          if (info.done) {
            resolve(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }

        function _asyncToGenerator(fn) {
          return function () {
            var self = this,
              args = arguments;
            return new Promise(function (resolve, reject) {
              var gen = fn.apply(self, args);
              function _next(value) {
                asyncGeneratorStep(
                  gen,
                  resolve,
                  reject,
                  _next,
                  _throw,
                  "next",
                  value
                );
              }
              function _throw(err) {
                asyncGeneratorStep(
                  gen,
                  resolve,
                  reject,
                  _next,
                  _throw,
                  "throw",
                  err
                );
              }
              _next(undefined);
            });
          };
        }

        var httpRequest = /*#__PURE__*/ (function () {
          var _ref = _asyncToGenerator(
            /*#__PURE__*/ regeneratorRuntime.mark(function _callee(alpha2Code) {
              var result;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch ((_context.prev = _context.next)) {
                    case 0:
                      _context.next = 2;
                      return _axios["default"].get(
                        "https://restcountries.com/v2/lang/".concat(alpha2Code)
                      );

                    case 2:
                      result = _context.sent;

                      if (result.status) {
                        console.log(
                          "REST API call status: ".concat(result.status)
                        );
                      }

                      return _context.abrupt("return", result);

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })
          );

          return function httpRequest(_x) {
            return _ref.apply(this, arguments);
          };
        })();

        var _default = httpRequest;
        exports["default"] = _default;
      },
      { axios: 209, "regenerator-runtime/runtime.js": 426 },
    ],
    445: [
      function (require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports["default"] = void 0;
        var languageCodes = {
          alpha2Codes: [
            "aa",
            "ab",
            "ae",
            "af",
            "ak",
            "am",
            "an",
            "ar",
            "as",
            "av",
            "ay",
            "az",
            "ba",
            "be",
            "bg",
            "bh",
            "bi",
            "bm",
            "bn",
            "bo",
            "br",
            "bs",
            "ca",
            "ce",
            "ch",
            "co",
            "cr",
            "cs",
            "cu",
            "cv",
            "cy",
            "da",
            "de",
            "dv",
            "dz",
            "ee",
            "el",
            "en",
            "eo",
            "es",
            "et",
            "eu",
            "fa",
            "ff",
            "fi",
            "fj",
            "fo",
            "fr",
            "fy",
            "ga",
            "gd",
            "gl",
            "gn",
            "gu",
            "gv",
            "ha",
            "he",
            "hi",
            "ho",
            "hr",
            "ht",
            "hu",
            "hy",
            "hz",
            "ia",
            "id",
            "ie",
            "ig",
            "ii",
            "ik",
            "io",
            "is",
            "it",
            "iu",
            "ja",
            "jv",
            "ka",
            "kg",
            "ki",
            "kj",
            "kk",
            "kl",
            "km",
            "kn",
            "ko",
            "kr",
            "ks",
            "ku",
            "kv",
            "kw",
            "ky",
            "la",
            "lb",
            "lg",
            "li",
            "ln",
            "lo",
            "lt",
            "lu",
            "lv",
            "mg",
            "mh",
            "mi",
            "mk",
            "ml",
            "mn",
            "mr",
            "ms",
            "mt",
            "my",
            "na",
            "nb",
            "nd",
            "ne",
            "ng",
            "nl",
            "nn",
            "no",
            "nr",
            "nv",
            "ny",
            "oc",
            "oj",
            "om",
            "or",
            "os",
            "pa",
            "pi",
            "pl",
            "ps",
            "pt",
            "qu",
            "rm",
            "rn",
            "ro",
            "ru",
            "rw",
            "sa",
            "sc",
            "sd",
            "se",
            "sg",
            "si",
            "sk",
            "sl",
            "sm",
            "sn",
            "so",
            "sq",
            "sr",
            "ss",
            "st",
            "su",
            "sv",
            "sw",
            "ta",
            "te",
            "tg",
            "th",
            "ti",
            "tk",
            "tl",
            "tn",
            "to",
            "tr",
            "ts",
            "tt",
            "tw",
            "ty",
            "ug",
            "uk",
            "ur",
            "uz",
            "ve",
            "vi",
            "vo",
            "wa",
            "wo",
            "xh",
            "yi",
            "yo",
            "za",
            "zh",
            "zu",
          ],
          languageInEnglish: [
            "Afar",
            "Abkhazian",
            "Avestan",
            "Afrikaans",
            "Akan",
            "Amharic",
            "Aragonese",
            "Arabic",
            "Assamese",
            "Avaric",
            "Aymara",
            "Azerbaijani",
            "Bashkir",
            "Belarusian",
            "Bulgarian",
            "Bihari",
            "Bislama",
            "Bambara",
            "Bengali",
            "Tibetan",
            "Breton",
            "Bosnian",
            "Catalan",
            "Chechen",
            "Chamorro",
            "Corsican",
            "Cree",
            "Czech",
            "Church Slavic",
            "Chuvash",
            "Welsh",
            "Danish",
            "German",
            "Divehi",
            "Dzongkha",
            "Ewe",
            "Greek",
            "English",
            "Esperanto",
            "Spanish",
            "Estonian",
            "Basque",
            "Persian",
            "Fulah",
            "Finnish",
            "Fijian",
            "Faroese",
            "French",
            "Frisian",
            "Irish",
            "Gaelic",
            "Galician",
            "Guarani",
            "Gujarati",
            "Manx",
            "Hausa",
            "Hebrew",
            "Hindi",
            "Hiri Motu",
            "Croatian",
            "Haitian",
            "Hungarian",
            "Armenian",
            "Herero",
            "Interlingua",
            "Indonesian",
            "Interlingue",
            "Igbo",
            "Sichuan Yi",
            "Inupiaq",
            "Ido",
            "Icelandic",
            "Italian",
            "Inuktitut",
            "Japanese",
            "Javanese",
            "Georgian",
            "Kongo",
            "Kikuyu",
            "Kuanyama",
            "Kazakh",
            "Kalaallisut",
            "Central Khmer",
            "Kannada",
            "Korean",
            "Kanuri",
            "Kashmiri",
            "Kurdish",
            "Komi",
            "Cornish",
            "Kirghiz",
            "Latin",
            "Luxembourgish",
            "Ganda",
            "Limburgan",
            "Lingala",
            "Lao",
            "Lithuanian",
            "Luba-Katanga",
            "Latvian",
            "Malagasy",
            "Marshallese",
            "Maori",
            "Macedonian",
            "Malayalam",
            "Mongolian",
            "Marathi",
            "Malay",
            "Maltese",
            "Burmese",
            "Nauru",
            "Bokmål",
            "Ndebele",
            "Nepali",
            "Ndonga",
            "Flemish",
            "Nynorsk",
            "Norwegian",
            "South Ndebele",
            "Navajo",
            "Chichewa",
            "Occitan",
            "Ojibwa",
            "Oromo",
            "Oriya",
            "Ossetian",
            "Panjabi",
            "Pali",
            "Polish",
            "Pushto",
            "Portuguese",
            "Quechua",
            "Romansh",
            "Rundi",
            "Romanian",
            "Russian",
            "Kinyarwanda",
            "Sanskrit",
            "Sardinian",
            "Sindhi",
            "Northern Sami",
            "Sango",
            "Sinhala",
            "Slovak",
            "Slovenian",
            "Samoan",
            "Shona",
            "Somali",
            "Albanian",
            "Serbian",
            "Swati",
            "Sotho",
            "Sundanese",
            "Swedish",
            "Swahili",
            "Tamil",
            "Telugu",
            "Tajik",
            "Thai",
            "Tigrinya",
            "Turkmen",
            "Tagalog",
            "Tswana",
            "Tonga",
            "Turkish",
            "Tsonga",
            "Tatar",
            "Twi",
            "Tahitian",
            "Uighur",
            "Ukrainian",
            "Urdu",
            "Uzbek",
            "Venda",
            "Vietnamese",
            "Volapük",
            "Walloon",
            "Wolof",
            "Xhosa",
            "Yiddish",
            "Yoruba",
            "Zhuang",
            "Chinese",
            "Zulu",
          ],
        };
        var _default = languageCodes;
        exports["default"] = _default;
      },
      {},
    ],
  },
  {},
  [442]
);
